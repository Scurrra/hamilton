crystal_doc_search_index_callback({"repository_name":"hamilton","body":"# hamilton\n\nCrystal wrapper for Telegram Bot API.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     hamilton:\n       github: Scurrra/hamilton\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"hamilton\"\n```\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/Scurrra/hamilton/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Scurrra](https://github.com/Scurrra) - creator and maintainer\n","program":{"html_id":"hamilton/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"hamilton","program":true,"enum":false,"alias":false,"const":false,"constants":[{"id":"PAYLOAD_TYPES","name":"PAYLOAD_TYPES","value":"[:animation, :audio, :document, :paid_media, :photo, :sticker, :story, :video, :video_note, :voice, :checklist, :contact, :contact, :dice, :game, :poll, :venue, :location, :invoice, :successful_payment, :refunded_payment, :users_shared, :chat_shared, :passport_data]","doc":"Available payload types that can be handled by the `Hamilton::CmdHandler`.","summary":"<p>Available payload types that can be handled by the <code><a href=\"Hamilton/CmdHandler.html\">Hamilton::CmdHandler</a></code>.</p>"}],"types":[{"html_id":"hamilton/For","path":"For.html","kind":"annotation","full_name":"For","name":"For","abstract":false,"locations":[{"filename":"src/handlers/cmd_handler.cr","line_number":268,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"doc":"Annotation for the method in implementation of `Hamilton::CmdHandler`.\n\nIn `#[For]` a list of symbolic names of the methods that are predecessors of the update to be handled.\nIf no names provided the initial update is handled.","summary":"<p>Annotation for the method in implementation of <code><a href=\"Hamilton/CmdHandler.html\">Hamilton::CmdHandler</a></code>.</p>"},{"html_id":"hamilton/Hamilton","path":"Hamilton.html","kind":"module","full_name":"Hamilton","name":"Hamilton","abstract":false,"locations":[{"filename":"src/api/endpoints.cr","line_number":11,"url":null},{"filename":"src/hamilton.cr","line_number":8,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"types":[{"html_id":"hamilton/Hamilton/Api","path":"Hamilton/Api.html","kind":"class","full_name":"Hamilton::Api","name":"Api","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/api/api.cr","line_number":9,"url":null},{"filename":"src/api/endpoints.cr","line_number":11,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton","kind":"module","full_name":"Hamilton","name":"Hamilton"},"doc":"Class that is used for communication with Bot API endpoints.","summary":"<p>Class that is used for communication with Bot API endpoints.</p>","constructors":[{"html_id":"new(token:String,url:String=\"https://api.telegram.org\",env:Symbol=:prod,log_level:Log::Severity=Log::Severity::Warn)-class-method","name":"new","doc":"API class constructor.\n\nParams:\n- `token` -- Bot unique token.\n- `url` -- Bot API URL. Default is \"https://api.telegram.org\", pass your URL if you are using your own server.\n- `env` -- Type of the environment. `:test` is used for testing and inserts `test/` in the endpoint after bot token.","summary":"<p>API class constructor.</p>","abstract":false,"args":[{"name":"token","external_name":"token","restriction":"::String"},{"name":"url","default_value":"\"https://api.telegram.org\"","external_name":"url","restriction":"::String"},{"name":"env","default_value":":prod","external_name":"env","restriction":"::Symbol"},{"name":"log_level","default_value":"Log::Severity::Warn","external_name":"log_level","restriction":"Log::Severity"}],"args_string":"(token : String, url : String = \"https://api.telegram.org\", env : Symbol = :prod, log_level : Log::Severity = Log::Severity::Warn)","args_html":"(token : String, url : String = <span class=\"s\">&quot;https://api.telegram.org&quot;</span>, env : Symbol = <span class=\"n\">:prod</span>, log_level : Log::Severity = <span class=\"t\">Log</span><span class=\"t\">::</span><span class=\"t\">Severity</span><span class=\"t\">::</span><span class=\"t\">Warn</span>)","location":{"filename":"src/api/api.cr","line_number":32,"url":null},"def":{"name":"new","args":[{"name":"token","external_name":"token","restriction":"::String"},{"name":"url","default_value":"\"https://api.telegram.org\"","external_name":"url","restriction":"::String"},{"name":"env","default_value":":prod","external_name":"env","restriction":"::Symbol"},{"name":"log_level","default_value":"Log::Severity::Warn","external_name":"log_level","restriction":"Log::Severity"}],"visibility":"Public","body":"_ = allocate\n_.initialize(token, url, env, log_level)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"addStickerToSet(**params)-instance-method","name":"addStickerToSet","doc":"Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns True on success.\n\nParams:\n\n`user_id : Int32`\n\n> User identifier of sticker set owner.\n>\n\n`name : String`\n\n> Sticker set name.\n>\n\n`sticker : Hamilton::Types::InputSticker`\n\n> A JSON-serialized object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set isn't changed.\n>","summary":"<p>Use this method to add a new sticker to a set created by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"addStickerToSet","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [addStickerToSet] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:sticker]?\n  if (typeof(parameter)) <= Hamilton::Types::InputSticker\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker, Hamilton::Types::InputSticker, typeof(parameter)))\n  end\n\n\n  if typeof(parameter.sticker).is_a?(Hamilton::Types::InputFile)\n    builder.file(parameter.sticker.filename, parameter.sticker.file, HTTP::FormData::FileMetadata.new(filename: parameter.sticker.filename))\n    parameter.sticker = \"attach://#{parameter.sticker.filename}\"\n  end\n  builder.field(\"sticker\", parameter.to_json, field_headers)\nelsif Nil < Hamilton::Types::InputSticker\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"addStickerToSet\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"addStickerToSet\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"addStickerToSet\", response.status))\nend\n"},"external_var":false},{"html_id":"answerCallbackQuery(**params)-instance-method","name":"answerCallbackQuery","doc":"Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.\n\nAlternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via @BotFather and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.\n\nParams:\n\n`callback_query_id : String`\n\n> Unique identifier for the query to be answered.\n>\n\n`text : Union(String | Nil)`\n\n> Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters.\n>\n\n`show_alert : Union(Bool | Nil)`\n\n> If True, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.\n>\n\n`url : Union(String | Nil)`\n\n> URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @BotFather, specify the URL that opens your game - note that this will only work if the query comes from a \"callback_game\" button.\n>\n> Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.\n>\n\n`cache_time : Union(Int32 | Nil)`\n\n> The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.\n>","summary":"<p>Use this method to send answers to callback queries sent from inline keyboards.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"answerCallbackQuery","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [answerCallbackQuery] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:callback_query_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:callback_query_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"callback_query_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:callback_query_id))\nend\n\nif parameter = params[:text]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:text, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"text\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:text))\nend\n\nif parameter = params[:show_alert]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:show_alert, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"show_alert\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:show_alert))\nend\n\nif parameter = params[:url]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:url, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"url\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:url))\nend\n\nif parameter = params[:cache_time]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:cache_time, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"cache_time\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:cache_time))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"answerCallbackQuery\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerCallbackQuery\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerCallbackQuery\", response.status))\nend\n"},"external_var":false},{"html_id":"answerInlineQuery(**params)-instance-method","name":"answerInlineQuery","doc":"Use this method to send answers to an inline query. On success, True is returned.\n\nNo more than 50 results per query are allowed.\n\nParams:\n\n`inline_query_id : String`\n\n> Unique identifier for the answered query.\n>\n\n`results : Array(Hamilton::Types::InlineQueryResult)`\n\n> A JSON-serialized array of results for the inline query.\n>\n\n`cache_time : Union(Int32 | Nil)`\n\n> The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.\n>\n\n`is_personal : Union(Bool | Nil)`\n\n> Pass True if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.\n>\n\n`next_offset : Union(String | Nil)`\n\n> Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.\n>\n\n`button : Union(Array(Hamilton::Types::InlineQueryResultsButton) | Nil)`\n\n> A JSON-serialized object describing a button to be shown above inline query results.\n>","summary":"<p>Use this method to send answers to an inline query.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"answerInlineQuery","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [answerInlineQuery] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:inline_query_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:inline_query_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"inline_query_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:inline_query_id))\nend\n\nif parameter = params[:results]?\n  if (typeof(parameter)) <= Array(Hamilton::Types::InlineQueryResultArticle | Hamilton::Types::InlineQueryResultAudio | Hamilton::Types::InlineQueryResultCachedAudio | Hamilton::Types::InlineQueryResultCachedDocument | Hamilton::Types::InlineQueryResultCachedGif | Hamilton::Types::InlineQueryResultCachedMpeg4Gif | Hamilton::Types::InlineQueryResultCachedPhoto | Hamilton::Types::InlineQueryResultCachedSticker | Hamilton::Types::InlineQueryResultCachedVideo | Hamilton::Types::InlineQueryResultCachedVoice | Hamilton::Types::InlineQueryResultContact | Hamilton::Types::InlineQueryResultDocument | Hamilton::Types::InlineQueryResultGame | Hamilton::Types::InlineQueryResultGif | Hamilton::Types::InlineQueryResultLocation | Hamilton::Types::InlineQueryResultMpeg4Gif | Hamilton::Types::InlineQueryResultPhoto | Hamilton::Types::InlineQueryResultVenue | Hamilton::Types::InlineQueryResultVideo | Hamilton::Types::InlineQueryResultVoice)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:results, Array(Hamilton::Types::InlineQueryResult), typeof(parameter)))\n  end\n\n\n  builder.field(\"results\", parameter.to_json, field_headers)\nelsif Nil < Array(Hamilton::Types::InlineQueryResultArticle | Hamilton::Types::InlineQueryResultAudio | Hamilton::Types::InlineQueryResultCachedAudio | Hamilton::Types::InlineQueryResultCachedDocument | Hamilton::Types::InlineQueryResultCachedGif | Hamilton::Types::InlineQueryResultCachedMpeg4Gif | Hamilton::Types::InlineQueryResultCachedPhoto | Hamilton::Types::InlineQueryResultCachedSticker | Hamilton::Types::InlineQueryResultCachedVideo | Hamilton::Types::InlineQueryResultCachedVoice | Hamilton::Types::InlineQueryResultContact | Hamilton::Types::InlineQueryResultDocument | Hamilton::Types::InlineQueryResultGame | Hamilton::Types::InlineQueryResultGif | Hamilton::Types::InlineQueryResultLocation | Hamilton::Types::InlineQueryResultMpeg4Gif | Hamilton::Types::InlineQueryResultPhoto | Hamilton::Types::InlineQueryResultVenue | Hamilton::Types::InlineQueryResultVideo | Hamilton::Types::InlineQueryResultVoice)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:results))\nend\n\nif parameter = params[:cache_time]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:cache_time, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"cache_time\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:cache_time))\nend\n\nif parameter = params[:is_personal]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_personal, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"is_personal\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_personal))\nend\n\nif parameter = params[:next_offset]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:next_offset, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"next_offset\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:next_offset))\nend\n\nif parameter = params[:button]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::InlineQueryResultsButton) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:button, Union(Array(Hamilton::Types::InlineQueryResultsButton) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"button\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::InlineQueryResultsButton) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:button))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"answerInlineQuery\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerInlineQuery\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerInlineQuery\", response.status))\nend\n"},"external_var":false},{"html_id":"answerPreCheckoutQuery(**params)-instance-method","name":"answerPreCheckoutQuery","doc":"Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an `Update` with the field `pre_checkout_query`. Use this method to respond to such pre-checkout queries. On success, True is returned.\n\nNOTE: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n\nParams:\n\n`pre_checkout_query_id : String`\n\n> Unique identifier for the query to be answered.\n>\n\n`ok : Bool`\n\n> Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.\n>\n\n`error_message : Union(String | Nil)`\n\n> Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.\n>","summary":"<p>Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an <code>Update</code> with the field <code>pre_checkout_query</code>.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"answerPreCheckoutQuery","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [answerPreCheckoutQuery] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:pre_checkout_query_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:pre_checkout_query_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"pre_checkout_query_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:pre_checkout_query_id))\nend\n\nif parameter = params[:ok]?\n  if (typeof(parameter)) <= Bool\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:ok, Bool, typeof(parameter)))\n  end\n\n\n  builder.field(\"ok\", parameter.to_json, field_headers)\nelsif Nil < Bool\nelse\n  raise(Hamilton::Errors::MissingParam.new(:ok))\nend\n\nif parameter = params[:error_message]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:error_message, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"error_message\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:error_message))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"answerPreCheckoutQuery\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerPreCheckoutQuery\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerPreCheckoutQuery\", response.status))\nend\n"},"external_var":false},{"html_id":"answerShippingQuery(**params)-instance-method","name":"answerShippingQuery","doc":"If you sent an invoice requesting a shipping address and the parameter `is_flexible` was specified, the Bot API will send an `Update` with a `shipping_query` field to the bot. Use this method to reply to shipping queries. On success, True is returned.\n\nParams:\n\n`shipping_query_id : String`\n\n> Unique identifier for the query to be answered.\n>\n\n`ok : Bool`\n\n> Pass True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible).\n>\n\n`shipping_options : Union(Array(Hamilton::Types::ShippingOption) | Nil)`\n\n> Required if ok is True. A JSON-serialized array of available shipping options.\n>\n\n`error_message : Union(String | Nil)`\n\n> Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. “Sorry, delivery to your desired address is unavailable”). Telegram will display this message to the user.\n>","summary":"<p>If you sent an invoice requesting a shipping address and the parameter <code>is_flexible</code> was specified, the Bot API will send an <code>Update</code> with a <code>shipping_query</code> field to the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"answerShippingQuery","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [answerShippingQuery] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:shipping_query_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:shipping_query_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"shipping_query_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:shipping_query_id))\nend\n\nif parameter = params[:ok]?\n  if (typeof(parameter)) <= Bool\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:ok, Bool, typeof(parameter)))\n  end\n\n\n  builder.field(\"ok\", parameter.to_json, field_headers)\nelsif Nil < Bool\nelse\n  raise(Hamilton::Errors::MissingParam.new(:ok))\nend\n\nif parameter = params[:shipping_options]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::ShippingOption) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:shipping_options, Union(Array(Hamilton::Types::ShippingOption) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"shipping_options\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::ShippingOption) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:shipping_options))\nend\n\nif parameter = params[:error_message]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:error_message, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"error_message\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:error_message))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"answerShippingQuery\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerShippingQuery\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerShippingQuery\", response.status))\nend\n"},"external_var":false},{"html_id":"answerWebAppQuery(**params)-instance-method","name":"answerWebAppQuery","doc":"Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a `SentWebAppMessage` object is returned.\n\nParams:\n\n`web_app_query_id : String`\n\n> Unique identifier for the query to be answered.\n>\n\n`result : Hamilton::Types::InlineQueryResult`\n\n> A JSON-serialized object describing the message to be sent.\n>","summary":"<p>Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"answerWebAppQuery","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [answerWebAppQuery] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:web_app_query_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:web_app_query_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"web_app_query_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:web_app_query_id))\nend\n\nif parameter = params[:result]?\n  if (typeof(parameter)) <= (((((((((((((((((((Hamilton::Types::InlineQueryResultArticle | Hamilton::Types::InlineQueryResultAudio) | Hamilton::Types::InlineQueryResultCachedAudio) | Hamilton::Types::InlineQueryResultCachedDocument) | Hamilton::Types::InlineQueryResultCachedGif) | Hamilton::Types::InlineQueryResultCachedMpeg4Gif) | Hamilton::Types::InlineQueryResultCachedPhoto) | Hamilton::Types::InlineQueryResultCachedSticker) | Hamilton::Types::InlineQueryResultCachedVideo) | Hamilton::Types::InlineQueryResultCachedVoice) | Hamilton::Types::InlineQueryResultContact) | Hamilton::Types::InlineQueryResultDocument) | Hamilton::Types::InlineQueryResultGame) | Hamilton::Types::InlineQueryResultGif) | Hamilton::Types::InlineQueryResultLocation) | Hamilton::Types::InlineQueryResultMpeg4Gif) | Hamilton::Types::InlineQueryResultPhoto) | Hamilton::Types::InlineQueryResultVenue) | Hamilton::Types::InlineQueryResultVideo) | Hamilton::Types::InlineQueryResultVoice)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:result, Hamilton::Types::InlineQueryResult, typeof(parameter)))\n  end\n\n\n  builder.field(\"result\", parameter.to_json, field_headers)\nelsif Nil < (((((((((((((((((((Hamilton::Types::InlineQueryResultArticle | Hamilton::Types::InlineQueryResultAudio) | Hamilton::Types::InlineQueryResultCachedAudio) | Hamilton::Types::InlineQueryResultCachedDocument) | Hamilton::Types::InlineQueryResultCachedGif) | Hamilton::Types::InlineQueryResultCachedMpeg4Gif) | Hamilton::Types::InlineQueryResultCachedPhoto) | Hamilton::Types::InlineQueryResultCachedSticker) | Hamilton::Types::InlineQueryResultCachedVideo) | Hamilton::Types::InlineQueryResultCachedVoice) | Hamilton::Types::InlineQueryResultContact) | Hamilton::Types::InlineQueryResultDocument) | Hamilton::Types::InlineQueryResultGame) | Hamilton::Types::InlineQueryResultGif) | Hamilton::Types::InlineQueryResultLocation) | Hamilton::Types::InlineQueryResultMpeg4Gif) | Hamilton::Types::InlineQueryResultPhoto) | Hamilton::Types::InlineQueryResultVenue) | Hamilton::Types::InlineQueryResultVideo) | Hamilton::Types::InlineQueryResultVoice)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:result))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"answerWebAppQuery\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::SentWebAppMessage)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerWebAppQuery\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"answerWebAppQuery\", response.status))\nend\n"},"external_var":false},{"html_id":"approveChatJoinRequest(**params)-instance-method","name":"approveChatJoinRequest","doc":"Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the \"can_invite_users\" administrator right. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>","summary":"<p>Use this method to approve a chat join request.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"approveChatJoinRequest","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [approveChatJoinRequest] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"approveChatJoinRequest\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"approveChatJoinRequest\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"approveChatJoinRequest\", response.status))\nend\n"},"external_var":false},{"html_id":"approveSuggestedPost(**params)-instance-method","name":"approveSuggestedPost","doc":"Use this method to approve a suggested post in a direct messages chat. The bot must have the \"can_post_messages\" administrator right in the corresponding channel chat. Returns True on success.\n\nParams:\n\n`chat_id : Int32`\n\n> Unique identifier for the target direct messages chat.\n>\n\n`message_id : Int32`\n\n> Identifier of a suggested post message to approve.\n>\n\n`send_date : Union(Int32 | Nil)`\n\n> Point in time (Unix timestamp) when the post is expected to be published; omit if the date has already been specified when the suggested post was created. If specified, then the date must be not more than 2678400 seconds (30 days) in the future.\n>","summary":"<p>Use this method to approve a suggested post in a direct messages chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"approveSuggestedPost","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [approveSuggestedPost] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:send_date]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:send_date, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"send_date\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:send_date))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"approveSuggestedPost\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"approveSuggestedPost\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"approveSuggestedPost\", response.status))\nend\n"},"external_var":false},{"html_id":"banChatMember(**params)-instance-method","name":"banChatMember","doc":"Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`).\n>\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>\n\n`until_date : Union(Int32 | Nil)`\n\n> Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.\n>\n\n`revoke_messages : Union(Bool | Nil)`\n\n> Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels.\n>","summary":"<p>Use this method to ban a user in a group, a supergroup or a channel.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"banChatMember","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [banChatMember] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:until_date]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:until_date, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"until_date\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:until_date))\nend\n\nif parameter = params[:revoke_messages]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:revoke_messages, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"revoke_messages\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:revoke_messages))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"banChatMember\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"banChatMember\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"banChatMember\", response.status))\nend\n"},"external_var":false},{"html_id":"banChatSenderChat(**params)-instance-method","name":"banChatSenderChat","doc":"Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`sender_chat_id : Int32`\n\n> Unique identifier of the target sender chat.\n>","summary":"<p>Use this method to ban a channel chat in a supergroup or a channel.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"banChatSenderChat","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [banChatSenderChat] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:sender_chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sender_chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"sender_chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sender_chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"banChatSenderChat\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"banChatSenderChat\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"banChatSenderChat\", response.status))\nend\n"},"external_var":false},{"html_id":"close(**params)-instance-method","name":"close","doc":"Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters.","summary":"<p>Use this method to close the bot instance before moving it from one local server to another.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"close","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [close] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"close\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"close\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"close\", response.status))\nend\n"},"external_var":false},{"html_id":"closeForumTopic(**params)-instance-method","name":"closeForumTopic","doc":"Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_manage_topics\" administrator rights, unless it is the creator of the topic. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>\n\n`message_thread_id : Int32`\n\n> Unique identifier for the target message thread of the forum topic.\n>","summary":"<p>Use this method to close an open topic in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"closeForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [closeForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"closeForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"closeForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"closeForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"closeGeneralForumTopic(**params)-instance-method","name":"closeGeneralForumTopic","doc":"Use this method to close an open \"General\" topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_manage_topics\" administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>","summary":"<p>Use this method to close an open &quot;General&quot; topic in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"closeGeneralForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [closeGeneralForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"closeGeneralForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"closeGeneralForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"closeGeneralForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"convertGiftToStars(**params)-instance-method","name":"convertGiftToStars","doc":"Converts a given regular gift to Telegram Stars. Requires the can_convert_gifts_to_stars business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`owned_gift_id : String`\n\n> Unique identifier of the regular gift that should be converted to Telegram Stars\n>","summary":"<p>Converts a given regular gift to Telegram Stars.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"convertGiftToStars","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [convertGiftToStars] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:owned_gift_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:owned_gift_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"owned_gift_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:owned_gift_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"convertGiftToStars\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"convertGiftToStars\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"convertGiftToStars\", response.status))\nend\n"},"external_var":false},{"html_id":"copyMessage(**params)-instance-method","name":"copyMessage","doc":"Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field `correct_option_id` is known to the bot. The method is analogous to the method `forwardMessage`, but the copied message doesn't have a link to the original message. Returns the `MessageId` of the sent message on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`from_chat_id : Union(Int32 | String)`\n\n> Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`).\n>\n\n`message_id : Int32`\n\n> Message identifier in the chat specified in `from_chat_id`.\n>\n\n`video_start_timestamp : Union(Int32 | Nil)`\n\n> New start timestamp for the copied video in the message.\n>\n\n`caption : Union(String | Nil)`\n\n> New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the new caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of `parse_mode`.\n>\n\n`show_caption_above_media : Union(Bool | Nil)`\n\n> Pass True, if the caption must be shown above the message media. Ignored if a new caption isn't specified.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to copy messages of any kind.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"copyMessage","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [copyMessage] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:from_chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:from_chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"from_chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:from_chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:video_start_timestamp]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:video_start_timestamp, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"video_start_timestamp\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:video_start_timestamp))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:show_caption_above_media]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:show_caption_above_media, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"show_caption_above_media\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:show_caption_above_media))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"copyMessage\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::MessageId)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"copyMessage\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"copyMessage\", response.status))\nend\n"},"external_var":false},{"html_id":"copyMessages(**params)-instance-method","name":"copyMessages","doc":"Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field `correct_option_id` is known to the bot. The method is analogous to the method `forwardMessages`, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages. On success, an array of `MessageId` of the sent messages is returned.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the messages will be sent; required if the messages are sent to a direct messages chat.\n>\n\n`from_chat_id : Union(Int32 | String)`\n\n> Unique identifier for the chat where the original messages were sent (or channel username in the format `@channelusername`).\n>\n\n`message_ids : Array(Int32)`\n\n> A JSON-serialized list of 1-100 identifiers of messages in the chat `from_chat_id` to copy. The identifiers must be specified in a strictly increasing order.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the messages silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent messages from forwarding and saving.\n>\n\n`remove_caption : Union(Bool | Nil)`\n\n> Pass True to copy the messages without their captions.\n>","summary":"<p>Use this method to copy messages of any kind.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"copyMessages","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [copyMessages] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:from_chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:from_chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"from_chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:from_chat_id))\nend\n\nif parameter = params[:message_ids]?\n  if (typeof(parameter)) <= Array(Int32)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_ids, Array(Int32), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_ids\", parameter.to_json, field_headers)\nelsif Nil < Array(Int32)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_ids))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:remove_caption]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:remove_caption, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"remove_caption\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:remove_caption))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"copyMessages\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Array(Hamilton::Types::MessageId))\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"copyMessages\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"copyMessages\", response.status))\nend\n"},"external_var":false},{"html_id":"createChatInviteLink(**params)-instance-method","name":"createChatInviteLink","doc":"Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method `revokeChatInviteLink`. Returns the new invite link as `ChatInviteLink` object.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`name : Union(String | Nil)`\n\n> Invite link name; 0-32 characters.\n>\n\n`expire_date : Union(Int32 | Nil)`\n\n> Point in time (Unix timestamp) when the link will expire.\n>\n\n`member_limit : Union(Int32 | Nil)`\n\n> The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999.\n>\n\n`creates_join_request : Union(Bool | Nil)`\n\n> True, if users joining the chat via the link need to be approved by chat administrators. If True, `member_limit` can't be specified.\n>","summary":"<p>Use this method to create an additional invite link for a chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"createChatInviteLink","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [createChatInviteLink] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:expire_date]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:expire_date, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"expire_date\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:expire_date))\nend\n\nif parameter = params[:member_limit]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:member_limit, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"member_limit\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:member_limit))\nend\n\nif parameter = params[:creates_join_request]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:creates_join_request, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"creates_join_request\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:creates_join_request))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"createChatInviteLink\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::ChatInviteLink)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createChatInviteLink\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createChatInviteLink\", response.status))\nend\n"},"external_var":false},{"html_id":"createChatSubscriptionInviteLink(**params)-instance-method","name":"createChatSubscriptionInviteLink","doc":"Use this method to create a subscription invite link for a channel chat. The bot must have the \"can_invite_users\" administrator rights. The link can be edited using the method `editChatSubscriptionInviteLink` or revoked using the method `revokeChatInviteLink`. Returns the new invite link as a `ChatInviteLink` object.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`name : Union(String | Nil)`\n\n> Invite link name; 0-32 characters.\n>\n\n`subscription_period : Int32`\n\n> The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).\n>\n\n`subscription_price : Int32`\n\n> The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-10000.\n>","summary":"<p>Use this method to create a subscription invite link for a channel chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"createChatSubscriptionInviteLink","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [createChatSubscriptionInviteLink] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:subscription_period]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:subscription_period, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"subscription_period\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:subscription_period))\nend\n\nif parameter = params[:subscription_price]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:subscription_price, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"subscription_price\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:subscription_price))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"createChatSubscriptionInviteLink\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::ChatInviteLink)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createChatSubscriptionInviteLink\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createChatSubscriptionInviteLink\", response.status))\nend\n"},"external_var":false},{"html_id":"createForumTopic(**params)-instance-method","name":"createForumTopic","doc":"Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_manage_topics\" administrator rights. Returns information about the created topic as a `ForumTopic` object.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>\n\n`name : String`\n\n> Topic name, 1-128 characters.\n>\n\n`icon_color : Union(Int32 | Nil)`\n\n> Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F).\n>\n\n`icon_custom_emoji_id : Union(String | Nil)`\n\n> Unique identifier of the custom emoji shown as the topic icon. Use `getForumTopicIconStickers` to get all allowed custom emoji identifiers.\n>","summary":"<p>Use this method to create a topic in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"createForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [createForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:icon_color]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:icon_color, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"icon_color\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:icon_color))\nend\n\nif parameter = params[:icon_custom_emoji_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:icon_custom_emoji_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"icon_custom_emoji_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:icon_custom_emoji_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"createForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::ForumTopic)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"createInvoiceLink(**params)-instance-method","name":"createInvoiceLink","doc":"Use this method to create a link for an invoice. Returns the created invoice link as String on success.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the link will be created. For payments in Telegram Stars only.\n>\n\n`title : String`\n\n> Product name, 1-32 characters.\n>\n\n`description : String`\n\n> Product description, 1-255 characters.\n>\n\n`payload : String`\n\n> Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.\n>\n\n`provider_token : Union(String | Nil)`\n\n> Payment provider token, obtained via `@BotFather`. Pass an empty string for payments in Telegram Stars.\n>\n\n`currency : String`\n\n> Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars.\n>\n\n`prices : Array(Hamilton::Types::LabeledPrice)`\n\n> Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in Telegram Stars.\n>\n\n`subscription_period : Union(Int32 | Nil)`\n\n> The number of seconds the subscription will be active for before the next payment. The currency must be set to “XTR” (Telegram Stars) if the parameter is used. Currently, it must always be 2592000 (30 days) if specified. Any number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions from the same user. Subscription price must no exceed 10000 Telegram Stars.\n>\n\n`max_tip_amount : Union(Int32 | Nil)`\n\n> The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in Telegram Stars.\n>\n\n`suggested_tip_amounts : Union(Array(Int32) | Nil)`\n\n> A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed `max_tip_amount`.\n>\n\n`provider_data : Union(String | Nil)`\n\n> JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.\n>\n\n`photo_url : Union(String | Nil)`\n\n> URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.\n>\n\n`photo_size : Union(Int32 | Nil)`\n\n> Photo size in bytes.\n>\n\n`photo_width : Union(Int32 | Nil)`\n\n> Photo width.\n>\n\n`photo_height : Union(Int32 | Nil)`\n\n> Photo height.\n>\n\n`need_name : Union(Bool | Nil)`\n\n> Pass True if you require the user's full name to complete the order. Ignored for payments in Telegram Stars.\n>\n\n`need_phone_number : Union(Bool | Nil)`\n\n> Pass True if you require the user's phone number to complete the order. Ignored for payments in Telegram Stars.\n>\n\n`need_email : Union(Bool | Nil)`\n\n> Pass True if you require the user's email address to complete the order. Ignored for payments in Telegram Stars.\n>\n\n`need_shipping_address : Union(Bool | Nil)`\n\n> Pass True if you require the user's shipping address to complete the order. Ignored for payments in Telegram Stars.\n>\n\n`send_phone_number_to_provider : Union(Bool | Nil)`\n\n> Pass True if the user's phone number should be sent to the provider. Ignored for payments in Telegram Stars.\n>\n\n`send_email_to_provider : Union(Bool | Nil)`\n\n> Pass True if the user's email address should be sent to the provider. Ignored for payments in Telegram Stars.\n>\n\n`is_flexible : Union(Bool | Nil)`\n\n> Pass True if the final price depends on the shipping method. Ignored for payments in Telegram Stars.\n>","summary":"<p>Use this method to create a link for an invoice.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"createInvoiceLink","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [createInvoiceLink] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:title]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:title, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"title\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:title))\nend\n\nif parameter = params[:description]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:description, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"description\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:description))\nend\n\nif parameter = params[:payload]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:payload, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"payload\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:payload))\nend\n\nif parameter = params[:provider_token]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:provider_token, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"provider_token\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:provider_token))\nend\n\nif parameter = params[:currency]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:currency, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"currency\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:currency))\nend\n\nif parameter = params[:prices]?\n  if (typeof(parameter)) <= Array(Hamilton::Types::LabeledPrice)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:prices, Array(Hamilton::Types::LabeledPrice), typeof(parameter)))\n  end\n\n\n  builder.field(\"prices\", parameter.to_json, field_headers)\nelsif Nil < Array(Hamilton::Types::LabeledPrice)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:prices))\nend\n\nif parameter = params[:subscription_period]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:subscription_period, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"subscription_period\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:subscription_period))\nend\n\nif parameter = params[:max_tip_amount]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:max_tip_amount, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"max_tip_amount\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:max_tip_amount))\nend\n\nif parameter = params[:suggested_tip_amounts]?\n  if (typeof(parameter)) <= (Array(Int32) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_tip_amounts, Union(Array(Int32) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_tip_amounts\", parameter.to_json, field_headers)\nelsif Nil < (Array(Int32) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_tip_amounts))\nend\n\nif parameter = params[:provider_data]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:provider_data, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"provider_data\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:provider_data))\nend\n\nif parameter = params[:photo_url]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo_url, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"photo_url\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo_url))\nend\n\nif parameter = params[:photo_size]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo_size, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"photo_size\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo_size))\nend\n\nif parameter = params[:photo_width]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo_width, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"photo_width\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo_width))\nend\n\nif parameter = params[:photo_height]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo_height, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"photo_height\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo_height))\nend\n\nif parameter = params[:need_name]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:need_name, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"need_name\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:need_name))\nend\n\nif parameter = params[:need_phone_number]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:need_phone_number, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"need_phone_number\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:need_phone_number))\nend\n\nif parameter = params[:need_email]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:need_email, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"need_email\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:need_email))\nend\n\nif parameter = params[:need_shipping_address]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:need_shipping_address, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"need_shipping_address\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:need_shipping_address))\nend\n\nif parameter = params[:send_phone_number_to_provider]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:send_phone_number_to_provider, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"send_phone_number_to_provider\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:send_phone_number_to_provider))\nend\n\nif parameter = params[:send_email_to_provider]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:send_email_to_provider, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"send_email_to_provider\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:send_email_to_provider))\nend\n\nif parameter = params[:is_flexible]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_flexible, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"is_flexible\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_flexible))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"createInvoiceLink\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(String)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createInvoiceLink\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createInvoiceLink\", response.status))\nend\n"},"external_var":false},{"html_id":"createNewStickerSet(**params)-instance-method","name":"createNewStickerSet","doc":"Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success.\n\nParams:\n\n`user_id : Int32`\n\n> User identifier of created sticker set owner.\n>\n\n`name : String`\n\n> Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., animals). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in \"_by_<bot_username>\". <bot_username> is case insensitive. 1-64 characters.\n>\n\n`title : String`\n\n> Sticker set title, 1-64 characters.\n>\n\n`stickers : Array(Hamilton::Types::InputSticker)`\n\n> A JSON-serialized list of 1-50 initial stickers to be added to the sticker set.\n>\n\n`sticker_type : Union(String | Nil)`\n\n> Type of stickers in the set, pass “regular”, “mask”, or “custom_emoji”. By default, a regular sticker set is created.\n>\n\n`needs_repainting : Union(Bool | Nil)`\n\n> Pass True if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only.\n>","summary":"<p>Use this method to create a new sticker set owned by a user.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"createNewStickerSet","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [createNewStickerSet] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:title]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:title, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"title\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:title))\nend\n\nif parameter = params[:stickers]?\n  if (typeof(parameter)) <= Array(Hamilton::Types::InputSticker)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:stickers, Array(Hamilton::Types::InputSticker), typeof(parameter)))\n  end\n\n\n  parameter.each do |stiker|\n    if typeof(stiker.sticker).is_a?(Hamilton::Types::InputFile)\n      builder.file(stiker.sticker.filename, stiker.sticker.file, HTTP::FormData::FileMetadata.new(filename: stiker.sticker.filename))\n      stiker.sticker = \"attach://#{stiker.sticker.filename}\"\n    end\n  end\n  builder.field(\"stickers\", parameter.to_json, field_headers)\nelsif Nil < Array(Hamilton::Types::InputSticker)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:stickers))\nend\n\nif parameter = params[:sticker_type]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker_type, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"sticker_type\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker_type))\nend\n\nif parameter = params[:needs_repainting]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:needs_repainting, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"needs_repainting\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:needs_repainting))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"createNewStickerSet\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createNewStickerSet\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"createNewStickerSet\", response.status))\nend\n"},"external_var":false},{"html_id":"declineChatJoinRequest(**params)-instance-method","name":"declineChatJoinRequest","doc":"Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the \"can_invite_users\" administrator right. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>","summary":"<p>Use this method to decline a chat join request.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"declineChatJoinRequest","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [declineChatJoinRequest] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"declineChatJoinRequest\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"declineChatJoinRequest\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"declineChatJoinRequest\", response.status))\nend\n"},"external_var":false},{"html_id":"declineSuggestedPost(**params)-instance-method","name":"declineSuggestedPost","doc":"Use this method to decline a suggested post in a direct messages chat. The bot must have the \"can_manage_direct_messages\" administrator right in the corresponding channel chat. Returns True on success.\n\nParams:\n\n`chat_id : Int32`\n\n> Unique identifier for the target direct messages chat.\n>\n\n`message_id : Int32`\n\n> Identifier of a suggested post message to decline.\n>\n\n`comment : Union(String | Nil)`\n\n> Comment for the creator of the suggested post; 0-128 characters.\n>","summary":"<p>Use this method to decline a suggested post in a direct messages chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"declineSuggestedPost","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [declineSuggestedPost] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:comment]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:comment, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"comment\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:comment))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"declineSuggestedPost\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"declineSuggestedPost\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"declineSuggestedPost\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteBusinessMessages(**params)-instance-method","name":"deleteBusinessMessages","doc":"Delete messages on behalf of a business account. Requires the \"can_delete_sent_messages\" business bot right to delete messages sent by the bot itself, or the \"can_delete_all_messages\" business bot right to delete any message. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection on behalf of which to delete the messages.\n>\n\n`message_ids : Array(Int32)`\n\n> A JSON-serialized list of 1-100 identifiers of messages to delete. All messages must be from the same chat. See deleteMessage for limitations on which messages can be deleted.\n>","summary":"<p>Delete messages on behalf of a business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteBusinessMessages","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteBusinessMessages] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:message_ids]?\n  if (typeof(parameter)) <= Array(Int32)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_ids, Array(Int32), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_ids\", parameter.to_json, field_headers)\nelsif Nil < Array(Int32)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_ids))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteBusinessMessages\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteBusinessMessages\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteBusinessMessages\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteChatPhoto(**params)-instance-method","name":"deleteChatPhoto","doc":"Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>","summary":"<p>Use this method to delete a chat photo.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteChatPhoto","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteChatPhoto] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteChatPhoto\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteChatPhoto\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteChatPhoto\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteChatStickerSet(**params)-instance-method","name":"deleteChatStickerSet","doc":"Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field \"can_set_sticker_set\" optionally returned in `getChat` requests to check if the bot can use this method. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`).\n>","summary":"<p>Use this method to delete a group sticker set from a supergroup.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteChatStickerSet","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteChatStickerSet] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteChatStickerSet\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteChatStickerSet\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteChatStickerSet\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteForumTopic(**params)-instance-method","name":"deleteForumTopic","doc":"Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_delete_messages\" administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>\n\n`message_thread_id : Int32`\n\n> Unique identifier for the target message thread of the forum topic.\n>","summary":"<p>Use this method to delete a forum topic along with all its messages in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteMessage(**params)-instance-method","name":"deleteMessage","doc":"Use this method to delete a message, including service messages, with the following limitations:\n\n- A message can only be deleted if it was sent less than 48 hours ago.\n\n- Service messages about a supergroup, channel, or forum topic creation can't be deleted.\n\n- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.\n\n- Bots can delete outgoing messages in private chats, groups, and supergroups.\n\n- Bots can delete incoming messages in private chats.\n\n- Bots granted \"can_post_messages\" permissions can delete outgoing messages in channels.\n\n- If the bot is an administrator of a group, it can delete any message there.\n\n- If the bot has \"can_delete_messages\" administrator right in a supergroup or a channel, it can delete any message there.\n\n- If the bot has \"can_manage_direct_messages\" administrator right in a channel, it can delete any message in the corresponding direct messages chat.\n\nReturns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Int32`\n\n> Identifier of the message to delete.\n>","summary":"<p>Use this method to delete a message, including service messages, with the following limitations:</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteMessage","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteMessage] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteMessage\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteMessage\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteMessage\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteMessages(**params)-instance-method","name":"deleteMessages","doc":"Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_ids : Array(Int32)`\n\n> A JSON-serialized list of 1-100 identifiers of messages to delete.\n>","summary":"<p>Use this method to delete multiple messages simultaneously.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteMessages","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteMessages] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_ids]?\n  if (typeof(parameter)) <= Array(Int32)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_ids, Array(Int32), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_ids\", parameter.to_json, field_headers)\nelsif Nil < Array(Int32)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_ids))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteMessages\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteMessages\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteMessages\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteMyCommands(**params)-instance-method","name":"deleteMyCommands","doc":"Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success.\n\nParams:\n\n`scope : Union(Hamilton::Types::BotCommandScope | Nil)`\n\n> A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to `BotCommandScopeDefault`.\n>\n\n`language_code : Union(String | Nil)`\n\n> A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands.\n>","summary":"<p>Use this method to delete the list of the bot's commands for the given scope and user language.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteMyCommands","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteMyCommands] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:scope]?\n  if (typeof(parameter)) <= (((((((Hamilton::Types::BotCommandScopeAllChatAdministrators | Hamilton::Types::BotCommandScopeAllGroupChats) | Hamilton::Types::BotCommandScopeAllPrivateChats) | Hamilton::Types::BotCommandScopeChat) | Hamilton::Types::BotCommandScopeChatAdministrators) | Hamilton::Types::BotCommandScopeChatMember) | Hamilton::Types::BotCommandScopeDefault) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:scope, Union(Hamilton::Types::BotCommandScope | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"scope\", parameter.to_json, field_headers)\nelsif Nil < (((((((Hamilton::Types::BotCommandScopeAllChatAdministrators | Hamilton::Types::BotCommandScopeAllGroupChats) | Hamilton::Types::BotCommandScopeAllPrivateChats) | Hamilton::Types::BotCommandScopeChat) | Hamilton::Types::BotCommandScopeChatAdministrators) | Hamilton::Types::BotCommandScopeChatMember) | Hamilton::Types::BotCommandScopeDefault) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:scope))\nend\n\nif parameter = params[:language_code]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:language_code, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"language_code\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:language_code))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteMyCommands\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteMyCommands\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteMyCommands\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteStickerFromSet(**params)-instance-method","name":"deleteStickerFromSet","doc":"Use this method to delete a sticker from a set created by the bot. Returns True on success.\n\nParams:\n\n`sticker : String`\n\n> File identifier of the sticker.\n>","summary":"<p>Use this method to delete a sticker from a set created by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteStickerFromSet","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteStickerFromSet] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:sticker]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"sticker\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteStickerFromSet\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteStickerFromSet\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteStickerFromSet\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteStickerSet(**params)-instance-method","name":"deleteStickerSet","doc":"Use this method to delete a sticker set that was created by the bot. Returns True on success.\n\nParams:\n\n`name : String`\n\n> Sticker set name.\n>","summary":"<p>Use this method to delete a sticker set that was created by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteStickerSet","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteStickerSet] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteStickerSet\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteStickerSet\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteStickerSet\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteStory(**params)-instance-method","name":"deleteStory","doc":"Deletes a story previously posted by the bot on behalf of a managed business account. Requires the \"can_manage_stories\" business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`story_id : Int32`\n\n> Unique identifier of the story to delete.\n>","summary":"<p>Deletes a story previously posted by the bot on behalf of a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteStory","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteStory] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:story_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:story_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"story_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:story_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteStory\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteStory\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteStory\", response.status))\nend\n"},"external_var":false},{"html_id":"deleteWebhook(**params)-instance-method","name":"deleteWebhook","doc":"Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.\n\nParams:\n\n`drop_pending_updates : Union(Bool | Nil)`\n\n> Pass True to drop all pending updates\n>","summary":"<p>Use this method to remove webhook integration if you decide to switch back to getUpdates.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"deleteWebhook","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [deleteWebhook] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:drop_pending_updates]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:drop_pending_updates, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"drop_pending_updates\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:drop_pending_updates))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"deleteWebhook\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteWebhook\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"deleteWebhook\", response.status))\nend\n"},"external_var":false},{"html_id":"editChatInviteLink(**params)-instance-method","name":"editChatInviteLink","doc":"Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a `ChatInviteLink` object.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`invite_link : String`\n\n> The invite link to edit.\n>\n\n`name : Union(String | Nil)`\n\n> Invite link name; 0-32 characters.\n>\n\n`expire_date : Union(Int32 | Nil)`\n\n> Point in time (Unix timestamp) when the link will expire.\n>\n\n`member_limit : Union(Int32 | Nil)`\n\n> The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999.\n>\n\n`creates_join_request : Union(Bool | Nil)`\n\n> True, if users joining the chat via the link need to be approved by chat administrators. If True, `member_limit` can't be specified.\n>","summary":"<p>Use this method to edit a non-primary invite link created by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editChatInviteLink","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editChatInviteLink] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:invite_link]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:invite_link, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"invite_link\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:invite_link))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:expire_date]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:expire_date, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"expire_date\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:expire_date))\nend\n\nif parameter = params[:member_limit]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:member_limit, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"member_limit\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:member_limit))\nend\n\nif parameter = params[:creates_join_request]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:creates_join_request, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"creates_join_request\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:creates_join_request))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editChatInviteLink\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::ChatInviteLink)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editChatInviteLink\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editChatInviteLink\", response.status))\nend\n"},"external_var":false},{"html_id":"editChatSubscriptionInviteLink(**params)-instance-method","name":"editChatSubscriptionInviteLink","doc":"Use this method to edit a subscription invite link created by the bot. The bot must have the \"can_invite_users\" administrator rights. Returns the edited invite link as a `ChatInviteLink` object.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`invite_link : String`\n\n> The invite link to edit.\n>\n\n`name : Union(String | Nil)`\n\n> Invite link name; 0-32 characters.\n>","summary":"<p>Use this method to edit a subscription invite link created by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editChatSubscriptionInviteLink","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editChatSubscriptionInviteLink] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:invite_link]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:invite_link, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"invite_link\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:invite_link))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editChatSubscriptionInviteLink\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::ChatInviteLink)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editChatSubscriptionInviteLink\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editChatSubscriptionInviteLink\", response.status))\nend\n"},"external_var":false},{"html_id":"editForumTopic(**params)-instance-method","name":"editForumTopic","doc":"Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_manage_topics\" administrator rights, unless it is the creator of the topic. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>\n\n`message_thread_id : Int32`\n\n> Unique identifier for the target message thread of the forum topic\n>\n\n`name : Union(String | Nil)`\n\n> New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept.\n>\n\n`icon_custom_emoji_id : Union(String | Nil)`\n\n> New unique identifier of the custom emoji shown as the topic icon. Use `getForumTopicIconStickers` to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept.\n>","summary":"<p>Use this method to edit name and icon of a topic in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:icon_custom_emoji_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:icon_custom_emoji_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"icon_custom_emoji_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:icon_custom_emoji_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"editGeneralForumTopic(**params)-instance-method","name":"editGeneralForumTopic","doc":"Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_manage_topics\" administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>\n\n`name : String`\n\n> New topic name, 1-128 characters.\n>","summary":"<p>Use this method to edit the name of the 'General' topic in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editGeneralForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editGeneralForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editGeneralForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editGeneralForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editGeneralForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"editMessageCaption(**params)-instance-method","name":"editMessageCaption","doc":"Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited `Message` is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message to be edited was sent.\n>\n\n`chat_id : Union(Int32 | String | Nil)`\n\n> Required if `inline_message_id` is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Identifier of the message to edit.\n>\n\n`inline_message_id : Union(String | Nil)`\n\n> Required if `chat_id` and `message_id` are not specified. Identifier of the inline message.\n>\n\n`caption : Union(String | Nil)`\n\n> New caption of the message, 0-1024 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the message caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of `parse_mode`.\n>\n\n`show_caption_above_media : Union(Bool | Nil)`\n\n> Pass True, if the caption must be shown above the message media. Supported only for animation, photo and video messages.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for an inline keyboard.\n>","summary":"<p>Use this method to edit captions of messages.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editMessageCaption","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editMessageCaption] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= ((Int32 | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < ((Int32 | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:inline_message_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:inline_message_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"inline_message_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:inline_message_id))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:show_caption_above_media]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:show_caption_above_media, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"show_caption_above_media\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:show_caption_above_media))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editMessageCaption\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message | Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageCaption\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageCaption\", response.status))\nend\n"},"external_var":false},{"html_id":"editMessageChecklist(**params)-instance-method","name":"editMessageChecklist","doc":"Use this method to edit a checklist on behalf of a connected business account. On success, the edited `Message` is returned.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Int32`\n\n> Unique identifier for the target chat.\n>\n\n`message_id : Int32`\n\n> Unique identifier for the target message.\n>\n\n`checklist : Hamilton::Types::Checklist`\n\n> A JSON-serialized object for the new checklist.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for the new inline keyboard for the message.\n>","summary":"<p>Use this method to edit a checklist on behalf of a connected business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editMessageChecklist","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editMessageChecklist] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:checklist]?\n  if (typeof(parameter)) <= Hamilton::Types::Checklist\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:checklist, Hamilton::Types::Checklist, typeof(parameter)))\n  end\n\n\n  builder.field(\"checklist\", parameter.to_json, field_headers)\nelsif Nil < Hamilton::Types::Checklist\nelse\n  raise(Hamilton::Errors::MissingParam.new(:checklist))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editMessageChecklist\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageChecklist\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageChecklist\", response.status))\nend\n"},"external_var":false},{"html_id":"editMessageLiveLocation(**params)-instance-method","name":"editMessageLiveLocation","doc":"Use this method to edit live location messages. A location can be edited until its `live_period` expires or editing is explicitly disabled by a call to `stopMessageLiveLocation`. On success, if the edited message is not an inline message, the edited `Message` is returned, otherwise True is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message to be edited was sent.\n>\n\n`chat_id : Union(Int32 | String | Nil)`\n\n> Required if `inline_message_id` is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Identifier of the message to edit.\n>\n\n`inline_message_id : Union(String | Nil)`\n\n> Required if `chat_id` and `message_id` are not specified. Identifier of the inline message to edit.\n>\n\n`latitude : Float32`\n\n> Latitude of new location.\n>\n\n`longitude : Float32`\n\n> Longitude of new location.\n>\n\n`live_period : Union(Int32 | Nil)`\n\n> New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current `live_period` by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then `live_period` remains unchanged.\n>\n\n`horizontal_accuracy : Union(Float32 | Nil)`\n\n> The radius of uncertainty for the location, measured in meters; 0-1500.\n>\n\n`heading : Union(Int32 | Nil)`\n\n> Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\n>\n\n`proximity_alert_radius : Union(Int32 | Nil)`\n\n> The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for a new inline keyboard.\n>","summary":"<p>Use this method to edit live location messages.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editMessageLiveLocation","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editMessageLiveLocation] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= ((Int32 | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < ((Int32 | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:inline_message_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:inline_message_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"inline_message_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:inline_message_id))\nend\n\nif parameter = params[:latitude]?\n  if (typeof(parameter)) <= Float32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:latitude, Float32, typeof(parameter)))\n  end\n\n\n  builder.field(\"latitude\", parameter.to_json, field_headers)\nelsif Nil < Float32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:latitude))\nend\n\nif parameter = params[:longitude]?\n  if (typeof(parameter)) <= Float32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:longitude, Float32, typeof(parameter)))\n  end\n\n\n  builder.field(\"longitude\", parameter.to_json, field_headers)\nelsif Nil < Float32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:longitude))\nend\n\nif parameter = params[:live_period]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:live_period, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"live_period\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:live_period))\nend\n\nif parameter = params[:horizontal_accuracy]?\n  if (typeof(parameter)) <= (Float32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:horizontal_accuracy, Union(Float32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"horizontal_accuracy\", parameter.to_json, field_headers)\nelsif Nil < (Float32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:horizontal_accuracy))\nend\n\nif parameter = params[:heading]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:heading, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"heading\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:heading))\nend\n\nif parameter = params[:proximity_alert_radius]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:proximity_alert_radius, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"proximity_alert_radius\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:proximity_alert_radius))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editMessageLiveLocation\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message | Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageLiveLocation\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageLiveLocation\", response.status))\nend\n"},"external_var":false},{"html_id":"editMessageMedia(**params)-instance-method","name":"editMessageMedia","doc":"Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited `Message` is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message to be edited was sent.\n>\n\n`chat_id : Union(Int32 | String | Nil)`\n\n> Required if `inline_message_id` is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Identifier of the message to edit.\n>\n\n`inline_message_id : Union(String | Nil)`\n\n> Required if `chat_id` and `message_id` are not specified. Identifier of the inline message.\n>\n\n`media : Hamilton::Types::InputMedia`\n\n> A JSON-serialized object for a new media content of the message.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for a new inline keyboard.\n>","summary":"<p>Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editMessageMedia","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editMessageMedia] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= ((Int32 | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < ((Int32 | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:inline_message_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:inline_message_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"inline_message_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:inline_message_id))\nend\n\nif parameter = params[:media]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::InputMediaAnimation | Hamilton::Types::InputMediaAudio) | Hamilton::Types::InputMediaDocument) | Hamilton::Types::InputMediaPhoto) | Hamilton::Types::InputMediaVideo)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:media, Hamilton::Types::InputMedia, typeof(parameter)))\n  end\n\n\n  case parameter\n  in Hamilton::Types::InputMediaPhoto\n    if typeof(parameter.media).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.media.filename, parameter.media.file, HTTP::FormData::FileMetadata.new(filename: parameter.media.filename))\n      parameter.media = \"attach://#{parameter.media.filename}\"\n    end\n\n    builder.field(\"media\", parameter.to_json, field_headers)\n  in Hamilton::Types::InputMediaVideo\n    if typeof(parameter.media).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.media.filename, parameter.media.file, HTTP::FormData::FileMetadata.new(filename: parameter.media.filename))\n      parameter.media = \"attach://#{parameter.media.filename}\"\n    end\n\n\n    if typeof(parameter.thumbnail).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.thumbnail.filename, parameter.thumbnail.file, HTTP::FormData::FileMetadata.new(filename: parameter.thumbnail.filename))\n      parameter.thumbnail = \"attach://#{parameter.thumbnail.filename}\"\n    end\n\n\n    if typeof(parameter.cover).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.cover.filename, parameter.cover.file, HTTP::FormData::FileMetadata.new(filename: parameter.cover.filename))\n      parameter.cover = \"attach://#{parameter.cover.filename}\"\n    end\n\n    builder.field(\"media\", parameter.to_json, field_headers)\n  in Hamilton::Types::InputMediaAnimation\n    if typeof(parameter.media).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.media.filename, parameter.media.file, HTTP::FormData::FileMetadata.new(filename: parameter.media.filename))\n      parameter.media = \"attach://#{parameter.media.filename}\"\n    end\n\n\n    if typeof(parameter.thumbnail).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.thumbnail.filename, parameter.thumbnail.file, HTTP::FormData::FileMetadata.new(filename: parameter.thumbnail.filename))\n      parameter.thumbnail = \"attach://#{parameter.thumbnail.filename}\"\n    end\n\n    builder.field(\"media\", parameter.to_json, field_headers)\n  in Hamilton::Types::InputMediaAudio\n    if typeof(parameter.media).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.media.filename, parameter.media.file, HTTP::FormData::FileMetadata.new(filename: parameter.media.filename))\n      parameter.media = \"attach://#{parameter.media.filename}\"\n    end\n\n\n    if typeof(parameter.thumbnail).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.thumbnail.filename, parameter.thumbnail.file, HTTP::FormData::FileMetadata.new(filename: parameter.thumbnail.filename))\n      parameter.thumbnail = \"attach://#{parameter.thumbnail.filename}\"\n    end\n\n    builder.field(\"media\", parameter.to_json, field_headers)\n  in Hamilton::Types::InputMediaDocument\n    if typeof(parameter.media).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.media.filename, parameter.media.file, HTTP::FormData::FileMetadata.new(filename: parameter.media.filename))\n      parameter.media = \"attach://#{parameter.media.filename}\"\n    end\n\n\n    if typeof(parameter.thumbnail).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.thumbnail.filename, parameter.thumbnail.file, HTTP::FormData::FileMetadata.new(filename: parameter.thumbnail.filename))\n      parameter.thumbnail = \"attach://#{parameter.thumbnail.filename}\"\n    end\n\n    builder.field(\"media\", parameter.to_json, field_headers)\n  end\nelsif Nil < ((((Hamilton::Types::InputMediaAnimation | Hamilton::Types::InputMediaAudio) | Hamilton::Types::InputMediaDocument) | Hamilton::Types::InputMediaPhoto) | Hamilton::Types::InputMediaVideo)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:media))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editMessageMedia\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message | Nil)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageMedia\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageMedia\", response.status))\nend\n"},"external_var":false},{"html_id":"editMessageReplyMarkup(**params)-instance-method","name":"editMessageReplyMarkup","doc":"Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited `Message` is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message to be edited was sent.\n>\n\n`chat_id : Union(Int32 | String | Nil)`\n\n> Required if `inline_message_id` is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Identifier of the message to edit.\n>\n\n`inline_message_id : Union(String | Nil)`\n\n> Required if `chat_id` and `message_id` are not specified. Identifier of the inline message.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for an inline keyboard.\n>","summary":"<p>Use this method to edit only the reply markup of messages.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editMessageReplyMarkup","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editMessageReplyMarkup] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= ((Int32 | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < ((Int32 | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:inline_message_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:inline_message_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"inline_message_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:inline_message_id))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editMessageReplyMarkup\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message | Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageReplyMarkup\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageReplyMarkup\", response.status))\nend\n"},"external_var":false},{"html_id":"editMessageText(**params)-instance-method","name":"editMessageText","doc":"Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited `Message` is returned, otherwise True is returned. Note that business messages that were not sent by the bot and do not contain an inline keyboard can only be edited within 48 hours from the time they were sent.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message to be edited was sent.\n>\n\n`chat_id : Union(Int32 | String | Nil)`\n\n> Required if `inline_message_id` is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Identifier of the message to edit.\n>\n\n`inline_message_id : Union(String | Nil)`\n\n> Required if `chat_id` and `message_id` are not specified. Identifier of the inline message.\n>\n\n`text : String`\n\n> New text of the message, 1-4096 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the message text.\n>\n\n`entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in message text, which can be specified instead of `parse_mode`.\n>\n\n`link_preview_options : Union(Hamilton::Types::LinkPreviewOptions | Nil)`\n\n> Link preview generation options for the message.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for an inline keyboard.\n>","summary":"<p>Use this method to edit text and game messages.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editMessageText","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editMessageText] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= ((Int32 | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < ((Int32 | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:inline_message_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:inline_message_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"inline_message_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:inline_message_id))\nend\n\nif parameter = params[:text]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:text, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"text\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:text))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:entities))\nend\n\nif parameter = params[:link_preview_options]?\n  if (typeof(parameter)) <= (Hamilton::Types::LinkPreviewOptions | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:link_preview_options, Union(Hamilton::Types::LinkPreviewOptions | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"link_preview_options\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::LinkPreviewOptions | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:link_preview_options))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editMessageText\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message | Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageText\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editMessageText\", response.status))\nend\n"},"external_var":false},{"html_id":"editStory(**params)-instance-method","name":"editStory","doc":"Edits a story previously posted by the bot on behalf of a managed business account. Requires the \"can_manage_stories\" business bot right. Returns Story on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`story_id : Int32`\n\n> Unique identifier of the story to edit.\n>\n\n`content : Hamilton::Types::InputStoryContent`\n\n> Content of the story.\n>\n\n`caption : Union(String | Nil)`\n\n> Caption of the story, 0-2048 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the story caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of `parse_mode`.\n>\n\n`areas : Union(Array(Hamilton::Types::StoryArea) | Nil)`\n\n> A JSON-serialized list of clickable areas to be shown on the story.\n>","summary":"<p>Edits a story previously posted by the bot on behalf of a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editStory","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editStory] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:story_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:story_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"story_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:story_id))\nend\n\nif parameter = params[:content]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputStoryContentPhoto | Hamilton::Types::InputStoryContentVideo)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:content, Hamilton::Types::InputStoryContent, typeof(parameter)))\n  end\n\n\n  case parameter\n  in Hamilton::Types::InputStoryContentPhoto\n    if typeof(parameter.photo).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.photo.filename, parameter.photo.file, HTTP::FormData::FileMetadata.new(filename: parameter.photo.filename))\n      parameter.photo = \"attach://#{parameter.photo.filename}\"\n    end\n\n    builder.field(\"content\", parameter.to_json, field_headers)\n  in Hamilton::Types::InputStoryContentVideo\n    if typeof(parameter.video).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.video.filename, parameter.video.file, HTTP::FormData::FileMetadata.new(filename: parameter.video.filename))\n      parameter.video = \"attach://#{parameter.video.filename}\"\n    end\n\n    builder.field(\"content\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputStoryContentPhoto | Hamilton::Types::InputStoryContentVideo)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:content))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:areas]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::StoryArea) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:areas, Union(Array(Hamilton::Types::StoryArea) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"areas\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::StoryArea) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:areas))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editStory\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Story)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editStory\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editStory\", response.status))\nend\n"},"external_var":false},{"html_id":"editUserStarSubscription(**params)-instance-method","name":"editUserStarSubscription","doc":"Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars. Returns True on success.\n\nParams:\n\n`user_id : Int32`\n\n> Identifier of the user whose subscription will be edited.\n>\n\n`telegram_payment_charge_id : String`\n\n> Telegram payment identifier for the subscription.\n>\n\n`is_canceled : Bool`\n\n> Pass True to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass False to allow the user to re-enable a subscription that was previously canceled by the bot.\n>","summary":"<p>Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"editUserStarSubscription","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [editUserStarSubscription] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:telegram_payment_charge_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:telegram_payment_charge_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"telegram_payment_charge_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:telegram_payment_charge_id))\nend\n\nif parameter = params[:is_canceled]?\n  if (typeof(parameter)) <= Bool\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_canceled, Bool, typeof(parameter)))\n  end\n\n\n  builder.field(\"is_canceled\", parameter.to_json, field_headers)\nelsif Nil < Bool\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_canceled))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"editUserStarSubscription\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editUserStarSubscription\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"editUserStarSubscription\", response.status))\nend\n"},"external_var":false},{"html_id":"exportChatInviteLink(**params)-instance-method","name":"exportChatInviteLink","doc":"Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.\n\nNOTE: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using `exportChatInviteLink` or by calling the `getChat` method. If your bot needs to generate a new primary invite link replacing its previous one, use `exportChatInviteLink` again.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`).\n>","summary":"<p>Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"exportChatInviteLink","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [exportChatInviteLink] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"exportChatInviteLink\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(String)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"exportChatInviteLink\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"exportChatInviteLink\", response.status))\nend\n"},"external_var":false},{"html_id":"forwardMessage(**params)-instance-method","name":"forwardMessage","doc":"Use this method to forward messages of any kind. Service messages and messages with protected content can't be forwarded. On success, the sent Message is returned.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be forwarded; required if the message is forwarded to a direct messages chat.\n>\n\n`from_chat_id : Union(Int32 | String)`\n\n> Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`).\n>\n\n`video_start_timestamp : Union(Int32 | Nil)`\n\n> New start timestamp for the forwarded video in the message.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the forwarded message from forwarding and saving.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only.\n>\n\n`message_id : Int32`\n\n> Message identifier in the chat specified in `from_chat_id`.\n>","summary":"<p>Use this method to forward messages of any kind.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"forwardMessage","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [forwardMessage] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:from_chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:from_chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"from_chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:from_chat_id))\nend\n\nif parameter = params[:video_start_timestamp]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:video_start_timestamp, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"video_start_timestamp\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:video_start_timestamp))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"forwardMessage\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"forwardMessage\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"forwardMessage\", response.status))\nend\n"},"external_var":false},{"html_id":"forwardMessages(**params)-instance-method","name":"forwardMessages","doc":"Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages. On success, an array of `MessageId` of the sent messages is returned.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the messages will be forwarded; required if the messages are forwarded to a direct messages chat.\n>\n\n`from_chat_id : Union(Int32 | String)`\n\n> Unique identifier for the chat where the original messages were sent (or channel username in the format `@channelusername`).\n>\n\n`message_ids : Array(Int32)`\n\n> A JSON-serialized list of 1-100 identifiers of messages in the chat `from_chat_id` to forward. The identifiers must be specified in a strictly increasing order.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the messages silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the forwarded messages from forwarding and saving.\n>","summary":"<p>Use this method to forward multiple messages of any kind.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"forwardMessages","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [forwardMessages] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:from_chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:from_chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"from_chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:from_chat_id))\nend\n\nif parameter = params[:message_ids]?\n  if (typeof(parameter)) <= Array(Int32)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_ids, Array(Int32), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_ids\", parameter.to_json, field_headers)\nelsif Nil < Array(Int32)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_ids))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"forwardMessages\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Array(Hamilton::Types::MessageId))\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"forwardMessages\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"forwardMessages\", response.status))\nend\n"},"external_var":false},{"html_id":"getAvailableGifts(**params)-instance-method","name":"getAvailableGifts","doc":"Returns the list of gifts that can be sent by the bot to users and channel chats. Requires no parameters. Returns a `Gifts` object.","summary":"<p>Returns the list of gifts that can be sent by the bot to users and channel chats.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getAvailableGifts","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getAvailableGifts] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getAvailableGifts\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Gifts)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getAvailableGifts\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getAvailableGifts\", response.status))\nend\n"},"external_var":false},{"html_id":"getBusinessAccountGifts(**params)-instance-method","name":"getBusinessAccountGifts","doc":"Returns the gifts received and owned by a managed business account. Requires the \"can_view_gifts_and_stars\" business bot right. Returns `OwnedGifts` on success.\n\nParams:\n\n`business_user_id : String`\n\n> Unique identifier of the business user.\n>\n\n`exclude_unsaved : Union(Bool | Nil)`\n\n> Pass True to exclude gifts that aren't saved to the account's profile page.\n>\n\n`exclude_saved : Union(Bool | Nil)`\n\n> Pass True to exclude gifts that are saved to the account's profile page.\n>\n\n`exclude_unlimited : Union(Bool | Nil)`\n\n> Pass True to exclude gifts that can be purchased an unlimited number of times.\n>\n\n`exclude_limited : Union(Bool | Nil)`\n\n> Pass True to exclude gifts that can be purchased a limited number of times.\n>\n\n`exclude_unique : Union(Bool | Nil)`\n\n> Pass True to exclude unique gifts.\n>\n\n`sort_by_price : Union(Bool | Nil)`\n\n> Pass True to sort results by gift price instead of send date. Sorting is applied before pagination.\n>\n\n`offset : Union(String | Nil)`\n\n> Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.\n>\n\n`limit : Union(Int32 | Nil)`\n\n> The maximum number of gifts to be returned; 1-100. Defaults to 100.\n>","summary":"<p>Returns the gifts received and owned by a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getBusinessAccountGifts","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getBusinessAccountGifts] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_user_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_user_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_user_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_user_id))\nend\n\nif parameter = params[:exclude_unsaved]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:exclude_unsaved, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"exclude_unsaved\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:exclude_unsaved))\nend\n\nif parameter = params[:exclude_saved]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:exclude_saved, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"exclude_saved\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:exclude_saved))\nend\n\nif parameter = params[:exclude_unlimited]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:exclude_unlimited, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"exclude_unlimited\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:exclude_unlimited))\nend\n\nif parameter = params[:exclude_limited]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:exclude_limited, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"exclude_limited\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:exclude_limited))\nend\n\nif parameter = params[:exclude_unique]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:exclude_unique, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"exclude_unique\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:exclude_unique))\nend\n\nif parameter = params[:sort_by_price]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sort_by_price, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"sort_by_price\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sort_by_price))\nend\n\nif parameter = params[:offset]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:offset, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"offset\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:offset))\nend\n\nif parameter = params[:limit]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:limit, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"limit\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:limit))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getBusinessAccountGifts\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::OwnedGifts)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getBusinessAccountGifts\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getBusinessAccountGifts\", response.status))\nend\n"},"external_var":false},{"html_id":"getBusinessAccountStarBalance(**params)-instance-method","name":"getBusinessAccountStarBalance","doc":"Returns the amount of Telegram Stars owned by a managed business account. Requires the \"can_view_gifts_and_stars\" business bot right. Returns `StarAmount` on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>","summary":"<p>Returns the amount of Telegram Stars owned by a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getBusinessAccountStarBalance","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getBusinessAccountStarBalance] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getBusinessAccountStarBalance\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::StarAmount)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getBusinessAccountStarBalance\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getBusinessAccountStarBalance\", response.status))\nend\n"},"external_var":false},{"html_id":"getBusinessConnection(**params)-instance-method","name":"getBusinessConnection","doc":"Use this method to get information about the connection of the bot with a business account. Returns a `BusinessConnection` object on success.\n\nParams:\n\n`business_connection_id : Int32`\n\n> Unique identifier of the business connection.\n>","summary":"<p>Use this method to get information about the connection of the bot with a business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getBusinessConnection","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getBusinessConnection] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getBusinessConnection\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::BusinessConnection)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getBusinessConnection\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getBusinessConnection\", response.status))\nend\n"},"external_var":false},{"html_id":"getChat(**params)-instance-method","name":"getChat","doc":"Use this method to get up-to-date information about the chat. Returns a ChatFullInfo object on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`).\n>","summary":"<p>Use this method to get up-to-date information about the chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getChat","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getChat] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getChat\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::ChatFullInfo)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChat\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChat\", response.status))\nend\n"},"external_var":false},{"html_id":"getChatAdministrators(**params)-instance-method","name":"getChatAdministrators","doc":"Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of `ChatMember` objects.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`).\n>","summary":"<p>Use this method to get a list of administrators in a chat, which aren't bots.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getChatAdministrators","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getChatAdministrators] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getChatAdministrators\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Array(Hamilton::Types::ChatMember))\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChatAdministrators\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChatAdministrators\", response.status))\nend\n"},"external_var":false},{"html_id":"getChatMember(**params)-instance-method","name":"getChatMember","doc":"Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a `ChatMember` object on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`).\n>\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>","summary":"<p>Use this method to get information about a member of a chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getChatMember","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getChatMember] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getChatMember\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::ChatMember)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChatMember\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChatMember\", response.status))\nend\n"},"external_var":false},{"html_id":"getChatMemberCount(**params)-instance-method","name":"getChatMemberCount","doc":"Use this method to get the number of members in a chat. Returns Int on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`).\n>","summary":"<p>Use this method to get the number of members in a chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getChatMemberCount","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getChatMemberCount] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getChatMemberCount\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Int32)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChatMemberCount\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChatMemberCount\", response.status))\nend\n"},"external_var":false},{"html_id":"getChatMenuButton(**params)-instance-method","name":"getChatMenuButton","doc":"Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns `MenuButton` on success.\n\nParams:\n\n`chat_id : Int32`\n\n> Unique identifier for the target private chat. If not specified, default bot's menu button will be returned.\n>","summary":"<p>Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getChatMenuButton","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getChatMenuButton] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getChatMenuButton\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::MenuButton)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChatMenuButton\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getChatMenuButton\", response.status))\nend\n"},"external_var":false},{"html_id":"getCustomEmojiStickers(**params)-instance-method","name":"getCustomEmojiStickers","doc":"Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of `Sticker` objects.\n\nParams:\n\n`custom_emoji_ids : Array(String)`\n\n> A JSON-serialized list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.\n>","summary":"<p>Use this method to get information about custom emoji stickers by their identifiers.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getCustomEmojiStickers","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getCustomEmojiStickers] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:custom_emoji_ids]?\n  if (typeof(parameter)) <= Array(String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:custom_emoji_ids, Array(String), typeof(parameter)))\n  end\n\n\n  builder.field(\"custom_emoji_ids\", parameter.to_json, field_headers)\nelsif Nil < Array(String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:custom_emoji_ids))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getCustomEmojiStickers\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Array(Hamilton::Types::Sticker))\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getCustomEmojiStickers\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getCustomEmojiStickers\", response.status))\nend\n"},"external_var":false},{"html_id":"getFile(**params)-instance-method","name":"getFile","doc":"Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling `getFile` again.\n\nNOTE: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.\n\nParams:\n\n`file_id : String`\n\n> File identifier to get information about.\n>","summary":"<p>Use this method to get basic information about a file and prepare it for downloading.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getFile","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getFile] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:file_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:file_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"file_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:file_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getFile\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::File)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getFile\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getFile\", response.status))\nend\n"},"external_var":false},{"html_id":"getForumTopicIconStickers(**params)-instance-method","name":"getForumTopicIconStickers","doc":"Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects.","summary":"<p>Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getForumTopicIconStickers","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getForumTopicIconStickers] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getForumTopicIconStickers\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Array(Hamilton::Types::Sticker))\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getForumTopicIconStickers\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getForumTopicIconStickers\", response.status))\nend\n"},"external_var":false},{"html_id":"getGameHighScores(**params)-instance-method","name":"getGameHighScores","doc":"Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of `GameHighScore` objects.\n\nNOTE: This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.\n\nParams:\n\n`user_id : Int32`\n\n> Target user id.\n>\n\n`chat_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Unique identifier for the target chat.\n>\n\n`message_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Identifier of the sent message.\n>\n\n`inline_message_id : Union(String | Nil)`\n\n> Required if `chat_id` and `message_id` are not specified. Identifier of the inline message.\n>","summary":"<p>Use this method to get data for high score tables.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getGameHighScores","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getGameHighScores] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:inline_message_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:inline_message_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"inline_message_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:inline_message_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getGameHighScores\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Array(Hamilton::Types::GameHighScore))\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getGameHighScores\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getGameHighScores\", response.status))\nend\n"},"external_var":false},{"html_id":"getMe(**params)-instance-method","name":"getMe","doc":"A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.","summary":"<p>A simple method for testing your bot's authentication token.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getMe","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getMe] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getMe\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::User)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMe\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMe\", response.status))\nend\n"},"external_var":false},{"html_id":"getMyCommands(**params)-instance-method","name":"getMyCommands","doc":"Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned.\n\nParams:\n\n`scope : Union(Hamilton::Types::BotCommandScope | Nil)`\n\n> A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to `BotCommandScopeDefault`.\n>\n\n`language_code : Union(String | Nil)`\n\n> A two-letter ISO 639-1 language code or an empty string.\n>","summary":"<p>Use this method to get the current list of the bot's commands for the given scope and user language.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getMyCommands","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getMyCommands] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:scope]?\n  if (typeof(parameter)) <= (((((((Hamilton::Types::BotCommandScopeAllChatAdministrators | Hamilton::Types::BotCommandScopeAllGroupChats) | Hamilton::Types::BotCommandScopeAllPrivateChats) | Hamilton::Types::BotCommandScopeChat) | Hamilton::Types::BotCommandScopeChatAdministrators) | Hamilton::Types::BotCommandScopeChatMember) | Hamilton::Types::BotCommandScopeDefault) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:scope, Union(Hamilton::Types::BotCommandScope | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"scope\", parameter.to_json, field_headers)\nelsif Nil < (((((((Hamilton::Types::BotCommandScopeAllChatAdministrators | Hamilton::Types::BotCommandScopeAllGroupChats) | Hamilton::Types::BotCommandScopeAllPrivateChats) | Hamilton::Types::BotCommandScopeChat) | Hamilton::Types::BotCommandScopeChatAdministrators) | Hamilton::Types::BotCommandScopeChatMember) | Hamilton::Types::BotCommandScopeDefault) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:scope))\nend\n\nif parameter = params[:language_code]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:language_code, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"language_code\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:language_code))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getMyCommands\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Array(Hamilton::Types::BotCommand))\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyCommands\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyCommands\", response.status))\nend\n"},"external_var":false},{"html_id":"getMyDefaultAdministratorRights(**params)-instance-method","name":"getMyDefaultAdministratorRights","doc":"Use this method to get the current default administrator rights of the bot. Returns `ChatAdministratorRights` on success.\n\nParams:\n\n`for_channels : Union(Bool | Nil)`\n\n> Pass True to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.\n>","summary":"<p>Use this method to get the current default administrator rights of the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getMyDefaultAdministratorRights","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getMyDefaultAdministratorRights] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:for_channels]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:for_channels, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"for_channels\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:for_channels))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getMyDefaultAdministratorRights\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::ChatAdministratorRights)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyDefaultAdministratorRights\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyDefaultAdministratorRights\", response.status))\nend\n"},"external_var":false},{"html_id":"getMyDescription(**params)-instance-method","name":"getMyDescription","doc":"Use this method to get the current bot description for the given user language. Returns `BotDescription` on success.\n\nParams:\n\n`language_code : Union(String | Nil)`\n\n> A two-letter ISO 639-1 language code or an empty string.\n>","summary":"<p>Use this method to get the current bot description for the given user language.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getMyDescription","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getMyDescription] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:language_code]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:language_code, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"language_code\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:language_code))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getMyDescription\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::BotDescription)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyDescription\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyDescription\", response.status))\nend\n"},"external_var":false},{"html_id":"getMyName(**params)-instance-method","name":"getMyName","doc":"Use this method to get the current bot name for the given user language. Returns `BotName` on success.\n\nParams:\n\n`language_code : Union(String | Nil)`\n\n> A two-letter ISO 639-1 language code or an empty string.\n>","summary":"<p>Use this method to get the current bot name for the given user language.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getMyName","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getMyName] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:language_code]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:language_code, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"language_code\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:language_code))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getMyName\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::BotName)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyName\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyName\", response.status))\nend\n"},"external_var":false},{"html_id":"getMyShortDescription(**params)-instance-method","name":"getMyShortDescription","doc":"Use this method to get the current bot short description for the given user language. Returns `BotShortDescription` on success.\n\nParams:\n\n`language_code : Union(String | Nil)`\n\n> A two-letter ISO 639-1 language code or an empty string.\n>","summary":"<p>Use this method to get the current bot short description for the given user language.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getMyShortDescription","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getMyShortDescription] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:language_code]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:language_code, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"language_code\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:language_code))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getMyShortDescription\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::BotShortDescription)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyShortDescription\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyShortDescription\", response.status))\nend\n"},"external_var":false},{"html_id":"getMyStarBalance(**params)-instance-method","name":"getMyStarBalance","doc":"A method to get the current Telegram Stars balance of the bot. Requires no parameters. On success, returns a `StarAmount` object.","summary":"<p>A method to get the current Telegram Stars balance of the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getMyStarBalance","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getMyStarBalance] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getMyStarBalance\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::StarAmount)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyStarBalance\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getMyStarBalance\", response.status))\nend\n"},"external_var":false},{"html_id":"getStarTransactions(**params)-instance-method","name":"getStarTransactions","doc":"Returns the bot's Telegram Star transactions in chronological order. On success, returns a `StarTransactions` object.\n\nParams:\n\n`offset : Union(Int32 | Nil)`\n\n> Number of transactions to skip in the response.\n>\n\n`limit : Union(Int32 | Nil)`\n\n> The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n>","summary":"<p>Returns the bot's Telegram Star transactions in chronological order.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getStarTransactions","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getStarTransactions] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:offset]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:offset, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"offset\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:offset))\nend\n\nif parameter = params[:limit]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:limit, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"limit\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:limit))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getStarTransactions\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::StarTransactions)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getStarTransactions\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getStarTransactions\", response.status))\nend\n"},"external_var":false},{"html_id":"getStickerSet(**params)-instance-method","name":"getStickerSet","doc":"Use this method to get a sticker set. On success, a `StickerSet` object is returned.\n\nParams:\n\n`name : String`\n\n> Name of the sticker set.\n>","summary":"<p>Use this method to get a sticker set.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getStickerSet","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getStickerSet] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getStickerSet\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::StickerSet)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getStickerSet\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getStickerSet\", response.status))\nend\n"},"external_var":false},{"html_id":"getUpdates(**params)-instance-method","name":"getUpdates","doc":"Use this method to receive incoming updates using long polling. Returns an Array of Update objects.\n\nNOTE: This method will not work if an outgoing webhook is set up.\n\nNOTE: In order to avoid getting duplicate updates, recalculate offset after each server response.\n\nParams:\n\n`offset : Union(Int32 | Nil)`\n\n> Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as `getUpdates` is called with an offset higher than its `update_id`. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will be forgotten.\n>\n\n`limit : Union(Int32 | Nil)`\n\n> Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n>\n\n`timeout : Union(Int32 | Nil)`\n\n> Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.\n>\n\n`allowed_updates : Union(Array(String) | Nil)`\n\n> A JSON-serialized list of the update types you want your bot to receive. For example, specify [\"message\", \"edited_channel_post\", \"callback_query\"] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except `chat_member`, `message_reaction`, and `message_reaction_count` (default). If not specified, the previous setting will be used.\n>\n> Please note that this parameter doesn't affect updates created before the call to getUpdates, so unwanted updates may be received for a short period of time.\n>","summary":"<p>Use this method to receive incoming updates using long polling.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getUpdates","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getUpdates] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:offset]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:offset, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"offset\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:offset))\nend\n\nif parameter = params[:limit]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:limit, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"limit\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:limit))\nend\n\nif parameter = params[:timeout]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:timeout, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"timeout\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:timeout))\nend\n\nif parameter = params[:allowed_updates]?\n  if (typeof(parameter)) <= (Array(String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allowed_updates, Union(Array(String) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allowed_updates\", parameter.to_json, field_headers)\nelsif Nil < (Array(String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allowed_updates))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getUpdates\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Array(Hamilton::Types::Update))\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getUpdates\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getUpdates\", response.status))\nend\n"},"external_var":false},{"html_id":"getUserChatBoosts(**params)-instance-method","name":"getUserChatBoosts","doc":"Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a `UserChatBoosts` object.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the chat or username of the channel (in the format `@channelusername`).\n>\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>","summary":"<p>Use this method to get the list of boosts added to a chat by a user.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getUserChatBoosts","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getUserChatBoosts] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getUserChatBoosts\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::UserChatBoosts)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getUserChatBoosts\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getUserChatBoosts\", response.status))\nend\n"},"external_var":false},{"html_id":"getUserProfilePhotos(**params)-instance-method","name":"getUserProfilePhotos","doc":"Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.\n\nParams:\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>\n\n`offset : Union(Int32 | Nil)`\n\n> Sequential number of the first photo to be returned. By default, all photos are returned.\n>\n\n`limit : Union(Int32 | Nil)`\n\n> Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n>","summary":"<p>Use this method to get a list of profile pictures for a user.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getUserProfilePhotos","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getUserProfilePhotos] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:offset]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:offset, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"offset\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:offset))\nend\n\nif parameter = params[:limit]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:limit, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"limit\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:limit))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getUserProfilePhotos\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::UserProfilePhotos)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getUserProfilePhotos\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getUserProfilePhotos\", response.status))\nend\n"},"external_var":false},{"html_id":"getWebhookInfo(**params)-instance-method","name":"getWebhookInfo","doc":"Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.","summary":"<p>Use this method to get current webhook status.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"getWebhookInfo","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [getWebhookInfo] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"getWebhookInfo\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::WebhookInfo)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getWebhookInfo\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"getWebhookInfo\", response.status))\nend\n"},"external_var":false},{"html_id":"giftPremiumSubscription(**params)-instance-method","name":"giftPremiumSubscription","doc":"Gifts a Telegram Premium subscription to the given user. Returns True on success.\n\nParams:\n\n`user_id : Int32`\n\n> Unique identifier of the target user who will receive a Telegram Premium subscription.\n>\n\n`month_count : Int32`\n\n> Number of months the Telegram Premium subscription will be active for the user; must be one of 3, 6, or 12.\n>\n\n`star_count : Int32`\n\n> Number of Telegram Stars to pay for the Telegram Premium subscription; must be 1000 for 3 months, 1500 for 6 months, and 2500 for 12 months.\n>\n\n`text : Union(String | Nil)`\n\n> Text that will be shown along with the service message about the subscription; 0-128 characters.\n>\n\n`text_parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the text. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom_emoji” are ignored.\n>\n\n`text_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of `text_parse_mode`. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom_emoji” are ignored.\n>","summary":"<p>Gifts a Telegram Premium subscription to the given user.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"giftPremiumSubscription","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [giftPremiumSubscription] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:month_count]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:month_count, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"month_count\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:month_count))\nend\n\nif parameter = params[:star_count]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:star_count, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"star_count\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:star_count))\nend\n\nif parameter = params[:text]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:text, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"text\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:text))\nend\n\nif parameter = params[:text_parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:text_parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"text_parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:text_parse_mode))\nend\n\nif parameter = params[:text_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:text_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"text_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:text_entities))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"giftPremiumSubscription\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"giftPremiumSubscription\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"giftPremiumSubscription\", response.status))\nend\n"},"external_var":false},{"html_id":"hideGeneralForumTopic(**params)-instance-method","name":"hideGeneralForumTopic","doc":"Use this method to hide the \"General\" topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_manage_topics\" administrator rights. The topic will be automatically closed if it was open. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>","summary":"<p>Use this method to hide the &quot;General&quot; topic in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"hideGeneralForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [hideGeneralForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"hideGeneralForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"hideGeneralForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"hideGeneralForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"leaveChat(**params)-instance-method","name":"leaveChat","doc":"Use this method for your bot to leave a group, supergroup or channel. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`). Channel direct messages chats aren't supported; leave the corresponding channel instead.\n>","summary":"<p>Use this method for your bot to leave a group, supergroup or channel.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"leaveChat","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [leaveChat] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"leaveChat\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"leaveChat\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"leaveChat\", response.status))\nend\n"},"external_var":false},{"html_id":"log:Log-instance-method","name":"log","doc":"Logger instance.","summary":"<p>Logger instance.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":24,"url":null},"def":{"name":"log","return_type":"Log","visibility":"Public","body":"@log"},"external_var":false},{"html_id":"log=(log:Log)-instance-method","name":"log=","doc":"Logger instance.","summary":"<p>Logger instance.</p>","abstract":false,"args":[{"name":"log","external_name":"log","restriction":"Log"}],"args_string":"(log : Log)","args_html":"(log : Log)","location":{"filename":"src/api/api.cr","line_number":24,"url":null},"def":{"name":"log=","args":[{"name":"log","external_name":"log","restriction":"Log"}],"visibility":"Public","body":"@log = log"},"external_var":false},{"html_id":"logOut(**params)-instance-method","name":"logOut","doc":"Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.","summary":"<p>Use this method to log out from the cloud Bot API server before launching the bot locally.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"logOut","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [logOut] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"logOut\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"logOut\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"logOut\", response.status))\nend\n"},"external_var":false},{"html_id":"pinChatMessage(**params)-instance-method","name":"pinChatMessage","doc":"Use this method to add a message to the list of pinned messages in a chat. In private chats and channel direct messages chats, all non-service messages can be pinned. Conversely, the bot must be an administrator with the \"can_pin_messages\" right or the \"can_edit_messages\" right to pin messages in groups and channels respectively. Returns True on success.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be pinned.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Int32`\n\n> Identifier of a message to pin.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Pass True if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.\n>","summary":"<p>Use this method to add a message to the list of pinned messages in a chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"pinChatMessage","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [pinChatMessage] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"pinChatMessage\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"pinChatMessage\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"pinChatMessage\", response.status))\nend\n"},"external_var":false},{"html_id":"postStory(**params)-instance-method","name":"postStory","doc":"Posts a story on behalf of a managed business account. Requires the can_manage_stories business bot right. Returns Story on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`content : Hamilton::Types::InputStoryContent`\n\n> Content of the story.\n>\n\n`active_period : Int32`\n\n> Period after which the story is moved to the archive, in seconds; must be one of `6 * 3600`, `12 * 3600`, `86400`, or `2 * 86400`.\n>\n\n`caption : Union(String | Nil)`\n\n> Caption of the story, 0-2048 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the story caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of `parse_mode`.\n>\n\n`areas : Union(Array(Hamilton::Types::StoryArea) | Nil)`\n\n> A JSON-serialized list of clickable areas to be shown on the story.\n>\n\n`post_to_chat_page : Union(Bool | Nil)`\n\n> Pass True to keep the story accessible after it expires.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Pass True if the content of the story must be protected from forwarding and screenshotting.\n>","summary":"<p>Posts a story on behalf of a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"postStory","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [postStory] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:content]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputStoryContentPhoto | Hamilton::Types::InputStoryContentVideo)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:content, Hamilton::Types::InputStoryContent, typeof(parameter)))\n  end\n\n\n  case parameter\n  in Hamilton::Types::InputStoryContentPhoto\n    if typeof(parameter.photo).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.photo.filename, parameter.photo.file, HTTP::FormData::FileMetadata.new(filename: parameter.photo.filename))\n      parameter.photo = \"attach://#{parameter.photo.filename}\"\n    end\n\n    builder.field(\"content\", parameter.to_json, field_headers)\n  in Hamilton::Types::InputStoryContentVideo\n    if typeof(parameter.video).is_a?(Hamilton::Types::InputFile)\n      builder.file(parameter.video.filename, parameter.video.file, HTTP::FormData::FileMetadata.new(filename: parameter.video.filename))\n      parameter.video = \"attach://#{parameter.video.filename}\"\n    end\n\n    builder.field(\"content\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputStoryContentPhoto | Hamilton::Types::InputStoryContentVideo)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:content))\nend\n\nif parameter = params[:active_period]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:active_period, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"active_period\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:active_period))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:areas]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::StoryArea) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:areas, Union(Array(Hamilton::Types::StoryArea) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"areas\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::StoryArea) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:areas))\nend\n\nif parameter = params[:post_to_chat_page]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:post_to_chat_page, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"post_to_chat_page\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:post_to_chat_page))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"postStory\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Story)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"postStory\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"postStory\", response.status))\nend\n"},"external_var":false},{"html_id":"promoteChatMember(**params)-instance-method","name":"promoteChatMember","doc":"Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>\n\n`is_anonymous : Union(Bool | Nil)`\n\n> Pass True if the administrator's presence in the chat is hidden.\n>\n\n`can_manage_chat : Union(Bool | Nil)`\n\n> Pass True if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars. Implied by any other administrator privilege.\n>\n\n`can_delete_messages : Union(Bool | Nil)`\n\n> Pass True if the administrator can delete messages of other users.\n>\n\n`can_manage_video_chats : Union(Bool | Nil)`\n\n> Pass True if the administrator can manage video chats.\n>\n\n`can_restrict_members : Union(Bool | Nil)`\n\n> Pass True if the administrator can restrict, ban or unban chat members, or access supergroup statistics.\n>\n\n`can_promote_members : Union(Bool | Nil)`\n\n> Pass True if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him).\n>\n\n`can_change_info : Union(Bool | Nil)`\n\n> Pass True if the administrator can change chat title, photo and other settings.\n>\n\n`can_invite_users : Union(Bool | Nil)`\n\n> Pass True if the administrator can invite new users to the chat.\n>\n\n`can_post_stories : Union(Bool | Nil)`\n\n> Pass True if the administrator can post stories to the chat.\n>\n\n`can_edit_stories : Union(Bool | Nil)`\n\n> Pass True if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive.\n>\n\n`can_delete_stories : Union(Bool | Nil)`\n\n> Pass True if the administrator can delete stories posted by other users.\n>\n\n`can_post_messages : Union(Bool | Nil)`\n\n> Pass True if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only.\n>\n\n`can_edit_messages : Union(Bool | Nil)`\n\n> Pass True if the administrator can edit messages of other users and can pin messages; for channels only.\n>\n\n`can_pin_messages : Union(Bool | Nil)`\n\n> Pass True if the administrator can pin messages; for supergroups only.\n>\n\n`can_manage_topics : Union(Bool | Nil)`\n\n> Pass True if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only.\n>\n\n`can_manage_direct_messages : Union(Bool | Nil)`\n\n> Pass True if the administrator can manage direct messages within the channel and decline suggested posts; for channels only.\n>","summary":"<p>Use this method to promote or demote a user in a supergroup or a channel.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"promoteChatMember","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [promoteChatMember] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:is_anonymous]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_anonymous, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"is_anonymous\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_anonymous))\nend\n\nif parameter = params[:can_manage_chat]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_manage_chat, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_manage_chat\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_manage_chat))\nend\n\nif parameter = params[:can_delete_messages]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_delete_messages, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_delete_messages\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_delete_messages))\nend\n\nif parameter = params[:can_manage_video_chats]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_manage_video_chats, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_manage_video_chats\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_manage_video_chats))\nend\n\nif parameter = params[:can_restrict_members]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_restrict_members, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_restrict_members\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_restrict_members))\nend\n\nif parameter = params[:can_promote_members]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_promote_members, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_promote_members\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_promote_members))\nend\n\nif parameter = params[:can_change_info]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_change_info, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_change_info\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_change_info))\nend\n\nif parameter = params[:can_invite_users]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_invite_users, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_invite_users\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_invite_users))\nend\n\nif parameter = params[:can_post_stories]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_post_stories, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_post_stories\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_post_stories))\nend\n\nif parameter = params[:can_edit_stories]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_edit_stories, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_edit_stories\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_edit_stories))\nend\n\nif parameter = params[:can_delete_stories]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_delete_stories, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_delete_stories\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_delete_stories))\nend\n\nif parameter = params[:can_post_messages]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_post_messages, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_post_messages\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_post_messages))\nend\n\nif parameter = params[:can_edit_messages]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_edit_messages, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_edit_messages\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_edit_messages))\nend\n\nif parameter = params[:can_pin_messages]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_pin_messages, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_pin_messages\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_pin_messages))\nend\n\nif parameter = params[:can_manage_topics]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_manage_topics, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_manage_topics\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_manage_topics))\nend\n\nif parameter = params[:can_manage_direct_messages]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:can_manage_direct_messages, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"can_manage_direct_messages\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:can_manage_direct_messages))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"promoteChatMember\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"promoteChatMember\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"promoteChatMember\", response.status))\nend\n"},"external_var":false},{"html_id":"readBusinessMessage(**params)-instance-method","name":"readBusinessMessage","doc":"Marks incoming message as read on behalf of a business account. Requires the \"can_read_messages\" business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection on behalf of which to read the message.\n>\n\n`chat_id : Int32`\n\n> Unique identifier of the chat in which the message was received. The chat must have been active in the last 24 hours.\n>\n\n`message_id : Int32`\n\n> Unique identifier of the message to mark as read\n>","summary":"<p>Marks incoming message as read on behalf of a business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"readBusinessMessage","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [readBusinessMessage] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"readBusinessMessage\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"readBusinessMessage\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"readBusinessMessage\", response.status))\nend\n"},"external_var":false},{"html_id":"refundStarPayment(**params)-instance-method","name":"refundStarPayment","doc":"Refunds a successful payment in Telegram Stars. Returns True on success.\n\nParams:\n\n`user_id : Int32`\n\n> Identifier of the user whose payment will be refunded.\n>\n\n`telegram_payment_charge_id : String`\n\n> Telegram payment identifier.\n>","summary":"<p>Refunds a successful payment in Telegram Stars.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"refundStarPayment","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [refundStarPayment] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:telegram_payment_charge_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:telegram_payment_charge_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"telegram_payment_charge_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:telegram_payment_charge_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"refundStarPayment\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"refundStarPayment\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"refundStarPayment\", response.status))\nend\n"},"external_var":false},{"html_id":"removeBusinessAccountProfilePhoto(**params)-instance-method","name":"removeBusinessAccountProfilePhoto","doc":"Removes the current profile photo of a managed business account. Requires the can_edit_profile_photo business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`is_public : Union(Bool | Nil)`\n\n> Pass True to remove the public photo, which is visible even if the main photo is hidden by the business account's privacy settings. After the main photo is removed, the previous profile photo (if present) becomes the main photo.\n>","summary":"<p>Removes the current profile photo of a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"removeBusinessAccountProfilePhoto","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [removeBusinessAccountProfilePhoto] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:is_public]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_public, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"is_public\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_public))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"removeBusinessAccountProfilePhoto\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"removeBusinessAccountProfilePhoto\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"removeBusinessAccountProfilePhoto\", response.status))\nend\n"},"external_var":false},{"html_id":"removeChatVerification(**params)-instance-method","name":"removeChatVerification","doc":"Removes verification from a chat that is currently verified on behalf of the organization represented by the bot. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>","summary":"<p>Removes verification from a chat that is currently verified on behalf of the organization represented by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"removeChatVerification","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [removeChatVerification] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"removeChatVerification\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"removeChatVerification\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"removeChatVerification\", response.status))\nend\n"},"external_var":false},{"html_id":"removeUserVerification(**params)-instance-method","name":"removeUserVerification","doc":"Removes verification from a user who is currently verified on behalf of the organization represented by the bot. Returns True on success.\n\nParams:\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>","summary":"<p>Removes verification from a user who is currently verified on behalf of the organization represented by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"removeUserVerification","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [removeUserVerification] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"removeUserVerification\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"removeUserVerification\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"removeUserVerification\", response.status))\nend\n"},"external_var":false},{"html_id":"reopenForumTopic(**params)-instance-method","name":"reopenForumTopic","doc":"Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_manage_topics\" administrator rights, unless it is the creator of the topic. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>\n\n`message_thread_id : Int32`\n\n> Unique identifier for the target message thread of the forum topic.\n>","summary":"<p>Use this method to reopen a closed topic in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"reopenForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [reopenForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"reopenForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"reopenForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"reopenForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"reopenGeneralForumTopic(**params)-instance-method","name":"reopenGeneralForumTopic","doc":"Use this method to reopen a closed \"General\" topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_manage_topics\" administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>","summary":"<p>Use this method to reopen a closed &quot;General&quot; topic in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"reopenGeneralForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [reopenGeneralForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"reopenGeneralForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"reopenGeneralForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"reopenGeneralForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"replaceStickerInSet(**params)-instance-method","name":"replaceStickerInSet","doc":"Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling `deleteStickerFromSet`, then `addStickerToSet`, then `setStickerPositionInSet`. Returns True on success.\n\nParams:\n\n`user_id : Int32`\n\n> User identifier of the sticker set owner.\n>\n\n`name : String`\n\n> Sticker set name.\n>\n\n`old_sticker : String`\n\n> File identifier of the replaced sticker.\n>\n\n`sticker : Hamilton::Types::InputSticker`\n\n> A JSON-serialized object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set remains unchanged.\n>","summary":"<p>Use this method to replace an existing sticker in a sticker set with a new one.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"replaceStickerInSet","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [replaceStickerInSet] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:old_sticker]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:old_sticker, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"old_sticker\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:old_sticker))\nend\n\nif parameter = params[:sticker]?\n  if (typeof(parameter)) <= Hamilton::Types::InputSticker\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker, Hamilton::Types::InputSticker, typeof(parameter)))\n  end\n\n\n  if typeof(parameter.sticker).is_a?(Hamilton::Types::InputFile)\n    builder.file(parameter.sticker.filename, parameter.sticker.file, HTTP::FormData::FileMetadata.new(filename: parameter.sticker.filename))\n    parameter.sticker = \"attach://#{parameter.sticker.filename}\"\n  end\n  builder.field(\"sticker\", parameter.to_json, field_headers)\nelsif Nil < Hamilton::Types::InputSticker\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"replaceStickerInSet\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"replaceStickerInSet\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"replaceStickerInSet\", response.status))\nend\n"},"external_var":false},{"html_id":"restrictChatMember(**params)-instance-method","name":"restrictChatMember","doc":"Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`).\n>\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>\n\n`permissions : Hamilton::Types::ChatPermissions`\n\n> A JSON-serialized object for new user permissions.\n>\n\n`use_independent_chat_permissions : Union(Bool | Nil)`\n\n> Pass True if chat permissions are set independently. Otherwise, the \"can_send_other_messages\" and \"can_add_web_page_previews\" permissions will imply the \"can_send_messages\", \"can_send_audios\", \"can_send_documents\", \"can_send_photos\", \"can_send_videos\", \"can_send_video_notes\", and \"can_send_voice_notes\" permissions; the \"can_send_polls\" permission will imply the \"can_send_messages\" permission.\n>\n\n`until_date : Union(Int32 | Nil)`\n\n> Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever.\n>","summary":"<p>Use this method to restrict a user in a supergroup.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"restrictChatMember","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [restrictChatMember] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:permissions]?\n  if (typeof(parameter)) <= Hamilton::Types::ChatPermissions\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:permissions, Hamilton::Types::ChatPermissions, typeof(parameter)))\n  end\n\n\n  builder.field(\"permissions\", parameter.to_json, field_headers)\nelsif Nil < Hamilton::Types::ChatPermissions\nelse\n  raise(Hamilton::Errors::MissingParam.new(:permissions))\nend\n\nif parameter = params[:use_independent_chat_permissions]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:use_independent_chat_permissions, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"use_independent_chat_permissions\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:use_independent_chat_permissions))\nend\n\nif parameter = params[:until_date]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:until_date, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"until_date\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:until_date))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"restrictChatMember\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"restrictChatMember\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"restrictChatMember\", response.status))\nend\n"},"external_var":false},{"html_id":"revokeChatInviteLink(**params)-instance-method","name":"revokeChatInviteLink","doc":"Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as `ChatInviteLink` object.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`invite_link : String`\n\n> The invite link to revoke.\n>","summary":"<p>Use this method to revoke an invite link created by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"revokeChatInviteLink","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [revokeChatInviteLink] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:invite_link]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:invite_link, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"invite_link\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:invite_link))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"revokeChatInviteLink\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::ChatInviteLink)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"revokeChatInviteLink\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"revokeChatInviteLink\", response.status))\nend\n"},"external_var":false},{"html_id":"savePreparedInlineMessage(**params)-instance-method","name":"savePreparedInlineMessage","doc":"Stores a message that can be sent by a user of a Mini App. Returns a `PreparedInlineMessage` object.\n\nParams:\n\n`user_id : Int32`\n\n> Unique identifier of the target user that can use the prepared message.\n>\n\n`result : Hamilton::Types::InlineQueryResult`\n\n> A JSON-serialized object describing the message to be sent.\n>\n\n`allow_user_chats : Union(Bool | Nil)`\n\n> Pass True if the message can be sent to private chats with users.\n>\n\n`allow_bot_chats : Union(Bool | Nil)`\n\n> Pass True if the message can be sent to private chats with bots.\n>\n\n`allow_group_chats : Union(Bool | Nil)`\n\n> Pass True if the message can be sent to group and supergroup chats.\n>\n\n`allow_channel_chats : Union(Bool | Nil)`\n\n> Pass True if the message can be sent to channel chats.\n>","summary":"<p>Stores a message that can be sent by a user of a Mini App.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"savePreparedInlineMessage","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [savePreparedInlineMessage] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:result]?\n  if (typeof(parameter)) <= (((((((((((((((((((Hamilton::Types::InlineQueryResultArticle | Hamilton::Types::InlineQueryResultAudio) | Hamilton::Types::InlineQueryResultCachedAudio) | Hamilton::Types::InlineQueryResultCachedDocument) | Hamilton::Types::InlineQueryResultCachedGif) | Hamilton::Types::InlineQueryResultCachedMpeg4Gif) | Hamilton::Types::InlineQueryResultCachedPhoto) | Hamilton::Types::InlineQueryResultCachedSticker) | Hamilton::Types::InlineQueryResultCachedVideo) | Hamilton::Types::InlineQueryResultCachedVoice) | Hamilton::Types::InlineQueryResultContact) | Hamilton::Types::InlineQueryResultDocument) | Hamilton::Types::InlineQueryResultGame) | Hamilton::Types::InlineQueryResultGif) | Hamilton::Types::InlineQueryResultLocation) | Hamilton::Types::InlineQueryResultMpeg4Gif) | Hamilton::Types::InlineQueryResultPhoto) | Hamilton::Types::InlineQueryResultVenue) | Hamilton::Types::InlineQueryResultVideo) | Hamilton::Types::InlineQueryResultVoice)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:result, Hamilton::Types::InlineQueryResult, typeof(parameter)))\n  end\n\n\n  builder.field(\"result\", parameter.to_json, field_headers)\nelsif Nil < (((((((((((((((((((Hamilton::Types::InlineQueryResultArticle | Hamilton::Types::InlineQueryResultAudio) | Hamilton::Types::InlineQueryResultCachedAudio) | Hamilton::Types::InlineQueryResultCachedDocument) | Hamilton::Types::InlineQueryResultCachedGif) | Hamilton::Types::InlineQueryResultCachedMpeg4Gif) | Hamilton::Types::InlineQueryResultCachedPhoto) | Hamilton::Types::InlineQueryResultCachedSticker) | Hamilton::Types::InlineQueryResultCachedVideo) | Hamilton::Types::InlineQueryResultCachedVoice) | Hamilton::Types::InlineQueryResultContact) | Hamilton::Types::InlineQueryResultDocument) | Hamilton::Types::InlineQueryResultGame) | Hamilton::Types::InlineQueryResultGif) | Hamilton::Types::InlineQueryResultLocation) | Hamilton::Types::InlineQueryResultMpeg4Gif) | Hamilton::Types::InlineQueryResultPhoto) | Hamilton::Types::InlineQueryResultVenue) | Hamilton::Types::InlineQueryResultVideo) | Hamilton::Types::InlineQueryResultVoice)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:result))\nend\n\nif parameter = params[:allow_user_chats]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_user_chats, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_user_chats\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_user_chats))\nend\n\nif parameter = params[:allow_bot_chats]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_bot_chats, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_bot_chats\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_bot_chats))\nend\n\nif parameter = params[:allow_group_chats]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_group_chats, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_group_chats\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_group_chats))\nend\n\nif parameter = params[:allow_channel_chats]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_channel_chats, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_channel_chats\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_channel_chats))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"savePreparedInlineMessage\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::PreparedInlineMessage)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"savePreparedInlineMessage\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"savePreparedInlineMessage\", response.status))\nend\n"},"external_var":false},{"html_id":"sendAnimation(**params)-instance-method","name":"sendAnimation","doc":"Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent `Message` is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`animation : Union(Hamilton::Types::InputFile | String)`\n\n> Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data.\n>\n> NOTE: Hamilton sends files for you, just pass an instance of  `Hamilton::Types::InputFile` with file and filename fields.\n>\n\n`duration : Union(Int32 | Nil)`\n\n> Duration of sent animation in seconds.\n>\n\n`width : Union(Int32 | Nil)`\n\n> Animation width.\n>\n\n`height : Union(Int32 | Nil)`\n\n> Animation height.\n>\n\n`thumbnail : Union(Hamilton::Types::InputFile | String | Nil)`\n\n> Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>.\n>\n> NOTE: Hamilton sends files for you, just pass an instance of  `Hamilton::Types::InputFile` with file and filename fields.\n>\n\n`caption : Union(String | Nil)`\n\n> Animation caption (may also be used when resending animation by `file_id), 0-1024 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the animation caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode.\n>\n\n`show_caption_above_media : Union(Bool | Nil)`\n\n> Pass True, if the caption must be shown above the message media.\n>\n\n`has_spoiler : Union(Bool | Nil)`\n\n> Pass True if the animation needs to be covered with a spoiler animation.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendAnimation","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendAnimation] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:animation]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:animation, Union(Hamilton::Types::InputFile | String), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"animation\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"animation\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:animation))\nend\n\nif parameter = params[:duration]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:duration, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"duration\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:duration))\nend\n\nif parameter = params[:width]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:width, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"width\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:width))\nend\n\nif parameter = params[:height]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:height, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"height\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:height))\nend\n\nif parameter = params[:thumbnail]?\n  if (typeof(parameter)) <= ((Hamilton::Types::InputFile | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:thumbnail, Union(Hamilton::Types::InputFile | String | Nil), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"thumbnail\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"thumbnail\", parameter.to_json, field_headers)\n  end\nelsif Nil < ((Hamilton::Types::InputFile | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:thumbnail))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:show_caption_above_media]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:show_caption_above_media, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"show_caption_above_media\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:show_caption_above_media))\nend\n\nif parameter = params[:has_spoiler]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:has_spoiler, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"has_spoiler\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:has_spoiler))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendAnimation\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendAnimation\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendAnimation\", response.status))\nend\n"},"external_var":false},{"html_id":"sendAudio(**params)-instance-method","name":"sendAudio","doc":"Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent `Message` is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n\nFor sending voice messages, use the sendVoice method instead.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`audio : Union(Hamilton::Types::InputFile | String)`\n\n> Audio file to send. Pass a `file_id` as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data.\n>\n\n`caption : Union(String | Nil)`\n\n> Audio caption, 0-1024 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the audio caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of `parse_mode`.\n>\n\n`duration : Union(Int32 | Nil)`\n\n> Duration of the audio in seconds.\n>\n\n`performer : Union(String | Nil)`\n\n> Performer.\n>\n\n`title : Union(String | Nil)`\n\n> Track name.\n>\n\n`thumbnail : Union(Hamilton::Types::InputFile | Nil)`\n\n> Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>.\n>\n> NOTE: Hamilton sends files for you, just pass an instance of  `Hamilton::Types::InputFile` with file and filename fields.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send audio files, if you want Telegram clients to display them in the music player.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendAudio","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendAudio] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:audio]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:audio, Union(Hamilton::Types::InputFile | String), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"audio\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"audio\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:audio))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:duration]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:duration, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"duration\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:duration))\nend\n\nif parameter = params[:performer]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:performer, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"performer\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:performer))\nend\n\nif parameter = params[:title]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:title, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"title\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:title))\nend\n\nif parameter = params[:thumbnail]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:thumbnail, Union(Hamilton::Types::InputFile | Nil), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"thumbnail\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"thumbnail\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:thumbnail))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendAudio\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendAudio\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendAudio\", response.status))\nend\n"},"external_var":false},{"html_id":"sendChatAction(**params)-instance-method","name":"sendChatAction","doc":"Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.\n\nWe only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the action will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername). Channel chats and channel direct messages chats aren't supported.\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread; for supergroups only.\n>\n\n`action : String`\n\n> Type of action to broadcast. Choose one, depending on what the user is about to receive: \"typing\" for text messages, \"upload_photo\" for photos, \"record_video\" or \"upload_video\" for videos, \"record_voice\" or \"upload_voice\" for voice notes, \"upload_document\" for general files, \"choose_sticker\" for stickers, \"find_location\" for location data, \"record_video_note\" or \"upload_video_note\" for video notes.\n>","summary":"<p>Use this method when you need to tell the user that something is happening on the bot's side.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendChatAction","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendChatAction] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:action]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:action, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"action\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:action))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendChatAction\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendChatAction\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendChatAction\", response.status))\nend\n"},"external_var":false},{"html_id":"sendChecklist(**params)-instance-method","name":"sendChecklist","doc":"Use this method to send a checklist on behalf of a connected business account. On success, the sent Message is returned.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Int32`\n\n> Unique identifier for the target chat.\n>\n\n`checklist : Hamilton::Types::InputChecklist`\n\n> A JSON-serialized object for the checklist to send.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> A JSON-serialized object for description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for an inline keyboard.\n>","summary":"<p>Use this method to send a checklist on behalf of a connected business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendChecklist","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendChecklist] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:checklist]?\n  if (typeof(parameter)) <= Hamilton::Types::InputChecklist\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:checklist, Hamilton::Types::InputChecklist, typeof(parameter)))\n  end\n\n\n  builder.field(\"checklist\", parameter.to_json, field_headers)\nelsif Nil < Hamilton::Types::InputChecklist\nelse\n  raise(Hamilton::Errors::MissingParam.new(:checklist))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendChecklist\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendChecklist\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendChecklist\", response.status))\nend\n"},"external_var":false},{"html_id":"sendContact(**params)-instance-method","name":"sendContact","doc":"Use this method to send phone contacts. On success, the sent Message is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`phone_number : String`\n\n> Contact's phone number.\n>\n\n`first_name : String`\n\n> Contact's first name.\n>\n\n`last_name : Union(String | Nil)`\n\n> Contact's last name.\n>\n\n`vcard : Union(String | Nil)`\n\n> Additional data about the contact in the form of a vCard, 0-2048 bytes.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send phone contacts.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendContact","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendContact] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:phone_number]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:phone_number, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"phone_number\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:phone_number))\nend\n\nif parameter = params[:first_name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:first_name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"first_name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:first_name))\nend\n\nif parameter = params[:last_name]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:last_name, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"last_name\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:last_name))\nend\n\nif parameter = params[:vcard]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:vcard, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"vcard\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:vcard))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendContact\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendContact\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendContact\", response.status))\nend\n"},"external_var":false},{"html_id":"sendDice(**params)-instance-method","name":"sendDice","doc":"Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`emoji : Union(String | Nil)`\n\n> Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send an animated emoji that will display a random value.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendDice","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendDice] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:emoji]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:emoji, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"emoji\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:emoji))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendDice\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendDice\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendDice\", response.status))\nend\n"},"external_var":false},{"html_id":"sendDocument(**params)-instance-method","name":"sendDocument","doc":"Use this method to send general files. On success, the sent `Message` is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String | Nil)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`document : Union(Hamilton::Types::InputFile | String)`\n\n> File to send. Pass a `file_id` as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.\n>\n\n`thumbnail : Union(Hamilton::Types::InputFile | Nil)`\n\n> Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>.\n>\n> NOTE: Hamilton sends files for you, just pass an instance of  `Hamilton::Types::InputFile` with file and filename fields.\n>\n\n`caption : Union(String | Nil)`\n\n> Document caption (may also be used when resending documents by `file_id`), 0-1024 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the document caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of `parse_mode`.\n>\n\n`disable_content_type_detection : Union(Bool | Nil)`\n\n> Disables automatic server-side content type detection for files uploaded using multipart/form-data.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Bool`\n\n> Protects the contents of the message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send general files.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendDocument","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendDocument] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= ((Int32 | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < ((Int32 | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:document]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:document, Union(Hamilton::Types::InputFile | String), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"document\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"document\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:document))\nend\n\nif parameter = params[:thumbnail]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:thumbnail, Union(Hamilton::Types::InputFile | Nil), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"thumbnail\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"thumbnail\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:thumbnail))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:disable_content_type_detection]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_content_type_detection, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_content_type_detection\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_content_type_detection))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= Bool\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Bool, typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < Bool\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendDocument\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendDocument\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendDocument\", response.status))\nend\n"},"external_var":false},{"html_id":"sendGame(**params)-instance-method","name":"sendGame","doc":"Use this method to send a game. On success, the sent `Message` is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Int32`\n\n> Unique identifier for the target chat. Games can't be sent to channel direct messages chats and channel chats.\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`game_short_name : String`\n\n> Short name of the game, serves as the unique identifier for the game. Set up your games via `@BotFather`.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game.\n>","summary":"<p>Use this method to send a game.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendGame","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendGame] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:game_short_name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:game_short_name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"game_short_name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:game_short_name))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendGame\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendGame\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendGame\", response.status))\nend\n"},"external_var":false},{"html_id":"sendGift(**params)-instance-method","name":"sendGift","doc":"Sends a gift to the given user or channel chat. The gift can't be converted to Telegram Stars by the receiver. Returns True on success.\n\nParams:\n\n`user_id : Union(Int32 | Nil)`\n\n> Required if `chat_id` is not specified. Unique identifier of the target user who will receive the gift.\n>\n\n`chat_id : Union(Int32 | String | Nil)`\n\n> Required if `user_id` is not specified. Unique identifier for the chat or username of the channel (in the format `@channelusername`) that will receive the gift.\n>\n\n`gift_id : String`\n\n> Identifier of the gift.\n>\n\n`pay_for_upgrade : Union(Bool | Nil)`\n\n> Pass True to pay for the gift upgrade from the bot's balance, thereby making the upgrade free for the receiver.\n>\n\n`text : Union(String | Nil)`\n\n> Text that will be shown along with the gift; 0-128 characters.\n>\n\n`text_parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the text. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom_emoji” are ignored.\n>\n\n`text_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the gift text. It can be specified instead of `text_parse_mode`. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom_emoji” are ignored.\n>","summary":"<p>Sends a gift to the given user or channel chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendGift","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendGift] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= ((Int32 | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < ((Int32 | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:gift_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:gift_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"gift_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:gift_id))\nend\n\nif parameter = params[:pay_for_upgrade]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:pay_for_upgrade, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"pay_for_upgrade\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:pay_for_upgrade))\nend\n\nif parameter = params[:text]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:text, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"text\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:text))\nend\n\nif parameter = params[:text_parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:text_parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"text_parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:text_parse_mode))\nend\n\nif parameter = params[:text_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:text_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"text_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:text_entities))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendGift\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendGift\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendGift\", response.status))\nend\n"},"external_var":false},{"html_id":"sendInvoice(**params)-instance-method","name":"sendInvoice","doc":"Use this method to send invoices. On success, the sent `Message` is returned.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`title : String`\n\n> Product name, 1-32 characters.\n>\n\n`description : String`\n\n> Product description, 1-255 characters.\n>\n\n`payload : String`\n\n> Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.\n>\n\n`provider_token : Union(String | Nil)`\n\n> Payment provider token, obtained via `@BotFather`. Pass an empty string for payments in Telegram Stars.\n>\n\n`currency : String`\n\n> Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars.\n>\n\n`prices : Array(Hamilton::Types::LabeledPrice)`\n\n> Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in Telegram Stars.\n>\n\n`max_tip_amount : Union(Int32 | Nil)`\n\n> The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in Telegram Stars.\n>\n\n`suggested_tip_amounts : Union(Array(Int32) | Nil)`\n\n> A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed `max_tip_amount`.\n>\n\n`start_parameter : Union(String | Nil)`\n\n> Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a URL button with a deep link to the bot (instead of a Pay button), with the value used as the start parameter.\n>\n\n`provider_data : Union(String | Nil)`\n\n> JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.\n>\n\n`photo_url : Union(String | Nil)`\n\n> URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.\n>\n\n`photo_size : Union(Int32 | Nil)`\n\n> Photo size in bytes.\n>\n\n`photo_width : Union(Int32 | Nil)`\n\n> Photo width.\n>\n\n`photo_height : Union(Int32 | Nil)`\n\n> Photo height.\n>\n\n`need_name : Union(Bool | Nil)`\n\n> Pass True if you require the user's full name to complete the order. Ignored for payments in Telegram Stars.\n>\n\n`need_phone_number : Union(Bool | Nil)`\n\n> Pass True if you require the user's phone number to complete the order. Ignored for payments in Telegram Stars.\n>\n\n`need_email : Union(Bool | Nil)`\n\n> Pass True if you require the user's email address to complete the order. Ignored for payments in Telegram Stars.\n>\n\n`need_shipping_address : Union(Bool | Nil)`\n\n> Pass True if you require the user's shipping address to complete the order. Ignored for payments in Telegram Stars.\n>\n\n`send_phone_number_to_provider : Union(Bool | Nil)`\n\n> Pass True if the user's phone number should be sent to the provider. Ignored for payments in Telegram Stars.\n>\n\n`send_email_to_provider : Union(Bool | Nil)`\n\n> Pass True if the user's email address should be sent to the provider. Ignored for payments in Telegram Stars.\n>\n\n`is_flexible : Union(Bool | Nil)`\n\n> Pass True if the final price depends on the shipping method. Ignored for payments in Telegram Stars.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for an inline keyboard. If empty, one \"Pay total price\" button will be shown. If not empty, the first button must be a Pay button.\n>","summary":"<p>Use this method to send invoices.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendInvoice","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendInvoice] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:title]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:title, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"title\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:title))\nend\n\nif parameter = params[:description]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:description, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"description\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:description))\nend\n\nif parameter = params[:payload]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:payload, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"payload\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:payload))\nend\n\nif parameter = params[:provider_token]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:provider_token, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"provider_token\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:provider_token))\nend\n\nif parameter = params[:currency]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:currency, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"currency\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:currency))\nend\n\nif parameter = params[:prices]?\n  if (typeof(parameter)) <= Array(Hamilton::Types::LabeledPrice)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:prices, Array(Hamilton::Types::LabeledPrice), typeof(parameter)))\n  end\n\n\n  builder.field(\"prices\", parameter.to_json, field_headers)\nelsif Nil < Array(Hamilton::Types::LabeledPrice)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:prices))\nend\n\nif parameter = params[:max_tip_amount]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:max_tip_amount, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"max_tip_amount\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:max_tip_amount))\nend\n\nif parameter = params[:suggested_tip_amounts]?\n  if (typeof(parameter)) <= (Array(Int32) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_tip_amounts, Union(Array(Int32) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_tip_amounts\", parameter.to_json, field_headers)\nelsif Nil < (Array(Int32) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_tip_amounts))\nend\n\nif parameter = params[:start_parameter]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:start_parameter, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"start_parameter\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:start_parameter))\nend\n\nif parameter = params[:provider_data]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:provider_data, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"provider_data\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:provider_data))\nend\n\nif parameter = params[:photo_url]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo_url, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"photo_url\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo_url))\nend\n\nif parameter = params[:photo_size]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo_size, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"photo_size\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo_size))\nend\n\nif parameter = params[:photo_width]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo_width, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"photo_width\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo_width))\nend\n\nif parameter = params[:photo_height]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo_height, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"photo_height\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo_height))\nend\n\nif parameter = params[:need_name]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:need_name, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"need_name\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:need_name))\nend\n\nif parameter = params[:need_phone_number]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:need_phone_number, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"need_phone_number\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:need_phone_number))\nend\n\nif parameter = params[:need_email]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:need_email, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"need_email\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:need_email))\nend\n\nif parameter = params[:need_shipping_address]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:need_shipping_address, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"need_shipping_address\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:need_shipping_address))\nend\n\nif parameter = params[:send_phone_number_to_provider]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:send_phone_number_to_provider, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"send_phone_number_to_provider\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:send_phone_number_to_provider))\nend\n\nif parameter = params[:send_email_to_provider]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:send_email_to_provider, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"send_email_to_provider\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:send_email_to_provider))\nend\n\nif parameter = params[:is_flexible]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_flexible, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"is_flexible\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_flexible))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendInvoice\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendInvoice\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendInvoice\", response.status))\nend\n"},"external_var":false},{"html_id":"sendLocation(**params)-instance-method","name":"sendLocation","doc":"Use this method to send point on the map. On success, the sent Message is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`latitude : Float32`\n\n> Latitude of the location.\n>\n\n`longitude : Float32`\n\n> Longitude of the location.\n>\n\n`horizontal_accuracy : Union(Float32 | Nil)`\n\n> The radius of uncertainty for the location, measured in meters; 0-1500.\n>\n\n`live_period : Union(Int32 | Nil)`\n\n> Period in seconds during which the location will be updated (should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.\n>\n\n`heading : Union(Int32 | Nil)`\n\n> For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\n>\n\n`proximity_alert_radius : Union(Int32 | Nil)`\n\n> For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send point on the map.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendLocation","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendLocation] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:latitude]?\n  if (typeof(parameter)) <= Float32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:latitude, Float32, typeof(parameter)))\n  end\n\n\n  builder.field(\"latitude\", parameter.to_json, field_headers)\nelsif Nil < Float32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:latitude))\nend\n\nif parameter = params[:longitude]?\n  if (typeof(parameter)) <= Float32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:longitude, Float32, typeof(parameter)))\n  end\n\n\n  builder.field(\"longitude\", parameter.to_json, field_headers)\nelsif Nil < Float32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:longitude))\nend\n\nif parameter = params[:horizontal_accuracy]?\n  if (typeof(parameter)) <= (Float32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:horizontal_accuracy, Union(Float32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"horizontal_accuracy\", parameter.to_json, field_headers)\nelsif Nil < (Float32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:horizontal_accuracy))\nend\n\nif parameter = params[:live_period]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:live_period, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"live_period\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:live_period))\nend\n\nif parameter = params[:heading]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:heading, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"heading\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:heading))\nend\n\nif parameter = params[:proximity_alert_radius]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:proximity_alert_radius, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"proximity_alert_radius\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:proximity_alert_radius))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendLocation\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendLocation\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendLocation\", response.status))\nend\n"},"external_var":false},{"html_id":"sendMediaGroup(**params)-instance-method","name":"sendMediaGroup","doc":"Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of `Message` objects that were sent is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the messages will be sent; required if the messages are sent to a direct messages chat.\n>\n\n`media : Array(Hamilton::Types::InputMediaAudio | Hamilton::Types::InputMediaDocument | Hamilton::Types::InputMediaPhoto | Hamilton::Types::InputMediaVideo)`\n\n> A JSON-serialized array describing messages to be sent, must include 2-10 items.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends messages silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent messages from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>","summary":"<p>Use this method to send a group of photos, videos, documents or audios as an album.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendMediaGroup","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendMediaGroup] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:media]?\n  if (typeof(parameter)) <= Array(Hamilton::Types::InputMediaAudio | Hamilton::Types::InputMediaDocument | Hamilton::Types::InputMediaPhoto | Hamilton::Types::InputMediaVideo)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:media, Array(Hamilton::Types::InputMediaAudio | Hamilton::Types::InputMediaDocument | Hamilton::Types::InputMediaPhoto | Hamilton::Types::InputMediaVideo), typeof(parameter)))\n  end\n\n\n  parameter.each do |media|\n    case media\n    in Hamilton::Types::InputMediaAudio\n      if typeof(media.media).is_a?(Hamilton::Types::InputFile)\n        builder.file(media.media.filename, media.media.file, HTTP::FormData::FileMetadata.new(filename: media.media.filename))\n        media.media = \"attach://#{media.media.filename}\"\n      end\n\n\n      if typeof(media.thumbnail).is_a?(Hamilton::Types::InputFile)\n        builder.file(media.thumbnail.filename, media.thumbnail.file, HTTP::FormData::FileMetadata.new(filename: media.thumbnail.filename))\n        media.thumbnail = \"attach://#{media.thumbnail.filename}\"\n      end\n    in Hamilton::Types::InputMediaDocument\n      if typeof(media.media).is_a?(Hamilton::Types::InputFile)\n        builder.file(media.media.filename, media.media.file, HTTP::FormData::FileMetadata.new(filename: media.media.filename))\n        media.media = \"attach://#{media.media.filename}\"\n      end\n\n\n      if typeof(media.thumbnail).is_a?(Hamilton::Types::InputFile)\n        builder.file(media.thumbnail.filename, media.thumbnail.file, HTTP::FormData::FileMetadata.new(filename: media.thumbnail.filename))\n        media.thumbnail = \"attach://#{media.thumbnail.filename}\"\n      end\n    in Hamilton::Types::InputMediaPhoto\n      if typeof(media.media).is_a?(Hamilton::Types::InputFile)\n        builder.file(media.media.filename, media.media.file, HTTP::FormData::FileMetadata.new(filename: media.media.filename))\n        media.media = \"attach://#{media.media.filename}\"\n      end\n    in Hamilton::Types::InputMediaVideo\n      if typeof(media.media).is_a?(Hamilton::Types::InputFile)\n        builder.file(media.media.filename, media.media.file, HTTP::FormData::FileMetadata.new(filename: media.media.filename))\n        media.media = \"attach://#{media.media.filename}\"\n      end\n\n\n      if typeof(media.thumbnail).is_a?(Hamilton::Types::InputFile)\n        builder.file(media.thumbnail.filename, media.thumbnail.file, HTTP::FormData::FileMetadata.new(filename: media.thumbnail.filename))\n        media.thumbnail = \"attach://#{media.thumbnail.filename}\"\n      end\n\n\n      if typeof(media.cover).is_a?(Hamilton::Types::InputFile)\n        builder.file(media.cover.filename, media.cover.file, HTTP::FormData::FileMetadata.new(filename: media.cover.filename))\n        media.cover = \"attach://#{media.cover.filename}\"\n      end\n    end\n  end\n  builder.field(\"media\", parameter.to_json, field_headers)\nelsif Nil < Array(Hamilton::Types::InputMediaAudio | Hamilton::Types::InputMediaDocument | Hamilton::Types::InputMediaPhoto | Hamilton::Types::InputMediaVideo)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:media))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendMediaGroup\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Array(Hamilton::Types::Message))\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendMediaGroup\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendMediaGroup\", response.status))\nend\n"},"external_var":false},{"html_id":"sendMessage(**params)-instance-method","name":"sendMessage","doc":"Use this method to send text messages. On success, the sent Message is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent\n>\n\n`chat_id : Union(String | Int64)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`text : String`\n\n> Text of the message to be sent, 1-4096 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the message text.\n>\n\n`entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in message text, which can be specified instead of `parse_mode`.\n>\n\n`link_preview_options : Union(Hamilton::Types::LinkPreviewOptions | Nil)`\n\n> Link preview generation options for the message.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send text messages.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendMessage","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendMessage] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int64 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(String | Int64), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int64 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:text]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:text, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"text\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:text))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:entities))\nend\n\nif parameter = params[:link_preview_options]?\n  if (typeof(parameter)) <= (Hamilton::Types::LinkPreviewOptions | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:link_preview_options, Union(Hamilton::Types::LinkPreviewOptions | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"link_preview_options\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::LinkPreviewOptions | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:link_preview_options))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendMessage\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendMessage\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendMessage\", response.status))\nend\n"},"external_var":false},{"html_id":"sendPaidMedia(**params)-instance-method","name":"sendPaidMedia","doc":"Use this method to send paid media. On success, the sent `Message` is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`). If the chat is a channel, all Telegram Star proceeds from this media will be credited to the chat's balance. Otherwise, they will be credited to the bot's balance.\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`star_count : Int32`\n\n> The number of Telegram Stars that must be paid to buy access to the media; 1-10000\n>\n\n`media : Array(Hamilton::Types::InputPaidMedia)`\n\n> A JSON-serialized array describing the media to be sent; up to 10 items.\n>\n\n`payload : Union(String | Nil)`\n\n> Bot-defined paid media payload, 0-128 bytes. This will not be displayed to the user, use it for your internal processes.\n>\n\n`caption : Union(String | Nil)`\n\n> Media caption, 0-1024 characters after entities parsing\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the media caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of `parse_mode`.\n>\n\n`show_caption_above_media : Union(Bool | Nil)`\n\n> Pass True, if the caption must be shown above the message media.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send paid media.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendPaidMedia","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendPaidMedia] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:star_count]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:star_count, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"star_count\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:star_count))\nend\n\nif parameter = params[:media]?\n  if (typeof(parameter)) <= Array(Hamilton::Types::InputPaidMediaPhoto | Hamilton::Types::InputPaidMediaVideo)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:media, Array(Hamilton::Types::InputPaidMedia), typeof(parameter)))\n  end\n\n\n  parameter.each do |paid_media|\n    case paid_media\n    in Hamilton::Types::InputPaidMediaPhoto\n      if typeof(paid_media.media).is_a?(Hamilton::Types::InputFile)\n        builder.file(paid_media.media.filename, paid_media.media.file, HTTP::FormData::FileMetadata.new(filename: paid_media.media.filename))\n        paid_media.media = \"attach://#{paid_media.media.filename}\"\n      end\n    in Hamilton::Types::InputPaidMediaVideo\n      if typeof(paid_media.media).is_a?(Hamilton::Types::InputFile)\n        builder.file(paid_media.media.filename, paid_media.media.file, HTTP::FormData::FileMetadata.new(filename: paid_media.media.filename))\n        paid_media.media = \"attach://#{paid_media.media.filename}\"\n      end\n\n\n      if typeof(paid_media.thumbnail).is_a?(Hamilton::Types::InputFile)\n        builder.file(paid_media.thumbnail.filename, paid_media.thumbnail.file, HTTP::FormData::FileMetadata.new(filename: paid_media.thumbnail.filename))\n        paid_media.thumbnail = \"attach://#{paid_media.thumbnail.filename}\"\n      end\n\n\n      if typeof(paid_media.cover).is_a?(Hamilton::Types::InputFile)\n        builder.file(paid_media.cover.filename, paid_media.cover.file, HTTP::FormData::FileMetadata.new(filename: paid_media.cover.filename))\n        paid_media.cover = \"attach://#{paid_media.cover.filename}\"\n      end\n    end\n  end\n  builder.field(\"media\", parameter.to_json, field_headers)\nelsif Nil < Array(Hamilton::Types::InputPaidMediaPhoto | Hamilton::Types::InputPaidMediaVideo)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:media))\nend\n\nif parameter = params[:payload]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:payload, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"payload\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:payload))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:show_caption_above_media]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:show_caption_above_media, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"show_caption_above_media\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:show_caption_above_media))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendPaidMedia\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendPaidMedia\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendPaidMedia\", response.status))\nend\n"},"external_var":false},{"html_id":"sendPhoto(**params)-instance-method","name":"sendPhoto","doc":"Use this method to send photos. On success, the sent Message is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`photo : Union(Hamilton::Types::InputFile | String)`\n\n> Photo to send. Pass a `file_id` as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20.\n>\n\n`caption : Union(String | Nil)`\n\n> Photo caption (may also be used when resending photos by `file_id`), 0-1024 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the photo caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of `parse_mode`.\n>\n\n`show_caption_above_media : Union(Bool | Nil)`\n\n> Pass True, if the caption must be shown above the message media.\n>\n\n`has_spoiler : Union(Bool | Nil)`\n\n> Pass True if the photo needs to be covered with a spoiler animation.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send photos.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendPhoto","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendPhoto] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:photo]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo, Union(Hamilton::Types::InputFile | String), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"photo\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"photo\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:show_caption_above_media]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:show_caption_above_media, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"show_caption_above_media\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:show_caption_above_media))\nend\n\nif parameter = params[:has_spoiler]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:has_spoiler, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"has_spoiler\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:has_spoiler))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendPhoto\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendPhoto\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendPhoto\", response.status))\nend\n"},"external_var":false},{"html_id":"sendPoll(**params)-instance-method","name":"sendPoll","doc":"Use this method to send a native poll. On success, the sent Message is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`). Polls can't be sent to channel direct messages chats.\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`question : String`\n\n> Poll question, 1-300 characters.\n>\n\n`question_parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the question. Currently, only custom emoji entities are allowed.\n>\n\n`question_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the poll question. It can be specified instead of `question_parse_mode`.\n>\n\n`options : Array(Hamilton::Types::InputPollOption)`\n\n> A JSON-serialized list of 2-12 answer options.\n>\n\n`is_anonymous : Union(Bool | Nil)`\n\n> True, if the poll needs to be anonymous, defaults to True.\n>\n\n`type : Union(String | Nil)`\n\n> Poll type, “quiz” or “regular”, defaults to “regular”.\n>\n\n`allows_multiple_answers : Union(Bool | Nil)`\n\n> True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False.\n>\n\n`correct_option_id : Union(Int32 | Nil)`\n\n> 0-based identifier of the correct answer option, required for polls in quiz mode.\n>\n\n`explanation : Union(String | Nil)`\n\n> Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing.\n>\n\n`explanation_parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the explanation.\n>\n\n`explanation_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the poll explanation. It can be specified instead of `explanation_parse_mode`.\n>\n\n`open_period : Union(Int32 | Nil)`\n\n> Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with `close_date`.\n>\n\n`close_date : Union(Int32 | Nil)`\n\n> Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with `open_period`.\n>\n\n`is_closed : Union(Bool | Nil)`\n\n> Pass True if the poll needs to be immediately closed. This can be useful for poll preview.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(Int32 | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send a native poll.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendPoll","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendPoll] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:question]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:question, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"question\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:question))\nend\n\nif parameter = params[:question_parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:question_parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"question_parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:question_parse_mode))\nend\n\nif parameter = params[:question_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:question_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"question_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:question_entities))\nend\n\nif parameter = params[:options]?\n  if (typeof(parameter)) <= Array(Hamilton::Types::InputPollOption)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:options, Array(Hamilton::Types::InputPollOption), typeof(parameter)))\n  end\n\n\n  builder.field(\"options\", parameter.to_json, field_headers)\nelsif Nil < Array(Hamilton::Types::InputPollOption)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:options))\nend\n\nif parameter = params[:is_anonymous]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_anonymous, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"is_anonymous\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_anonymous))\nend\n\nif parameter = params[:type]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:type, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"type\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:type))\nend\n\nif parameter = params[:allows_multiple_answers]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allows_multiple_answers, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allows_multiple_answers\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allows_multiple_answers))\nend\n\nif parameter = params[:correct_option_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:correct_option_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"correct_option_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:correct_option_id))\nend\n\nif parameter = params[:explanation]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:explanation, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"explanation\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:explanation))\nend\n\nif parameter = params[:explanation_parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:explanation_parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"explanation_parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:explanation_parse_mode))\nend\n\nif parameter = params[:explanation_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:explanation_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"explanation_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:explanation_entities))\nend\n\nif parameter = params[:open_period]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:open_period, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"open_period\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:open_period))\nend\n\nif parameter = params[:close_date]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:close_date, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"close_date\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:close_date))\nend\n\nif parameter = params[:is_closed]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_closed, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"is_closed\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_closed))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendPoll\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendPoll\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendPoll\", response.status))\nend\n"},"external_var":false},{"html_id":"sendSticker(**params)-instance-method","name":"sendSticker","doc":"Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent `Message` is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`sticker : Union(Hamilton::Types::InputFile | String)`\n\n> Sticker to send. Pass a `file_id` as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP, .TGS, or .WEBM sticker using multipart/form-data. Video and animated stickers can't be sent via an HTTP URL.\n>\n\n`emoji : Union(String | Nil)`\n\n> Emoji associated with the sticker; only for just uploaded stickers.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendSticker","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendSticker] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:sticker]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker, Union(Hamilton::Types::InputFile | String), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"sticker\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"sticker\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker))\nend\n\nif parameter = params[:emoji]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:emoji, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"emoji\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:emoji))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendSticker\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendSticker\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendSticker\", response.status))\nend\n"},"external_var":false},{"html_id":"sendVenue(**params)-instance-method","name":"sendVenue","doc":"Use this method to send information about a venue. On success, the sent `Message` is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`latitude : Float32`\n\n> Latitude of the venue.\n>\n\n`longitude : Float32`\n\n> Longitude of the venue.\n>\n\n`title : String`\n\n> Name of the venue.\n>\n\n`address : String`\n\n> Address of the venue.\n>\n\n`foursquare_id : Union(String | Nil)`\n\n> Foursquare identifier of the venue.\n>\n\n`foursquare_type : Union(String | Nil)`\n\n> Foursquare type of the venue, if known.\n>\n\n`google_place_id : Union(String | Nil)`\n\n> Google Places identifier of the venue.\n>\n\n`google_place_type : Union(String | Nil)`\n\n> Google Places type of the venue.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send information about a venue.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendVenue","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendVenue] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:latitude]?\n  if (typeof(parameter)) <= Float32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:latitude, Float32, typeof(parameter)))\n  end\n\n\n  builder.field(\"latitude\", parameter.to_json, field_headers)\nelsif Nil < Float32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:latitude))\nend\n\nif parameter = params[:longitude]?\n  if (typeof(parameter)) <= Float32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:longitude, Float32, typeof(parameter)))\n  end\n\n\n  builder.field(\"longitude\", parameter.to_json, field_headers)\nelsif Nil < Float32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:longitude))\nend\n\nif parameter = params[:title]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:title, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"title\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:title))\nend\n\nif parameter = params[:address]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:address, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"address\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:address))\nend\n\nif parameter = params[:foursquare_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:foursquare_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"foursquare_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:foursquare_id))\nend\n\nif parameter = params[:foursquare_type]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:foursquare_type, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"foursquare_type\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:foursquare_type))\nend\n\nif parameter = params[:google_place_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:google_place_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"google_place_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:google_place_id))\nend\n\nif parameter = params[:google_place_type]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:google_place_type, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"google_place_type\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:google_place_type))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendVenue\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendVenue\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendVenue\", response.status))\nend\n"},"external_var":false},{"html_id":"sendVideo(**params)-instance-method","name":"sendVideo","doc":"Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as `Document`). On success, the sent `Message` is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`video : Union(Hamilton::Types::InputFile | String)`\n\n> Video to send. Pass a `file_id` as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data.\n>\n\n`duration : Union(Int32 | Nil)`\n\n> Duration of sent video in seconds.\n>\n\n`width : Union(Int32 | Nil)`\n\n> Video width.\n>\n\n`height : Union(Int32 | Nil)`\n\n> Video height.\n>\n\n`thumbnail : Union(Hamilton::Types::InputFile | Nil)`\n\n> Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>.\n>\n> NOTE: Hamilton sends files for you, just pass an instance of  `Hamilton::Types::InputFile` with file and filename fields.\n>\n\n`cover : Union(Hamilton::Types::InputFile | String | Nil)`\n\n> Cover for the video in the message. Pass a `file_id` to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name.\n>\n> NOTE: Hamilton sends files for you, just pass an instance of  `Hamilton::Types::InputFile` with file and filename fields.\n>\n\n`start_timestamp : Union(Int32 | Nil)`\n\n> Start timestamp for the video in the message.\n>\n\n`caption : Union(String | Nil)`\n\n> Video caption (may also be used when resending videos by `file_id`), 0-1024 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the video caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of `parse_mode`.\n>\n\n`show_caption_above_media : Union(Bool | Nil)`\n\n> Pass True, if the caption must be shown above the message media.\n>\n\n`has_spoiler : Union(Bool | Nil)`\n\n> Pass True, if the video needs to be covered with a spoiler animation.\n>\n\n`supports_streaming : Union(Bool | Nil)`\n\n> Pass True if the uploaded video is suitable for streaming.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as <code>Document</code>).</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendVideo","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendVideo] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:video]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:video, Union(Hamilton::Types::InputFile | String), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"video\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"video\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:video))\nend\n\nif parameter = params[:duration]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:duration, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"duration\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:duration))\nend\n\nif parameter = params[:width]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:width, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"width\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:width))\nend\n\nif parameter = params[:height]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:height, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"height\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:height))\nend\n\nif parameter = params[:thumbnail]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:thumbnail, Union(Hamilton::Types::InputFile | Nil), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"thumbnail\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"thumbnail\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:thumbnail))\nend\n\nif parameter = params[:cover]?\n  if (typeof(parameter)) <= ((Hamilton::Types::InputFile | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:cover, Union(Hamilton::Types::InputFile | String | Nil), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"cover\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"cover\", parameter.to_json, field_headers)\n  end\nelsif Nil < ((Hamilton::Types::InputFile | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:cover))\nend\n\nif parameter = params[:start_timestamp]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:start_timestamp, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"start_timestamp\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:start_timestamp))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:show_caption_above_media]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:show_caption_above_media, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"show_caption_above_media\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:show_caption_above_media))\nend\n\nif parameter = params[:has_spoiler]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:has_spoiler, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"has_spoiler\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:has_spoiler))\nend\n\nif parameter = params[:supports_streaming]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:supports_streaming, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"supports_streaming\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:supports_streaming))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendVideo\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendVideo\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendVideo\", response.status))\nend\n"},"external_var":false},{"html_id":"sendVideoNote(**params)-instance-method","name":"sendVideoNote","doc":"As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent `Message` is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`video_note : Union(Hamilton::Types::InputFile | String)`\n\n> Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More information on Sending Files ». Sending video notes by a URL is currently unsupported.\n>\n> NOTE: Hamilton sends files for you, just pass an instance of  `Hamilton::Types::InputFile` with file and filename fields.\n>\n\n`duration : Union(Int32 | Nil)`\n\n> Duration of sent video in seconds.\n>\n\n`length : Union(Int32 | Nil)`\n\n> Video width and height, i.e. diameter of the video message.\n>\n\n`thumbnail : Union(Hamilton::Types::InputFile | String | Nil)`\n\n> Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>.\n>\n> NOTE: Hamilton sends files for you, just pass an instance of  `Hamilton::Types::InputFile` with file and filename fields.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendVideoNote","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendVideoNote] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:video_note]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:video_note, Union(Hamilton::Types::InputFile | String), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"video_note\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"video_note\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:video_note))\nend\n\nif parameter = params[:duration]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:duration, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"duration\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:duration))\nend\n\nif parameter = params[:length]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:length, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"length\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:length))\nend\n\nif parameter = params[:thumbnail]?\n  if (typeof(parameter)) <= ((Hamilton::Types::InputFile | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:thumbnail, Union(Hamilton::Types::InputFile | String | Nil), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"thumbnail\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"thumbnail\", parameter.to_json, field_headers)\n  end\nelsif Nil < ((Hamilton::Types::InputFile | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:thumbnail))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendVideoNote\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendVideoNote\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendVideoNote\", response.status))\nend\n"},"external_var":false},{"html_id":"sendVoice(**params)-instance-method","name":"sendVoice","doc":"Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as `Audio` or `Document`). On success, the sent `Message` is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_thread_id : Union(Int32 | Nil)`\n\n> Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.\n>\n\n`direct_messages_topic_id : Union(Int32 | Nil)`\n\n> Identifier of the direct messages topic to which the message will be sent; required if the message is sent to a direct messages chat.\n>\n\n`voice : Union(Hamilton::Types::InputFile | String)`\n\n> Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.\n>\n> NOTE: Hamilton sends files for you, just pass an instance of  `Hamilton::Types::InputFile` with file and filename fields.\n>\n\n`caption : Union(String | Nil)`\n\n> Voice message caption, 0-1024 characters after entities parsing.\n>\n\n`parse_mode : Union(String | Nil)`\n\n> Mode for parsing entities in the voice message caption.\n>\n\n`caption_entities : Union(Array(Hamilton::Types::MessageEntity) | Nil)`\n\n> A JSON-serialized list of special entities that appear in the caption, which can be specified instead of `parse_mode`.\n>\n\n`duration : Union(Int32 | Nil)`\n\n> Duration of the voice message in seconds.\n>\n\n`disable_notification : Union(Bool | Nil)`\n\n> Sends the message silently. Users will receive a notification with no sound.\n>\n\n`protect_content : Union(Bool | Nil)`\n\n> Protects the contents of the sent message from forwarding and saving.\n>\n\n`allow_paid_broadcast : Union(Bool | Nil)`\n\n> Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance.\n>\n\n`message_effect_id : Union(String | Nil)`\n\n> Unique identifier of the message effect to be added to the message; for private chats only.\n>\n\n`suggested_post_parameters : Union(Hamilton::Types::SuggestedPostParameters | Nil)`\n\n> A JSON-serialized object containing the parameters of the suggested post to send; for direct messages chats only. If the message is sent as a reply to another suggested post, then that suggested post is automatically declined.\n>\n\n`reply_parameters : Union(Hamilton::Types::ReplyParameters | Nil)`\n\n> Description of the message to reply to.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil)`\n\n> Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user.\n>","summary":"<p>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"sendVoice","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [sendVoice] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nif parameter = params[:direct_messages_topic_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:direct_messages_topic_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"direct_messages_topic_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:direct_messages_topic_id))\nend\n\nif parameter = params[:voice]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:voice, Union(Hamilton::Types::InputFile | String), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"voice\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"voice\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:voice))\nend\n\nif parameter = params[:caption]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption))\nend\n\nif parameter = params[:parse_mode]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:parse_mode, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"parse_mode\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:parse_mode))\nend\n\nif parameter = params[:caption_entities]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::MessageEntity) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:caption_entities, Union(Array(Hamilton::Types::MessageEntity) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"caption_entities\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::MessageEntity) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:caption_entities))\nend\n\nif parameter = params[:duration]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:duration, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"duration\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:duration))\nend\n\nif parameter = params[:disable_notification]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_notification, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_notification\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_notification))\nend\n\nif parameter = params[:protect_content]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:protect_content, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"protect_content\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:protect_content))\nend\n\nif parameter = params[:allow_paid_broadcast]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allow_paid_broadcast, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allow_paid_broadcast\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allow_paid_broadcast))\nend\n\nif parameter = params[:message_effect_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_effect_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_effect_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_effect_id))\nend\n\nif parameter = params[:suggested_post_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::SuggestedPostParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:suggested_post_parameters, Union(Hamilton::Types::SuggestedPostParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"suggested_post_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::SuggestedPostParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:suggested_post_parameters))\nend\n\nif parameter = params[:reply_parameters]?\n  if (typeof(parameter)) <= (Hamilton::Types::ReplyParameters | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_parameters, Union(Hamilton::Types::ReplyParameters | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_parameters\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ReplyParameters | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_parameters))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Hamilton::Types::ReplyKeyboardMarkup | Hamilton::Types::ReplyKeyboardRemove | Hamilton::Types::ForceReply | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < ((((Hamilton::Types::ForceReply | Hamilton::Types::InlineKeyboardMarkup) | Hamilton::Types::ReplyKeyboardMarkup) | Hamilton::Types::ReplyKeyboardRemove) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"sendVoice\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendVoice\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"sendVoice\", response.status))\nend\n"},"external_var":false},{"html_id":"setBusinessAccountBio(**params)-instance-method","name":"setBusinessAccountBio","doc":"Changes the bio of a managed business account. Requires the can_change_bio business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection on behalf of which to change the bio.\n>\n\n`bio : Union(String | Nil)`\n\n> The new value of the bio for the business account; 0-140 characters.\n>","summary":"<p>Changes the bio of a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setBusinessAccountBio","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setBusinessAccountBio] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:bio]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:bio, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"bio\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:bio))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setBusinessAccountBio\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountBio\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountBio\", response.status))\nend\n"},"external_var":false},{"html_id":"setBusinessAccountGiftSettings(**params)-instance-method","name":"setBusinessAccountGiftSettings","doc":"Changes the privacy settings pertaining to incoming gifts in a managed business account. Requires the \"can_change_gift_settings\" business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`show_gift_button : Bool`\n\n> Pass True, if a button for sending a gift to the user or by the business account must always be shown in the input field.\n>\n\n`accepted_gift_types : Hamilton::Types::AcceptedGiftTypes`\n\n> Types of gifts accepted by the business account.\n>","summary":"<p>Changes the privacy settings pertaining to incoming gifts in a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setBusinessAccountGiftSettings","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setBusinessAccountGiftSettings] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:show_gift_button]?\n  if (typeof(parameter)) <= Bool\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:show_gift_button, Bool, typeof(parameter)))\n  end\n\n\n  builder.field(\"show_gift_button\", parameter.to_json, field_headers)\nelsif Nil < Bool\nelse\n  raise(Hamilton::Errors::MissingParam.new(:show_gift_button))\nend\n\nif parameter = params[:accepted_gift_types]?\n  if (typeof(parameter)) <= Hamilton::Types::AcceptedGiftTypes\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:accepted_gift_types, Hamilton::Types::AcceptedGiftTypes, typeof(parameter)))\n  end\n\n\n  builder.field(\"accepted_gift_types\", parameter.to_json, field_headers)\nelsif Nil < Hamilton::Types::AcceptedGiftTypes\nelse\n  raise(Hamilton::Errors::MissingParam.new(:accepted_gift_types))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setBusinessAccountGiftSettings\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountGiftSettings\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountGiftSettings\", response.status))\nend\n"},"external_var":false},{"html_id":"setBusinessAccountName(**params)-instance-method","name":"setBusinessAccountName","doc":"Changes the first and last name of a managed business account. Requires the can_change_name business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection on behalf of which to change the name.\n>\n\n`first_name : String`\n\n> The new value of the first name for the business account; 1-64 characters.\n>\n\n`last_name : Union(String | Nil)`\n\n> The new value of the last name for the business account; 0-64 characters.\n>","summary":"<p>Changes the first and last name of a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setBusinessAccountName","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setBusinessAccountName] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:first_name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:first_name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"first_name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:first_name))\nend\n\nif parameter = params[:last_name]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:last_name, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"last_name\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:last_name))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setBusinessAccountName\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountName\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountName\", response.status))\nend\n"},"external_var":false},{"html_id":"setBusinessAccountProfilePhoto(**params)-instance-method","name":"setBusinessAccountProfilePhoto","doc":"Changes the profile photo of a managed business account. Requires the \"can_edit_profile_photo\" business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`photo : Hamilton::Types::InputProfilePhoto`\n\n> The new profile photo to set\n>\n\n`is_public : Union(Bool | Nil)`\n\n> Pass True to set the public photo, which will be visible even if the main photo is hidden by the business account's privacy settings. An account can have only one public photo.\n>","summary":"<p>Changes the profile photo of a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setBusinessAccountProfilePhoto","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setBusinessAccountProfilePhoto] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:photo]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputProfilePhotoAnimated | Hamilton::Types::InputProfilePhotoStatic)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo, Hamilton::Types::InputProfilePhoto, typeof(parameter)))\n  end\n\n\n  builder.field(\"photo\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InputProfilePhotoAnimated | Hamilton::Types::InputProfilePhotoStatic)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo))\nend\n\nif parameter = params[:is_public]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_public, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"is_public\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_public))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setBusinessAccountProfilePhoto\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountProfilePhoto\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountProfilePhoto\", response.status))\nend\n"},"external_var":false},{"html_id":"setBusinessAccountUsername(**params)-instance-method","name":"setBusinessAccountUsername","doc":"Changes the username of a managed business account. Requires the can_change_username business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection on behalf of which to change the username.\n>\n\n`username : Union(String | Nil)`\n\n> The new value of the username for the business account; 0-32 characters.\n>","summary":"<p>Changes the username of a managed business account.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setBusinessAccountUsername","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setBusinessAccountUsername] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:username]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:username, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"username\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:username))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setBusinessAccountUsername\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountUsername\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setBusinessAccountUsername\", response.status))\nend\n"},"external_var":false},{"html_id":"setChatAdministratorCustomTitle(**params)-instance-method","name":"setChatAdministratorCustomTitle","doc":"Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`).\n>\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>\n\n`custom_title : String`\n\n> New custom title for the administrator; 0-16 characters, emoji are not allowed.\n>","summary":"<p>Use this method to set a custom title for an administrator in a supergroup promoted by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setChatAdministratorCustomTitle","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setChatAdministratorCustomTitle] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:custom_title]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:custom_title, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"custom_title\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:custom_title))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setChatAdministratorCustomTitle\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatAdministratorCustomTitle\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatAdministratorCustomTitle\", response.status))\nend\n"},"external_var":false},{"html_id":"setChatDescription(**params)-instance-method","name":"setChatDescription","doc":"Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`description : String`\n\n> New chat description, 0-255 characters.\n>","summary":"<p>Use this method to change the description of a group, a supergroup or a channel.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setChatDescription","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setChatDescription] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:description]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:description, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"description\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:description))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setChatDescription\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatDescription\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatDescription\", response.status))\nend\n"},"external_var":false},{"html_id":"setChatMenuButton(**params)-instance-method","name":"setChatMenuButton","doc":"Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success.\n\nParams:\n\n`chat_id : Int32`\n\n> Unique identifier for the target private chat. If not specified, default bot's menu button will be changed.\n>\n\n`menu_button : Union(Hamilton::Types::MenuButton | Nil)`\n\n> A JSON-serialized object for the bot's new menu button. Defaults to `MenuButtonDefault`.\n>","summary":"<p>Use this method to change the bot's menu button in a private chat, or the default menu button.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setChatMenuButton","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setChatMenuButton] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:menu_button]?\n  if (typeof(parameter)) <= (((Hamilton::Types::MenuButtonCommands | Hamilton::Types::MenuButtonDefault) | Hamilton::Types::MenuButtonWebApp) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:menu_button, Union(Hamilton::Types::MenuButton | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"menu_button\", parameter.to_json, field_headers)\nelsif Nil < (((Hamilton::Types::MenuButtonCommands | Hamilton::Types::MenuButtonDefault) | Hamilton::Types::MenuButtonWebApp) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:menu_button))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setChatMenuButton\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatMenuButton\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatMenuButton\", response.status))\nend\n"},"external_var":false},{"html_id":"setChatPermissions(**params)-instance-method","name":"setChatPermissions","doc":"Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the `can_restrict_members` administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`).\n>\n\n`permissions : Hamilton::Types::ChatPermissions`\n\n> A JSON-serialized object for new default chat permissions.\n>\n\n`use_independent_chat_permissions : Union(Bool | Nil)`\n\n> Pass True if chat permissions are set independently. Otherwise, the \"can_send_other_messages\" and \"can_add_web_page_previews\" permissions will imply the \"can_send_messages\", \"can_send_audios\", \"can_send_documents\", \"can_send_photos\", \"can_send_videos\", \"can_send_video_notes\", and \"can_send_voice_notes\" permissions; the \"can_send_polls\" permission will imply the \"can_send_messages\" permission.\n>","summary":"<p>Use this method to set default chat permissions for all members.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setChatPermissions","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setChatPermissions] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:permissions]?\n  if (typeof(parameter)) <= Hamilton::Types::ChatPermissions\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:permissions, Hamilton::Types::ChatPermissions, typeof(parameter)))\n  end\n\n\n  builder.field(\"permissions\", parameter.to_json, field_headers)\nelsif Nil < Hamilton::Types::ChatPermissions\nelse\n  raise(Hamilton::Errors::MissingParam.new(:permissions))\nend\n\nif parameter = params[:use_independent_chat_permissions]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:use_independent_chat_permissions, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"use_independent_chat_permissions\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:use_independent_chat_permissions))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setChatPermissions\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatPermissions\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatPermissions\", response.status))\nend\n"},"external_var":false},{"html_id":"setChatPhoto(**params)-instance-method","name":"setChatPhoto","doc":"Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`photo : Hamilton::Types::InputFile`\n\n> New chat photo, uploaded using multipart/form-data.\n>","summary":"<p>Use this method to set a new profile photo for the chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setChatPhoto","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setChatPhoto] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:photo]?\n  if (typeof(parameter)) <= Hamilton::Types::InputFile\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:photo, Hamilton::Types::InputFile, typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"photo\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"photo\", parameter.to_json, field_headers)\n  end\nelsif Nil < Hamilton::Types::InputFile\nelse\n  raise(Hamilton::Errors::MissingParam.new(:photo))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setChatPhoto\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatPhoto\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatPhoto\", response.status))\nend\n"},"external_var":false},{"html_id":"setChatStickerSet(**params)-instance-method","name":"setChatStickerSet","doc":"Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field \"can_set_sticker_set\" optionally returned in `getChat` requests to check if the bot can use this method. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`).\n>\n\n`sticker_set_name : String`\n\n> Name of the sticker set to be set as the group sticker set.\n>","summary":"<p>Use this method to set a new group sticker set for a supergroup.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setChatStickerSet","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setChatStickerSet] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:sticker_set_name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker_set_name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"sticker_set_name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker_set_name))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setChatStickerSet\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatStickerSet\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatStickerSet\", response.status))\nend\n"},"external_var":false},{"html_id":"setChatTitle(**params)-instance-method","name":"setChatTitle","doc":"Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`title : String`\n\n> New chat title, 1-128 characters.\n>","summary":"<p>Use this method to change the title of a chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setChatTitle","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setChatTitle] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:title]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:title, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"title\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:title))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setChatTitle\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatTitle\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setChatTitle\", response.status))\nend\n"},"external_var":false},{"html_id":"setCustomEmojiStickerSetThumbnail(**params)-instance-method","name":"setCustomEmojiStickerSetThumbnail","doc":"Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success.\n\nParams:\n\n`name : String`\n\n> Sticker set name.\n>\n\n`custom_emoji_id : Union(String | Nil)`\n\n> Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.\n>","summary":"<p>Use this method to set the thumbnail of a custom emoji sticker set.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setCustomEmojiStickerSetThumbnail","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setCustomEmojiStickerSetThumbnail] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:custom_emoji_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:custom_emoji_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"custom_emoji_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:custom_emoji_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setCustomEmojiStickerSetThumbnail\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setCustomEmojiStickerSetThumbnail\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setCustomEmojiStickerSetThumbnail\", response.status))\nend\n"},"external_var":false},{"html_id":"setGameScore(**params)-instance-method","name":"setGameScore","doc":"Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the `Message` is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.\n\nParams:\n\n`user_id : Int32`\n\n> User identifier.\n>\n\n`score : Int32`\n\n> New score, must be non-negative.\n>\n\n`force : Union(Bool | Nil)`\n\n> Pass True if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters.\n>\n\n`disable_edit_message : Union(Bool | Nil)`\n\n> Pass True if the game message should not be automatically edited to include the current scoreboard.\n>\n\n`chat_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Unique identifier for the target chat.\n>\n\n`message_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Identifier of the sent message.\n>\n\n`inline_message_id : Union(String | Nil)`\n\n> Required if `chat_id` and `message_id` are not specified. Identifier of the inline message.\n>","summary":"<p>Use this method to set the score of the specified user in a game message.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setGameScore","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setGameScore] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:score]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:score, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"score\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:score))\nend\n\nif parameter = params[:force]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:force, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"force\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:force))\nend\n\nif parameter = params[:disable_edit_message]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:disable_edit_message, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"disable_edit_message\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:disable_edit_message))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:inline_message_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:inline_message_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"inline_message_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:inline_message_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setGameScore\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message | Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setGameScore\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setGameScore\", response.status))\nend\n"},"external_var":false},{"html_id":"setMessageReaction(**params)-instance-method","name":"setMessageReaction","doc":"Use this method to change the chosen reactions on a message. Service messages of some types can't be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Bots can't use paid reactions. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Int32`\n\n> Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.\n>\n\n`reaction : Union(Array(Hamilton::Types::ReactionType) | Nil)`\n\n> A JSON-serialized list of reaction types to set on the message. Currently, as non-premium users, bots can set up to one reaction per message. A custom emoji reaction can be used if it is either already present on the message or explicitly allowed by chat administrators. Paid reactions can't be used by bots.\n>\n\n`is_big : Union(Bool | Nil)`\n\n> Pass True to set the reaction with a big animation.\n>","summary":"<p>Use this method to change the chosen reactions on a message.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setMessageReaction","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setMessageReaction] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:reaction]?\n  if (typeof(parameter)) <= (Array(Hamilton::Types::ReactionTypeCustomEmoji | Hamilton::Types::ReactionTypeEmoji | Hamilton::Types::ReactionTypePaid) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reaction, Union(Array(Hamilton::Types::ReactionType) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reaction\", parameter.to_json, field_headers)\nelsif Nil < (Array(Hamilton::Types::ReactionTypeCustomEmoji | Hamilton::Types::ReactionTypeEmoji | Hamilton::Types::ReactionTypePaid) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reaction))\nend\n\nif parameter = params[:is_big]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:is_big, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"is_big\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:is_big))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setMessageReaction\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMessageReaction\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMessageReaction\", response.status))\nend\n"},"external_var":false},{"html_id":"setMyCommands(**params)-instance-method","name":"setMyCommands","doc":"Use this method to change the list of the bot's commands. Returns True on success.\n\nParams:\n\n`commands : Array(Hamilton::Types::BotCommand)`\n\n> A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.\n>\n\n`scope : Union(Hamilton::Types::BotCommandScope | Nil)`\n\n> A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to `BotCommandScopeDefault`.\n>\n\n`language_code : Union(String | Nil)`\n\n> A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands.\n>","summary":"<p>Use this method to change the list of the bot's commands.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setMyCommands","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setMyCommands] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:commands]?\n  if (typeof(parameter)) <= Array(Hamilton::Types::BotCommand)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:commands, Array(Hamilton::Types::BotCommand), typeof(parameter)))\n  end\n\n\n  builder.field(\"commands\", parameter.to_json, field_headers)\nelsif Nil < Array(Hamilton::Types::BotCommand)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:commands))\nend\n\nif parameter = params[:scope]?\n  if (typeof(parameter)) <= (((((((Hamilton::Types::BotCommandScopeAllChatAdministrators | Hamilton::Types::BotCommandScopeAllGroupChats) | Hamilton::Types::BotCommandScopeAllPrivateChats) | Hamilton::Types::BotCommandScopeChat) | Hamilton::Types::BotCommandScopeChatAdministrators) | Hamilton::Types::BotCommandScopeChatMember) | Hamilton::Types::BotCommandScopeDefault) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:scope, Union(Hamilton::Types::BotCommandScope | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"scope\", parameter.to_json, field_headers)\nelsif Nil < (((((((Hamilton::Types::BotCommandScopeAllChatAdministrators | Hamilton::Types::BotCommandScopeAllGroupChats) | Hamilton::Types::BotCommandScopeAllPrivateChats) | Hamilton::Types::BotCommandScopeChat) | Hamilton::Types::BotCommandScopeChatAdministrators) | Hamilton::Types::BotCommandScopeChatMember) | Hamilton::Types::BotCommandScopeDefault) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:scope))\nend\n\nif parameter = params[:language_code]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:language_code, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"language_code\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:language_code))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setMyCommands\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyCommands\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyCommands\", response.status))\nend\n"},"external_var":false},{"html_id":"setMyDefaultAdministratorRights(**params)-instance-method","name":"setMyDefaultAdministratorRights","doc":"Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success.\n\nParams:\n\n`rights : Union(Hamilton::Types::ChatAdministratorRights | Nil)`\n\n> A JSON-serialized object describing new default administrator rights. If not specified, the default administrator rights will be cleared.\n>\n\n`for_channels : Union(Bool | Nil)`\n\n> Pass True to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.\n>","summary":"<p>Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setMyDefaultAdministratorRights","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setMyDefaultAdministratorRights] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:rights]?\n  if (typeof(parameter)) <= (Hamilton::Types::ChatAdministratorRights | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:rights, Union(Hamilton::Types::ChatAdministratorRights | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"rights\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::ChatAdministratorRights | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:rights))\nend\n\nif parameter = params[:for_channels]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:for_channels, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"for_channels\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:for_channels))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setMyDefaultAdministratorRights\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyDefaultAdministratorRights\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyDefaultAdministratorRights\", response.status))\nend\n"},"external_var":false},{"html_id":"setMyDescription(**params)-instance-method","name":"setMyDescription","doc":"Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success.\n\nParams:\n\n`description : Union(String | Nil)`\n\n> New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.\n>\n\n`language_code : Union(String | Nil)`\n\n> A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands.\n>","summary":"<p>Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setMyDescription","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setMyDescription] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:description]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:description, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"description\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:description))\nend\n\nif parameter = params[:language_code]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:language_code, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"language_code\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:language_code))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setMyDescription\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Nil)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyDescription\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyDescription\", response.status))\nend\n"},"external_var":false},{"html_id":"setMyName(**params)-instance-method","name":"setMyName","doc":"Use this method to change the bot's name. Returns True on success.\n\nParams:\n\n`name : Union(String | Nil)`\n\n> New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.\n>\n\n`language_code : Union(String | Nil)`\n\n> A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands.\n>","summary":"<p>Use this method to change the bot's name.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setMyName","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setMyName] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:language_code]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:language_code, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"language_code\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:language_code))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setMyName\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyName\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyName\", response.status))\nend\n"},"external_var":false},{"html_id":"setMyShortDescription(**params)-instance-method","name":"setMyShortDescription","doc":"Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success.\n\nParams:\n\n`short_description : Union(String | Nil)`\n\n> New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.\n>\n\n`language_code : Union(String | Nil)`\n\n> A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.\n>","summary":"<p>Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setMyShortDescription","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setMyShortDescription] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:short_description]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:short_description, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"short_description\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:short_description))\nend\n\nif parameter = params[:language_code]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:language_code, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"language_code\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:language_code))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setMyShortDescription\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyShortDescription\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setMyShortDescription\", response.status))\nend\n"},"external_var":false},{"html_id":"setPassportDataErrors(**params)-instance-method","name":"setPassportDataErrors","doc":"Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.\n\nUse this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.\n\nParams:\n\n`user_id : Int32`\n\n> User identifier.\n>\n\n`errors : Array(Hamilton::Types::PassportElementError)`\n\n> A JSON-serialized array describing the errors.\n>","summary":"<p>Informs a user that some of the Telegram Passport elements they provided contains errors.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setPassportDataErrors","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setPassportDataErrors] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:errors]?\n  if (typeof(parameter)) <= Array(Hamilton::Types::PassportElementErrorDataField | Hamilton::Types::PassportElementErrorFile | Hamilton::Types::PassportElementErrorFiles | Hamilton::Types::PassportElementErrorFrontSide | Hamilton::Types::PassportElementErrorReverseSide | Hamilton::Types::PassportElementErrorSelfie | Hamilton::Types::PassportElementErrorTranslationFile | Hamilton::Types::PassportElementErrorTranslationFiles | Hamilton::Types::PassportElementErrorUnspecified)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:errors, Array(Hamilton::Types::PassportElementError), typeof(parameter)))\n  end\n\n\n  builder.field(\"errors\", parameter.to_json, field_headers)\nelsif Nil < Array(Hamilton::Types::PassportElementErrorDataField | Hamilton::Types::PassportElementErrorFile | Hamilton::Types::PassportElementErrorFiles | Hamilton::Types::PassportElementErrorFrontSide | Hamilton::Types::PassportElementErrorReverseSide | Hamilton::Types::PassportElementErrorSelfie | Hamilton::Types::PassportElementErrorTranslationFile | Hamilton::Types::PassportElementErrorTranslationFiles | Hamilton::Types::PassportElementErrorUnspecified)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:errors))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setPassportDataErrors\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setPassportDataErrors\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setPassportDataErrors\", response.status))\nend\n"},"external_var":false},{"html_id":"setStickerEmojiList(**params)-instance-method","name":"setStickerEmojiList","doc":"Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.\n\nParams:\n\n`sticker : String`\n\n> File identifier of the sticker.\n>\n\n`emoji_list : Array(String)`\n\n> A JSON-serialized list of 1-20 emoji associated with the sticker.\n>","summary":"<p>Use this method to change the list of emoji assigned to a regular or custom emoji sticker.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setStickerEmojiList","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setStickerEmojiList] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:sticker]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"sticker\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker))\nend\n\nif parameter = params[:emoji_list]?\n  if (typeof(parameter)) <= Array(String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:emoji_list, Array(String), typeof(parameter)))\n  end\n\n\n  builder.field(\"emoji_list\", parameter.to_json, field_headers)\nelsif Nil < Array(String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:emoji_list))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setStickerEmojiList\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerEmojiList\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerEmojiList\", response.status))\nend\n"},"external_var":false},{"html_id":"setStickerKeywords(**params)-instance-method","name":"setStickerKeywords","doc":"Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.\n\nParams:\n\n`sticker : String`\n\n> File identifier of the sticker.\n>\n\n`keywords : Union(Array(String) | Nil)`\n\n> A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64 characters.\n>","summary":"<p>Use this method to change search keywords assigned to a regular or custom emoji sticker.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setStickerKeywords","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setStickerKeywords] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:sticker]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"sticker\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker))\nend\n\nif parameter = params[:keywords]?\n  if (typeof(parameter)) <= (Array(String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:keywords, Union(Array(String) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"keywords\", parameter.to_json, field_headers)\nelsif Nil < (Array(String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:keywords))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setStickerKeywords\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerKeywords\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerKeywords\", response.status))\nend\n"},"external_var":false},{"html_id":"setStickerMaskPosition(**params)-instance-method","name":"setStickerMaskPosition","doc":"Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success.\n\nParams:\n\n`sticker : String`\n\n> File identifier of the sticker.\n>\n\n`mask_position : Union(Hamilton::Types::MaskPosition | Nil)`\n\n> A JSON-serialized object with the position where the mask should be placed on faces. Omit the parameter to remove the mask position.\n>","summary":"<p>Use this method to change the mask position of a mask sticker.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setStickerMaskPosition","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setStickerMaskPosition] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:sticker]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"sticker\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker))\nend\n\nif parameter = params[:mask_position]?\n  if (typeof(parameter)) <= (Hamilton::Types::MaskPosition | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:mask_position, Union(Hamilton::Types::MaskPosition | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"mask_position\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::MaskPosition | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:mask_position))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setStickerMaskPosition\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerMaskPosition\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerMaskPosition\", response.status))\nend\n"},"external_var":false},{"html_id":"setStickerPositionInSet(**params)-instance-method","name":"setStickerPositionInSet","doc":"Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success.\n\nParams:\n\n`sticker : String`\n\n> File identifier of the sticker.\n>\n\n`position : Int32`\n\n> New sticker position in the set, zero-based.\n>","summary":"<p>Use this method to move a sticker in a set created by the bot to a specific position.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setStickerPositionInSet","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setStickerPositionInSet] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:sticker]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"sticker\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker))\nend\n\nif parameter = params[:position]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:position, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"position\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:position))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setStickerPositionInSet\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerPositionInSet\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerPositionInSet\", response.status))\nend\n"},"external_var":false},{"html_id":"setStickerSetThumbnail(**params)-instance-method","name":"setStickerSetThumbnail","doc":"Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success.\n\nParams:\n\n`name : String`\n\n> Sticker set name.\n>\n\n`user_id : Int32`\n\n> User identifier of the sticker set owner\n>\n\n`thumbnail : Union(Hamilton::Types::InputFile | String | Nil)`\n\n> A .WEBP or .PNG image with the thumbnail, must be up to 128 kilobytes in size and have a width and height of exactly 100px, or a .TGS animation with a thumbnail up to 32 kilobytes in size (see [https://core.telegram.org/stickers#animation-requirements](https://core.telegram.org/stickers#animation-requirements) for animated sticker technical requirements), or a .WEBM video with the thumbnail up to 32 kilobytes in size; see [https://core.telegram.org/stickers#video-requirements](https://core.telegram.org/stickers#video-requirements) for video sticker technical requirements. Pass a `file_id` as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. Animated and video sticker set thumbnails can't be uploaded via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.\n>\n\n`format : String`\n\n> Format of the thumbnail, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, or “video” for a .WEBM video.\n>","summary":"<p>Use this method to set the thumbnail of a regular or mask sticker set.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setStickerSetThumbnail","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setStickerSetThumbnail] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:thumbnail]?\n  if (typeof(parameter)) <= ((Hamilton::Types::InputFile | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:thumbnail, Union(Hamilton::Types::InputFile | String | Nil), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"thumbnail\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"thumbnail\", parameter.to_json, field_headers)\n  end\nelsif Nil < ((Hamilton::Types::InputFile | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:thumbnail))\nend\n\nif parameter = params[:format]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:format, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"format\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:format))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setStickerSetThumbnail\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerSetThumbnail\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerSetThumbnail\", response.status))\nend\n"},"external_var":false},{"html_id":"setStickerSetTitle(**params)-instance-method","name":"setStickerSetTitle","doc":"Use this method to set the title of a created sticker set. Returns True on success.\n\nParams:\n\n`name : String`\n\n> Sticker set name.\n>\n\n`title : String`\n\n> Sticker set title, 1-64 characters.\n>","summary":"<p>Use this method to set the title of a created sticker set.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setStickerSetTitle","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setStickerSetTitle] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:name]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:name, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"name\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:name))\nend\n\nif parameter = params[:title]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:title, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"title\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:title))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setStickerSetTitle\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerSetTitle\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setStickerSetTitle\", response.status))\nend\n"},"external_var":false},{"html_id":"setUserEmojiStatus(**params)-instance-method","name":"setUserEmojiStatus","doc":"Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method `requestEmojiStatusAccess`. Returns True on success.\n\nParams:\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>\n\n`emoji_status_custom_emoji_id : Union(String | Nil)`\n\n> Custom emoji identifier of the emoji status to set. Pass an empty string to remove the status.\n>\n\n`emoji_status_expiration_date : Union(Int32 | Nil)`\n\n> Expiration date of the emoji status, if any.\n>","summary":"<p>Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method <code>requestEmojiStatusAccess</code>.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setUserEmojiStatus","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setUserEmojiStatus] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:emoji_status_custom_emoji_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:emoji_status_custom_emoji_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"emoji_status_custom_emoji_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:emoji_status_custom_emoji_id))\nend\n\nif parameter = params[:emoji_status_expiration_date]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:emoji_status_expiration_date, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"emoji_status_expiration_date\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:emoji_status_expiration_date))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setUserEmojiStatus\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setUserEmojiStatus\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setUserEmojiStatus\", response.status))\nend\n"},"external_var":false},{"html_id":"setWebhook(**params)-instance-method","name":"setWebhook","doc":"Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request (a request with response HTTP status code different from `2XY`), we will repeat the request and give up after a reasonable amount of attempts. Returns True on success.\n\nIf you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.\n\nNOTE: You will not be able to receive updates using `getUpdates` for as long as an outgoing webhook is set up.\n\nTo use a self-signed certificate, you need to upload your public key certificate using `certificate` parameter. Please upload as `InputFile`, sending a String will not work.\n\nPorts currently supported for webhooks: 443, 80, 88, 8443.\n\nIf you're having any trouble setting up webhooks, please check out this [amazing guide to webhooks](https://core.telegram.org/bots/webhooks).\n\nParams:\n\n`url : String`\n\n> HTTPS URL to send updates to. Use an empty string to remove webhook integration\n>\n\n`certificate : Union(Hamilton::Types::InputFile | Nil)`\n\n> Upload your public key certificate so that the root certificate in use can be checked.\n>\n\n`ip_address : Union(String | Nil)`\n\n> The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS\n>\n\n`max_connections : Union(Int32 | Nil)`\n\n> The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.\n>\n\n`allowed_updates : Union(Array(String) | Nil)`\n\n> A JSON-serialized list of the update types you want your bot to receive. For example, specify [\"message\", \"edited_channel_post\", \"callback_query\"] to only receive updates of these types. See `Update` for a complete list of available update types. Specify an empty list to receive all update types except chat_member, message_reaction, and message_reaction_count (default). If not specified, the previous setting will be used.\n>\n> Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.\n>\n\n`drop_pending_updates : Union(Bool | Nil)`\n\n> Pass True to drop all pending updates\n>\n\n`secret_token : Union(String | Nil)`\n\n> A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters `A-Z`, `a-z`, `0-9`, `_`, and `-` are allowed. The header is useful to ensure that the request comes from a webhook set by you.\n>","summary":"<p>Use this method to specify a URL and receive incoming updates via an outgoing webhook.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"setWebhook","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [setWebhook] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:url]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:url, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"url\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:url))\nend\n\nif parameter = params[:certificate]?\n  if (typeof(parameter)) <= (Hamilton::Types::InputFile | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:certificate, Union(Hamilton::Types::InputFile | Nil), typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"certificate\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"certificate\", parameter.to_json, field_headers)\n  end\nelsif Nil < (Hamilton::Types::InputFile | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:certificate))\nend\n\nif parameter = params[:ip_address]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:ip_address, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"ip_address\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:ip_address))\nend\n\nif parameter = params[:max_connections]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:max_connections, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"max_connections\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:max_connections))\nend\n\nif parameter = params[:allowed_updates]?\n  if (typeof(parameter)) <= (Array(String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:allowed_updates, Union(Array(String) | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"allowed_updates\", parameter.to_json, field_headers)\nelsif Nil < (Array(String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:allowed_updates))\nend\n\nif parameter = params[:drop_pending_updates]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:drop_pending_updates, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"drop_pending_updates\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:drop_pending_updates))\nend\n\nif parameter = params[:secret_token]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:secret_token, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"secret_token\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:secret_token))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"setWebhook\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Update)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setWebhook\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"setWebhook\", response.status))\nend\n"},"external_var":false},{"html_id":"stopMessageLiveLocation(**params)-instance-method","name":"stopMessageLiveLocation","doc":"Use this method to stop updating a live location message before `live_period` expires. On success, if the message is not an inline message, the edited `Message` is returned, otherwise True is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message to be edited was sent.\n>\n\n`chat_id : Union(Int32 | String | Nil)`\n\n> Required if `inline_message_id` is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Union(Int32 | Nil)`\n\n> Required if `inline_message_id` is not specified. Identifier of the message with live location to stop.\n>\n\n`inline_message_id : Union(String | Nil)`\n\n> Required if `chat_id` and `message_id` are not specified. Identifier of the inline message.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for a new inline keyboard.\n>","summary":"<p>Use this method to stop updating a live location message before <code>live_period</code> expires.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"stopMessageLiveLocation","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [stopMessageLiveLocation] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= ((Int32 | String) | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < ((Int32 | String) | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:inline_message_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:inline_message_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"inline_message_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:inline_message_id))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"stopMessageLiveLocation\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Message | Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"stopMessageLiveLocation\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"stopMessageLiveLocation\", response.status))\nend\n"},"external_var":false},{"html_id":"stopPoll(**params)-instance-method","name":"stopPoll","doc":"Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message to be edited was sent.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Int32`\n\n> Identifier of the original message with the poll.\n>\n\n`reply_markup : Union(Hamilton::Types::InlineKeyboardMarkup | Nil)`\n\n> A JSON-serialized object for a new message inline keyboard.\n>","summary":"<p>Use this method to stop a poll which was sent by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"stopPoll","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [stopPoll] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nif parameter = params[:reply_markup]?\n  if (typeof(parameter)) <= (Hamilton::Types::InlineKeyboardMarkup | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:reply_markup, Union(Hamilton::Types::InlineKeyboardMarkup | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"reply_markup\", parameter.to_json, field_headers)\nelsif Nil < (Hamilton::Types::InlineKeyboardMarkup | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:reply_markup))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"stopPoll\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::Poll)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"stopPoll\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"stopPoll\", response.status))\nend\n"},"external_var":false},{"html_id":"transferBusinessAccountStars(**params)-instance-method","name":"transferBusinessAccountStars","doc":"Transfers Telegram Stars from the business account balance to the bot's balance. Requires the \"can_transfer_stars\" business bot right. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`star_count : Int32`\n\n> Number of Telegram Stars to transfer; 1-10000.\n>","summary":"<p>Transfers Telegram Stars from the business account balance to the bot's balance.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"transferBusinessAccountStars","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [transferBusinessAccountStars] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:star_count]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:star_count, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"star_count\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:star_count))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"transferBusinessAccountStars\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"transferBusinessAccountStars\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"transferBusinessAccountStars\", response.status))\nend\n"},"external_var":false},{"html_id":"transferGift(**params)-instance-method","name":"transferGift","doc":"Transfers an owned unique gift to another user. Requires the can_transfer_and_upgrade_gifts business bot right. Requires can_transfer_stars business bot right if the transfer is paid. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`owned_gift_id : String`\n\n> Unique identifier of the regular gift that should be transferred.\n>\n\n`new_owner_chat_id : Int32`\n\n> Unique identifier of the chat which will own the gift. The chat must be active in the last 24 hours.\n>\n\n`star_count : Union(Int32 | Nil)`\n\n> The amount of Telegram Stars that will be paid for the transfer from the business account balance. If positive, then the \"can_transfer_stars\" business bot right is required.\n>","summary":"<p>Transfers an owned unique gift to another user.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"transferGift","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [transferGift] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:owned_gift_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:owned_gift_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"owned_gift_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:owned_gift_id))\nend\n\nif parameter = params[:new_owner_chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:new_owner_chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"new_owner_chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:new_owner_chat_id))\nend\n\nif parameter = params[:star_count]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:star_count, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"star_count\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:star_count))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"transferGift\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"transferGift\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"transferGift\", response.status))\nend\n"},"external_var":false},{"html_id":"unbanChatMember(**params)-instance-method","name":"unbanChatMember","doc":"Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter `only_if_banned`. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`).\n>\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>\n\n`only_if_banned : Union(Bool | Nil)`\n\n> Do nothing if the user is not banned.\n>","summary":"<p>Use this method to unban a previously banned user in a supergroup or channel.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"unbanChatMember","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [unbanChatMember] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:only_if_banned]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:only_if_banned, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"only_if_banned\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:only_if_banned))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"unbanChatMember\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unbanChatMember\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unbanChatMember\", response.status))\nend\n"},"external_var":false},{"html_id":"unbanChatSenderChat(**params)-instance-method","name":"unbanChatSenderChat","doc":"Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`sender_chat_id : Int32`\n\n> Unique identifier of the target sender chat.\n>","summary":"<p>Use this method to unban a previously banned channel chat in a supergroup or channel.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"unbanChatSenderChat","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [unbanChatSenderChat] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:sender_chat_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sender_chat_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"sender_chat_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sender_chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"unbanChatSenderChat\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unbanChatSenderChat\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unbanChatSenderChat\", response.status))\nend\n"},"external_var":false},{"html_id":"unhideGeneralForumTopic(**params)-instance-method","name":"unhideGeneralForumTopic","doc":"Use this method to unhide the \"General\" topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the \"can_manage_topics\" administrator rights. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>","summary":"<p>Use this method to unhide the &quot;General&quot; topic in a forum supergroup chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"unhideGeneralForumTopic","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [unhideGeneralForumTopic] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"unhideGeneralForumTopic\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unhideGeneralForumTopic\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unhideGeneralForumTopic\", response.status))\nend\n"},"external_var":false},{"html_id":"unpinAllChatMessages(**params)-instance-method","name":"unpinAllChatMessages","doc":"Use this method to clear the list of pinned messages in a chat. In private chats and channel direct messages chats, no additional rights are required to unpin all pinned messages. Conversely, the bot must be an administrator with the \"can_pin_messages\" right or the \"can_edit_messages\" right to unpin all pinned messages in groups and channels respectively. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>","summary":"<p>Use this method to clear the list of pinned messages in a chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"unpinAllChatMessages","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [unpinAllChatMessages] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"unpinAllChatMessages\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unpinAllChatMessages\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unpinAllChatMessages\", response.status))\nend\n"},"external_var":false},{"html_id":"unpinAllForumTopicMessages(**params)-instance-method","name":"unpinAllForumTopicMessages","doc":"Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the \"can_pin_messages\" administrator right in the supergroup. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>\n\n`message_thread_id : Int32`\n\n> Unique identifier for the target message thread of the forum topic.\n>","summary":"<p>Use this method to clear the list of pinned messages in a forum topic.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"unpinAllForumTopicMessages","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [unpinAllForumTopicMessages] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_thread_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_thread_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_thread_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_thread_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"unpinAllForumTopicMessages\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unpinAllForumTopicMessages\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unpinAllForumTopicMessages\", response.status))\nend\n"},"external_var":false},{"html_id":"unpinAllGeneralForumTopicMessages(**params)-instance-method","name":"unpinAllGeneralForumTopicMessages","doc":"Use this method to clear the list of pinned messages in a \"General\" forum topic. The bot must be an administrator in the chat for this to work and must have the \"can_pin_messages\" administrator right in the supergroup. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target supergroup (in the format `@channelusername`).\n>","summary":"<p>Use this method to clear the list of pinned messages in a &quot;General&quot; forum topic.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"unpinAllGeneralForumTopicMessages","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [unpinAllGeneralForumTopicMessages] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"unpinAllGeneralForumTopicMessages\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unpinAllGeneralForumTopicMessages\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unpinAllGeneralForumTopicMessages\", response.status))\nend\n"},"external_var":false},{"html_id":"unpinChatMessage(**params)-instance-method","name":"unpinChatMessage","doc":"Use this method to remove a message from the list of pinned messages in a chat. In private chats and channel direct messages chats, all messages can be unpinned. Conversely, the bot must be an administrator with the \"can_pin_messages\" right or the \"can_edit_messages\" right to unpin messages in groups and channels respectively. Returns True on success.\n\nParams:\n\n`business_connection_id : Union(String | Nil)`\n\n> Unique identifier of the business connection on behalf of which the message will be unpinned.\n>\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).\n>\n\n`message_id : Int32`\n\n> Identifier of a message to unpin. Required if business_connection_id is specified. If not specified, the most recent pinned message (by sending date) will be unpinned.\n>","summary":"<p>Use this method to remove a message from the list of pinned messages in a chat.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"unpinChatMessage","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [unpinChatMessage] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:message_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:message_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"message_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:message_id))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"unpinChatMessage\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unpinChatMessage\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"unpinChatMessage\", response.status))\nend\n"},"external_var":false},{"html_id":"upgradeGift(**params)-instance-method","name":"upgradeGift","doc":"Upgrades a given regular gift to a unique gift. Requires the \"can_transfer_and_upgrade_gifts\" business bot right. Additionally requires the \"can_transfer_stars\" business bot right if the upgrade is paid. Returns True on success.\n\nParams:\n\n`business_connection_id : String`\n\n> Unique identifier of the business connection.\n>\n\n`owned_gift_id : String`\n\n> Unique identifier of the regular gift that should be upgraded to a unique one.\n>\n\n`keep_original_details : Union(Bool | Nil)`\n\n> Pass True to keep the original gift text, sender and receiver in the upgraded gift.\n>\n\n`star_count : Union(Int32 | Nil)`\n\n> The amount of Telegram Stars that will be paid for the upgrade from the business account balance. If `gift.prepaid_upgrade_star_count` is greater than 0, then pass 0, otherwise, the \"can_transfer_stars\" business bot right is required and `gift.upgrade_star_count` must be passed.\n>","summary":"<p>Upgrades a given regular gift to a unique gift.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"upgradeGift","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [upgradeGift] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:business_connection_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:business_connection_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"business_connection_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:business_connection_id))\nend\n\nif parameter = params[:owned_gift_id]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:owned_gift_id, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"owned_gift_id\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:owned_gift_id))\nend\n\nif parameter = params[:keep_original_details]?\n  if (typeof(parameter)) <= (Bool | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:keep_original_details, Union(Bool | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"keep_original_details\", parameter.to_json, field_headers)\nelsif Nil < (Bool | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:keep_original_details))\nend\n\nif parameter = params[:star_count]?\n  if (typeof(parameter)) <= (Int32 | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:star_count, Union(Int32 | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"star_count\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:star_count))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"upgradeGift\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"upgradeGift\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"upgradeGift\", response.status))\nend\n"},"external_var":false},{"html_id":"uploadStickerFile(**params)-instance-method","name":"uploadStickerFile","doc":"Use this method to upload a file with a sticker for later use in the `createNewStickerSet`, `addStickerToSet`, or `replaceStickerInSet` methods (the file can be used multiple times). Returns the uploaded `File` on success.\n\nParams:\n\n`user_id : Int32`\n\n> User identifier of sticker file owner.\n>\n\n`sticker : Hamilton::Types::InputFile`\n\n> A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. See [https://core.telegram.org/stickers](https://core.telegram.org/stickers) for technical requirements.\n>\n\n`sticker_format : String`\n\n> Format of the sticker, must be one of “static”, “animated”, “video”.\n>","summary":"<p>Use this method to upload a file with a sticker for later use in the <code><a href=\"../Hamilton/Api.html#createNewStickerSet%28%2A%2Aparams%29-instance-method\">#createNewStickerSet</a></code>, <code><a href=\"../Hamilton/Api.html#addStickerToSet%28%2A%2Aparams%29-instance-method\">#addStickerToSet</a></code>, or <code><a href=\"../Hamilton/Api.html#replaceStickerInSet%28%2A%2Aparams%29-instance-method\">#replaceStickerInSet</a></code> methods (the file can be used multiple times).</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"uploadStickerFile","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [uploadStickerFile] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:sticker]?\n  if (typeof(parameter)) <= Hamilton::Types::InputFile\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker, Hamilton::Types::InputFile, typeof(parameter)))\n  end\n\n\n  case parameter\n  when Hamilton::Types::InputFile\n    builder.field(\"sticker\", \"attach://#{parameter.filename}\")\n    builder.file(parameter.filename, parameter.file, HTTP::FormData::FileMetadata.new(filename: parameter.filename))\n  else\n    builder.field(\"sticker\", parameter.to_json, field_headers)\n  end\nelsif Nil < Hamilton::Types::InputFile\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker))\nend\n\nif parameter = params[:sticker_format]?\n  if (typeof(parameter)) <= String\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:sticker_format, String, typeof(parameter)))\n  end\n\n\n  builder.field(\"sticker_format\", parameter.to_json, field_headers)\nelsif Nil < String\nelse\n  raise(Hamilton::Errors::MissingParam.new(:sticker_format))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"uploadStickerFile\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Hamilton::Types::File)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"uploadStickerFile\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"uploadStickerFile\", response.status))\nend\n"},"external_var":false},{"html_id":"verifyChat(**params)-instance-method","name":"verifyChat","doc":"Verifies a chat on behalf of the organization which is represented by the bot. Returns True on success.\n\nParams:\n\n`chat_id : Union(Int32 | String)`\n\n> Unique identifier for the target chat or username of the target channel (in the format `@channelusername`). Channel direct messages chats can't be verified.\n>\n\n`custom_description : Union(String | Nil)`\n\n> Custom description for the verification; 0-70 characters. Must be empty if the organization isn't allowed to provide a custom verification description.\n>","summary":"<p>Verifies a chat on behalf of the organization which is represented by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"verifyChat","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [verifyChat] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:chat_id]?\n  if (typeof(parameter)) <= (Int32 | String)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:chat_id, Union(Int32 | String), typeof(parameter)))\n  end\n\n\n  builder.field(\"chat_id\", parameter.to_json, field_headers)\nelsif Nil < (Int32 | String)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:chat_id))\nend\n\nif parameter = params[:custom_description]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:custom_description, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"custom_description\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:custom_description))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"verifyChat\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"verifyChat\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"verifyChat\", response.status))\nend\n"},"external_var":false},{"html_id":"verifyUser(**params)-instance-method","name":"verifyUser","doc":"Verifies a user on behalf of the organization which is represented by the bot. Returns True on success.\n\nParams:\n\n`user_id : Int32`\n\n> Unique identifier of the target user.\n>\n\n`custom_description : Union(String | Nil)`\n\n> Custom description for the verification; 0-70 characters. Must be empty if the organization isn't allowed to provide a custom verification description.\n>","summary":"<p>Verifies a user on behalf of the organization which is represented by the bot.</p>","abstract":false,"location":{"filename":"src/api/api.cr","line_number":37,"url":null},"def":{"name":"verifyUser","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"@log.info do \"Method [verifyUser] :: [#{params}]\" end\n\n\n\nfield_headers = HTTP::Headers {\"Content-Type\" => \"application/json\"}\n\n\n\n\nbody = \"\"\nboundary = MIME::Multipart.generate_boundary\n\n\nio = IO::Memory.new\nbuilder = HTTP::FormData::Builder.new(io, boundary)\n\nif parameter = params[:user_id]?\n  if (typeof(parameter)) <= Int32\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:user_id, Int32, typeof(parameter)))\n  end\n\n\n  builder.field(\"user_id\", parameter.to_json, field_headers)\nelsif Nil < Int32\nelse\n  raise(Hamilton::Errors::MissingParam.new(:user_id))\nend\n\nif parameter = params[:custom_description]?\n  if (typeof(parameter)) <= (String | Nil)\n  else\n    raise(Hamilton::Errors::ParamTypeMissmatch.new(:custom_description, Union(String | Nil), typeof(parameter)))\n  end\n\n\n  builder.field(\"custom_description\", parameter.to_json, field_headers)\nelsif Nil < (String | Nil)\nelse\n  raise(Hamilton::Errors::MissingParam.new(:custom_description))\nend\n\nbuilder.finish\nbody = body + io.to_s\n\n\n@log.debug do \"Request body :: [#{body}]\" end\n\nresponse = HTTP::Client.post(@path + \"verifyUser\", headers: HTTP::Headers {\"Content-Type\" => \"multipart/form-data; boundary=#{boundary}\"}, body: body)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif response.status.ok?\n  if body = response.body?\n    api_result = ApiResult(Bool)\n      .from_json(body)\n    @log.debug do \"Response body :: [#{api_result.to_json}]\" end\n    if api_result.ok\n      return api_result.result\n    else\n      @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"verifyUser\", response.status, \"inside body status is not ok\"))\n    end\n  end\nelse\n  @log.warn(exception: Hamilton::Errors::ApiEndpointError.new(\"verifyUser\", response.status))\nend\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Bot","path":"Hamilton/Bot.html","kind":"class","full_name":"Hamilton::Bot","name":"Bot","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/bot.cr","line_number":7,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton","kind":"module","full_name":"Hamilton","name":"Hamilton"},"doc":"`Hamilton::Bot` implementation variant.","summary":"<p><code><a href=\"../Hamilton/Bot.html\">Hamilton::Bot</a></code> implementation variant.</p>","constructors":[{"html_id":"new(*,offset=0,timeout=20,token:String,url:String=\"https://api.telegram.org\",env:Symbol=:prod,&handler:Hamilton::Handler::HandlerProc):self-class-method","name":"new","doc":"Creates a bot provided `offset`, `timeout`, api instance created from `token` and `url` for `env`, and the given block as handler.","summary":"<p>Creates a bot provided <code><a href=\"../Hamilton/Bot.html#offset%3AInt32-instance-method\">#offset</a></code>, <code><a href=\"../Hamilton/Bot.html#timeout%3AInt32-instance-method\">#timeout</a></code>, api instance created from <code>token</code> and <code>url</code> for <code>env</code>, and the given block as handler.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"token","external_name":"token","restriction":"String"},{"name":"url","default_value":"\"https://api.telegram.org\"","external_name":"url","restriction":"String"},{"name":"env","default_value":":prod","external_name":"env","restriction":"Symbol"}],"args_string":"(*, offset = 0, timeout = 20, token : String, url : String = \"https://api.telegram.org\", env : Symbol = :prod, &handler : Hamilton::Handler::HandlerProc) : self","args_html":"(*, offset = <span class=\"n\">0</span>, timeout = <span class=\"n\">20</span>, token : String, url : String = <span class=\"s\">&quot;https://api.telegram.org&quot;</span>, env : Symbol = <span class=\"n\">:prod</span>, &handler : <a href=\"../Hamilton/Handler/HandlerProc.html\">Hamilton::Handler::HandlerProc</a>) : <span class=\"k\">self</span>","location":{"filename":"src/bot.cr","line_number":27,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"token","external_name":"token","restriction":"String"},{"name":"url","default_value":"\"https://api.telegram.org\"","external_name":"url","restriction":"String"},{"name":"env","default_value":":prod","external_name":"env","restriction":"Symbol"}],"splat_index":0,"yields":0,"block_arity":0,"block_arg":{"name":"handler","external_name":"handler","restriction":"Hamilton::Handler::HandlerProc"},"return_type":"self","visibility":"Public","body":"new(offset: offset, timeout: timeout, api: Hamilton::Api.new(token, url, new), handler: handler)"},"external_var":false},{"html_id":"new(*,offset=0,timeout=20,api:Hamilton::Api,&handler:Hamilton::Handler::HandlerProc):self-class-method","name":"new","doc":"Creates a bot provided `offset`, `timeout`, `api`, and the given block as handler.","summary":"<p>Creates a bot provided <code><a href=\"../Hamilton/Bot.html#offset%3AInt32-instance-method\">#offset</a></code>, <code><a href=\"../Hamilton/Bot.html#timeout%3AInt32-instance-method\">#timeout</a></code>, <code><a href=\"../Hamilton/Bot.html#api%3AHamilton%3A%3AApi-instance-method\">#api</a></code>, and the given block as handler.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"api","external_name":"api","restriction":"Hamilton::Api"}],"args_string":"(*, offset = 0, timeout = 20, api : Hamilton::Api, &handler : Hamilton::Handler::HandlerProc) : self","args_html":"(*, offset = <span class=\"n\">0</span>, timeout = <span class=\"n\">20</span>, api : <a href=\"../Hamilton/Api.html\">Hamilton::Api</a>, &handler : <a href=\"../Hamilton/Handler/HandlerProc.html\">Hamilton::Handler::HandlerProc</a>) : <span class=\"k\">self</span>","location":{"filename":"src/bot.cr","line_number":32,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"api","external_name":"api","restriction":"Hamilton::Api"}],"splat_index":0,"yields":0,"block_arity":0,"block_arg":{"name":"handler","external_name":"handler","restriction":"Hamilton::Handler::HandlerProc"},"return_type":"self","visibility":"Public","body":"new(offset: offset, timeout: timeout, api: api, handler: handler)"},"external_var":false},{"html_id":"new(*,offset=0,timeout=20,token,url=\"https://api.telegram.org\",env=:prod,handlers:Indexable(Hamilton::Handler),&handler:Hamilton::Handler::HandlerProc):self-class-method","name":"new","doc":"Creates a bot provided `offset`, `timeout`, api instance created from `token` and `url` for `env`, and a handler chain constructed from the `handlers`\narray and the given block.","summary":"<p>Creates a bot provided <code><a href=\"../Hamilton/Bot.html#offset%3AInt32-instance-method\">#offset</a></code>, <code><a href=\"../Hamilton/Bot.html#timeout%3AInt32-instance-method\">#timeout</a></code>, api instance created from <code>token</code> and <code>url</code> for <code>env</code>, and a handler chain constructed from the <code>handlers</code> array and the given block.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"token","external_name":"token","restriction":""},{"name":"url","default_value":"\"https://api.telegram.org\"","external_name":"url","restriction":""},{"name":"env","default_value":":prod","external_name":"env","restriction":""},{"name":"handlers","external_name":"handlers","restriction":"Indexable(Hamilton::Handler)"}],"args_string":"(*, offset = 0, timeout = 20, token, url = \"https://api.telegram.org\", env = :prod, handlers : Indexable(Hamilton::Handler), &handler : Hamilton::Handler::HandlerProc) : self","args_html":"(*, offset = <span class=\"n\">0</span>, timeout = <span class=\"n\">20</span>, token, url = <span class=\"s\">&quot;https://api.telegram.org&quot;</span>, env = <span class=\"n\">:prod</span>, handlers : Indexable(<a href=\"../Hamilton/Handler.html\">Hamilton::Handler</a>), &handler : <a href=\"../Hamilton/Handler/HandlerProc.html\">Hamilton::Handler::HandlerProc</a>) : <span class=\"k\">self</span>","location":{"filename":"src/bot.cr","line_number":38,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"token","external_name":"token","restriction":""},{"name":"url","default_value":"\"https://api.telegram.org\"","external_name":"url","restriction":""},{"name":"env","default_value":":prod","external_name":"env","restriction":""},{"name":"handlers","external_name":"handlers","restriction":"Indexable(Hamilton::Handler)"}],"splat_index":0,"yields":0,"block_arity":0,"block_arg":{"name":"handler","external_name":"handler","restriction":"Hamilton::Handler::HandlerProc"},"return_type":"self","visibility":"Public","body":"new(offset: offset, timeout: timeout, api: Hamilton::Api.new(token, url, new), handler: Hamilton::Bot.build_middleware(handlers, handler))"},"external_var":false},{"html_id":"new(*,offset=0,timeout=20,api:Hamilton::Api,handlers:Indexable(Hamilton::Handler),&handler:Hamilton::Handler::HandlerProc):self-class-method","name":"new","doc":"Creates a bot provided `offset`, `timeout`, `api`, and a handler chain constructed from the `handlers`\narray and the given block.","summary":"<p>Creates a bot provided <code><a href=\"../Hamilton/Bot.html#offset%3AInt32-instance-method\">#offset</a></code>, <code><a href=\"../Hamilton/Bot.html#timeout%3AInt32-instance-method\">#timeout</a></code>, <code><a href=\"../Hamilton/Bot.html#api%3AHamilton%3A%3AApi-instance-method\">#api</a></code>, and a handler chain constructed from the <code>handlers</code> array and the given block.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"api","external_name":"api","restriction":"Hamilton::Api"},{"name":"handlers","external_name":"handlers","restriction":"Indexable(Hamilton::Handler)"}],"args_string":"(*, offset = 0, timeout = 20, api : Hamilton::Api, handlers : Indexable(Hamilton::Handler), &handler : Hamilton::Handler::HandlerProc) : self","args_html":"(*, offset = <span class=\"n\">0</span>, timeout = <span class=\"n\">20</span>, api : <a href=\"../Hamilton/Api.html\">Hamilton::Api</a>, handlers : Indexable(<a href=\"../Hamilton/Handler.html\">Hamilton::Handler</a>), &handler : <a href=\"../Hamilton/Handler/HandlerProc.html\">Hamilton::Handler::HandlerProc</a>) : <span class=\"k\">self</span>","location":{"filename":"src/bot.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"api","external_name":"api","restriction":"Hamilton::Api"},{"name":"handlers","external_name":"handlers","restriction":"Indexable(Hamilton::Handler)"}],"splat_index":0,"yields":0,"block_arity":0,"block_arg":{"name":"handler","external_name":"handler","restriction":"Hamilton::Handler::HandlerProc"},"return_type":"self","visibility":"Public","body":"new(offset: offset, timeout: timeout, api: api, handler: Hamilton::Bot.build_middleware(handlers, handler))"},"external_var":false},{"html_id":"new(*,offset=0,timeout=20,token,url=\"https://api.telegram.org\",env=:prod,handlers:Indexable(Hamilton::Handler)):self-class-method","name":"new","doc":"Creates a bot provided `offset`, `timeout`, api instance created from `token` and `url` for `env`, and the `handlers` array as handler chain.","summary":"<p>Creates a bot provided <code><a href=\"../Hamilton/Bot.html#offset%3AInt32-instance-method\">#offset</a></code>, <code><a href=\"../Hamilton/Bot.html#timeout%3AInt32-instance-method\">#timeout</a></code>, api instance created from <code>token</code> and <code>url</code> for <code>env</code>, and the <code>handlers</code> array as handler chain.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"token","external_name":"token","restriction":""},{"name":"url","default_value":"\"https://api.telegram.org\"","external_name":"url","restriction":""},{"name":"env","default_value":":prod","external_name":"env","restriction":""},{"name":"handlers","external_name":"handlers","restriction":"Indexable(Hamilton::Handler)"}],"args_string":"(*, offset = 0, timeout = 20, token, url = \"https://api.telegram.org\", env = :prod, handlers : Indexable(Hamilton::Handler)) : self","args_html":"(*, offset = <span class=\"n\">0</span>, timeout = <span class=\"n\">20</span>, token, url = <span class=\"s\">&quot;https://api.telegram.org&quot;</span>, env = <span class=\"n\">:prod</span>, handlers : Indexable(<a href=\"../Hamilton/Handler.html\">Hamilton::Handler</a>)) : <span class=\"k\">self</span>","location":{"filename":"src/bot.cr","line_number":49,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"token","external_name":"token","restriction":""},{"name":"url","default_value":"\"https://api.telegram.org\"","external_name":"url","restriction":""},{"name":"env","default_value":":prod","external_name":"env","restriction":""},{"name":"handlers","external_name":"handlers","restriction":"Indexable(Hamilton::Handler)"}],"splat_index":0,"return_type":"self","visibility":"Public","body":"new(offset: offset, timeout: timeout, api: Hamilton::Api.new(token, url, new), handler: Hamilton::Bot.build_middleware(handlers))"},"external_var":false},{"html_id":"new(*,offset=0,timeout=20,api:Hamilton::Api,handlers:Indexable(Hamilton::Handler)):self-class-method","name":"new","doc":"Creates a bot provided `offset`, `timeout`, `api`, and the `handlers` array as handler chain.","summary":"<p>Creates a bot provided <code><a href=\"../Hamilton/Bot.html#offset%3AInt32-instance-method\">#offset</a></code>, <code><a href=\"../Hamilton/Bot.html#timeout%3AInt32-instance-method\">#timeout</a></code>, <code><a href=\"../Hamilton/Bot.html#api%3AHamilton%3A%3AApi-instance-method\">#api</a></code>, and the <code>handlers</code> array as handler chain.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"api","external_name":"api","restriction":"Hamilton::Api"},{"name":"handlers","external_name":"handlers","restriction":"Indexable(Hamilton::Handler)"}],"args_string":"(*, offset = 0, timeout = 20, api : Hamilton::Api, handlers : Indexable(Hamilton::Handler)) : self","args_html":"(*, offset = <span class=\"n\">0</span>, timeout = <span class=\"n\">20</span>, api : <a href=\"../Hamilton/Api.html\">Hamilton::Api</a>, handlers : Indexable(<a href=\"../Hamilton/Handler.html\">Hamilton::Handler</a>)) : <span class=\"k\">self</span>","location":{"filename":"src/bot.cr","line_number":54,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":""},{"name":"api","external_name":"api","restriction":"Hamilton::Api"},{"name":"handlers","external_name":"handlers","restriction":"Indexable(Hamilton::Handler)"}],"splat_index":0,"return_type":"self","visibility":"Public","body":"new(offset: offset, timeout: timeout, api: api, handler: Hamilton::Bot.build_middleware(handlers))"},"external_var":false},{"html_id":"new(*,offset:Int32=0,timeout:Int32=20,api:Hamilton::Api,handler:Hamilton::Handler|Hamilton::Handler::HandlerProc)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":"::Int32"},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":"::Int32"},{"name":"api","external_name":"api","restriction":"Hamilton::Api"},{"name":"handler","external_name":"handler","restriction":"Hamilton::Handler | Hamilton::Handler::HandlerProc"}],"args_string":"(*, offset : Int32 = 0, timeout : Int32 = 20, api : Hamilton::Api, handler : Hamilton::Handler | Hamilton::Handler::HandlerProc)","args_html":"(*, offset : Int32 = <span class=\"n\">0</span>, timeout : Int32 = <span class=\"n\">20</span>, api : <a href=\"../Hamilton/Api.html\">Hamilton::Api</a>, handler : <a href=\"../Hamilton/Handler.html\">Hamilton::Handler</a> | <a href=\"../Hamilton/Handler/HandlerProc.html\">Hamilton::Handler::HandlerProc</a>)","location":{"filename":"src/bot.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":"::Int32"},{"name":"timeout","default_value":"20","external_name":"timeout","restriction":"::Int32"},{"name":"api","external_name":"api","restriction":"Hamilton::Api"},{"name":"handler","external_name":"handler","restriction":"Hamilton::Handler | Hamilton::Handler::HandlerProc"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(offset: offset, timeout: timeout, api: api, handler: handler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"api:Hamilton::Api-instance-method","name":"api","doc":"API instance to be used inside the Bot.","summary":"<p>API instance to be used inside the Bot.</p>","abstract":false,"location":{"filename":"src/bot.cr","line_number":9,"url":null},"def":{"name":"api","return_type":"Hamilton::Api","visibility":"Public","body":"@api"},"external_var":false},{"html_id":"api=(api:Hamilton::Api)-instance-method","name":"api=","doc":"API instance to be used inside the Bot.","summary":"<p>API instance to be used inside the Bot.</p>","abstract":false,"args":[{"name":"api","external_name":"api","restriction":"Hamilton::Api"}],"args_string":"(api : Hamilton::Api)","args_html":"(api : <a href=\"../Hamilton/Api.html\">Hamilton::Api</a>)","location":{"filename":"src/bot.cr","line_number":9,"url":null},"def":{"name":"api=","args":[{"name":"api","external_name":"api","restriction":"Hamilton::Api"}],"visibility":"Public","body":"@api = api"},"external_var":false},{"html_id":"handler:Hamilton::Handler|Hamilton::Handler::HandlerProc-instance-method","name":"handler","doc":"Chain of handlers.","summary":"<p>Chain of handlers.</p>","abstract":false,"location":{"filename":"src/bot.cr","line_number":15,"url":null},"def":{"name":"handler","return_type":"Hamilton::Handler | Hamilton::Handler::HandlerProc","visibility":"Public","body":"@handler"},"external_var":false},{"html_id":"handler=(handler:Hamilton::Handler|Hamilton::Handler::HandlerProc)-instance-method","name":"handler=","doc":"Chain of handlers.","summary":"<p>Chain of handlers.</p>","abstract":false,"args":[{"name":"handler","external_name":"handler","restriction":"Hamilton::Handler | Hamilton::Handler::HandlerProc"}],"args_string":"(handler : Hamilton::Handler | Hamilton::Handler::HandlerProc)","args_html":"(handler : <a href=\"../Hamilton/Handler.html\">Hamilton::Handler</a> | <a href=\"../Hamilton/Handler/HandlerProc.html\">Hamilton::Handler::HandlerProc</a>)","location":{"filename":"src/bot.cr","line_number":15,"url":null},"def":{"name":"handler=","args":[{"name":"handler","external_name":"handler","restriction":"Hamilton::Handler | Hamilton::Handler::HandlerProc"}],"visibility":"Public","body":"@handler = handler"},"external_var":false},{"html_id":"listen-instance-method","name":"listen","doc":"Start listening for the updates with long pooling.","summary":"<p>Start listening for the updates with long pooling.</p>","abstract":false,"location":{"filename":"src/bot.cr","line_number":64,"url":null},"def":{"name":"listen","visibility":"Public","body":"@is_running = true\n@log.info do \"Bot started with offset #{@offset}\" end\n\nwhile @is_running\n  begin\n    updates = @api.getUpdates(offset: @offset, timeout: @timeout)\n    if updates\n      updates.each do |update|\n        @offset = update.update_id + 1\n        @handler.call(update)\n      end\n    end\n  rescue api_call_fail : Hamilton::Errors::ApiEndpointError\n    @log.error(exception: api_call_fail)\n  rescue api_method_error : Hamilton::Errors::MissingParam | Hamilton::Errors::ParamTypeMissmatch\n    @log.error(exception: api_method_error) do \"Error when calling a `Hamilton::Api` method\" end\n  end\nend\n"},"external_var":false},{"html_id":"log:Log-instance-method","name":"log","doc":"Logger instance.","summary":"<p>Logger instance.</p>","abstract":false,"location":{"filename":"src/bot.cr","line_number":12,"url":null},"def":{"name":"log","return_type":"Log","visibility":"Public","body":"@log"},"external_var":false},{"html_id":"log=(log:Log)-instance-method","name":"log=","doc":"Logger instance.","summary":"<p>Logger instance.</p>","abstract":false,"args":[{"name":"log","external_name":"log","restriction":"Log"}],"args_string":"(log : Log)","args_html":"(log : Log)","location":{"filename":"src/bot.cr","line_number":12,"url":null},"def":{"name":"log=","args":[{"name":"log","external_name":"log","restriction":"Log"}],"visibility":"Public","body":"@log = log"},"external_var":false},{"html_id":"offset:Int32-instance-method","name":"offset","doc":"Offset of the updates, i.e. the number of the first update to be handled.","summary":"<p>Offset of the updates, i.e.</p>","abstract":false,"location":{"filename":"src/bot.cr","line_number":21,"url":null},"def":{"name":"offset","return_type":"Int32","visibility":"Public","body":"@offset"},"external_var":false},{"html_id":"offset=(offset:Int32)-instance-method","name":"offset=","doc":"Offset of the updates, i.e. the number of the first update to be handled.","summary":"<p>Offset of the updates, i.e.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Int32"}],"args_string":"(offset : Int32)","args_html":"(offset : Int32)","location":{"filename":"src/bot.cr","line_number":21,"url":null},"def":{"name":"offset=","args":[{"name":"offset","external_name":"offset","restriction":"Int32"}],"visibility":"Public","body":"@offset = offset"},"external_var":false},{"html_id":"stop-instance-method","name":"stop","doc":"Stop listening for the updates.\n\nOne of the ways to call it is:\n```crysal\nSignal::INT.trap do\n  puts bot.stop\nend\n```","summary":"<p>Stop listening for the updates.</p>","abstract":false,"location":{"filename":"src/bot.cr","line_number":93,"url":null},"def":{"name":"stop","visibility":"Public","body":"@is_running = false\n@log.info do \"Bot stopped with offset #{@offset}\" end\n"},"external_var":false},{"html_id":"timeout:Int32-instance-method","name":"timeout","doc":"Timeout in seconds for long polling.","summary":"<p>Timeout in seconds for long polling.</p>","abstract":false,"location":{"filename":"src/bot.cr","line_number":24,"url":null},"def":{"name":"timeout","return_type":"Int32","visibility":"Public","body":"@timeout"},"external_var":false},{"html_id":"timeout=(timeout:Int32)-instance-method","name":"timeout=","doc":"Timeout in seconds for long polling.","summary":"<p>Timeout in seconds for long polling.</p>","abstract":false,"args":[{"name":"timeout","external_name":"timeout","restriction":"Int32"}],"args_string":"(timeout : Int32)","args_html":"(timeout : Int32)","location":{"filename":"src/bot.cr","line_number":24,"url":null},"def":{"name":"timeout=","args":[{"name":"timeout","external_name":"timeout","restriction":"Int32"}],"visibility":"Public","body":"@timeout = timeout"},"external_var":false}]},{"html_id":"hamilton/Hamilton/CmdHandler","path":"Hamilton/CmdHandler.html","kind":"class","full_name":"Hamilton::CmdHandler","name":"CmdHandler","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Handler","kind":"module","full_name":"Hamilton::Handler","name":"Handler"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/handlers/cmd_handler.cr","line_number":13,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Handler","kind":"module","full_name":"Hamilton::Handler","name":"Handler"}],"namespace":{"html_id":"hamilton/Hamilton","kind":"module","full_name":"Hamilton","name":"Hamilton"},"doc":"The module for handling commands, callback queries (please, do not use them), known text messages, and some of messages payloads.\n\nShould be included in the class with the implementations of updates' handling functions.","summary":"<p>The module for handling commands, callback queries (please, do not use them), known text messages, and some of messages payloads.</p>","constructors":[{"html_id":"new(log_level:Log::Severity=Log::Severity::Info)-class-method","name":"new","abstract":false,"args":[{"name":"log_level","default_value":"Log::Severity::Info","external_name":"log_level","restriction":"Log::Severity"}],"args_string":"(log_level : Log::Severity = Log::Severity::Info)","args_html":"(log_level : Log::Severity = <span class=\"t\">Log</span><span class=\"t\">::</span><span class=\"t\">Severity</span><span class=\"t\">::</span><span class=\"t\">Info</span>)","location":{"filename":"src/handlers/cmd_handler.cr","line_number":27,"url":null},"def":{"name":"new","args":[{"name":"log_level","default_value":"Log::Severity::Info","external_name":"log_level","restriction":"Log::Severity"}],"visibility":"Public","body":"_ = allocate\n_.initialize(log_level)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"call(update:Hamilton::Types::Update)-instance-method","name":"call","doc":"Handling method that processes an update.","summary":"<p>Handling method that processes an update.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Hamilton::Types::Update"}],"args_string":"(update : Hamilton::Types::Update)","args_html":"(update : <a href=\"../Hamilton/Types/Update.html\">Hamilton::Types::Update</a>)","location":{"filename":"src/handlers/cmd_handler.cr","line_number":35,"url":null},"def":{"name":"call","args":[{"name":"update","external_name":"update","restriction":"Hamilton::Types::Update"}],"visibility":"Public","body":"@log.debug do \"@mapper :: [#{@mapper}]\" end\n\nupdate_types = update.non_nil_fields\nupdate_types.delete(\"update_id\")\nif update_types.size == 0\n  @log.error do \"Empty update\" end\nelsif (update_types[0] == \"message\") || (update_types[0] == \"business_message\")\n  message = update.message\n  message || (message = update.business_message)\n  message = message.as(Hamilton::Types::Message)\n\n\n\n  ctxt_method = @context.get_method(message.chat.id)\n\n\n\n  pmm = @mapper[ctxt_method]\n  @log.debug do \"PMM :: [#{pmm}]\" end\n\n\n  message_fields = message.non_nil_fields\n\n  {% if true %}\n      case message_fields\n      \n      # first check for command or known text payload from `ReplyKeyboard`\n      when .includes?(\"text\")\n        ss = StringScanner.new(message.text.as(String))\n\n        # trim spaces at start\n        ss.scan(/\\s*/)\n\n        # check if we a command here\n        if ss.check('/')\n          # retrive the command\n          cmd = ss.scan(/\\/\\w+/)\n\n          @log.debug { \"CMD :: [#{cmd}] :: [#{pmm[cmd]}]\" }\n\n          if method = pmm[cmd]?\n            new_context = @caller[method].call(update, @context.get_data(message.chat.id))\n            if @mapper[method].size != 0\n              @context.set(\n                message.chat.id,\n                new_context\n              )\n            else\n              @context.clean(message.chat.id)\n              @context.set(message.chat.id, new_context[:data])\n            end\n          else\n            @log.warn { \"Update #{update.update_id} is of type `message`/`business_message` and contains `:command` [#{cmd}] payload that can not be processed\" }\n          end\n\n          # just text\n        else\n          known_texts = pmm.keys.select! { |key| key.is_a?(String) &&!key.as(String).starts_with?('/') }\n          @log.debug { \"Known texts :: [#{known_texts}]\" }\n          text_index = 0\n          while text_index < known_texts.size\n            if ss.check(known_texts[text_index].as(String))\n              # get the method\n              method = pmm[ss.scan(known_texts[text_index].as(String))]\n              # trim spaces at start of the remaining text\n              ss.scan(/\\s+/)\n\n              new_context = @caller[method].call(update, @context.get_data(message.chat.id))\n              if @mapper[method].size != 0\n                @context.set(\n                  message.chat.id,\n                  new_context\n                )\n              else\n                @context.clean(message.chat.id)\n                @context.set(message.chat.id, new_context[:data])\n              end\n              break\n            else\n              text_index += 1\n            end\n          end\n\n          if text_index == known_texts.size\n            @log.warn { \"Update #{update.update_id} is of type `message`/`business_message` and contains `:text` payload that can not be processed (and I don't know why)\" }\n          end\n        end\n\n      # ... and then for other available message payload types\n      {% for payload_type in PAYLOAD_TYPES %}\n      when .includes?({{ payload_type }}.to_s)\n        if method = pmm[{{ payload_type }}]?\n          new_context = @caller[method].call(update, @context.get_data(message.chat.id))\n          if @mapper[method].size != 0\n            @context.set(\n              message.chat.id,\n              new_context\n            )\n          else\n            @context.clean(message.chat.id)\n            @context.set(message.chat.id, new_context[:data])\n          end\n        else\n          @log.warn { \"Update #{update.update_id} is of type `message`/`business_message` and contains `{{ payload_type }}` payload that can not be processed\" }\n        end\n      {% end %}\n      \n      else\n        @log.info { \"Update #{update.update_id} is of type `message`/`business_message` and contains payload that can not be processed by Command Handler\" }\n      end\n      {% end %}\nelsif update_types[0] == \"callback_query\"\n  @log.warn do \"Hamilton's developer doesn't recommend to use `InlineKeybord`s\" end\n\n  callback_query = update.callback_query.as(Hamilton::Types::CallbackQuery)\n  update_data = callback_query.data\n  update_data || (update_data = callback_query.game_short_name)\n  if data = update_data\n    if chat_instance = callback_query.chat_instance\n      if ctxt_method = @context.get_method?(chat_instance)\n        if @mapper.has_key?(ctxt_method)\n          if method = @mapper[ctxt_method][data]?\n            new_context = @caller[method].call(update, @context.get_data(chat_instance))\n            if @mapper[method].size != 0\n              @context.set(chat_instance, new_context)\n            else\n              @context.clean(chat_instance)\n              @context.set(chat_instance, new_context[:data])\n            end\n            return call_next(update)\n          else\n            @log.warn do \"Update #{update.update_id} is of type `callback_query` and doesn't have a handler for the provided payload when handled with `chat_instance`\" end\n          end\n        end\n      end\n    end\n\n\n\n    if message = callback_query.message\n      chat_id = message.chat.id\n\n\n      if ctxt_method = @context.get_method?(chat_id)\n        if @mapper.has_key?(ctxt_method)\n          if method = @mapper[ctxt_method][data]?\n            new_context = @caller[method].call(update, @context.get_data(chat_id))\n            if @mapper[method].size != 0\n              @context.set(chat_id, new_context)\n            else\n              @context.clean(chat_id)\n              @context.set(chat_id, new_context[:data])\n            end\n            return call_next(update)\n          else\n            @log.warn do \"Update #{update.update_id} is of type `callback_query` and doesn't have a handler for the provided payload when handled with `message.chat.id`\" end\n          end\n        end\n      end\n    end\n\n\n\n    if user_id = callback_query.from.id\n      ctxt_method = (@context.get_method?(user_id)) || (:root)\n      if @mapper.has_key?(ctxt_method)\n        if method = @mapper[ctxt_method][data]?\n          new_context = @caller[method].call(update, @context.get_data(user_id))\n          if @mapper[method].size != 0\n            @context.set(user_id, new_context)\n          else\n            @context.clean(user_id)\n            @context.set(user_id, new_context[:data])\n          end\n          return call_next(update)\n        else\n          @log.warn do \"Update #{update.update_id} is of type `callback_query` and doesn't have a handler for the provided payload when handled with `from.id` (sender's/user id)\" end\n        end\n      end\n    end\n  else\n    @log.warn do \"Update #{update.update_id} is of type `callback_query` and doesn't contain any payload. If the update won't be procesed user may hang (see the note for `Hamilton::Types::CallbackQuery`)\" end\n  end\nelse\n  @log.info do \"Update #{update.update_id} was skipped by `CmdHandler` due to unknown update type\" end\nend\n\ncall_next(update)\n"},"external_var":false},{"html_id":"caller:Hash(Symbol,Proc(Hamilton::Types::Update,Hash(Symbol,JSON::Any)|Nil,NamedTuple(method:Symbol|Nil,data:Hash(Symbol,JSON::Any)|Nil)))-instance-method","name":"caller","abstract":false,"location":{"filename":"src/handlers/cmd_handler.cr","line_number":19,"url":null},"def":{"name":"caller","return_type":"Hash(Symbol, Proc(Hamilton::Types::Update, Hash(Symbol, JSON::Any) | Nil, NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil)))","visibility":"Public","body":"@caller"},"external_var":false},{"html_id":"caller=(caller:Hash(Symbol,Proc(Hamilton::Types::Update,Hash(Symbol,JSON::Any)|Nil,NamedTuple(method:Symbol|Nil,data:Hash(Symbol,JSON::Any)|Nil))))-instance-method","name":"caller=","abstract":false,"args":[{"name":"caller","external_name":"caller","restriction":"Hash(Symbol, Proc(Hamilton::Types::Update, Hash(Symbol, JSON::Any) | Nil, NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil)))"}],"args_string":"(caller : Hash(Symbol, Proc(Hamilton::Types::Update, Hash(Symbol, JSON::Any) | Nil, NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil))))","args_html":"(caller : Hash(Symbol, Proc(<a href=\"../Hamilton/Types/Update.html\">Hamilton::Types::Update</a>, Hash(Symbol, JSON::Any) | Nil, NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil))))","location":{"filename":"src/handlers/cmd_handler.cr","line_number":19,"url":null},"def":{"name":"caller=","args":[{"name":"caller","external_name":"caller","restriction":"Hash(Symbol, Proc(Hamilton::Types::Update, Hash(Symbol, JSON::Any) | Nil, NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil)))"}],"visibility":"Public","body":"@caller = caller"},"external_var":false},{"html_id":"context:Hamilton::Context-instance-method","name":"context","doc":"Context for the current bot sessions.","summary":"<p>Context for the current bot sessions.</p>","abstract":false,"location":{"filename":"src/handlers/cmd_handler.cr","line_number":22,"url":null},"def":{"name":"context","return_type":"Hamilton::Context","visibility":"Public","body":"@context"},"external_var":false},{"html_id":"context=(context:Hamilton::Context)-instance-method","name":"context=","doc":"Context for the current bot sessions.","summary":"<p>Context for the current bot sessions.</p>","abstract":false,"args":[{"name":"context","external_name":"context","restriction":"Hamilton::Context"}],"args_string":"(context : Hamilton::Context)","args_html":"(context : <a href=\"../Hamilton/Context.html\">Hamilton::Context</a>)","location":{"filename":"src/handlers/cmd_handler.cr","line_number":22,"url":null},"def":{"name":"context=","args":[{"name":"context","external_name":"context","restriction":"Hamilton::Context"}],"visibility":"Public","body":"@context = context"},"external_var":false},{"html_id":"log:Log-instance-method","name":"log","doc":"Logger instance.","summary":"<p>Logger instance.</p>","abstract":false,"location":{"filename":"src/handlers/cmd_handler.cr","line_number":25,"url":null},"def":{"name":"log","return_type":"Log","visibility":"Public","body":"@log"},"external_var":false},{"html_id":"log=(log:Log)-instance-method","name":"log=","doc":"Logger instance.","summary":"<p>Logger instance.</p>","abstract":false,"args":[{"name":"log","external_name":"log","restriction":"Log"}],"args_string":"(log : Log)","args_html":"(log : Log)","location":{"filename":"src/handlers/cmd_handler.cr","line_number":25,"url":null},"def":{"name":"log=","args":[{"name":"log","external_name":"log","restriction":"Log"}],"visibility":"Public","body":"@log = log"},"external_var":false},{"html_id":"mapper:Hash(Symbol,Hash(String|Symbol,Symbol))-instance-method","name":"mapper","doc":"Mapping between methods and mapper between update types and methods to handle them.","summary":"<p>Mapping between methods and mapper between update types and methods to handle them.</p>","abstract":false,"location":{"filename":"src/handlers/cmd_handler.cr","line_number":17,"url":null},"def":{"name":"mapper","return_type":"Hash(Symbol, Hash(String | Symbol, Symbol))","visibility":"Public","body":"@mapper"},"external_var":false},{"html_id":"mapper=(mapper:Hash(Symbol,Hash(String|Symbol,Symbol)))-instance-method","name":"mapper=","doc":"Mapping between methods and mapper between update types and methods to handle them.","summary":"<p>Mapping between methods and mapper between update types and methods to handle them.</p>","abstract":false,"args":[{"name":"mapper","external_name":"mapper","restriction":"Hash(Symbol, Hash(String | Symbol, Symbol))"}],"args_string":"(mapper : Hash(Symbol, Hash(String | Symbol, Symbol)))","args_html":"(mapper : Hash(Symbol, Hash(String | Symbol, Symbol)))","location":{"filename":"src/handlers/cmd_handler.cr","line_number":17,"url":null},"def":{"name":"mapper=","args":[{"name":"mapper","external_name":"mapper","restriction":"Hash(Symbol, Hash(String | Symbol, Symbol))"}],"visibility":"Public","body":"@mapper = mapper"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Context","path":"Hamilton/Context.html","kind":"class","full_name":"Hamilton::Context","name":"Context","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/context.cr","line_number":9,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton","kind":"module","full_name":"Hamilton","name":"Hamilton"},"doc":"Context is a storage for some state.\n\nAs it was developed primary for `Hamilton::CmdHandler`, `Hamilton::Context` maps a key of type  \n`Int64 | String | Symbol` to a named tuple with two fields:\n - `method : Symbol | Nil` -- name of some method\n - `data: Hash(Symbol, JSON::Any) | Nil)` -- storage for some specific data","summary":"<p>Context is a storage for some state.</p>","constructors":[{"html_id":"new(*,inner:Hash(Int64|String|Symbol,NamedTuple(method:Symbol|Nil,data:Nil|Hash(Symbol,JSON::Any)))=Hash(Int64|String|Symbol,NamedTuple(method:Symbol|Nil,data:Hash(Symbol,JSON::Any)|Nil)).new,default_method:Symbol|Nil=nil)-class-method","name":"new","doc":"Initializer of the context storage.\n\nOptional parameters:\n`default_method : Symbol | Nil` -- something that will be the default value for the `method` field\n`inner : Hash(Int32 | String | Symbol, NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil))` -- storage itself","summary":"<p>Initializer of the context storage.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"inner","default_value":"Hash(Int64 | String | Symbol, NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil)).new","external_name":"inner","restriction":"::Hash(::Int64 | ::String | ::Symbol, ::NamedTuple(method: ::Symbol | ::Nil, data: ::Nil | ::Hash(::Symbol, ::JSON::Any)))"},{"name":"default_method","default_value":"nil","external_name":"default_method","restriction":"::Symbol | ::Nil"}],"args_string":"(*, inner : Hash(Int64 | String | Symbol, NamedTuple(method: Symbol | Nil, data: Nil | Hash(Symbol, JSON::Any))) = Hash(Int64 | String | Symbol, NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil)).new, default_method : Symbol | Nil = nil)","args_html":"(*, inner : Hash(Int64 | String | Symbol, NamedTuple(method: Symbol | Nil, data: Nil | Hash(Symbol, JSON::Any))) = <span class=\"t\">Hash</span>(<span class=\"t\">Int64</span> <span class=\"o\">|</span> <span class=\"t\">String</span> <span class=\"o\">|</span> <span class=\"t\">Symbol</span>, <span class=\"t\">NamedTuple</span>(method: <span class=\"t\">Symbol</span> <span class=\"o\">|</span> <span class=\"t\">Nil</span>, data: <span class=\"t\">Hash</span>(<span class=\"t\">Symbol</span>, <span class=\"t\">JSON</span><span class=\"t\">::</span><span class=\"t\">Any</span>) <span class=\"o\">|</span> <span class=\"t\">Nil</span>)).new, default_method : Symbol | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/context.cr","line_number":18,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"inner","default_value":"Hash(Int64 | String | Symbol, NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil)).new","external_name":"inner","restriction":"::Hash(::Int64 | ::String | ::Symbol, ::NamedTuple(method: ::Symbol | ::Nil, data: ::Nil | ::Hash(::Symbol, ::JSON::Any)))"},{"name":"default_method","default_value":"nil","external_name":"default_method","restriction":"::Symbol | ::Nil"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(inner: inner, default_method: default_method)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"clean(key:Int64|String|Symbol)-instance-method","name":"clean","doc":"Reset the context for the `key`, i.e. the key will map to `{method: default_method, data: nil}` if present.","summary":"<p>Reset the context for the <code>key</code>, i.e.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":55,"url":null},"def":{"name":"clean","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"if @inner.has_key?(key)\n  @inner[key] = {method: @default_method, data: nil}\n  return @inner[key]\nend\nreturn nil\n"},"external_var":false},{"html_id":"clean_data(key:Int64|String|Symbol)-instance-method","name":"clean_data","doc":"Reset the data for the `key`.","summary":"<p>Reset the data for the <code>key</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":64,"url":null},"def":{"name":"clean_data","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"if inner = @inner[key]?\n  @inner[key] = {method: inner[:method], data: nil}\n  return @inner[key]\nend\nreturn nil\n"},"external_var":false},{"html_id":"clean_method(key:Int64|String|Symbol)-instance-method","name":"clean_method","doc":"Reset the method for the `key`.","summary":"<p>Reset the method for the <code>key</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":73,"url":null},"def":{"name":"clean_method","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"if inner = @inner[key]?\n  @inner[key] = {method: @default_method, data: inner[:data]}\n  return @inner[key]\nend\nreturn nil\n"},"external_var":false},{"html_id":"delete(key:Int64|String|Symbol)-instance-method","name":"delete","doc":"Delete the `key` from the storage.","summary":"<p>Delete the <code>key</code> from the storage.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":82,"url":null},"def":{"name":"delete","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"@inner.delete(key)"},"external_var":false},{"html_id":"get(key:Int64|String|Symbol)-instance-method","name":"get","doc":"Return the context for the `key`.\n\nNOTE: if there was not a context for the `key`, it will be iplicitly created with `{method: default_method, data: nil}`.","summary":"<p>Return the context for the <code>key</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":89,"url":null},"def":{"name":"get","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"if @inner.has_key?(key)\nelse\n  @inner[key] = {method: @default_method, data: nil}\nend\nreturn @inner[key]\n"},"external_var":false},{"html_id":"get?(key:Int64|String|Symbol)-instance-method","name":"get?","doc":"Return the context for the `key`.","summary":"<p>Return the context for the <code>key</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":117,"url":null},"def":{"name":"get?","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"return @inner[key]?"},"external_var":false},{"html_id":"get_data(key:Int64|String|Symbol)-instance-method","name":"get_data","doc":"Return the data for the `key`.\n\nNOTE: if there was not a context for the `key`, it will be iplicitly created with `{method: default_method, data: nil}`.","summary":"<p>Return the data for the <code>key</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":109,"url":null},"def":{"name":"get_data","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"if @inner.has_key?(key)\nelse\n  @inner[key] = {method: @default_method, data: nil}\nend\nreturn @inner[key][:data]\n"},"external_var":false},{"html_id":"get_data?(key:Int64|String|Symbol)-instance-method","name":"get_data?","doc":"Return the data for the `key`.","summary":"<p>Return the data for the <code>key</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":130,"url":null},"def":{"name":"get_data?","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"if inner = @inner[key]?\n  return inner[:data]\nend\nreturn nil\n"},"external_var":false},{"html_id":"get_method(key:Int64|String|Symbol)-instance-method","name":"get_method","doc":"Return the method for the `key`.\n\nNOTE: if there was not a context for the `key`, it will be iplicitly created with `{method: default_method, data: nil}`.","summary":"<p>Return the method for the <code>key</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":99,"url":null},"def":{"name":"get_method","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"if @inner.has_key?(key)\nelse\n  @inner[key] = {method: @default_method, data: nil}\nend\nreturn @inner[key][:method]\n"},"external_var":false},{"html_id":"get_method?(key:Int64|String|Symbol)-instance-method","name":"get_method?","doc":"Return the method for the `key`.","summary":"<p>Return the method for the <code>key</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"args_string":"(key : Int64 | String | Symbol)","args_html":"(key : Int64 | String | Symbol)","location":{"filename":"src/context.cr","line_number":122,"url":null},"def":{"name":"get_method?","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"}],"visibility":"Public","body":"if inner = @inner[key]?\n  return inner[:method]\nend\nreturn nil\n"},"external_var":false},{"html_id":"set(key:Int64|String|Symbol,value:NamedTuple(method:Symbol|Nil,data:Hash(Symbol,JSON::Any)|Nil))-instance-method","name":"set","doc":"Setter for the pair `key, value`.","summary":"<p>Setter for the pair <code>key, value</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"},{"name":"value","external_name":"value","restriction":"NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil)"}],"args_string":"(key : Int64 | String | Symbol, value : NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil))","args_html":"(key : Int64 | String | Symbol, value : NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil))","location":{"filename":"src/context.cr","line_number":25,"url":null},"def":{"name":"set","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"},{"name":"value","external_name":"value","restriction":"NamedTuple(method: Symbol | Nil, data: Hash(Symbol, JSON::Any) | Nil)"}],"visibility":"Public","body":"@inner[key] = value\nreturn @inner[key]\n"},"external_var":false},{"html_id":"set(key:Int64|String|Symbol,method:Symbol)-instance-method","name":"set","doc":"Setter that sets only method for the key.","summary":"<p>Setter that sets only method for the key.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"},{"name":"method","external_name":"method","restriction":"Symbol"}],"args_string":"(key : Int64 | String | Symbol, method : Symbol)","args_html":"(key : Int64 | String | Symbol, method : Symbol)","location":{"filename":"src/context.cr","line_number":31,"url":null},"def":{"name":"set","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"},{"name":"method","external_name":"method","restriction":"Symbol"}],"visibility":"Public","body":"data = if inner = @inner[key]?\n  inner[:data]\nelse\n  nil\nend\n\n@inner[key] = {method: method, data: data}\nreturn @inner[key]\n"},"external_var":false},{"html_id":"set(key:Int64|String|Symbol,data:Hash(Symbol,JSON::Any)|Nil)-instance-method","name":"set","doc":"Setter that sets only data for the key.","summary":"<p>Setter that sets only data for the key.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"},{"name":"data","external_name":"data","restriction":"Hash(Symbol, JSON::Any) | Nil"}],"args_string":"(key : Int64 | String | Symbol, data : Hash(Symbol, JSON::Any) | Nil)","args_html":"(key : Int64 | String | Symbol, data : Hash(Symbol, JSON::Any) | Nil)","location":{"filename":"src/context.cr","line_number":43,"url":null},"def":{"name":"set","args":[{"name":"key","external_name":"key","restriction":"Int64 | String | Symbol"},{"name":"data","external_name":"data","restriction":"Hash(Symbol, JSON::Any) | Nil"}],"visibility":"Public","body":"method = if inner = @inner[key]?\n  inner[:method]\nelse\n  @default_method\nend\n\n@inner[key] = {method: method, data: data}\nreturn @inner[key]\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Errors","path":"Hamilton/Errors.html","kind":"module","full_name":"Hamilton::Errors","name":"Errors","abstract":false,"locations":[{"filename":"src/errors.cr","line_number":4,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton","kind":"module","full_name":"Hamilton","name":"Hamilton"},"doc":"Custom errors.","summary":"<p>Custom errors.</p>","types":[{"html_id":"hamilton/Hamilton/Errors/ApiEndpointError","path":"Hamilton/Errors/ApiEndpointError.html","kind":"class","full_name":"Hamilton::Errors::ApiEndpointError","name":"ApiEndpointError","abstract":false,"superclass":{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":63,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton/Errors","kind":"module","full_name":"Hamilton::Errors","name":"Errors"},"doc":"Exception raised when something wrong is returned.","summary":"<p>Exception raised when something wrong is returned.</p>","constructors":[{"html_id":"new(endpoint:String,status:HTTP::Status,messagem:String=\"\")-class-method","name":"new","abstract":false,"args":[{"name":"endpoint","external_name":"endpoint","restriction":"String"},{"name":"status","external_name":"status","restriction":"HTTP::Status"},{"name":"m","default_value":"\"\"","external_name":"message","restriction":"String"}],"args_string":"(endpoint : String, status : HTTP::Status, message m : String = \"\")","args_html":"(endpoint : String, status : HTTP::Status, message m : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/errors.cr","line_number":64,"url":null},"def":{"name":"new","args":[{"name":"endpoint","external_name":"endpoint","restriction":"String"},{"name":"status","external_name":"status","restriction":"HTTP::Status"},{"name":"m","default_value":"\"\"","external_name":"message","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(endpoint, status, m)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Errors/FieldTypeMissmatch","path":"Hamilton/Errors/FieldTypeMissmatch.html","kind":"class","full_name":"Hamilton::Errors::FieldTypeMissmatch","name":"FieldTypeMissmatch","abstract":false,"superclass":{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":42,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton/Errors","kind":"module","full_name":"Hamilton::Errors","name":"Errors"},"doc":"Exception raised when a method parameter passed in `**params` has wrong type.","summary":"<p>Exception raised when a method parameter passed in <code>**params</code> has wrong type.</p>","constructors":[{"html_id":"new(param_name:String|Symbol,type:Class,param_type:Class)-class-method","name":"new","abstract":false,"args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"},{"name":"type","external_name":"type","restriction":"Class"},{"name":"param_type","external_name":"param_type","restriction":"Class"}],"args_string":"(param_name : String | Symbol, type : Class, param_type : Class)","args_html":"(param_name : String | Symbol, type : Class, param_type : Class)","location":{"filename":"src/errors.cr","line_number":43,"url":null},"def":{"name":"new","args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"},{"name":"type","external_name":"type","restriction":"Class"},{"name":"param_type","external_name":"param_type","restriction":"Class"}],"visibility":"Public","body":"_ = allocate\n_.initialize(param_name, type, param_type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Errors/MissingCmdHandlerMethodAnnotationArg","path":"Hamilton/Errors/MissingCmdHandlerMethodAnnotationArg.html","kind":"class","full_name":"Hamilton::Errors::MissingCmdHandlerMethodAnnotationArg","name":"MissingCmdHandlerMethodAnnotationArg","abstract":false,"superclass":{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":28,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton/Errors","kind":"module","full_name":"Hamilton::Errors","name":"Errors"},"doc":"Exception raised when `CmdHandler` method's `Handle` annotation doesn't contain any arguments.","summary":"<p>Exception raised when <code><a href=\"../../Hamilton/CmdHandler.html\">CmdHandler</a></code> method's <code><a href=\"../../Handle.html\">Handle</a></code> annotation doesn't contain any arguments.</p>","constructors":[{"html_id":"new(annotation_name:String|Symbol)-class-method","name":"new","abstract":false,"args":[{"name":"annotation_name","external_name":"annotation_name","restriction":"String | Symbol"}],"args_string":"(annotation_name : String | Symbol)","args_html":"(annotation_name : String | Symbol)","location":{"filename":"src/errors.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"annotation_name","external_name":"annotation_name","restriction":"String | Symbol"}],"visibility":"Public","body":"_ = allocate\n_.initialize(annotation_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Errors/MissingCmdHandlerMethodParam","path":"Hamilton/Errors/MissingCmdHandlerMethodParam.html","kind":"class","full_name":"Hamilton::Errors::MissingCmdHandlerMethodParam","name":"MissingCmdHandlerMethodParam","abstract":false,"superclass":{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":21,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton/Errors","kind":"module","full_name":"Hamilton::Errors","name":"Errors"},"doc":"Exception raised when `CmdHandler` method doesn't contain parameter it handles.","summary":"<p>Exception raised when <code><a href=\"../../Hamilton/CmdHandler.html\">CmdHandler</a></code> method doesn't contain parameter it handles.</p>","constructors":[{"html_id":"new(param_name:String|Symbol)-class-method","name":"new","abstract":false,"args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"}],"args_string":"(param_name : String | Symbol)","args_html":"(param_name : String | Symbol)","location":{"filename":"src/errors.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"}],"visibility":"Public","body":"_ = allocate\n_.initialize(param_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Errors/MissingField","path":"Hamilton/Errors/MissingField.html","kind":"class","full_name":"Hamilton::Errors::MissingField","name":"MissingField","abstract":false,"superclass":{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":49,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton/Errors","kind":"module","full_name":"Hamilton::Errors","name":"Errors"},"doc":"Exception raised when `**params` does not contain a required param.","summary":"<p>Exception raised when <code>**params</code> does not contain a required param.</p>","constructors":[{"html_id":"new(param_name:String|Symbol)-class-method","name":"new","abstract":false,"args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"}],"args_string":"(param_name : String | Symbol)","args_html":"(param_name : String | Symbol)","location":{"filename":"src/errors.cr","line_number":50,"url":null},"def":{"name":"new","args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"}],"visibility":"Public","body":"_ = allocate\n_.initialize(param_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Errors/MissingParam","path":"Hamilton/Errors/MissingParam.html","kind":"class","full_name":"Hamilton::Errors::MissingParam","name":"MissingParam","abstract":false,"superclass":{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":14,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton/Errors","kind":"module","full_name":"Hamilton::Errors","name":"Errors"},"doc":"Exception raised when `**params` does not contain a required param.","summary":"<p>Exception raised when <code>**params</code> does not contain a required param.</p>","constructors":[{"html_id":"new(param_name:String|Symbol)-class-method","name":"new","abstract":false,"args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"}],"args_string":"(param_name : String | Symbol)","args_html":"(param_name : String | Symbol)","location":{"filename":"src/errors.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"}],"visibility":"Public","body":"_ = allocate\n_.initialize(param_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Errors/ParamTypeMissmatch","path":"Hamilton/Errors/ParamTypeMissmatch.html","kind":"class","full_name":"Hamilton::Errors::ParamTypeMissmatch","name":"ParamTypeMissmatch","abstract":false,"superclass":{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":7,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton/Errors","kind":"module","full_name":"Hamilton::Errors","name":"Errors"},"doc":"Exception raised when a method parameter passed in `**params` has wrong type.","summary":"<p>Exception raised when a method parameter passed in <code>**params</code> has wrong type.</p>","constructors":[{"html_id":"new(param_name:String|Symbol,type:Class,param_type:Class)-class-method","name":"new","abstract":false,"args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"},{"name":"type","external_name":"type","restriction":"Class"},{"name":"param_type","external_name":"param_type","restriction":"Class"}],"args_string":"(param_name : String | Symbol, type : Class, param_type : Class)","args_html":"(param_name : String | Symbol, type : Class, param_type : Class)","location":{"filename":"src/errors.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"},{"name":"type","external_name":"type","restriction":"Class"},{"name":"param_type","external_name":"param_type","restriction":"Class"}],"visibility":"Public","body":"_ = allocate\n_.initialize(param_name, type, param_type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Errors/UnknownField","path":"Hamilton/Errors/UnknownField.html","kind":"class","full_name":"Hamilton::Errors::UnknownField","name":"UnknownField","abstract":false,"superclass":{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":56,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton/Errors","kind":"module","full_name":"Hamilton::Errors","name":"Errors"},"doc":"Exception raised when `**params` contains an unknown param.","summary":"<p>Exception raised when <code>**params</code> contains an unknown param.</p>","constructors":[{"html_id":"new(param_name:String|Symbol)-class-method","name":"new","abstract":false,"args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"}],"args_string":"(param_name : String | Symbol)","args_html":"(param_name : String | Symbol)","location":{"filename":"src/errors.cr","line_number":57,"url":null},"def":{"name":"new","args":[{"name":"param_name","external_name":"param_name","restriction":"String | Symbol"}],"visibility":"Public","body":"_ = allocate\n_.initialize(param_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Errors/UnsupportedCmdHandlerPayloadType","path":"Hamilton/Errors/UnsupportedCmdHandlerPayloadType.html","kind":"class","full_name":"Hamilton::Errors::UnsupportedCmdHandlerPayloadType","name":"UnsupportedCmdHandlerPayloadType","abstract":false,"superclass":{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hamilton/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":35,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton/Errors","kind":"module","full_name":"Hamilton::Errors","name":"Errors"},"doc":"Exception raised when `CmdHandler` method's `Handle` annotation argument is not supported.","summary":"<p>Exception raised when <code><a href=\"../../Hamilton/CmdHandler.html\">CmdHandler</a></code> method's <code><a href=\"../../Handle.html\">Handle</a></code> annotation argument is not supported.</p>","constructors":[{"html_id":"new(payload_type:String|Symbol)-class-method","name":"new","abstract":false,"args":[{"name":"payload_type","external_name":"payload_type","restriction":"String | Symbol"}],"args_string":"(payload_type : String | Symbol)","args_html":"(payload_type : String | Symbol)","location":{"filename":"src/errors.cr","line_number":36,"url":null},"def":{"name":"new","args":[{"name":"payload_type","external_name":"payload_type","restriction":"String | Symbol"}],"visibility":"Public","body":"_ = allocate\n_.initialize(payload_type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]}]},{"html_id":"hamilton/Hamilton/Handler","path":"Hamilton/Handler.html","kind":"module","full_name":"Hamilton::Handler","name":"Handler","abstract":false,"locations":[{"filename":"src/handler.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"hamilton/Hamilton/CmdHandler","kind":"class","full_name":"Hamilton::CmdHandler","name":"CmdHandler"},{"html_id":"hamilton/Hamilton/LogHandler","kind":"class","full_name":"Hamilton::LogHandler","name":"LogHandler"}],"namespace":{"html_id":"hamilton/Hamilton","kind":"module","full_name":"Hamilton","name":"Hamilton"},"doc":"Basic module for updates' handler.\n\nShould be included in custom handler class.","summary":"<p>Basic module for updates' handler.</p>","instance_methods":[{"html_id":"call(update:Hamilton::Types::Update)-instance-method","name":"call","doc":"Handling method that processes an update.","summary":"<p>Handling method that processes an update.</p>","abstract":true,"args":[{"name":"update","external_name":"update","restriction":"Hamilton::Types::Update"}],"args_string":"(update : Hamilton::Types::Update)","args_html":"(update : <a href=\"../Hamilton/Types/Update.html\">Hamilton::Types::Update</a>)","location":{"filename":"src/handler.cr","line_number":12,"url":null},"def":{"name":"call","args":[{"name":"update","external_name":"update","restriction":"Hamilton::Types::Update"}],"visibility":"Public","body":""},"external_var":false},{"html_id":"call_next(update:Hamilton::Types::Update):Nil-instance-method","name":"call_next","doc":"Method that calls the next handler.","summary":"<p>Method that calls the next handler.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Hamilton::Types::Update"}],"args_string":"(update : Hamilton::Types::Update) : Nil","args_html":"(update : <a href=\"../Hamilton/Types/Update.html\">Hamilton::Types::Update</a>) : Nil","location":{"filename":"src/handler.cr","line_number":15,"url":null},"def":{"name":"call_next","args":[{"name":"update","external_name":"update","restriction":"Hamilton::Types::Update"}],"return_type":"Nil","visibility":"Public","body":"if next_handler = @next\n  next_handler.call(update)\nend"},"external_var":false},{"html_id":"next:Handler|HandlerProc|Nil-instance-method","name":"next","doc":"Next handler to be called.","summary":"<p>Next handler to be called.</p>","abstract":false,"location":{"filename":"src/handler.cr","line_number":9,"url":null},"def":{"name":"next","return_type":"Handler | HandlerProc | Nil","visibility":"Public","body":"@next"},"external_var":false},{"html_id":"next=(next__arg0:Handler|HandlerProc|Nil)-instance-method","name":"next=","doc":"Next handler to be called.","summary":"<p>Next handler to be called.</p>","abstract":false,"args":[{"name":"__arg0","external_name":"next","restriction":"Handler | HandlerProc | Nil"}],"args_string":"(next __arg0 : Handler | HandlerProc | Nil)","args_html":"(next __arg0 : <a href=\"../Hamilton/Handler.html\">Handler</a> | <a href=\"../Hamilton/Handler/HandlerProc.html\">HandlerProc</a> | Nil)","location":{"filename":"src/handler.cr","line_number":9,"url":null},"def":{"name":"next=","args":[{"name":"__arg0","external_name":"next","restriction":"Handler | HandlerProc | Nil"}],"visibility":"Public","body":"@next = __arg0"},"external_var":false}],"types":[{"html_id":"hamilton/Hamilton/Handler/HandlerProc","path":"Hamilton/Handler/HandlerProc.html","kind":"alias","full_name":"Hamilton::Handler::HandlerProc","name":"HandlerProc","abstract":false,"locations":[{"filename":"src/handler.cr","line_number":22,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"Proc(Hamilton::Types::Update, Nil)","aliased_html":"<a href=\"../../Hamilton/Types/Update.html\">Hamilton::Types::Update</a> -> Nil","const":false,"namespace":{"html_id":"hamilton/Hamilton/Handler","kind":"module","full_name":"Hamilton::Handler","name":"Handler"},"doc":"The last handler may also be a separate function, so this is the type of such a function.","summary":"<p>The last handler may also be a separate function, so this is the type of such a function.</p>"}]},{"html_id":"hamilton/Hamilton/LogHandler","path":"Hamilton/LogHandler.html","kind":"class","full_name":"Hamilton::LogHandler","name":"LogHandler","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Handler","kind":"module","full_name":"Hamilton::Handler","name":"Handler"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/handlers/log_handler.cr","line_number":5,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Handler","kind":"module","full_name":"Hamilton::Handler","name":"Handler"}],"namespace":{"html_id":"hamilton/Hamilton","kind":"module","full_name":"Hamilton","name":"Hamilton"},"doc":"Handler that logs each update.","summary":"<p>Handler that logs each update.</p>","constructors":[{"html_id":"new(source:String=\"Hamilton::Bot\",level:Log::Severity=Log::Severity::Info)-class-method","name":"new","abstract":false,"args":[{"name":"source","default_value":"\"Hamilton::Bot\"","external_name":"source","restriction":"String"},{"name":"level","default_value":"Log::Severity::Info","external_name":"level","restriction":"Log::Severity"}],"args_string":"(source : String = \"Hamilton::Bot\", level : Log::Severity = Log::Severity::Info)","args_html":"(source : String = <span class=\"s\">&quot;Hamilton::Bot&quot;</span>, level : Log::Severity = <span class=\"t\">Log</span><span class=\"t\">::</span><span class=\"t\">Severity</span><span class=\"t\">::</span><span class=\"t\">Info</span>)","location":{"filename":"src/handlers/log_handler.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"source","default_value":"\"Hamilton::Bot\"","external_name":"source","restriction":"String"},{"name":"level","default_value":"Log::Severity::Info","external_name":"level","restriction":"Log::Severity"}],"visibility":"Public","body":"_ = allocate\n_.initialize(source, level)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"call(update:Hamilton::Types::Update)-instance-method","name":"call","doc":"Handling method that processes an update.","summary":"<p>Handling method that processes an update.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Hamilton::Types::Update"}],"args_string":"(update : Hamilton::Types::Update)","args_html":"(update : <a href=\"../Hamilton/Types/Update.html\">Hamilton::Types::Update</a>)","location":{"filename":"src/handlers/log_handler.cr","line_number":15,"url":null},"def":{"name":"call","args":[{"name":"update","external_name":"update","restriction":"Hamilton::Types::Update"}],"visibility":"Public","body":"start = Time.monotonic\nstatus, error = :ok, nil\n\nbegin\n  call_next(update)\nrescue ex : Exception\n  status = :bad\n  error = ex\nensure\n  elapsed = Time.monotonic - start\n  elapsed_text = elapsed_text(elapsed)\n\n  update_types = update.non_nil_fields\n  update_types.delete(\"update_id\")\n\n  if status == (:ok)\n    @log.info do \"#{update.update_id} - #{update_types[0]} (#{elapsed_text})\" end\n  else\n    @log.error(exception: error) do \"#{update.update_id} - #{update_types[0]} (#{elapsed_text})\" end\n  end\nend\n"},"external_var":false},{"html_id":"log:Log-instance-method","name":"log","doc":"Logger instance.","summary":"<p>Logger instance.</p>","abstract":false,"location":{"filename":"src/handlers/log_handler.cr","line_number":9,"url":null},"def":{"name":"log","return_type":"Log","visibility":"Public","body":"@log"},"external_var":false},{"html_id":"log=(log:Log)-instance-method","name":"log=","doc":"Logger instance.","summary":"<p>Logger instance.</p>","abstract":false,"args":[{"name":"log","external_name":"log","restriction":"Log"}],"args_string":"(log : Log)","args_html":"(log : Log)","location":{"filename":"src/handlers/log_handler.cr","line_number":9,"url":null},"def":{"name":"log=","args":[{"name":"log","external_name":"log","restriction":"Log"}],"visibility":"Public","body":"@log = log"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types","path":"Hamilton/Types.html","kind":"module","full_name":"Hamilton::Types","name":"Types","abstract":false,"locations":[{"filename":"src/types/types.cr","line_number":4,"url":null},{"filename":"src/types/utils.cr","line_number":2,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hamilton/Hamilton","kind":"module","full_name":"Hamilton","name":"Hamilton"},"doc":"Set of types used in the Telegram Bot API.","summary":"<p>Set of types used in the Telegram Bot API.</p>","types":[{"html_id":"hamilton/Hamilton/Types/AcceptedGiftTypes","path":"Hamilton/Types/AcceptedGiftTypes.html","kind":"class","full_name":"Hamilton::Types::AcceptedGiftTypes","name":"AcceptedGiftTypes","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/accepted_gift_types.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the types of gifts that can be gifted to a user or a chat.","summary":"<p>This object describes the types of gifts that can be gifted to a user or a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/accepted_gift_types.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/accepted_gift_types.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"limited_gifts:Bool-instance-method","name":"limited_gifts","doc":"True, if limited regular gifts are accepted.","summary":"<p>True, if limited regular gifts are accepted.</p>","abstract":false,"location":{"filename":"src/types/accepted_gift_types.cr","line_number":14,"url":null},"def":{"name":"limited_gifts","return_type":"Bool","visibility":"Public","body":"@limited_gifts"},"external_var":false},{"html_id":"limited_gifts=(limited_gifts:Bool)-instance-method","name":"limited_gifts=","doc":"True, if limited regular gifts are accepted.","summary":"<p>True, if limited regular gifts are accepted.</p>","abstract":false,"args":[{"name":"limited_gifts","external_name":"limited_gifts","restriction":"Bool"}],"args_string":"(limited_gifts : Bool)","args_html":"(limited_gifts : Bool)","location":{"filename":"src/types/accepted_gift_types.cr","line_number":14,"url":null},"def":{"name":"limited_gifts=","args":[{"name":"limited_gifts","external_name":"limited_gifts","restriction":"Bool"}],"visibility":"Public","body":"@limited_gifts = limited_gifts"},"external_var":false},{"html_id":"premium_subscription:Bool-instance-method","name":"premium_subscription","doc":"True, if a Telegram Premium subscription is accepted.","summary":"<p>True, if a Telegram Premium subscription is accepted.</p>","abstract":false,"location":{"filename":"src/types/accepted_gift_types.cr","line_number":20,"url":null},"def":{"name":"premium_subscription","return_type":"Bool","visibility":"Public","body":"@premium_subscription"},"external_var":false},{"html_id":"premium_subscription=(premium_subscription:Bool)-instance-method","name":"premium_subscription=","doc":"True, if a Telegram Premium subscription is accepted.","summary":"<p>True, if a Telegram Premium subscription is accepted.</p>","abstract":false,"args":[{"name":"premium_subscription","external_name":"premium_subscription","restriction":"Bool"}],"args_string":"(premium_subscription : Bool)","args_html":"(premium_subscription : Bool)","location":{"filename":"src/types/accepted_gift_types.cr","line_number":20,"url":null},"def":{"name":"premium_subscription=","args":[{"name":"premium_subscription","external_name":"premium_subscription","restriction":"Bool"}],"visibility":"Public","body":"@premium_subscription = premium_subscription"},"external_var":false},{"html_id":"unique_gifts:Bool-instance-method","name":"unique_gifts","doc":"True, if unique gifts or gifts that can be upgraded to unique for free are accepted.","summary":"<p>True, if unique gifts or gifts that can be upgraded to unique for free are accepted.</p>","abstract":false,"location":{"filename":"src/types/accepted_gift_types.cr","line_number":17,"url":null},"def":{"name":"unique_gifts","return_type":"Bool","visibility":"Public","body":"@unique_gifts"},"external_var":false},{"html_id":"unique_gifts=(unique_gifts:Bool)-instance-method","name":"unique_gifts=","doc":"True, if unique gifts or gifts that can be upgraded to unique for free are accepted.","summary":"<p>True, if unique gifts or gifts that can be upgraded to unique for free are accepted.</p>","abstract":false,"args":[{"name":"unique_gifts","external_name":"unique_gifts","restriction":"Bool"}],"args_string":"(unique_gifts : Bool)","args_html":"(unique_gifts : Bool)","location":{"filename":"src/types/accepted_gift_types.cr","line_number":17,"url":null},"def":{"name":"unique_gifts=","args":[{"name":"unique_gifts","external_name":"unique_gifts","restriction":"Bool"}],"visibility":"Public","body":"@unique_gifts = unique_gifts"},"external_var":false},{"html_id":"unlimited_gifts:Bool-instance-method","name":"unlimited_gifts","doc":"True, if unlimited regular gifts are accepted.","summary":"<p>True, if unlimited regular gifts are accepted.</p>","abstract":false,"location":{"filename":"src/types/accepted_gift_types.cr","line_number":11,"url":null},"def":{"name":"unlimited_gifts","return_type":"Bool","visibility":"Public","body":"@unlimited_gifts"},"external_var":false},{"html_id":"unlimited_gifts=(unlimited_gifts:Bool)-instance-method","name":"unlimited_gifts=","doc":"True, if unlimited regular gifts are accepted.","summary":"<p>True, if unlimited regular gifts are accepted.</p>","abstract":false,"args":[{"name":"unlimited_gifts","external_name":"unlimited_gifts","restriction":"Bool"}],"args_string":"(unlimited_gifts : Bool)","args_html":"(unlimited_gifts : Bool)","location":{"filename":"src/types/accepted_gift_types.cr","line_number":11,"url":null},"def":{"name":"unlimited_gifts=","args":[{"name":"unlimited_gifts","external_name":"unlimited_gifts","restriction":"Bool"}],"visibility":"Public","body":"@unlimited_gifts = unlimited_gifts"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/AffiliateInfo","path":"Hamilton/Types/AffiliateInfo.html","kind":"class","full_name":"Hamilton::Types::AffiliateInfo","name":"AffiliateInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/affiliate_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Contains information about the affiliate that received a commission via this transaction.","summary":"<p>Contains information about the affiliate that received a commission via this transaction.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/affiliate_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/affiliate_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"affiliate_chat:Hamilton::Types::Chat|Nil-instance-method","name":"affiliate_chat","doc":"The chat that received an affiliate commission if it was received by a chat.","summary":"<p>The chat that received an affiliate commission if it was received by a chat.</p>","abstract":false,"location":{"filename":"src/types/affiliate_info.cr","line_number":14,"url":null},"def":{"name":"affiliate_chat","return_type":"Hamilton::Types::Chat | Nil","visibility":"Public","body":"@affiliate_chat"},"external_var":false},{"html_id":"affiliate_chat=(affiliate_chat:Hamilton::Types::Chat|Nil)-instance-method","name":"affiliate_chat=","doc":"The chat that received an affiliate commission if it was received by a chat.","summary":"<p>The chat that received an affiliate commission if it was received by a chat.</p>","abstract":false,"args":[{"name":"affiliate_chat","external_name":"affiliate_chat","restriction":"Hamilton::Types::Chat | Nil"}],"args_string":"(affiliate_chat : Hamilton::Types::Chat | Nil)","args_html":"(affiliate_chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a> | Nil)","location":{"filename":"src/types/affiliate_info.cr","line_number":14,"url":null},"def":{"name":"affiliate_chat=","args":[{"name":"affiliate_chat","external_name":"affiliate_chat","restriction":"Hamilton::Types::Chat | Nil"}],"visibility":"Public","body":"@affiliate_chat = affiliate_chat"},"external_var":false},{"html_id":"affiliate_user:Hamilton::Types::User|Nil-instance-method","name":"affiliate_user","doc":"The bot or the user that received an affiliate commission if it was received by a bot or a user.","summary":"<p>The bot or the user that received an affiliate commission if it was received by a bot or a user.</p>","abstract":false,"location":{"filename":"src/types/affiliate_info.cr","line_number":11,"url":null},"def":{"name":"affiliate_user","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@affiliate_user"},"external_var":false},{"html_id":"affiliate_user=(affiliate_user:Hamilton::Types::User|Nil)-instance-method","name":"affiliate_user=","doc":"The bot or the user that received an affiliate commission if it was received by a bot or a user.","summary":"<p>The bot or the user that received an affiliate commission if it was received by a bot or a user.</p>","abstract":false,"args":[{"name":"affiliate_user","external_name":"affiliate_user","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(affiliate_user : Hamilton::Types::User | Nil)","args_html":"(affiliate_user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/affiliate_info.cr","line_number":11,"url":null},"def":{"name":"affiliate_user=","args":[{"name":"affiliate_user","external_name":"affiliate_user","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@affiliate_user = affiliate_user"},"external_var":false},{"html_id":"amount:Int32-instance-method","name":"amount","doc":"Integer amount of Telegram Stars received by the affiliate from the transaction, rounded to 0; can be negative for refunds.","summary":"<p>Integer amount of Telegram Stars received by the affiliate from the transaction, rounded to 0; can be negative for refunds.</p>","abstract":false,"location":{"filename":"src/types/affiliate_info.cr","line_number":20,"url":null},"def":{"name":"amount","return_type":"Int32","visibility":"Public","body":"@amount"},"external_var":false},{"html_id":"amount=(amount:Int32)-instance-method","name":"amount=","doc":"Integer amount of Telegram Stars received by the affiliate from the transaction, rounded to 0; can be negative for refunds.","summary":"<p>Integer amount of Telegram Stars received by the affiliate from the transaction, rounded to 0; can be negative for refunds.</p>","abstract":false,"args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"args_string":"(amount : Int32)","args_html":"(amount : Int32)","location":{"filename":"src/types/affiliate_info.cr","line_number":20,"url":null},"def":{"name":"amount=","args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"visibility":"Public","body":"@amount = amount"},"external_var":false},{"html_id":"commission_per_mille:Int32-instance-method","name":"commission_per_mille","doc":"The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the bot from referred users.","summary":"<p>The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the bot from referred users.</p>","abstract":false,"location":{"filename":"src/types/affiliate_info.cr","line_number":17,"url":null},"def":{"name":"commission_per_mille","return_type":"Int32","visibility":"Public","body":"@commission_per_mille"},"external_var":false},{"html_id":"commission_per_mille=(commission_per_mille:Int32)-instance-method","name":"commission_per_mille=","doc":"The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the bot from referred users.","summary":"<p>The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the bot from referred users.</p>","abstract":false,"args":[{"name":"commission_per_mille","external_name":"commission_per_mille","restriction":"Int32"}],"args_string":"(commission_per_mille : Int32)","args_html":"(commission_per_mille : Int32)","location":{"filename":"src/types/affiliate_info.cr","line_number":17,"url":null},"def":{"name":"commission_per_mille=","args":[{"name":"commission_per_mille","external_name":"commission_per_mille","restriction":"Int32"}],"visibility":"Public","body":"@commission_per_mille = commission_per_mille"},"external_var":false},{"html_id":"nanostar_amount:Int32|Nil-instance-method","name":"nanostar_amount","doc":"The number of 1/1000000000 shares of Telegram Stars received by the affiliate; from -999999999 to 999999999; can be negative for refunds.","summary":"<p>The number of 1/1000000000 shares of Telegram Stars received by the affiliate; from -999999999 to 999999999; can be negative for refunds.</p>","abstract":false,"location":{"filename":"src/types/affiliate_info.cr","line_number":23,"url":null},"def":{"name":"nanostar_amount","return_type":"Int32 | Nil","visibility":"Public","body":"@nanostar_amount"},"external_var":false},{"html_id":"nanostar_amount=(nanostar_amount:Int32|Nil)-instance-method","name":"nanostar_amount=","doc":"The number of 1/1000000000 shares of Telegram Stars received by the affiliate; from -999999999 to 999999999; can be negative for refunds.","summary":"<p>The number of 1/1000000000 shares of Telegram Stars received by the affiliate; from -999999999 to 999999999; can be negative for refunds.</p>","abstract":false,"args":[{"name":"nanostar_amount","external_name":"nanostar_amount","restriction":"Int32 | Nil"}],"args_string":"(nanostar_amount : Int32 | Nil)","args_html":"(nanostar_amount : Int32 | Nil)","location":{"filename":"src/types/affiliate_info.cr","line_number":23,"url":null},"def":{"name":"nanostar_amount=","args":[{"name":"nanostar_amount","external_name":"nanostar_amount","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@nanostar_amount = nanostar_amount"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Animation","path":"Hamilton/Types/Animation.html","kind":"class","full_name":"Hamilton::Types::Animation","name":"Animation","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/animation.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).","summary":"<p>This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/animation.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/animation.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"duration:Int32-instance-method","name":"duration","doc":"Duration of the video in seconds as defined by the sender.","summary":"<p>Duration of the video in seconds as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/animation.cr","line_number":23,"url":null},"def":{"name":"duration","return_type":"Int32","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32)-instance-method","name":"duration=","doc":"Duration of the video in seconds as defined by the sender.","summary":"<p>Duration of the video in seconds as defined by the sender.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"args_string":"(duration : Int32)","args_html":"(duration : Int32)","location":{"filename":"src/types/animation.cr","line_number":23,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/animation.cr","line_number":11,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/animation.cr","line_number":11,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_name:String|Nil-instance-method","name":"file_name","doc":"Original animation filename as defined by the sender.","summary":"<p>Original animation filename as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/animation.cr","line_number":29,"url":null},"def":{"name":"file_name","return_type":"String | Nil","visibility":"Public","body":"@file_name"},"external_var":false},{"html_id":"file_name=(file_name:String|Nil)-instance-method","name":"file_name=","doc":"Original animation filename as defined by the sender.","summary":"<p>Original animation filename as defined by the sender.</p>","abstract":false,"args":[{"name":"file_name","external_name":"file_name","restriction":"String | Nil"}],"args_string":"(file_name : String | Nil)","args_html":"(file_name : String | Nil)","location":{"filename":"src/types/animation.cr","line_number":29,"url":null},"def":{"name":"file_name=","args":[{"name":"file_name","external_name":"file_name","restriction":"String | Nil"}],"visibility":"Public","body":"@file_name = file_name"},"external_var":false},{"html_id":"file_size:Int64|Nil-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/animation.cr","line_number":35,"url":null},"def":{"name":"file_size","return_type":"Int64 | Nil","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int64|Nil)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"args_string":"(file_size : Int64 | Nil)","args_html":"(file_size : Int64 | Nil)","location":{"filename":"src/types/animation.cr","line_number":35,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/animation.cr","line_number":14,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/animation.cr","line_number":14,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false},{"html_id":"height:Int32-instance-method","name":"height","doc":"Video height as defined by the sender.","summary":"<p>Video height as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/animation.cr","line_number":20,"url":null},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int32)-instance-method","name":"height=","doc":"Video height as defined by the sender.","summary":"<p>Video height as defined by the sender.</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(height : Int32)","args_html":"(height : Int32)","location":{"filename":"src/types/animation.cr","line_number":20,"url":null},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"mime_type:String|Nil-instance-method","name":"mime_type","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/animation.cr","line_number":32,"url":null},"def":{"name":"mime_type","return_type":"String | Nil","visibility":"Public","body":"@mime_type"},"external_var":false},{"html_id":"mime_type=(mime_type:String|Nil)-instance-method","name":"mime_type=","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"args_string":"(mime_type : String | Nil)","args_html":"(mime_type : String | Nil)","location":{"filename":"src/types/animation.cr","line_number":32,"url":null},"def":{"name":"mime_type=","args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"visibility":"Public","body":"@mime_type = mime_type"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::PhotoSize|Nil-instance-method","name":"thumbnail","doc":"Animation thumbnail as defined by the sender.","summary":"<p>Animation thumbnail as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/animation.cr","line_number":26,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::PhotoSize | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::PhotoSize|Nil)-instance-method","name":"thumbnail=","doc":"Animation thumbnail as defined by the sender.","summary":"<p>Animation thumbnail as defined by the sender.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"args_string":"(thumbnail : Hamilton::Types::PhotoSize | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a> | Nil)","location":{"filename":"src/types/animation.cr","line_number":26,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"width:Int32-instance-method","name":"width","doc":"Video width as defined by the sender.","summary":"<p>Video width as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/animation.cr","line_number":17,"url":null},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int32)-instance-method","name":"width=","doc":"Video width as defined by the sender.","summary":"<p>Video width as defined by the sender.</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/types/animation.cr","line_number":17,"url":null},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@width = width"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Audio","path":"Hamilton/Types/Audio.html","kind":"class","full_name":"Hamilton::Types::Audio","name":"Audio","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/audio.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an audio file to be treated as music by the Telegram clients.","summary":"<p>This object represents an audio file to be treated as music by the Telegram clients.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/audio.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/audio.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"duration:Int32-instance-method","name":"duration","doc":"Duration of the audio in seconds as defined by the sender.","summary":"<p>Duration of the audio in seconds as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/audio.cr","line_number":17,"url":null},"def":{"name":"duration","return_type":"Int32","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32)-instance-method","name":"duration=","doc":"Duration of the audio in seconds as defined by the sender.","summary":"<p>Duration of the audio in seconds as defined by the sender.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"args_string":"(duration : Int32)","args_html":"(duration : Int32)","location":{"filename":"src/types/audio.cr","line_number":17,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/audio.cr","line_number":11,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/audio.cr","line_number":11,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_name:String|Nil-instance-method","name":"file_name","doc":"Original filename as defined by the sender.","summary":"<p>Original filename as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/audio.cr","line_number":26,"url":null},"def":{"name":"file_name","return_type":"String | Nil","visibility":"Public","body":"@file_name"},"external_var":false},{"html_id":"file_name=(file_name:String|Nil)-instance-method","name":"file_name=","doc":"Original filename as defined by the sender.","summary":"<p>Original filename as defined by the sender.</p>","abstract":false,"args":[{"name":"file_name","external_name":"file_name","restriction":"String | Nil"}],"args_string":"(file_name : String | Nil)","args_html":"(file_name : String | Nil)","location":{"filename":"src/types/audio.cr","line_number":26,"url":null},"def":{"name":"file_name=","args":[{"name":"file_name","external_name":"file_name","restriction":"String | Nil"}],"visibility":"Public","body":"@file_name = file_name"},"external_var":false},{"html_id":"file_size:Int64|Nil-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/audio.cr","line_number":32,"url":null},"def":{"name":"file_size","return_type":"Int64 | Nil","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int64|Nil)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"args_string":"(file_size : Int64 | Nil)","args_html":"(file_size : Int64 | Nil)","location":{"filename":"src/types/audio.cr","line_number":32,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/audio.cr","line_number":14,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/audio.cr","line_number":14,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false},{"html_id":"mime_type:String|Nil-instance-method","name":"mime_type","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/audio.cr","line_number":29,"url":null},"def":{"name":"mime_type","return_type":"String | Nil","visibility":"Public","body":"@mime_type"},"external_var":false},{"html_id":"mime_type=(mime_type:String|Nil)-instance-method","name":"mime_type=","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"args_string":"(mime_type : String | Nil)","args_html":"(mime_type : String | Nil)","location":{"filename":"src/types/audio.cr","line_number":29,"url":null},"def":{"name":"mime_type=","args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"visibility":"Public","body":"@mime_type = mime_type"},"external_var":false},{"html_id":"performer:String|Nil-instance-method","name":"performer","doc":"Performer of the audio as defined by the sender or by audio tags.","summary":"<p>Performer of the audio as defined by the sender or by audio tags.</p>","abstract":false,"location":{"filename":"src/types/audio.cr","line_number":20,"url":null},"def":{"name":"performer","return_type":"String | Nil","visibility":"Public","body":"@performer"},"external_var":false},{"html_id":"performer=(performer:String|Nil)-instance-method","name":"performer=","doc":"Performer of the audio as defined by the sender or by audio tags.","summary":"<p>Performer of the audio as defined by the sender or by audio tags.</p>","abstract":false,"args":[{"name":"performer","external_name":"performer","restriction":"String | Nil"}],"args_string":"(performer : String | Nil)","args_html":"(performer : String | Nil)","location":{"filename":"src/types/audio.cr","line_number":20,"url":null},"def":{"name":"performer=","args":[{"name":"performer","external_name":"performer","restriction":"String | Nil"}],"visibility":"Public","body":"@performer = performer"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::PhotoSize|Nil-instance-method","name":"thumbnail","doc":"Thumbnail of the album cover to which the music file belongs.","summary":"<p>Thumbnail of the album cover to which the music file belongs.</p>","abstract":false,"location":{"filename":"src/types/audio.cr","line_number":35,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::PhotoSize | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::PhotoSize|Nil)-instance-method","name":"thumbnail=","doc":"Thumbnail of the album cover to which the music file belongs.","summary":"<p>Thumbnail of the album cover to which the music file belongs.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"args_string":"(thumbnail : Hamilton::Types::PhotoSize | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a> | Nil)","location":{"filename":"src/types/audio.cr","line_number":35,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title of the audio as defined by the sender or by audio tags.","summary":"<p>Title of the audio as defined by the sender or by audio tags.</p>","abstract":false,"location":{"filename":"src/types/audio.cr","line_number":23,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title of the audio as defined by the sender or by audio tags.","summary":"<p>Title of the audio as defined by the sender or by audio tags.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/audio.cr","line_number":23,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BackgroundFill","path":"Hamilton/Types/BackgroundFill.html","kind":"alias","full_name":"Hamilton::Types::BackgroundFill","name":"BackgroundFill","abstract":false,"locations":[{"filename":"src/types/background_fill.cr","line_number":50,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::BackgroundFillFreeformGradient | Hamilton::Types::BackgroundFillGradient | Hamilton::Types::BackgroundFillSolid)","aliased_html":"<a href=\"../../Hamilton/Types/BackgroundFillFreeformGradient.html\">Hamilton::Types::BackgroundFillFreeformGradient</a> | <a href=\"../../Hamilton/Types/BackgroundFillGradient.html\">Hamilton::Types::BackgroundFillGradient</a> | <a href=\"../../Hamilton/Types/BackgroundFillSolid.html\">Hamilton::Types::BackgroundFillSolid</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the way a background is filled based on the selected colors.","summary":"<p>This object describes the way a background is filled based on the selected colors.</p>"},{"html_id":"hamilton/Hamilton/Types/BackgroundFillFreeformGradient","path":"Hamilton/Types/BackgroundFillFreeformGradient.html","kind":"class","full_name":"Hamilton::Types::BackgroundFillFreeformGradient","name":"BackgroundFillFreeformGradient","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/background_fill.cr","line_number":38,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The background is a freeform gradient that rotates after every message in the chat.","summary":"<p>The background is a freeform gradient that rotates after every message in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/background_fill.cr","line_number":39,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/background_fill.cr","line_number":39,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"colors:Array(Int32)-instance-method","name":"colors","doc":"A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format.","summary":"<p>A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format.</p>","abstract":false,"location":{"filename":"src/types/background_fill.cr","line_number":46,"url":null},"def":{"name":"colors","return_type":"Array(Int32)","visibility":"Public","body":"@colors"},"external_var":false},{"html_id":"colors=(colors:Array(Int32))-instance-method","name":"colors=","doc":"A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format.","summary":"<p>A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format.</p>","abstract":false,"args":[{"name":"colors","external_name":"colors","restriction":"Array(Int32)"}],"args_string":"(colors : Array(Int32))","args_html":"(colors : Array(Int32))","location":{"filename":"src/types/background_fill.cr","line_number":46,"url":null},"def":{"name":"colors=","args":[{"name":"colors","external_name":"colors","restriction":"Array(Int32)"}],"visibility":"Public","body":"@colors = colors"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the background fill, always \"freeform_gradient\".","summary":"<p>Type of the background fill, always &quot;freeform_gradient&quot;.</p>","abstract":false,"location":{"filename":"src/types/background_fill.cr","line_number":43,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the background fill, always \"freeform_gradient\".","summary":"<p>Type of the background fill, always &quot;freeform_gradient&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/background_fill.cr","line_number":43,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BackgroundFillGradient","path":"Hamilton/Types/BackgroundFillGradient.html","kind":"class","full_name":"Hamilton::Types::BackgroundFillGradient","name":"BackgroundFillGradient","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/background_fill.cr","line_number":19,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The background is a gradient fill.","summary":"<p>The background is a gradient fill.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/background_fill.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/background_fill.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"bottom_color:Int32-instance-method","name":"bottom_color","doc":"Bottom color of the gradient in the RGB24 format.","summary":"<p>Bottom color of the gradient in the RGB24 format.</p>","abstract":false,"location":{"filename":"src/types/background_fill.cr","line_number":30,"url":null},"def":{"name":"bottom_color","return_type":"Int32","visibility":"Public","body":"@bottom_color"},"external_var":false},{"html_id":"bottom_color=(bottom_color:Int32)-instance-method","name":"bottom_color=","doc":"Bottom color of the gradient in the RGB24 format.","summary":"<p>Bottom color of the gradient in the RGB24 format.</p>","abstract":false,"args":[{"name":"bottom_color","external_name":"bottom_color","restriction":"Int32"}],"args_string":"(bottom_color : Int32)","args_html":"(bottom_color : Int32)","location":{"filename":"src/types/background_fill.cr","line_number":30,"url":null},"def":{"name":"bottom_color=","args":[{"name":"bottom_color","external_name":"bottom_color","restriction":"Int32"}],"visibility":"Public","body":"@bottom_color = bottom_color"},"external_var":false},{"html_id":"rotation_angle:Int32-instance-method","name":"rotation_angle","doc":"Clockwise rotation angle of the background fill in degrees; 0-359.","summary":"<p>Clockwise rotation angle of the background fill in degrees; 0-359.</p>","abstract":false,"location":{"filename":"src/types/background_fill.cr","line_number":33,"url":null},"def":{"name":"rotation_angle","return_type":"Int32","visibility":"Public","body":"@rotation_angle"},"external_var":false},{"html_id":"rotation_angle=(rotation_angle:Int32)-instance-method","name":"rotation_angle=","doc":"Clockwise rotation angle of the background fill in degrees; 0-359.","summary":"<p>Clockwise rotation angle of the background fill in degrees; 0-359.</p>","abstract":false,"args":[{"name":"rotation_angle","external_name":"rotation_angle","restriction":"Int32"}],"args_string":"(rotation_angle : Int32)","args_html":"(rotation_angle : Int32)","location":{"filename":"src/types/background_fill.cr","line_number":33,"url":null},"def":{"name":"rotation_angle=","args":[{"name":"rotation_angle","external_name":"rotation_angle","restriction":"Int32"}],"visibility":"Public","body":"@rotation_angle = rotation_angle"},"external_var":false},{"html_id":"top_color:Int32-instance-method","name":"top_color","doc":"Top color of the gradient in the RGB24 format.","summary":"<p>Top color of the gradient in the RGB24 format.</p>","abstract":false,"location":{"filename":"src/types/background_fill.cr","line_number":27,"url":null},"def":{"name":"top_color","return_type":"Int32","visibility":"Public","body":"@top_color"},"external_var":false},{"html_id":"top_color=(top_color:Int32)-instance-method","name":"top_color=","doc":"Top color of the gradient in the RGB24 format.","summary":"<p>Top color of the gradient in the RGB24 format.</p>","abstract":false,"args":[{"name":"top_color","external_name":"top_color","restriction":"Int32"}],"args_string":"(top_color : Int32)","args_html":"(top_color : Int32)","location":{"filename":"src/types/background_fill.cr","line_number":27,"url":null},"def":{"name":"top_color=","args":[{"name":"top_color","external_name":"top_color","restriction":"Int32"}],"visibility":"Public","body":"@top_color = top_color"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the background fill, always \"gradient\".","summary":"<p>Type of the background fill, always &quot;gradient&quot;.</p>","abstract":false,"location":{"filename":"src/types/background_fill.cr","line_number":24,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the background fill, always \"gradient\".","summary":"<p>Type of the background fill, always &quot;gradient&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/background_fill.cr","line_number":24,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BackgroundFillSolid","path":"Hamilton/Types/BackgroundFillSolid.html","kind":"class","full_name":"Hamilton::Types::BackgroundFillSolid","name":"BackgroundFillSolid","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/background_fill.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The background is filled using the selected color.","summary":"<p>The background is filled using the selected color.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/background_fill.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/background_fill.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"color:Int32-instance-method","name":"color","doc":"The color of the background fill in the RGB24 format.","summary":"<p>The color of the background fill in the RGB24 format.</p>","abstract":false,"location":{"filename":"src/types/background_fill.cr","line_number":14,"url":null},"def":{"name":"color","return_type":"Int32","visibility":"Public","body":"@color"},"external_var":false},{"html_id":"color=(color:Int32)-instance-method","name":"color=","doc":"The color of the background fill in the RGB24 format.","summary":"<p>The color of the background fill in the RGB24 format.</p>","abstract":false,"args":[{"name":"color","external_name":"color","restriction":"Int32"}],"args_string":"(color : Int32)","args_html":"(color : Int32)","location":{"filename":"src/types/background_fill.cr","line_number":14,"url":null},"def":{"name":"color=","args":[{"name":"color","external_name":"color","restriction":"Int32"}],"visibility":"Public","body":"@color = color"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the background fill, always “solid”.","summary":"<p>Type of the background fill, always “solid”.</p>","abstract":false,"location":{"filename":"src/types/background_fill.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the background fill, always “solid”.","summary":"<p>Type of the background fill, always “solid”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/background_fill.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BackgroundType","path":"Hamilton/Types/BackgroundType.html","kind":"alias","full_name":"Hamilton::Types::BackgroundType","name":"BackgroundType","abstract":false,"locations":[{"filename":"src/types/background_type.cr","line_number":81,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::BackgroundTypeChatTheme | Hamilton::Types::BackgroundTypeFill | Hamilton::Types::BackgroundTypePattern | Hamilton::Types::BackgroundTypeWallpaper)","aliased_html":"<a href=\"../../Hamilton/Types/BackgroundTypeChatTheme.html\">Hamilton::Types::BackgroundTypeChatTheme</a> | <a href=\"../../Hamilton/Types/BackgroundTypeFill.html\">Hamilton::Types::BackgroundTypeFill</a> | <a href=\"../../Hamilton/Types/BackgroundTypePattern.html\">Hamilton::Types::BackgroundTypePattern</a> | <a href=\"../../Hamilton/Types/BackgroundTypeWallpaper.html\">Hamilton::Types::BackgroundTypeWallpaper</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the type of a background.","summary":"<p>This object describes the type of a background.</p>"},{"html_id":"hamilton/Hamilton/Types/BackgroundTypeChatTheme","path":"Hamilton/Types/BackgroundTypeChatTheme.html","kind":"class","full_name":"Hamilton::Types::BackgroundTypeChatTheme","name":"BackgroundTypeChatTheme","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/background_type.cr","line_number":69,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The background is taken directly from a built-in chat theme.","summary":"<p>The background is taken directly from a built-in chat theme.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/background_type.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/background_type.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"theme_name:String-instance-method","name":"theme_name","doc":"Name of the chat theme, which is usually an emoji.","summary":"<p>Name of the chat theme, which is usually an emoji.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":77,"url":null},"def":{"name":"theme_name","return_type":"String","visibility":"Public","body":"@theme_name"},"external_var":false},{"html_id":"theme_name=(theme_name:String)-instance-method","name":"theme_name=","doc":"Name of the chat theme, which is usually an emoji.","summary":"<p>Name of the chat theme, which is usually an emoji.</p>","abstract":false,"args":[{"name":"theme_name","external_name":"theme_name","restriction":"String"}],"args_string":"(theme_name : String)","args_html":"(theme_name : String)","location":{"filename":"src/types/background_type.cr","line_number":77,"url":null},"def":{"name":"theme_name=","args":[{"name":"theme_name","external_name":"theme_name","restriction":"String"}],"visibility":"Public","body":"@theme_name = theme_name"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the background, always \"chat_theme\".","summary":"<p>Type of the background, always &quot;chat_theme&quot;.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":74,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the background, always \"chat_theme\".","summary":"<p>Type of the background, always &quot;chat_theme&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/background_type.cr","line_number":74,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BackgroundTypeFill","path":"Hamilton/Types/BackgroundTypeFill.html","kind":"class","full_name":"Hamilton::Types::BackgroundTypeFill","name":"BackgroundTypeFill","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/background_type.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The background is automatically filled based on the selected colors.","summary":"<p>The background is automatically filled based on the selected colors.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/background_type.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/background_type.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"dark_theme_dimming:Int32-instance-method","name":"dark_theme_dimming","doc":"Dimming of the background in dark themes, as a percentage; 0-100.","summary":"<p>Dimming of the background in dark themes, as a percentage; 0-100.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":17,"url":null},"def":{"name":"dark_theme_dimming","return_type":"Int32","visibility":"Public","body":"@dark_theme_dimming"},"external_var":false},{"html_id":"dark_theme_dimming=(dark_theme_dimming:Int32)-instance-method","name":"dark_theme_dimming=","doc":"Dimming of the background in dark themes, as a percentage; 0-100.","summary":"<p>Dimming of the background in dark themes, as a percentage; 0-100.</p>","abstract":false,"args":[{"name":"dark_theme_dimming","external_name":"dark_theme_dimming","restriction":"Int32"}],"args_string":"(dark_theme_dimming : Int32)","args_html":"(dark_theme_dimming : Int32)","location":{"filename":"src/types/background_type.cr","line_number":17,"url":null},"def":{"name":"dark_theme_dimming=","args":[{"name":"dark_theme_dimming","external_name":"dark_theme_dimming","restriction":"Int32"}],"visibility":"Public","body":"@dark_theme_dimming = dark_theme_dimming"},"external_var":false},{"html_id":"fill:Hamilton::Types::BackgroundFill-instance-method","name":"fill","doc":"The background fill.","summary":"<p>The background fill.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":14,"url":null},"def":{"name":"fill","return_type":"Hamilton::Types::BackgroundFill","visibility":"Public","body":"@fill"},"external_var":false},{"html_id":"fill=(fill:Hamilton::Types::BackgroundFill)-instance-method","name":"fill=","doc":"The background fill.","summary":"<p>The background fill.</p>","abstract":false,"args":[{"name":"fill","external_name":"fill","restriction":"Hamilton::Types::BackgroundFill"}],"args_string":"(fill : Hamilton::Types::BackgroundFill)","args_html":"(fill : <a href=\"../../Hamilton/Types/BackgroundFill.html\">Hamilton::Types::BackgroundFill</a>)","location":{"filename":"src/types/background_type.cr","line_number":14,"url":null},"def":{"name":"fill=","args":[{"name":"fill","external_name":"fill","restriction":"Hamilton::Types::BackgroundFill"}],"visibility":"Public","body":"@fill = fill"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the background, always “fill”.","summary":"<p>Type of the background, always “fill”.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the background, always “fill”.","summary":"<p>Type of the background, always “fill”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/background_type.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BackgroundTypePattern","path":"Hamilton/Types/BackgroundTypePattern.html","kind":"class","full_name":"Hamilton::Types::BackgroundTypePattern","name":"BackgroundTypePattern","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/background_type.cr","line_number":44,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The background is a .PNG or .TGV (gzipped subset of SVG with MIME type “application/x-tgwallpattern”) pattern to be combined with the background fill chosen by the user.","summary":"<p>The background is a .PNG or .TGV (gzipped subset of SVG with MIME type “application/x-tgwallpattern”) pattern to be combined with the background fill chosen by the user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/background_type.cr","line_number":45,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/background_type.cr","line_number":45,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"document:Hamilton::Types::Document-instance-method","name":"document","doc":"Document with the wallpaper.","summary":"<p>Document with the wallpaper.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":52,"url":null},"def":{"name":"document","return_type":"Hamilton::Types::Document","visibility":"Public","body":"@document"},"external_var":false},{"html_id":"document=(document:Hamilton::Types::Document)-instance-method","name":"document=","doc":"Document with the wallpaper.","summary":"<p>Document with the wallpaper.</p>","abstract":false,"args":[{"name":"document","external_name":"document","restriction":"Hamilton::Types::Document"}],"args_string":"(document : Hamilton::Types::Document)","args_html":"(document : <a href=\"../../Hamilton/Types/Document.html\">Hamilton::Types::Document</a>)","location":{"filename":"src/types/background_type.cr","line_number":52,"url":null},"def":{"name":"document=","args":[{"name":"document","external_name":"document","restriction":"Hamilton::Types::Document"}],"visibility":"Public","body":"@document = document"},"external_var":false},{"html_id":"fill:Hamilton::Types::BackgroundFill-instance-method","name":"fill","doc":"The background fill that is combined with the pattern.","summary":"<p>The background fill that is combined with the pattern.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":55,"url":null},"def":{"name":"fill","return_type":"Hamilton::Types::BackgroundFill","visibility":"Public","body":"@fill"},"external_var":false},{"html_id":"fill=(fill:Hamilton::Types::BackgroundFill)-instance-method","name":"fill=","doc":"The background fill that is combined with the pattern.","summary":"<p>The background fill that is combined with the pattern.</p>","abstract":false,"args":[{"name":"fill","external_name":"fill","restriction":"Hamilton::Types::BackgroundFill"}],"args_string":"(fill : Hamilton::Types::BackgroundFill)","args_html":"(fill : <a href=\"../../Hamilton/Types/BackgroundFill.html\">Hamilton::Types::BackgroundFill</a>)","location":{"filename":"src/types/background_type.cr","line_number":55,"url":null},"def":{"name":"fill=","args":[{"name":"fill","external_name":"fill","restriction":"Hamilton::Types::BackgroundFill"}],"visibility":"Public","body":"@fill = fill"},"external_var":false},{"html_id":"intensity:Int32-instance-method","name":"intensity","doc":"Intensity of the pattern when it is shown above the filled background; 0-100.","summary":"<p>Intensity of the pattern when it is shown above the filled background; 0-100.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":58,"url":null},"def":{"name":"intensity","return_type":"Int32","visibility":"Public","body":"@intensity"},"external_var":false},{"html_id":"intensity=(intensity:Int32)-instance-method","name":"intensity=","doc":"Intensity of the pattern when it is shown above the filled background; 0-100.","summary":"<p>Intensity of the pattern when it is shown above the filled background; 0-100.</p>","abstract":false,"args":[{"name":"intensity","external_name":"intensity","restriction":"Int32"}],"args_string":"(intensity : Int32)","args_html":"(intensity : Int32)","location":{"filename":"src/types/background_type.cr","line_number":58,"url":null},"def":{"name":"intensity=","args":[{"name":"intensity","external_name":"intensity","restriction":"Int32"}],"visibility":"Public","body":"@intensity = intensity"},"external_var":false},{"html_id":"is_inverted:Bool|Nil-instance-method","name":"is_inverted","doc":"True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only.","summary":"<p>True, if the background fill must be applied only to the pattern itself.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":61,"url":null},"def":{"name":"is_inverted","return_type":"Bool | Nil","visibility":"Public","body":"@is_inverted"},"external_var":false},{"html_id":"is_inverted=(is_inverted:Bool|Nil)-instance-method","name":"is_inverted=","doc":"True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only.","summary":"<p>True, if the background fill must be applied only to the pattern itself.</p>","abstract":false,"args":[{"name":"is_inverted","external_name":"is_inverted","restriction":"Bool | Nil"}],"args_string":"(is_inverted : Bool | Nil)","args_html":"(is_inverted : Bool | Nil)","location":{"filename":"src/types/background_type.cr","line_number":61,"url":null},"def":{"name":"is_inverted=","args":[{"name":"is_inverted","external_name":"is_inverted","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_inverted = is_inverted"},"external_var":false},{"html_id":"is_moving:Bool|Nil-instance-method","name":"is_moving","doc":"True, if the background moves slightly when the device is tilted.","summary":"<p>True, if the background moves slightly when the device is tilted.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":64,"url":null},"def":{"name":"is_moving","return_type":"Bool | Nil","visibility":"Public","body":"@is_moving"},"external_var":false},{"html_id":"is_moving=(is_moving:Bool|Nil)-instance-method","name":"is_moving=","doc":"True, if the background moves slightly when the device is tilted.","summary":"<p>True, if the background moves slightly when the device is tilted.</p>","abstract":false,"args":[{"name":"is_moving","external_name":"is_moving","restriction":"Bool | Nil"}],"args_string":"(is_moving : Bool | Nil)","args_html":"(is_moving : Bool | Nil)","location":{"filename":"src/types/background_type.cr","line_number":64,"url":null},"def":{"name":"is_moving=","args":[{"name":"is_moving","external_name":"is_moving","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_moving = is_moving"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the background, always \"pattern\".","summary":"<p>Type of the background, always &quot;pattern&quot;.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":49,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the background, always \"pattern\".","summary":"<p>Type of the background, always &quot;pattern&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/background_type.cr","line_number":49,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BackgroundTypeWallpaper","path":"Hamilton/Types/BackgroundTypeWallpaper.html","kind":"class","full_name":"Hamilton::Types::BackgroundTypeWallpaper","name":"BackgroundTypeWallpaper","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/background_type.cr","line_number":22,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The background is a wallpaper in the JPEG format.","summary":"<p>The background is a wallpaper in the JPEG format.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/background_type.cr","line_number":23,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/background_type.cr","line_number":23,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"dark_theme_dimming:Int32-instance-method","name":"dark_theme_dimming","doc":"Dimming of the background in dark themes, as a percentage; 0-100.","summary":"<p>Dimming of the background in dark themes, as a percentage; 0-100.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":33,"url":null},"def":{"name":"dark_theme_dimming","return_type":"Int32","visibility":"Public","body":"@dark_theme_dimming"},"external_var":false},{"html_id":"dark_theme_dimming=(dark_theme_dimming:Int32)-instance-method","name":"dark_theme_dimming=","doc":"Dimming of the background in dark themes, as a percentage; 0-100.","summary":"<p>Dimming of the background in dark themes, as a percentage; 0-100.</p>","abstract":false,"args":[{"name":"dark_theme_dimming","external_name":"dark_theme_dimming","restriction":"Int32"}],"args_string":"(dark_theme_dimming : Int32)","args_html":"(dark_theme_dimming : Int32)","location":{"filename":"src/types/background_type.cr","line_number":33,"url":null},"def":{"name":"dark_theme_dimming=","args":[{"name":"dark_theme_dimming","external_name":"dark_theme_dimming","restriction":"Int32"}],"visibility":"Public","body":"@dark_theme_dimming = dark_theme_dimming"},"external_var":false},{"html_id":"document:Hamilton::Types::Document-instance-method","name":"document","doc":"Document with the wallpaper.","summary":"<p>Document with the wallpaper.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":30,"url":null},"def":{"name":"document","return_type":"Hamilton::Types::Document","visibility":"Public","body":"@document"},"external_var":false},{"html_id":"document=(document:Hamilton::Types::Document)-instance-method","name":"document=","doc":"Document with the wallpaper.","summary":"<p>Document with the wallpaper.</p>","abstract":false,"args":[{"name":"document","external_name":"document","restriction":"Hamilton::Types::Document"}],"args_string":"(document : Hamilton::Types::Document)","args_html":"(document : <a href=\"../../Hamilton/Types/Document.html\">Hamilton::Types::Document</a>)","location":{"filename":"src/types/background_type.cr","line_number":30,"url":null},"def":{"name":"document=","args":[{"name":"document","external_name":"document","restriction":"Hamilton::Types::Document"}],"visibility":"Public","body":"@document = document"},"external_var":false},{"html_id":"is_blurred:Bool|Nil-instance-method","name":"is_blurred","doc":"True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12.","summary":"<p>True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":36,"url":null},"def":{"name":"is_blurred","return_type":"Bool | Nil","visibility":"Public","body":"@is_blurred"},"external_var":false},{"html_id":"is_blurred=(is_blurred:Bool|Nil)-instance-method","name":"is_blurred=","doc":"True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12.","summary":"<p>True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12.</p>","abstract":false,"args":[{"name":"is_blurred","external_name":"is_blurred","restriction":"Bool | Nil"}],"args_string":"(is_blurred : Bool | Nil)","args_html":"(is_blurred : Bool | Nil)","location":{"filename":"src/types/background_type.cr","line_number":36,"url":null},"def":{"name":"is_blurred=","args":[{"name":"is_blurred","external_name":"is_blurred","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_blurred = is_blurred"},"external_var":false},{"html_id":"is_moving:Bool|Nil-instance-method","name":"is_moving","doc":"True, if the background moves slightly when the device is tilted.","summary":"<p>True, if the background moves slightly when the device is tilted.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":39,"url":null},"def":{"name":"is_moving","return_type":"Bool | Nil","visibility":"Public","body":"@is_moving"},"external_var":false},{"html_id":"is_moving=(is_moving:Bool|Nil)-instance-method","name":"is_moving=","doc":"True, if the background moves slightly when the device is tilted.","summary":"<p>True, if the background moves slightly when the device is tilted.</p>","abstract":false,"args":[{"name":"is_moving","external_name":"is_moving","restriction":"Bool | Nil"}],"args_string":"(is_moving : Bool | Nil)","args_html":"(is_moving : Bool | Nil)","location":{"filename":"src/types/background_type.cr","line_number":39,"url":null},"def":{"name":"is_moving=","args":[{"name":"is_moving","external_name":"is_moving","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_moving = is_moving"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the background, always \"wallpaper\".","summary":"<p>Type of the background, always &quot;wallpaper&quot;.</p>","abstract":false,"location":{"filename":"src/types/background_type.cr","line_number":27,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the background, always \"wallpaper\".","summary":"<p>Type of the background, always &quot;wallpaper&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/background_type.cr","line_number":27,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Birthdate","path":"Hamilton/Types/Birthdate.html","kind":"class","full_name":"Hamilton::Types::Birthdate","name":"Birthdate","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/birthday.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the birthdate of a user.","summary":"<p>Describes the birthdate of a user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/birthday.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/birthday.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"day:Int32-instance-method","name":"day","doc":"Day of the user's birth; 1-31.","summary":"<p>Day of the user's birth; 1-31.</p>","abstract":false,"location":{"filename":"src/types/birthday.cr","line_number":11,"url":null},"def":{"name":"day","return_type":"Int32","visibility":"Public","body":"@day"},"external_var":false},{"html_id":"day=(day:Int32)-instance-method","name":"day=","doc":"Day of the user's birth; 1-31.","summary":"<p>Day of the user's birth; 1-31.</p>","abstract":false,"args":[{"name":"day","external_name":"day","restriction":"Int32"}],"args_string":"(day : Int32)","args_html":"(day : Int32)","location":{"filename":"src/types/birthday.cr","line_number":11,"url":null},"def":{"name":"day=","args":[{"name":"day","external_name":"day","restriction":"Int32"}],"visibility":"Public","body":"@day = day"},"external_var":false},{"html_id":"month:Int32-instance-method","name":"month","doc":"Month of the user's birth; 1-12.","summary":"<p>Month of the user's birth; 1-12.</p>","abstract":false,"location":{"filename":"src/types/birthday.cr","line_number":14,"url":null},"def":{"name":"month","return_type":"Int32","visibility":"Public","body":"@month"},"external_var":false},{"html_id":"month=(month:Int32)-instance-method","name":"month=","doc":"Month of the user's birth; 1-12.","summary":"<p>Month of the user's birth; 1-12.</p>","abstract":false,"args":[{"name":"month","external_name":"month","restriction":"Int32"}],"args_string":"(month : Int32)","args_html":"(month : Int32)","location":{"filename":"src/types/birthday.cr","line_number":14,"url":null},"def":{"name":"month=","args":[{"name":"month","external_name":"month","restriction":"Int32"}],"visibility":"Public","body":"@month = month"},"external_var":false},{"html_id":"year:Int32|Nil-instance-method","name":"year","doc":"Year of the user's birth.","summary":"<p>Year of the user's birth.</p>","abstract":false,"location":{"filename":"src/types/birthday.cr","line_number":17,"url":null},"def":{"name":"year","return_type":"Int32 | Nil","visibility":"Public","body":"@year"},"external_var":false},{"html_id":"year=(year:Int32|Nil)-instance-method","name":"year=","doc":"Year of the user's birth.","summary":"<p>Year of the user's birth.</p>","abstract":false,"args":[{"name":"year","external_name":"year","restriction":"Int32 | Nil"}],"args_string":"(year : Int32 | Nil)","args_html":"(year : Int32 | Nil)","location":{"filename":"src/types/birthday.cr","line_number":17,"url":null},"def":{"name":"year=","args":[{"name":"year","external_name":"year","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@year = year"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotCommand","path":"Hamilton/Types/BotCommand.html","kind":"class","full_name":"Hamilton::Types::BotCommand","name":"BotCommand","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_command.cr","line_number":29,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a bot command.\n\nThe following algorithm is used to determine the list of commands for a particular user viewing the bot menu. The first list of commands which is set is returned:\nCommands in the chat with the bot:\n- botCommandScopeChat + language_code\n- botCommandScopeChat\n- botCommandScopeAllPrivateChats + language_code\n- botCommandScopeAllPrivateChats\n- botCommandScopeDefault + language_code\n- botCommandScopeDefault\n\nCommands in group and supergroup chats:\n- botCommandScopeChatMember + language_code\n- botCommandScopeChatMember\n- botCommandScopeChatAdministrators + language_code (administrators only)\n- botCommandScopeChatAdministrators (administrators only)\n- botCommandScopeChat + language_code\n- botCommandScopeChat\n- botCommandScopeAllChatAdministrators + language_code (administrators only)\n- botCommandScopeAllChatAdministrators (administrators only)\n- botCommandScopeAllGroupChats + language_code\n- botCommandScopeAllGroupChats\n- botCommandScopeDefault + language_code\n- botCommandScopeDefault","summary":"<p>This object represents a bot command.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_command.cr","line_number":30,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_command.cr","line_number":30,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"command:String-instance-method","name":"command","doc":"Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores.","summary":"<p>Text of the command; 1-32 characters.</p>","abstract":false,"location":{"filename":"src/types/bot_command.cr","line_number":34,"url":null},"def":{"name":"command","return_type":"String","visibility":"Public","body":"@command"},"external_var":false},{"html_id":"command=(command:String)-instance-method","name":"command=","doc":"Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores.","summary":"<p>Text of the command; 1-32 characters.</p>","abstract":false,"args":[{"name":"command","external_name":"command","restriction":"String"}],"args_string":"(command : String)","args_html":"(command : String)","location":{"filename":"src/types/bot_command.cr","line_number":34,"url":null},"def":{"name":"command=","args":[{"name":"command","external_name":"command","restriction":"String"}],"visibility":"Public","body":"@command = command"},"external_var":false},{"html_id":"description:String-instance-method","name":"description","doc":"Description of the command; 1-256 characters.","summary":"<p>Description of the command; 1-256 characters.</p>","abstract":false,"location":{"filename":"src/types/bot_command.cr","line_number":37,"url":null},"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String)-instance-method","name":"description=","doc":"Description of the command; 1-256 characters.","summary":"<p>Description of the command; 1-256 characters.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","location":{"filename":"src/types/bot_command.cr","line_number":37,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotCommandScope","path":"Hamilton/Types/BotCommandScope.html","kind":"alias","full_name":"Hamilton::Types::BotCommandScope","name":"BotCommandScope","abstract":false,"locations":[{"filename":"src/types/bot_command_scope.cr","line_number":87,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::BotCommandScopeAllChatAdministrators | Hamilton::Types::BotCommandScopeAllGroupChats | Hamilton::Types::BotCommandScopeAllPrivateChats | Hamilton::Types::BotCommandScopeChat | Hamilton::Types::BotCommandScopeChatAdministrators | Hamilton::Types::BotCommandScopeChatMember | Hamilton::Types::BotCommandScopeDefault)","aliased_html":"<a href=\"../../Hamilton/Types/BotCommandScopeAllChatAdministrators.html\">Hamilton::Types::BotCommandScopeAllChatAdministrators</a> | <a href=\"../../Hamilton/Types/BotCommandScopeAllGroupChats.html\">Hamilton::Types::BotCommandScopeAllGroupChats</a> | <a href=\"../../Hamilton/Types/BotCommandScopeAllPrivateChats.html\">Hamilton::Types::BotCommandScopeAllPrivateChats</a> | <a href=\"../../Hamilton/Types/BotCommandScopeChat.html\">Hamilton::Types::BotCommandScopeChat</a> | <a href=\"../../Hamilton/Types/BotCommandScopeChatAdministrators.html\">Hamilton::Types::BotCommandScopeChatAdministrators</a> | <a href=\"../../Hamilton/Types/BotCommandScopeChatMember.html\">Hamilton::Types::BotCommandScopeChatMember</a> | <a href=\"../../Hamilton/Types/BotCommandScopeDefault.html\">Hamilton::Types::BotCommandScopeDefault</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents the scope to which bot commands are applied.","summary":"<p>This object represents the scope to which bot commands are applied.</p>"},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeAllChatAdministrators","path":"Hamilton/Types/BotCommandScopeAllChatAdministrators.html","kind":"class","full_name":"Hamilton::Types::BotCommandScopeAllChatAdministrators","name":"BotCommandScopeAllChatAdministrators","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_command_scope.cr","line_number":36,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the scope of bot commands, covering all group and supergroup chat administrators.","summary":"<p>Represents the scope of bot commands, covering all group and supergroup chat administrators.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":37,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":37,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Scope type, must be \"all_chat_administrators\".","summary":"<p>Scope type, must be &quot;all_chat_administrators&quot;.</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":41,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Scope type, must be \"all_chat_administrators\".","summary":"<p>Scope type, must be &quot;all_chat_administrators&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/bot_command_scope.cr","line_number":41,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeAllGroupChats","path":"Hamilton/Types/BotCommandScopeAllGroupChats.html","kind":"class","full_name":"Hamilton::Types::BotCommandScopeAllGroupChats","name":"BotCommandScopeAllGroupChats","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_command_scope.cr","line_number":26,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the scope of bot commands, covering all group and supergroup chats.","summary":"<p>Represents the scope of bot commands, covering all group and supergroup chats.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":27,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":27,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Scope type, must be \"all_group_chats\".","summary":"<p>Scope type, must be &quot;all_group_chats&quot;.</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":31,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Scope type, must be \"all_group_chats\".","summary":"<p>Scope type, must be &quot;all_group_chats&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/bot_command_scope.cr","line_number":31,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeAllPrivateChats","path":"Hamilton/Types/BotCommandScopeAllPrivateChats.html","kind":"class","full_name":"Hamilton::Types::BotCommandScopeAllPrivateChats","name":"BotCommandScopeAllPrivateChats","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_command_scope.cr","line_number":16,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the scope of bot commands, covering all private chats.","summary":"<p>Represents the scope of bot commands, covering all private chats.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Scope type, must be \"all_private_chats\".","summary":"<p>Scope type, must be &quot;all_private_chats&quot;.</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":21,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Scope type, must be \"all_private_chats\".","summary":"<p>Scope type, must be &quot;all_private_chats&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/bot_command_scope.cr","line_number":21,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeChat","path":"Hamilton/Types/BotCommandScopeChat.html","kind":"class","full_name":"Hamilton::Types::BotCommandScopeChat","name":"BotCommandScopeChat","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_command_scope.cr","line_number":46,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the scope of bot commands, covering a specific chat.","summary":"<p>Represents the scope of bot commands, covering a specific chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":47,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":47,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat_id:String|Int32-instance-method","name":"chat_id","doc":"Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`). Channel direct messages chats and channel chats aren't supported.","summary":"<p>Unique identifier for the target chat or username of the target supergroup (in the format <code>@supergroupusername</code>).</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":54,"url":null},"def":{"name":"chat_id","return_type":"String | Int32","visibility":"Public","body":"@chat_id"},"external_var":false},{"html_id":"chat_id=(chat_id:String|Int32)-instance-method","name":"chat_id=","doc":"Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`). Channel direct messages chats and channel chats aren't supported.","summary":"<p>Unique identifier for the target chat or username of the target supergroup (in the format <code>@supergroupusername</code>).</p>","abstract":false,"args":[{"name":"chat_id","external_name":"chat_id","restriction":"String | Int32"}],"args_string":"(chat_id : String | Int32)","args_html":"(chat_id : String | Int32)","location":{"filename":"src/types/bot_command_scope.cr","line_number":54,"url":null},"def":{"name":"chat_id=","args":[{"name":"chat_id","external_name":"chat_id","restriction":"String | Int32"}],"visibility":"Public","body":"@chat_id = chat_id"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Scope type, must be \"chat\".","summary":"<p>Scope type, must be &quot;chat&quot;.</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":51,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Scope type, must be \"chat\".","summary":"<p>Scope type, must be &quot;chat&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/bot_command_scope.cr","line_number":51,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeChatAdministrators","path":"Hamilton/Types/BotCommandScopeChatAdministrators.html","kind":"class","full_name":"Hamilton::Types::BotCommandScopeChatAdministrators","name":"BotCommandScopeChatAdministrators","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_command_scope.cr","line_number":59,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.","summary":"<p>Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":60,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":60,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat_id:String|Int32-instance-method","name":"chat_id","doc":"Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`). Channel direct messages chats and channel chats aren't supported.","summary":"<p>Unique identifier for the target chat or username of the target supergroup (in the format <code>@supergroupusername</code>).</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":67,"url":null},"def":{"name":"chat_id","return_type":"String | Int32","visibility":"Public","body":"@chat_id"},"external_var":false},{"html_id":"chat_id=(chat_id:String|Int32)-instance-method","name":"chat_id=","doc":"Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`). Channel direct messages chats and channel chats aren't supported.","summary":"<p>Unique identifier for the target chat or username of the target supergroup (in the format <code>@supergroupusername</code>).</p>","abstract":false,"args":[{"name":"chat_id","external_name":"chat_id","restriction":"String | Int32"}],"args_string":"(chat_id : String | Int32)","args_html":"(chat_id : String | Int32)","location":{"filename":"src/types/bot_command_scope.cr","line_number":67,"url":null},"def":{"name":"chat_id=","args":[{"name":"chat_id","external_name":"chat_id","restriction":"String | Int32"}],"visibility":"Public","body":"@chat_id = chat_id"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Scope type, must be \"chat_administrators\".","summary":"<p>Scope type, must be &quot;chat_administrators&quot;.</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":64,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Scope type, must be \"chat_administrators\".","summary":"<p>Scope type, must be &quot;chat_administrators&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/bot_command_scope.cr","line_number":64,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeChatMember","path":"Hamilton/Types/BotCommandScopeChatMember.html","kind":"class","full_name":"Hamilton::Types::BotCommandScopeChatMember","name":"BotCommandScopeChatMember","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_command_scope.cr","line_number":72,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the scope of bot commands, covering a specific member of a group or supergroup chat.","summary":"<p>Represents the scope of bot commands, covering a specific member of a group or supergroup chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":73,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":73,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat_id:String|Int32-instance-method","name":"chat_id","doc":"Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`). Channel direct messages chats and channel chats aren't supported.","summary":"<p>Unique identifier for the target chat or username of the target supergroup (in the format <code>@supergroupusername</code>).</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":80,"url":null},"def":{"name":"chat_id","return_type":"String | Int32","visibility":"Public","body":"@chat_id"},"external_var":false},{"html_id":"chat_id=(chat_id:String|Int32)-instance-method","name":"chat_id=","doc":"Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`). Channel direct messages chats and channel chats aren't supported.","summary":"<p>Unique identifier for the target chat or username of the target supergroup (in the format <code>@supergroupusername</code>).</p>","abstract":false,"args":[{"name":"chat_id","external_name":"chat_id","restriction":"String | Int32"}],"args_string":"(chat_id : String | Int32)","args_html":"(chat_id : String | Int32)","location":{"filename":"src/types/bot_command_scope.cr","line_number":80,"url":null},"def":{"name":"chat_id=","args":[{"name":"chat_id","external_name":"chat_id","restriction":"String | Int32"}],"visibility":"Public","body":"@chat_id = chat_id"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Scope type, must be \"default\".","summary":"<p>Scope type, must be &quot;default&quot;.</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":77,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Scope type, must be \"default\".","summary":"<p>Scope type, must be &quot;default&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/bot_command_scope.cr","line_number":77,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"user_id:Int32-instance-method","name":"user_id","doc":"Unique identifier of the target user.","summary":"<p>Unique identifier of the target user.</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":83,"url":null},"def":{"name":"user_id","return_type":"Int32","visibility":"Public","body":"@user_id"},"external_var":false},{"html_id":"user_id=(user_id:Int32)-instance-method","name":"user_id=","doc":"Unique identifier of the target user.","summary":"<p>Unique identifier of the target user.</p>","abstract":false,"args":[{"name":"user_id","external_name":"user_id","restriction":"Int32"}],"args_string":"(user_id : Int32)","args_html":"(user_id : Int32)","location":{"filename":"src/types/bot_command_scope.cr","line_number":83,"url":null},"def":{"name":"user_id=","args":[{"name":"user_id","external_name":"user_id","restriction":"Int32"}],"visibility":"Public","body":"@user_id = user_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeDefault","path":"Hamilton/Types/BotCommandScopeDefault.html","kind":"class","full_name":"Hamilton::Types::BotCommandScopeDefault","name":"BotCommandScopeDefault","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_command_scope.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user.","summary":"<p>Represents the default scope of bot commands.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_command_scope.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Scope type, must be \"default\".","summary":"<p>Scope type, must be &quot;default&quot;.</p>","abstract":false,"location":{"filename":"src/types/bot_command_scope.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Scope type, must be \"default\".","summary":"<p>Scope type, must be &quot;default&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/bot_command_scope.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotDescription","path":"Hamilton/Types/BotDescription.html","kind":"class","full_name":"Hamilton::Types::BotDescription","name":"BotDescription","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_description.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents the bot's description.","summary":"<p>This object represents the bot's description.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_description.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_description.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"description:String-instance-method","name":"description","doc":"The bot's description.","summary":"<p>The bot's description.</p>","abstract":false,"location":{"filename":"src/types/bot_description.cr","line_number":11,"url":null},"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String)-instance-method","name":"description=","doc":"The bot's description.","summary":"<p>The bot's description.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","location":{"filename":"src/types/bot_description.cr","line_number":11,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotName","path":"Hamilton/Types/BotName.html","kind":"class","full_name":"Hamilton::Types::BotName","name":"BotName","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_name.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents the bot's name.","summary":"<p>This object represents the bot's name.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_name.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_name.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"name:String-instance-method","name":"name","doc":"The bot's name.","summary":"<p>The bot's name.</p>","abstract":false,"location":{"filename":"src/types/bot_name.cr","line_number":11,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"The bot's name.","summary":"<p>The bot's name.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/types/bot_name.cr","line_number":11,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BotShortDescription","path":"Hamilton/Types/BotShortDescription.html","kind":"class","full_name":"Hamilton::Types::BotShortDescription","name":"BotShortDescription","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/bot_short_description.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents the bot's short description.","summary":"<p>This object represents the bot's short description.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/bot_short_description.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/bot_short_description.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"short_description:String-instance-method","name":"short_description","doc":"The bot's short description.","summary":"<p>The bot's short description.</p>","abstract":false,"location":{"filename":"src/types/bot_short_description.cr","line_number":11,"url":null},"def":{"name":"short_description","return_type":"String","visibility":"Public","body":"@short_description"},"external_var":false},{"html_id":"short_description=(short_description:String)-instance-method","name":"short_description=","doc":"The bot's short description.","summary":"<p>The bot's short description.</p>","abstract":false,"args":[{"name":"short_description","external_name":"short_description","restriction":"String"}],"args_string":"(short_description : String)","args_html":"(short_description : String)","location":{"filename":"src/types/bot_short_description.cr","line_number":11,"url":null},"def":{"name":"short_description=","args":[{"name":"short_description","external_name":"short_description","restriction":"String"}],"visibility":"Public","body":"@short_description = short_description"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BusinessBotRights","path":"Hamilton/Types/BusinessBotRights.html","kind":"class","full_name":"Hamilton::Types::BusinessBotRights","name":"BusinessBotRights","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/business_bot_rights.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the rights of a business bot.","summary":"<p>Represents the rights of a business bot.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/business_bot_rights.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/business_bot_rights.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"can_change_gift_settings:Bool|Nil-instance-method","name":"can_change_gift_settings","doc":"True, if the bot can change the privacy settings pertaining to gifts for the business account.","summary":"<p>True, if the bot can change the privacy settings pertaining to gifts for the business account.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":35,"url":null},"def":{"name":"can_change_gift_settings","return_type":"Bool | Nil","visibility":"Public","body":"@can_change_gift_settings"},"external_var":false},{"html_id":"can_change_gift_settings=(can_change_gift_settings:Bool|Nil)-instance-method","name":"can_change_gift_settings=","doc":"True, if the bot can change the privacy settings pertaining to gifts for the business account.","summary":"<p>True, if the bot can change the privacy settings pertaining to gifts for the business account.</p>","abstract":false,"args":[{"name":"can_change_gift_settings","external_name":"can_change_gift_settings","restriction":"Bool | Nil"}],"args_string":"(can_change_gift_settings : Bool | Nil)","args_html":"(can_change_gift_settings : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":35,"url":null},"def":{"name":"can_change_gift_settings=","args":[{"name":"can_change_gift_settings","external_name":"can_change_gift_settings","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_change_gift_settings = can_change_gift_settings"},"external_var":false},{"html_id":"can_convert_gifts_to_stars:Bool|Nil-instance-method","name":"can_convert_gifts_to_stars","doc":"True, if the bot can convert regular gifts owned by the business account to Telegram Stars.","summary":"<p>True, if the bot can convert regular gifts owned by the business account to Telegram Stars.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":41,"url":null},"def":{"name":"can_convert_gifts_to_stars","return_type":"Bool | Nil","visibility":"Public","body":"@can_convert_gifts_to_stars"},"external_var":false},{"html_id":"can_convert_gifts_to_stars=(can_convert_gifts_to_stars:Bool|Nil)-instance-method","name":"can_convert_gifts_to_stars=","doc":"True, if the bot can convert regular gifts owned by the business account to Telegram Stars.","summary":"<p>True, if the bot can convert regular gifts owned by the business account to Telegram Stars.</p>","abstract":false,"args":[{"name":"can_convert_gifts_to_stars","external_name":"can_convert_gifts_to_stars","restriction":"Bool | Nil"}],"args_string":"(can_convert_gifts_to_stars : Bool | Nil)","args_html":"(can_convert_gifts_to_stars : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":41,"url":null},"def":{"name":"can_convert_gifts_to_stars=","args":[{"name":"can_convert_gifts_to_stars","external_name":"can_convert_gifts_to_stars","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_convert_gifts_to_stars = can_convert_gifts_to_stars"},"external_var":false},{"html_id":"can_delete_all_messages:Bool|Nil-instance-method","name":"can_delete_all_messages","doc":"True, if the bot can delete all private messages in managed chats.","summary":"<p>True, if the bot can delete all private messages in managed chats.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":20,"url":null},"def":{"name":"can_delete_all_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_delete_all_messages"},"external_var":false},{"html_id":"can_delete_all_messages=(can_delete_all_messages:Bool|Nil)-instance-method","name":"can_delete_all_messages=","doc":"True, if the bot can delete all private messages in managed chats.","summary":"<p>True, if the bot can delete all private messages in managed chats.</p>","abstract":false,"args":[{"name":"can_delete_all_messages","external_name":"can_delete_all_messages","restriction":"Bool | Nil"}],"args_string":"(can_delete_all_messages : Bool | Nil)","args_html":"(can_delete_all_messages : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":20,"url":null},"def":{"name":"can_delete_all_messages=","args":[{"name":"can_delete_all_messages","external_name":"can_delete_all_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_delete_all_messages = can_delete_all_messages"},"external_var":false},{"html_id":"can_delete_sent_messages:Bool|Nil-instance-method","name":"can_delete_sent_messages","doc":"True, if the bot can delete messages sent by the bot.","summary":"<p>True, if the bot can delete messages sent by the bot.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":17,"url":null},"def":{"name":"can_delete_sent_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_delete_sent_messages"},"external_var":false},{"html_id":"can_delete_sent_messages=(can_delete_sent_messages:Bool|Nil)-instance-method","name":"can_delete_sent_messages=","doc":"True, if the bot can delete messages sent by the bot.","summary":"<p>True, if the bot can delete messages sent by the bot.</p>","abstract":false,"args":[{"name":"can_delete_sent_messages","external_name":"can_delete_sent_messages","restriction":"Bool | Nil"}],"args_string":"(can_delete_sent_messages : Bool | Nil)","args_html":"(can_delete_sent_messages : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":17,"url":null},"def":{"name":"can_delete_sent_messages=","args":[{"name":"can_delete_sent_messages","external_name":"can_delete_sent_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_delete_sent_messages = can_delete_sent_messages"},"external_var":false},{"html_id":"can_edit_bio:Bool|Nil-instance-method","name":"can_edit_bio","doc":"True, if the bot can edit the bio of the business account.","summary":"<p>True, if the bot can edit the bio of the business account.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":26,"url":null},"def":{"name":"can_edit_bio","return_type":"Bool | Nil","visibility":"Public","body":"@can_edit_bio"},"external_var":false},{"html_id":"can_edit_bio=(can_edit_bio:Bool|Nil)-instance-method","name":"can_edit_bio=","doc":"True, if the bot can edit the bio of the business account.","summary":"<p>True, if the bot can edit the bio of the business account.</p>","abstract":false,"args":[{"name":"can_edit_bio","external_name":"can_edit_bio","restriction":"Bool | Nil"}],"args_string":"(can_edit_bio : Bool | Nil)","args_html":"(can_edit_bio : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":26,"url":null},"def":{"name":"can_edit_bio=","args":[{"name":"can_edit_bio","external_name":"can_edit_bio","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_edit_bio = can_edit_bio"},"external_var":false},{"html_id":"can_edit_name:Bool|Nil-instance-method","name":"can_edit_name","doc":"True, if the bot can edit the first and last name of the business account.","summary":"<p>True, if the bot can edit the first and last name of the business account.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":23,"url":null},"def":{"name":"can_edit_name","return_type":"Bool | Nil","visibility":"Public","body":"@can_edit_name"},"external_var":false},{"html_id":"can_edit_name=(can_edit_name:Bool|Nil)-instance-method","name":"can_edit_name=","doc":"True, if the bot can edit the first and last name of the business account.","summary":"<p>True, if the bot can edit the first and last name of the business account.</p>","abstract":false,"args":[{"name":"can_edit_name","external_name":"can_edit_name","restriction":"Bool | Nil"}],"args_string":"(can_edit_name : Bool | Nil)","args_html":"(can_edit_name : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":23,"url":null},"def":{"name":"can_edit_name=","args":[{"name":"can_edit_name","external_name":"can_edit_name","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_edit_name = can_edit_name"},"external_var":false},{"html_id":"can_edit_profile_photo:Bool|Nil-instance-method","name":"can_edit_profile_photo","doc":"True, if the bot can edit the profile photo of the business account.","summary":"<p>True, if the bot can edit the profile photo of the business account.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":29,"url":null},"def":{"name":"can_edit_profile_photo","return_type":"Bool | Nil","visibility":"Public","body":"@can_edit_profile_photo"},"external_var":false},{"html_id":"can_edit_profile_photo=(can_edit_profile_photo:Bool|Nil)-instance-method","name":"can_edit_profile_photo=","doc":"True, if the bot can edit the profile photo of the business account.","summary":"<p>True, if the bot can edit the profile photo of the business account.</p>","abstract":false,"args":[{"name":"can_edit_profile_photo","external_name":"can_edit_profile_photo","restriction":"Bool | Nil"}],"args_string":"(can_edit_profile_photo : Bool | Nil)","args_html":"(can_edit_profile_photo : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":29,"url":null},"def":{"name":"can_edit_profile_photo=","args":[{"name":"can_edit_profile_photo","external_name":"can_edit_profile_photo","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_edit_profile_photo = can_edit_profile_photo"},"external_var":false},{"html_id":"can_edit_username:Bool|Nil-instance-method","name":"can_edit_username","doc":"True, if the bot can edit the username of the business account.","summary":"<p>True, if the bot can edit the username of the business account.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":32,"url":null},"def":{"name":"can_edit_username","return_type":"Bool | Nil","visibility":"Public","body":"@can_edit_username"},"external_var":false},{"html_id":"can_edit_username=(can_edit_username:Bool|Nil)-instance-method","name":"can_edit_username=","doc":"True, if the bot can edit the username of the business account.","summary":"<p>True, if the bot can edit the username of the business account.</p>","abstract":false,"args":[{"name":"can_edit_username","external_name":"can_edit_username","restriction":"Bool | Nil"}],"args_string":"(can_edit_username : Bool | Nil)","args_html":"(can_edit_username : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":32,"url":null},"def":{"name":"can_edit_username=","args":[{"name":"can_edit_username","external_name":"can_edit_username","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_edit_username = can_edit_username"},"external_var":false},{"html_id":"can_manage_stories:Bool|Nil-instance-method","name":"can_manage_stories","doc":"True, if the bot can post, edit and delete stories on behalf of the business account.","summary":"<p>True, if the bot can post, edit and delete stories on behalf of the business account.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":50,"url":null},"def":{"name":"can_manage_stories","return_type":"Bool | Nil","visibility":"Public","body":"@can_manage_stories"},"external_var":false},{"html_id":"can_manage_stories=(can_manage_stories:Bool|Nil)-instance-method","name":"can_manage_stories=","doc":"True, if the bot can post, edit and delete stories on behalf of the business account.","summary":"<p>True, if the bot can post, edit and delete stories on behalf of the business account.</p>","abstract":false,"args":[{"name":"can_manage_stories","external_name":"can_manage_stories","restriction":"Bool | Nil"}],"args_string":"(can_manage_stories : Bool | Nil)","args_html":"(can_manage_stories : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":50,"url":null},"def":{"name":"can_manage_stories=","args":[{"name":"can_manage_stories","external_name":"can_manage_stories","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_manage_stories = can_manage_stories"},"external_var":false},{"html_id":"can_read_messages:Bool|Nil-instance-method","name":"can_read_messages","doc":"True, if the bot can mark incoming private messages as read.","summary":"<p>True, if the bot can mark incoming private messages as read.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":14,"url":null},"def":{"name":"can_read_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_read_messages"},"external_var":false},{"html_id":"can_read_messages=(can_read_messages:Bool|Nil)-instance-method","name":"can_read_messages=","doc":"True, if the bot can mark incoming private messages as read.","summary":"<p>True, if the bot can mark incoming private messages as read.</p>","abstract":false,"args":[{"name":"can_read_messages","external_name":"can_read_messages","restriction":"Bool | Nil"}],"args_string":"(can_read_messages : Bool | Nil)","args_html":"(can_read_messages : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":14,"url":null},"def":{"name":"can_read_messages=","args":[{"name":"can_read_messages","external_name":"can_read_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_read_messages = can_read_messages"},"external_var":false},{"html_id":"can_reply:Bool|Nil-instance-method","name":"can_reply","doc":"True, if the bot can send and edit messages in the private chats that had incoming messages in the last 24 hours.","summary":"<p>True, if the bot can send and edit messages in the private chats that had incoming messages in the last 24 hours.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":11,"url":null},"def":{"name":"can_reply","return_type":"Bool | Nil","visibility":"Public","body":"@can_reply"},"external_var":false},{"html_id":"can_reply=(can_reply:Bool|Nil)-instance-method","name":"can_reply=","doc":"True, if the bot can send and edit messages in the private chats that had incoming messages in the last 24 hours.","summary":"<p>True, if the bot can send and edit messages in the private chats that had incoming messages in the last 24 hours.</p>","abstract":false,"args":[{"name":"can_reply","external_name":"can_reply","restriction":"Bool | Nil"}],"args_string":"(can_reply : Bool | Nil)","args_html":"(can_reply : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":11,"url":null},"def":{"name":"can_reply=","args":[{"name":"can_reply","external_name":"can_reply","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_reply = can_reply"},"external_var":false},{"html_id":"can_transfer_and_upgrade_gifts:Bool|Nil-instance-method","name":"can_transfer_and_upgrade_gifts","doc":"True, if the bot can transfer and upgrade gifts owned by the business account.","summary":"<p>True, if the bot can transfer and upgrade gifts owned by the business account.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":44,"url":null},"def":{"name":"can_transfer_and_upgrade_gifts","return_type":"Bool | Nil","visibility":"Public","body":"@can_transfer_and_upgrade_gifts"},"external_var":false},{"html_id":"can_transfer_and_upgrade_gifts=(can_transfer_and_upgrade_gifts:Bool|Nil)-instance-method","name":"can_transfer_and_upgrade_gifts=","doc":"True, if the bot can transfer and upgrade gifts owned by the business account.","summary":"<p>True, if the bot can transfer and upgrade gifts owned by the business account.</p>","abstract":false,"args":[{"name":"can_transfer_and_upgrade_gifts","external_name":"can_transfer_and_upgrade_gifts","restriction":"Bool | Nil"}],"args_string":"(can_transfer_and_upgrade_gifts : Bool | Nil)","args_html":"(can_transfer_and_upgrade_gifts : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":44,"url":null},"def":{"name":"can_transfer_and_upgrade_gifts=","args":[{"name":"can_transfer_and_upgrade_gifts","external_name":"can_transfer_and_upgrade_gifts","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_transfer_and_upgrade_gifts = can_transfer_and_upgrade_gifts"},"external_var":false},{"html_id":"can_transfer_stars:Bool|Nil-instance-method","name":"can_transfer_stars","doc":"True, if the bot can transfer Telegram Stars received by the business account to its own account, or use them to upgrade and transfer gifts.","summary":"<p>True, if the bot can transfer Telegram Stars received by the business account to its own account, or use them to upgrade and transfer gifts.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":47,"url":null},"def":{"name":"can_transfer_stars","return_type":"Bool | Nil","visibility":"Public","body":"@can_transfer_stars"},"external_var":false},{"html_id":"can_transfer_stars=(can_transfer_stars:Bool|Nil)-instance-method","name":"can_transfer_stars=","doc":"True, if the bot can transfer Telegram Stars received by the business account to its own account, or use them to upgrade and transfer gifts.","summary":"<p>True, if the bot can transfer Telegram Stars received by the business account to its own account, or use them to upgrade and transfer gifts.</p>","abstract":false,"args":[{"name":"can_transfer_stars","external_name":"can_transfer_stars","restriction":"Bool | Nil"}],"args_string":"(can_transfer_stars : Bool | Nil)","args_html":"(can_transfer_stars : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":47,"url":null},"def":{"name":"can_transfer_stars=","args":[{"name":"can_transfer_stars","external_name":"can_transfer_stars","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_transfer_stars = can_transfer_stars"},"external_var":false},{"html_id":"can_view_gifts_and_stars:Bool|Nil-instance-method","name":"can_view_gifts_and_stars","doc":"True, if the bot can view gifts and the amount of Telegram Stars owned by the business account.","summary":"<p>True, if the bot can view gifts and the amount of Telegram Stars owned by the business account.</p>","abstract":false,"location":{"filename":"src/types/business_bot_rights.cr","line_number":38,"url":null},"def":{"name":"can_view_gifts_and_stars","return_type":"Bool | Nil","visibility":"Public","body":"@can_view_gifts_and_stars"},"external_var":false},{"html_id":"can_view_gifts_and_stars=(can_view_gifts_and_stars:Bool|Nil)-instance-method","name":"can_view_gifts_and_stars=","doc":"True, if the bot can view gifts and the amount of Telegram Stars owned by the business account.","summary":"<p>True, if the bot can view gifts and the amount of Telegram Stars owned by the business account.</p>","abstract":false,"args":[{"name":"can_view_gifts_and_stars","external_name":"can_view_gifts_and_stars","restriction":"Bool | Nil"}],"args_string":"(can_view_gifts_and_stars : Bool | Nil)","args_html":"(can_view_gifts_and_stars : Bool | Nil)","location":{"filename":"src/types/business_bot_rights.cr","line_number":38,"url":null},"def":{"name":"can_view_gifts_and_stars=","args":[{"name":"can_view_gifts_and_stars","external_name":"can_view_gifts_and_stars","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_view_gifts_and_stars = can_view_gifts_and_stars"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BusinessConnection","path":"Hamilton/Types/BusinessConnection.html","kind":"class","full_name":"Hamilton::Types::BusinessConnection","name":"BusinessConnection","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/business_connection.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the connection of the bot with a business account.","summary":"<p>Describes the connection of the bot with a business account.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/business_connection.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/business_connection.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"date:Int32-instance-method","name":"date","doc":"Date the connection was established in Unix time.","summary":"<p>Date the connection was established in Unix time.</p>","abstract":false,"location":{"filename":"src/types/business_connection.cr","line_number":20,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date the connection was established in Unix time.","summary":"<p>Date the connection was established in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/business_connection.cr","line_number":20,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier of the business connection.","summary":"<p>Unique identifier of the business connection.</p>","abstract":false,"location":{"filename":"src/types/business_connection.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier of the business connection.","summary":"<p>Unique identifier of the business connection.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/business_connection.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"is_enabled:Bool-instance-method","name":"is_enabled","doc":"True, if the connection is active.","summary":"<p>True, if the connection is active.</p>","abstract":false,"location":{"filename":"src/types/business_connection.cr","line_number":26,"url":null},"def":{"name":"is_enabled","return_type":"Bool","visibility":"Public","body":"@is_enabled"},"external_var":false},{"html_id":"is_enabled=(is_enabled:Bool)-instance-method","name":"is_enabled=","doc":"True, if the connection is active.","summary":"<p>True, if the connection is active.</p>","abstract":false,"args":[{"name":"is_enabled","external_name":"is_enabled","restriction":"Bool"}],"args_string":"(is_enabled : Bool)","args_html":"(is_enabled : Bool)","location":{"filename":"src/types/business_connection.cr","line_number":26,"url":null},"def":{"name":"is_enabled=","args":[{"name":"is_enabled","external_name":"is_enabled","restriction":"Bool"}],"visibility":"Public","body":"@is_enabled = is_enabled"},"external_var":false},{"html_id":"rights:Hamilton::Types::BusinessBotRights-instance-method","name":"rights","doc":"Rights of the business bot.","summary":"<p>Rights of the business bot.</p>","abstract":false,"location":{"filename":"src/types/business_connection.cr","line_number":23,"url":null},"def":{"name":"rights","return_type":"Hamilton::Types::BusinessBotRights","visibility":"Public","body":"@rights"},"external_var":false},{"html_id":"rights=(rights:Hamilton::Types::BusinessBotRights)-instance-method","name":"rights=","doc":"Rights of the business bot.","summary":"<p>Rights of the business bot.</p>","abstract":false,"args":[{"name":"rights","external_name":"rights","restriction":"Hamilton::Types::BusinessBotRights"}],"args_string":"(rights : Hamilton::Types::BusinessBotRights)","args_html":"(rights : <a href=\"../../Hamilton/Types/BusinessBotRights.html\">Hamilton::Types::BusinessBotRights</a>)","location":{"filename":"src/types/business_connection.cr","line_number":23,"url":null},"def":{"name":"rights=","args":[{"name":"rights","external_name":"rights","restriction":"Hamilton::Types::BusinessBotRights"}],"visibility":"Public","body":"@rights = rights"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"Business account user that created the business connection.","summary":"<p>Business account user that created the business connection.</p>","abstract":false,"location":{"filename":"src/types/business_connection.cr","line_number":14,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"Business account user that created the business connection.","summary":"<p>Business account user that created the business connection.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/business_connection.cr","line_number":14,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false},{"html_id":"user_chat_id:Int64-instance-method","name":"user_chat_id","doc":"Identifier of a private chat with the user who created the business connection.","summary":"<p>Identifier of a private chat with the user who created the business connection.</p>","abstract":false,"location":{"filename":"src/types/business_connection.cr","line_number":17,"url":null},"def":{"name":"user_chat_id","return_type":"Int64","visibility":"Public","body":"@user_chat_id"},"external_var":false},{"html_id":"user_chat_id=(user_chat_id:Int64)-instance-method","name":"user_chat_id=","doc":"Identifier of a private chat with the user who created the business connection.","summary":"<p>Identifier of a private chat with the user who created the business connection.</p>","abstract":false,"args":[{"name":"user_chat_id","external_name":"user_chat_id","restriction":"Int64"}],"args_string":"(user_chat_id : Int64)","args_html":"(user_chat_id : Int64)","location":{"filename":"src/types/business_connection.cr","line_number":17,"url":null},"def":{"name":"user_chat_id=","args":[{"name":"user_chat_id","external_name":"user_chat_id","restriction":"Int64"}],"visibility":"Public","body":"@user_chat_id = user_chat_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BusinessIntro","path":"Hamilton/Types/BusinessIntro.html","kind":"class","full_name":"Hamilton::Types::BusinessIntro","name":"BusinessIntro","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/business_intro.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Contains information about the start page settings of a Telegram Business account.","summary":"<p>Contains information about the start page settings of a Telegram Business account.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/business_intro.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/business_intro.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"message:String|Nil-instance-method","name":"message","doc":"Message text of the business intro.","summary":"<p>Message text of the business intro.</p>","abstract":false,"location":{"filename":"src/types/business_intro.cr","line_number":14,"url":null},"def":{"name":"message","return_type":"String | Nil","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String|Nil)-instance-method","name":"message=","doc":"Message text of the business intro.","summary":"<p>Message text of the business intro.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String | Nil"}],"args_string":"(message : String | Nil)","args_html":"(message : String | Nil)","location":{"filename":"src/types/business_intro.cr","line_number":14,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String | Nil"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"sticker:Hamilton::Types::Sticker-instance-method","name":"sticker","doc":"Sticker of the business intro.","summary":"<p>Sticker of the business intro.</p>","abstract":false,"location":{"filename":"src/types/business_intro.cr","line_number":17,"url":null},"def":{"name":"sticker","return_type":"Hamilton::Types::Sticker","visibility":"Public","body":"@sticker"},"external_var":false},{"html_id":"sticker=(sticker:Hamilton::Types::Sticker)-instance-method","name":"sticker=","doc":"Sticker of the business intro.","summary":"<p>Sticker of the business intro.</p>","abstract":false,"args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker"}],"args_string":"(sticker : Hamilton::Types::Sticker)","args_html":"(sticker : <a href=\"../../Hamilton/Types/Sticker.html\">Hamilton::Types::Sticker</a>)","location":{"filename":"src/types/business_intro.cr","line_number":17,"url":null},"def":{"name":"sticker=","args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker"}],"visibility":"Public","body":"@sticker = sticker"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title text of the business intro.","summary":"<p>Title text of the business intro.</p>","abstract":false,"location":{"filename":"src/types/business_intro.cr","line_number":11,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title text of the business intro.","summary":"<p>Title text of the business intro.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/business_intro.cr","line_number":11,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BusinessLocation","path":"Hamilton/Types/BusinessLocation.html","kind":"class","full_name":"Hamilton::Types::BusinessLocation","name":"BusinessLocation","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/business_location.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Contains information about the location of a Telegram Business account.","summary":"<p>Contains information about the location of a Telegram Business account.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/business_location.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/business_location.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"address:String-instance-method","name":"address","doc":"Address of the business.","summary":"<p>Address of the business.</p>","abstract":false,"location":{"filename":"src/types/business_location.cr","line_number":11,"url":null},"def":{"name":"address","return_type":"String","visibility":"Public","body":"@address"},"external_var":false},{"html_id":"address=(address:String)-instance-method","name":"address=","doc":"Address of the business.","summary":"<p>Address of the business.</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"String"}],"args_string":"(address : String)","args_html":"(address : String)","location":{"filename":"src/types/business_location.cr","line_number":11,"url":null},"def":{"name":"address=","args":[{"name":"address","external_name":"address","restriction":"String"}],"visibility":"Public","body":"@address = address"},"external_var":false},{"html_id":"location:Hamilton::Types::Location|Nil-instance-method","name":"location","doc":"Location of the business.","summary":"<p>Location of the business.</p>","abstract":false,"location":{"filename":"src/types/business_location.cr","line_number":14,"url":null},"def":{"name":"location","return_type":"Hamilton::Types::Location | Nil","visibility":"Public","body":"@location"},"external_var":false},{"html_id":"location=(location:Hamilton::Types::Location|Nil)-instance-method","name":"location=","doc":"Location of the business.","summary":"<p>Location of the business.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"args_string":"(location : Hamilton::Types::Location | Nil)","args_html":"(location : <a href=\"../../Hamilton/Types/Location.html\">Hamilton::Types::Location</a> | Nil)","location":{"filename":"src/types/business_location.cr","line_number":14,"url":null},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"visibility":"Public","body":"@location = location"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BusinessMessagesDeleted","path":"Hamilton/Types/BusinessMessagesDeleted.html","kind":"class","full_name":"Hamilton::Types::BusinessMessagesDeleted","name":"BusinessMessagesDeleted","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/business_messages_deleted.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object is received when messages are deleted from a connected business account.","summary":"<p>This object is received when messages are deleted from a connected business account.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/business_messages_deleted.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/business_messages_deleted.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"business_connection_id:String-instance-method","name":"business_connection_id","doc":"Unique identifier of the business connection.","summary":"<p>Unique identifier of the business connection.</p>","abstract":false,"location":{"filename":"src/types/business_messages_deleted.cr","line_number":11,"url":null},"def":{"name":"business_connection_id","return_type":"String","visibility":"Public","body":"@business_connection_id"},"external_var":false},{"html_id":"business_connection_id=(business_connection_id:String)-instance-method","name":"business_connection_id=","doc":"Unique identifier of the business connection.","summary":"<p>Unique identifier of the business connection.</p>","abstract":false,"args":[{"name":"business_connection_id","external_name":"business_connection_id","restriction":"String"}],"args_string":"(business_connection_id : String)","args_html":"(business_connection_id : String)","location":{"filename":"src/types/business_messages_deleted.cr","line_number":11,"url":null},"def":{"name":"business_connection_id=","args":[{"name":"business_connection_id","external_name":"business_connection_id","restriction":"String"}],"visibility":"Public","body":"@business_connection_id = business_connection_id"},"external_var":false},{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Information about a chat in the business account. The bot may not have access to the chat or the corresponding user.","summary":"<p>Information about a chat in the business account.</p>","abstract":false,"location":{"filename":"src/types/business_messages_deleted.cr","line_number":14,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Information about a chat in the business account. The bot may not have access to the chat or the corresponding user.","summary":"<p>Information about a chat in the business account.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/business_messages_deleted.cr","line_number":14,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"message_ids:Array(Int32)-instance-method","name":"message_ids","doc":"The list of identifiers of deleted messages in the chat of the business account.","summary":"<p>The list of identifiers of deleted messages in the chat of the business account.</p>","abstract":false,"location":{"filename":"src/types/business_messages_deleted.cr","line_number":17,"url":null},"def":{"name":"message_ids","return_type":"Array(Int32)","visibility":"Public","body":"@message_ids"},"external_var":false},{"html_id":"message_ids=(message_ids:Array(Int32))-instance-method","name":"message_ids=","doc":"The list of identifiers of deleted messages in the chat of the business account.","summary":"<p>The list of identifiers of deleted messages in the chat of the business account.</p>","abstract":false,"args":[{"name":"message_ids","external_name":"message_ids","restriction":"Array(Int32)"}],"args_string":"(message_ids : Array(Int32))","args_html":"(message_ids : Array(Int32))","location":{"filename":"src/types/business_messages_deleted.cr","line_number":17,"url":null},"def":{"name":"message_ids=","args":[{"name":"message_ids","external_name":"message_ids","restriction":"Array(Int32)"}],"visibility":"Public","body":"@message_ids = message_ids"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BusinessOpeningHours","path":"Hamilton/Types/BusinessOpeningHours.html","kind":"class","full_name":"Hamilton::Types::BusinessOpeningHours","name":"BusinessOpeningHours","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/business_opening_hours.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the opening hours of a business.","summary":"<p>Describes the opening hours of a business.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/business_opening_hours.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/business_opening_hours.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"opening_hours:Array(Hamilton::Types::BusinessOpeningHoursInterval)-instance-method","name":"opening_hours","doc":"List of time intervals describing business opening hours.","summary":"<p>List of time intervals describing business opening hours.</p>","abstract":false,"location":{"filename":"src/types/business_opening_hours.cr","line_number":14,"url":null},"def":{"name":"opening_hours","return_type":"Array(Hamilton::Types::BusinessOpeningHoursInterval)","visibility":"Public","body":"@opening_hours"},"external_var":false},{"html_id":"opening_hours=(opening_hours:Array(Hamilton::Types::BusinessOpeningHoursInterval))-instance-method","name":"opening_hours=","doc":"List of time intervals describing business opening hours.","summary":"<p>List of time intervals describing business opening hours.</p>","abstract":false,"args":[{"name":"opening_hours","external_name":"opening_hours","restriction":"Array(Hamilton::Types::BusinessOpeningHoursInterval)"}],"args_string":"(opening_hours : Array(Hamilton::Types::BusinessOpeningHoursInterval))","args_html":"(opening_hours : Array(<a href=\"../../Hamilton/Types/BusinessOpeningHoursInterval.html\">Hamilton::Types::BusinessOpeningHoursInterval</a>))","location":{"filename":"src/types/business_opening_hours.cr","line_number":14,"url":null},"def":{"name":"opening_hours=","args":[{"name":"opening_hours","external_name":"opening_hours","restriction":"Array(Hamilton::Types::BusinessOpeningHoursInterval)"}],"visibility":"Public","body":"@opening_hours = opening_hours"},"external_var":false},{"html_id":"time_zone_name:String-instance-method","name":"time_zone_name","doc":"Unique name of the time zone for which the opening hours are defined.","summary":"<p>Unique name of the time zone for which the opening hours are defined.</p>","abstract":false,"location":{"filename":"src/types/business_opening_hours.cr","line_number":11,"url":null},"def":{"name":"time_zone_name","return_type":"String","visibility":"Public","body":"@time_zone_name"},"external_var":false},{"html_id":"time_zone_name=(time_zone_name:String)-instance-method","name":"time_zone_name=","doc":"Unique name of the time zone for which the opening hours are defined.","summary":"<p>Unique name of the time zone for which the opening hours are defined.</p>","abstract":false,"args":[{"name":"time_zone_name","external_name":"time_zone_name","restriction":"String"}],"args_string":"(time_zone_name : String)","args_html":"(time_zone_name : String)","location":{"filename":"src/types/business_opening_hours.cr","line_number":11,"url":null},"def":{"name":"time_zone_name=","args":[{"name":"time_zone_name","external_name":"time_zone_name","restriction":"String"}],"visibility":"Public","body":"@time_zone_name = time_zone_name"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/BusinessOpeningHoursInterval","path":"Hamilton/Types/BusinessOpeningHoursInterval.html","kind":"class","full_name":"Hamilton::Types::BusinessOpeningHoursInterval","name":"BusinessOpeningHoursInterval","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/business_opening_hours_interval.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes an interval of time during which a business is open.","summary":"<p>Describes an interval of time during which a business is open.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/business_opening_hours_interval.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/business_opening_hours_interval.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"closing_minute:Int32-instance-method","name":"closing_minute","doc":"The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60.","summary":"<p>The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60.</p>","abstract":false,"location":{"filename":"src/types/business_opening_hours_interval.cr","line_number":14,"url":null},"def":{"name":"closing_minute","return_type":"Int32","visibility":"Public","body":"@closing_minute"},"external_var":false},{"html_id":"closing_minute=(closing_minute:Int32)-instance-method","name":"closing_minute=","doc":"The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60.","summary":"<p>The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60.</p>","abstract":false,"args":[{"name":"closing_minute","external_name":"closing_minute","restriction":"Int32"}],"args_string":"(closing_minute : Int32)","args_html":"(closing_minute : Int32)","location":{"filename":"src/types/business_opening_hours_interval.cr","line_number":14,"url":null},"def":{"name":"closing_minute=","args":[{"name":"closing_minute","external_name":"closing_minute","restriction":"Int32"}],"visibility":"Public","body":"@closing_minute = closing_minute"},"external_var":false},{"html_id":"opening_minute:Int32-instance-method","name":"opening_minute","doc":"The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60.","summary":"<p>The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60.</p>","abstract":false,"location":{"filename":"src/types/business_opening_hours_interval.cr","line_number":11,"url":null},"def":{"name":"opening_minute","return_type":"Int32","visibility":"Public","body":"@opening_minute"},"external_var":false},{"html_id":"opening_minute=(opening_minute:Int32)-instance-method","name":"opening_minute=","doc":"The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60.","summary":"<p>The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60.</p>","abstract":false,"args":[{"name":"opening_minute","external_name":"opening_minute","restriction":"Int32"}],"args_string":"(opening_minute : Int32)","args_html":"(opening_minute : Int32)","location":{"filename":"src/types/business_opening_hours_interval.cr","line_number":11,"url":null},"def":{"name":"opening_minute=","args":[{"name":"opening_minute","external_name":"opening_minute","restriction":"Int32"}],"visibility":"Public","body":"@opening_minute = opening_minute"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/CallbackGame","path":"Hamilton/Types/CallbackGame.html","kind":"class","full_name":"Hamilton::Types::CallbackGame","name":"CallbackGame","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/callback_game.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"A placeholder, currently holds no information. Use BotFather to set up your game.","summary":"<p>A placeholder, currently holds no information.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/callback_game.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/callback_game.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/CallbackQuery","path":"Hamilton/Types/CallbackQuery.html","kind":"class","full_name":"Hamilton::Types::CallbackQuery","name":"CallbackQuery","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/calback_query.cr","line_number":8,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field `inline_message_id` will be present. Exactly one of the fields data or `game_short_name` will be present.\n\nNOTE: After the user presses a callback button, Telegram clients will display a progress bar until you call `answerCallbackQuery`. It is, therefore, necessary to react by calling `answerCallbackQuery` even if no notification to the user is needed (e.g., without specifying any of the optional parameters).","summary":"<p>This object represents an incoming callback query from a callback button in an inline keyboard.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/calback_query.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/calback_query.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat_instance:String-instance-method","name":"chat_instance","doc":"Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.","summary":"<p>Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent.</p>","abstract":false,"location":{"filename":"src/types/calback_query.cr","line_number":25,"url":null},"def":{"name":"chat_instance","return_type":"String","visibility":"Public","body":"@chat_instance"},"external_var":false},{"html_id":"chat_instance=(chat_instance:String)-instance-method","name":"chat_instance=","doc":"Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.","summary":"<p>Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent.</p>","abstract":false,"args":[{"name":"chat_instance","external_name":"chat_instance","restriction":"String"}],"args_string":"(chat_instance : String)","args_html":"(chat_instance : String)","location":{"filename":"src/types/calback_query.cr","line_number":25,"url":null},"def":{"name":"chat_instance=","args":[{"name":"chat_instance","external_name":"chat_instance","restriction":"String"}],"visibility":"Public","body":"@chat_instance = chat_instance"},"external_var":false},{"html_id":"data:String|Nil-instance-method","name":"data","doc":"Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data.","summary":"<p>Data associated with the callback button.</p>","abstract":false,"location":{"filename":"src/types/calback_query.cr","line_number":28,"url":null},"def":{"name":"data","return_type":"String | Nil","visibility":"Public","body":"@data"},"external_var":false},{"html_id":"data=(data:String|Nil)-instance-method","name":"data=","doc":"Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data.","summary":"<p>Data associated with the callback button.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"String | Nil"}],"args_string":"(data : String | Nil)","args_html":"(data : String | Nil)","location":{"filename":"src/types/calback_query.cr","line_number":28,"url":null},"def":{"name":"data=","args":[{"name":"data","external_name":"data","restriction":"String | Nil"}],"visibility":"Public","body":"@data = data"},"external_var":false},{"html_id":"from:Hamilton::Types::User-instance-method","name":"from","doc":"Sender.","summary":"<p>Sender.</p>","abstract":false,"location":{"filename":"src/types/calback_query.cr","line_number":16,"url":null},"def":{"name":"from","return_type":"Hamilton::Types::User","visibility":"Public","body":"@from"},"external_var":false},{"html_id":"from=(from:Hamilton::Types::User)-instance-method","name":"from=","doc":"Sender.","summary":"<p>Sender.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"args_string":"(from : Hamilton::Types::User)","args_html":"(from : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/calback_query.cr","line_number":16,"url":null},"def":{"name":"from=","args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@from = from"},"external_var":false},{"html_id":"game_short_name:String|Nil-instance-method","name":"game_short_name","doc":"Short name of a Game to be returned, serves as the unique identifier for the game.","summary":"<p>Short name of a Game to be returned, serves as the unique identifier for the game.</p>","abstract":false,"location":{"filename":"src/types/calback_query.cr","line_number":31,"url":null},"def":{"name":"game_short_name","return_type":"String | Nil","visibility":"Public","body":"@game_short_name"},"external_var":false},{"html_id":"game_short_name=(game_short_name:String|Nil)-instance-method","name":"game_short_name=","doc":"Short name of a Game to be returned, serves as the unique identifier for the game.","summary":"<p>Short name of a Game to be returned, serves as the unique identifier for the game.</p>","abstract":false,"args":[{"name":"game_short_name","external_name":"game_short_name","restriction":"String | Nil"}],"args_string":"(game_short_name : String | Nil)","args_html":"(game_short_name : String | Nil)","location":{"filename":"src/types/calback_query.cr","line_number":31,"url":null},"def":{"name":"game_short_name=","args":[{"name":"game_short_name","external_name":"game_short_name","restriction":"String | Nil"}],"visibility":"Public","body":"@game_short_name = game_short_name"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this query.","summary":"<p>Unique identifier for this query.</p>","abstract":false,"location":{"filename":"src/types/calback_query.cr","line_number":13,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this query.","summary":"<p>Unique identifier for this query.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/calback_query.cr","line_number":13,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"inline_message_id:String|Nil-instance-method","name":"inline_message_id","doc":"Identifier of the message sent via the bot in inline mode, that originated the query.","summary":"<p>Identifier of the message sent via the bot in inline mode, that originated the query.</p>","abstract":false,"location":{"filename":"src/types/calback_query.cr","line_number":22,"url":null},"def":{"name":"inline_message_id","return_type":"String | Nil","visibility":"Public","body":"@inline_message_id"},"external_var":false},{"html_id":"inline_message_id=(inline_message_id:String|Nil)-instance-method","name":"inline_message_id=","doc":"Identifier of the message sent via the bot in inline mode, that originated the query.","summary":"<p>Identifier of the message sent via the bot in inline mode, that originated the query.</p>","abstract":false,"args":[{"name":"inline_message_id","external_name":"inline_message_id","restriction":"String | Nil"}],"args_string":"(inline_message_id : String | Nil)","args_html":"(inline_message_id : String | Nil)","location":{"filename":"src/types/calback_query.cr","line_number":22,"url":null},"def":{"name":"inline_message_id=","args":[{"name":"inline_message_id","external_name":"inline_message_id","restriction":"String | Nil"}],"visibility":"Public","body":"@inline_message_id = inline_message_id"},"external_var":false},{"html_id":"message:Hamilton::Types::MaybeInaccessibleMessage|Nil-instance-method","name":"message","doc":"Message sent by the bot with the callback button that originated the query.","summary":"<p>Message sent by the bot with the callback button that originated the query.</p>","abstract":false,"location":{"filename":"src/types/calback_query.cr","line_number":19,"url":null},"def":{"name":"message","return_type":"Hamilton::Types::MaybeInaccessibleMessage | Nil","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:Hamilton::Types::MaybeInaccessibleMessage|Nil)-instance-method","name":"message=","doc":"Message sent by the bot with the callback button that originated the query.","summary":"<p>Message sent by the bot with the callback button that originated the query.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Hamilton::Types::MaybeInaccessibleMessage | Nil"}],"args_string":"(message : Hamilton::Types::MaybeInaccessibleMessage | Nil)","args_html":"(message : <a href=\"../../Hamilton/Types/MaybeInaccessibleMessage.html\">Hamilton::Types::MaybeInaccessibleMessage</a> | Nil)","location":{"filename":"src/types/calback_query.cr","line_number":19,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"Hamilton::Types::MaybeInaccessibleMessage | Nil"}],"visibility":"Public","body":"@message = message"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Chat","path":"Hamilton/Types/Chat.html","kind":"class","full_name":"Hamilton::Types::Chat","name":"Chat","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a chat.","summary":"<p>This object represents a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"first_name:String|Nil-instance-method","name":"first_name","doc":"First name of the other party in a private chat.","summary":"<p>First name of the other party in a private chat.</p>","abstract":false,"location":{"filename":"src/types/chat.cr","line_number":23,"url":null},"def":{"name":"first_name","return_type":"String | Nil","visibility":"Public","body":"@first_name"},"external_var":false},{"html_id":"first_name=(first_name:String|Nil)-instance-method","name":"first_name=","doc":"First name of the other party in a private chat.","summary":"<p>First name of the other party in a private chat.</p>","abstract":false,"args":[{"name":"first_name","external_name":"first_name","restriction":"String | Nil"}],"args_string":"(first_name : String | Nil)","args_html":"(first_name : String | Nil)","location":{"filename":"src/types/chat.cr","line_number":23,"url":null},"def":{"name":"first_name=","args":[{"name":"first_name","external_name":"first_name","restriction":"String | Nil"}],"visibility":"Public","body":"@first_name = first_name"},"external_var":false},{"html_id":"id:Int64-instance-method","name":"id","doc":"Unique identifier for this chat.","summary":"<p>Unique identifier for this chat.</p>","abstract":false,"location":{"filename":"src/types/chat.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"Int64","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:Int64)-instance-method","name":"id=","doc":"Unique identifier for this chat.","summary":"<p>Unique identifier for this chat.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int64"}],"args_string":"(id : Int64)","args_html":"(id : Int64)","location":{"filename":"src/types/chat.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"Int64"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"is_direct_messaegs:Bool|Nil-instance-method","name":"is_direct_messaegs","doc":"True, if the chat is the direct messages chat of a channel.","summary":"<p>True, if the chat is the direct messages chat of a channel.</p>","abstract":false,"location":{"filename":"src/types/chat.cr","line_number":32,"url":null},"def":{"name":"is_direct_messaegs","return_type":"Bool | Nil","visibility":"Public","body":"@is_direct_messaegs"},"external_var":false},{"html_id":"is_direct_messaegs=(is_direct_messaegs:Bool|Nil)-instance-method","name":"is_direct_messaegs=","doc":"True, if the chat is the direct messages chat of a channel.","summary":"<p>True, if the chat is the direct messages chat of a channel.</p>","abstract":false,"args":[{"name":"is_direct_messaegs","external_name":"is_direct_messaegs","restriction":"Bool | Nil"}],"args_string":"(is_direct_messaegs : Bool | Nil)","args_html":"(is_direct_messaegs : Bool | Nil)","location":{"filename":"src/types/chat.cr","line_number":32,"url":null},"def":{"name":"is_direct_messaegs=","args":[{"name":"is_direct_messaegs","external_name":"is_direct_messaegs","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_direct_messaegs = is_direct_messaegs"},"external_var":false},{"html_id":"is_forum:Bool|Nil-instance-method","name":"is_forum","doc":"True, if the supergroup chat is a forum (has topics enabled).","summary":"<p>True, if the supergroup chat is a forum (has topics enabled).</p>","abstract":false,"location":{"filename":"src/types/chat.cr","line_number":29,"url":null},"def":{"name":"is_forum","return_type":"Bool | Nil","visibility":"Public","body":"@is_forum"},"external_var":false},{"html_id":"is_forum=(is_forum:Bool|Nil)-instance-method","name":"is_forum=","doc":"True, if the supergroup chat is a forum (has topics enabled).","summary":"<p>True, if the supergroup chat is a forum (has topics enabled).</p>","abstract":false,"args":[{"name":"is_forum","external_name":"is_forum","restriction":"Bool | Nil"}],"args_string":"(is_forum : Bool | Nil)","args_html":"(is_forum : Bool | Nil)","location":{"filename":"src/types/chat.cr","line_number":29,"url":null},"def":{"name":"is_forum=","args":[{"name":"is_forum","external_name":"is_forum","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_forum = is_forum"},"external_var":false},{"html_id":"last_name:String|Nil-instance-method","name":"last_name","doc":"Last name of the other party in a private chat.","summary":"<p>Last name of the other party in a private chat.</p>","abstract":false,"location":{"filename":"src/types/chat.cr","line_number":26,"url":null},"def":{"name":"last_name","return_type":"String | Nil","visibility":"Public","body":"@last_name"},"external_var":false},{"html_id":"last_name=(last_name:String|Nil)-instance-method","name":"last_name=","doc":"Last name of the other party in a private chat.","summary":"<p>Last name of the other party in a private chat.</p>","abstract":false,"args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"args_string":"(last_name : String | Nil)","args_html":"(last_name : String | Nil)","location":{"filename":"src/types/chat.cr","line_number":26,"url":null},"def":{"name":"last_name=","args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"visibility":"Public","body":"@last_name = last_name"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title, for supergroups, channels and group chats.","summary":"<p>Title, for supergroups, channels and group chats.</p>","abstract":false,"location":{"filename":"src/types/chat.cr","line_number":17,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title, for supergroups, channels and group chats.","summary":"<p>Title, for supergroups, channels and group chats.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/chat.cr","line_number":17,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the chat, can be either “private”, “group”, “supergroup” or “channel”.","summary":"<p>Type of the chat, can be either “private”, “group”, “supergroup” or “channel”.</p>","abstract":false,"location":{"filename":"src/types/chat.cr","line_number":14,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the chat, can be either “private”, “group”, “supergroup” or “channel”.","summary":"<p>Type of the chat, can be either “private”, “group”, “supergroup” or “channel”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/chat.cr","line_number":14,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"username:String|Nil-instance-method","name":"username","doc":"Username, for private chats, supergroups and channels if available.","summary":"<p>Username, for private chats, supergroups and channels if available.</p>","abstract":false,"location":{"filename":"src/types/chat.cr","line_number":20,"url":null},"def":{"name":"username","return_type":"String | Nil","visibility":"Public","body":"@username"},"external_var":false},{"html_id":"username=(username:String|Nil)-instance-method","name":"username=","doc":"Username, for private chats, supergroups and channels if available.","summary":"<p>Username, for private chats, supergroups and channels if available.</p>","abstract":false,"args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"args_string":"(username : String | Nil)","args_html":"(username : String | Nil)","location":{"filename":"src/types/chat.cr","line_number":20,"url":null},"def":{"name":"username=","args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"visibility":"Public","body":"@username = username"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatAdministratorRights","path":"Hamilton/Types/ChatAdministratorRights.html","kind":"class","full_name":"Hamilton::Types::ChatAdministratorRights","name":"ChatAdministratorRights","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_administrator_rights.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the rights of an administrator in a chat.","summary":"<p>Represents the rights of an administrator in a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"can_change_info:Bool-instance-method","name":"can_change_info","doc":"True, if the user is allowed to change the chat title, photo and other settings.","summary":"<p>True, if the user is allowed to change the chat title, photo and other settings.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":32,"url":null},"def":{"name":"can_change_info","return_type":"Bool","visibility":"Public","body":"@can_change_info"},"external_var":false},{"html_id":"can_change_info=(can_change_info:Bool)-instance-method","name":"can_change_info=","doc":"True, if the user is allowed to change the chat title, photo and other settings.","summary":"<p>True, if the user is allowed to change the chat title, photo and other settings.</p>","abstract":false,"args":[{"name":"can_change_info","external_name":"can_change_info","restriction":"Bool"}],"args_string":"(can_change_info : Bool)","args_html":"(can_change_info : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":32,"url":null},"def":{"name":"can_change_info=","args":[{"name":"can_change_info","external_name":"can_change_info","restriction":"Bool"}],"visibility":"Public","body":"@can_change_info = can_change_info"},"external_var":false},{"html_id":"can_delete_messages:Bool-instance-method","name":"can_delete_messages","doc":"True, if the administrator can delete messages of other users.","summary":"<p>True, if the administrator can delete messages of other users.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":17,"url":null},"def":{"name":"can_delete_messages","return_type":"Bool","visibility":"Public","body":"@can_delete_messages"},"external_var":false},{"html_id":"can_delete_messages=(can_delete_messages:Bool)-instance-method","name":"can_delete_messages=","doc":"True, if the administrator can delete messages of other users.","summary":"<p>True, if the administrator can delete messages of other users.</p>","abstract":false,"args":[{"name":"can_delete_messages","external_name":"can_delete_messages","restriction":"Bool"}],"args_string":"(can_delete_messages : Bool)","args_html":"(can_delete_messages : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":17,"url":null},"def":{"name":"can_delete_messages=","args":[{"name":"can_delete_messages","external_name":"can_delete_messages","restriction":"Bool"}],"visibility":"Public","body":"@can_delete_messages = can_delete_messages"},"external_var":false},{"html_id":"can_delete_stories:Bool-instance-method","name":"can_delete_stories","doc":"True, if the administrator can delete stories posted by other users.","summary":"<p>True, if the administrator can delete stories posted by other users.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":44,"url":null},"def":{"name":"can_delete_stories","return_type":"Bool","visibility":"Public","body":"@can_delete_stories"},"external_var":false},{"html_id":"can_delete_stories=(can_delete_stories:Bool)-instance-method","name":"can_delete_stories=","doc":"True, if the administrator can delete stories posted by other users.","summary":"<p>True, if the administrator can delete stories posted by other users.</p>","abstract":false,"args":[{"name":"can_delete_stories","external_name":"can_delete_stories","restriction":"Bool"}],"args_string":"(can_delete_stories : Bool)","args_html":"(can_delete_stories : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":44,"url":null},"def":{"name":"can_delete_stories=","args":[{"name":"can_delete_stories","external_name":"can_delete_stories","restriction":"Bool"}],"visibility":"Public","body":"@can_delete_stories = can_delete_stories"},"external_var":false},{"html_id":"can_edit_messages:Bool|Nil-instance-method","name":"can_edit_messages","doc":"True, if the administrator can edit messages of other users and can pin messages; for channels only.","summary":"<p>True, if the administrator can edit messages of other users and can pin messages; for channels only.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":50,"url":null},"def":{"name":"can_edit_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_edit_messages"},"external_var":false},{"html_id":"can_edit_messages=(can_edit_messages:Bool|Nil)-instance-method","name":"can_edit_messages=","doc":"True, if the administrator can edit messages of other users and can pin messages; for channels only.","summary":"<p>True, if the administrator can edit messages of other users and can pin messages; for channels only.</p>","abstract":false,"args":[{"name":"can_edit_messages","external_name":"can_edit_messages","restriction":"Bool | Nil"}],"args_string":"(can_edit_messages : Bool | Nil)","args_html":"(can_edit_messages : Bool | Nil)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":50,"url":null},"def":{"name":"can_edit_messages=","args":[{"name":"can_edit_messages","external_name":"can_edit_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_edit_messages = can_edit_messages"},"external_var":false},{"html_id":"can_edit_stories:Bool-instance-method","name":"can_edit_stories","doc":"True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive.","summary":"<p>True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":41,"url":null},"def":{"name":"can_edit_stories","return_type":"Bool","visibility":"Public","body":"@can_edit_stories"},"external_var":false},{"html_id":"can_edit_stories=(can_edit_stories:Bool)-instance-method","name":"can_edit_stories=","doc":"True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive.","summary":"<p>True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive.</p>","abstract":false,"args":[{"name":"can_edit_stories","external_name":"can_edit_stories","restriction":"Bool"}],"args_string":"(can_edit_stories : Bool)","args_html":"(can_edit_stories : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":41,"url":null},"def":{"name":"can_edit_stories=","args":[{"name":"can_edit_stories","external_name":"can_edit_stories","restriction":"Bool"}],"visibility":"Public","body":"@can_edit_stories = can_edit_stories"},"external_var":false},{"html_id":"can_invite_users:Bool-instance-method","name":"can_invite_users","doc":"True, if the user is allowed to invite new users to the chat.","summary":"<p>True, if the user is allowed to invite new users to the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":35,"url":null},"def":{"name":"can_invite_users","return_type":"Bool","visibility":"Public","body":"@can_invite_users"},"external_var":false},{"html_id":"can_invite_users=(can_invite_users:Bool)-instance-method","name":"can_invite_users=","doc":"True, if the user is allowed to invite new users to the chat.","summary":"<p>True, if the user is allowed to invite new users to the chat.</p>","abstract":false,"args":[{"name":"can_invite_users","external_name":"can_invite_users","restriction":"Bool"}],"args_string":"(can_invite_users : Bool)","args_html":"(can_invite_users : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":35,"url":null},"def":{"name":"can_invite_users=","args":[{"name":"can_invite_users","external_name":"can_invite_users","restriction":"Bool"}],"visibility":"Public","body":"@can_invite_users = can_invite_users"},"external_var":false},{"html_id":"can_manage_chat:Bool-instance-method","name":"can_manage_chat","doc":"True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars. Implied by any other administrator privilege.","summary":"<p>True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":14,"url":null},"def":{"name":"can_manage_chat","return_type":"Bool","visibility":"Public","body":"@can_manage_chat"},"external_var":false},{"html_id":"can_manage_chat=(can_manage_chat:Bool)-instance-method","name":"can_manage_chat=","doc":"True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars. Implied by any other administrator privilege.","summary":"<p>True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars.</p>","abstract":false,"args":[{"name":"can_manage_chat","external_name":"can_manage_chat","restriction":"Bool"}],"args_string":"(can_manage_chat : Bool)","args_html":"(can_manage_chat : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":14,"url":null},"def":{"name":"can_manage_chat=","args":[{"name":"can_manage_chat","external_name":"can_manage_chat","restriction":"Bool"}],"visibility":"Public","body":"@can_manage_chat = can_manage_chat"},"external_var":false},{"html_id":"can_manage_direct_messages:Bool|Nil-instance-method","name":"can_manage_direct_messages","doc":"True, if the administrator can manage direct messages of the channel and decline suggested posts; for channels only.","summary":"<p>True, if the administrator can manage direct messages of the channel and decline suggested posts; for channels only.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":59,"url":null},"def":{"name":"can_manage_direct_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_manage_direct_messages"},"external_var":false},{"html_id":"can_manage_direct_messages=(can_manage_direct_messages:Bool|Nil)-instance-method","name":"can_manage_direct_messages=","doc":"True, if the administrator can manage direct messages of the channel and decline suggested posts; for channels only.","summary":"<p>True, if the administrator can manage direct messages of the channel and decline suggested posts; for channels only.</p>","abstract":false,"args":[{"name":"can_manage_direct_messages","external_name":"can_manage_direct_messages","restriction":"Bool | Nil"}],"args_string":"(can_manage_direct_messages : Bool | Nil)","args_html":"(can_manage_direct_messages : Bool | Nil)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":59,"url":null},"def":{"name":"can_manage_direct_messages=","args":[{"name":"can_manage_direct_messages","external_name":"can_manage_direct_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_manage_direct_messages = can_manage_direct_messages"},"external_var":false},{"html_id":"can_manage_topics:Bool|Nil-instance-method","name":"can_manage_topics","doc":"True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only.","summary":"<p>True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":56,"url":null},"def":{"name":"can_manage_topics","return_type":"Bool | Nil","visibility":"Public","body":"@can_manage_topics"},"external_var":false},{"html_id":"can_manage_topics=(can_manage_topics:Bool|Nil)-instance-method","name":"can_manage_topics=","doc":"True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only.","summary":"<p>True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only.</p>","abstract":false,"args":[{"name":"can_manage_topics","external_name":"can_manage_topics","restriction":"Bool | Nil"}],"args_string":"(can_manage_topics : Bool | Nil)","args_html":"(can_manage_topics : Bool | Nil)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":56,"url":null},"def":{"name":"can_manage_topics=","args":[{"name":"can_manage_topics","external_name":"can_manage_topics","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_manage_topics = can_manage_topics"},"external_var":false},{"html_id":"can_manage_video_chats:Bool-instance-method","name":"can_manage_video_chats","doc":"True, if the administrator can manage video chats.","summary":"<p>True, if the administrator can manage video chats.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":23,"url":null},"def":{"name":"can_manage_video_chats","return_type":"Bool","visibility":"Public","body":"@can_manage_video_chats"},"external_var":false},{"html_id":"can_manage_video_chats=(can_manage_video_chats:Bool)-instance-method","name":"can_manage_video_chats=","doc":"True, if the administrator can manage video chats.","summary":"<p>True, if the administrator can manage video chats.</p>","abstract":false,"args":[{"name":"can_manage_video_chats","external_name":"can_manage_video_chats","restriction":"Bool"}],"args_string":"(can_manage_video_chats : Bool)","args_html":"(can_manage_video_chats : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":23,"url":null},"def":{"name":"can_manage_video_chats=","args":[{"name":"can_manage_video_chats","external_name":"can_manage_video_chats","restriction":"Bool"}],"visibility":"Public","body":"@can_manage_video_chats = can_manage_video_chats"},"external_var":false},{"html_id":"can_pin_messages:Bool|Nil-instance-method","name":"can_pin_messages","doc":"True, if the user is allowed to pin messages; for groups and supergroups only.","summary":"<p>True, if the user is allowed to pin messages; for groups and supergroups only.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":53,"url":null},"def":{"name":"can_pin_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_pin_messages"},"external_var":false},{"html_id":"can_pin_messages=(can_pin_messages:Bool|Nil)-instance-method","name":"can_pin_messages=","doc":"True, if the user is allowed to pin messages; for groups and supergroups only.","summary":"<p>True, if the user is allowed to pin messages; for groups and supergroups only.</p>","abstract":false,"args":[{"name":"can_pin_messages","external_name":"can_pin_messages","restriction":"Bool | Nil"}],"args_string":"(can_pin_messages : Bool | Nil)","args_html":"(can_pin_messages : Bool | Nil)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":53,"url":null},"def":{"name":"can_pin_messages=","args":[{"name":"can_pin_messages","external_name":"can_pin_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_pin_messages = can_pin_messages"},"external_var":false},{"html_id":"can_post_messages:Bool|Nil-instance-method","name":"can_post_messages","doc":"True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only.","summary":"<p>True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":47,"url":null},"def":{"name":"can_post_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_post_messages"},"external_var":false},{"html_id":"can_post_messages=(can_post_messages:Bool|Nil)-instance-method","name":"can_post_messages=","doc":"True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only.","summary":"<p>True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only.</p>","abstract":false,"args":[{"name":"can_post_messages","external_name":"can_post_messages","restriction":"Bool | Nil"}],"args_string":"(can_post_messages : Bool | Nil)","args_html":"(can_post_messages : Bool | Nil)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":47,"url":null},"def":{"name":"can_post_messages=","args":[{"name":"can_post_messages","external_name":"can_post_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_post_messages = can_post_messages"},"external_var":false},{"html_id":"can_post_stories:Bool-instance-method","name":"can_post_stories","doc":"True, if the administrator can post stories to the chat.","summary":"<p>True, if the administrator can post stories to the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":38,"url":null},"def":{"name":"can_post_stories","return_type":"Bool","visibility":"Public","body":"@can_post_stories"},"external_var":false},{"html_id":"can_post_stories=(can_post_stories:Bool)-instance-method","name":"can_post_stories=","doc":"True, if the administrator can post stories to the chat.","summary":"<p>True, if the administrator can post stories to the chat.</p>","abstract":false,"args":[{"name":"can_post_stories","external_name":"can_post_stories","restriction":"Bool"}],"args_string":"(can_post_stories : Bool)","args_html":"(can_post_stories : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":38,"url":null},"def":{"name":"can_post_stories=","args":[{"name":"can_post_stories","external_name":"can_post_stories","restriction":"Bool"}],"visibility":"Public","body":"@can_post_stories = can_post_stories"},"external_var":false},{"html_id":"can_promote_members:Bool-instance-method","name":"can_promote_members","doc":"True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user).","summary":"<p>True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user).</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":29,"url":null},"def":{"name":"can_promote_members","return_type":"Bool","visibility":"Public","body":"@can_promote_members"},"external_var":false},{"html_id":"can_promote_members=(can_promote_members:Bool)-instance-method","name":"can_promote_members=","doc":"True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user).","summary":"<p>True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user).</p>","abstract":false,"args":[{"name":"can_promote_members","external_name":"can_promote_members","restriction":"Bool"}],"args_string":"(can_promote_members : Bool)","args_html":"(can_promote_members : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":29,"url":null},"def":{"name":"can_promote_members=","args":[{"name":"can_promote_members","external_name":"can_promote_members","restriction":"Bool"}],"visibility":"Public","body":"@can_promote_members = can_promote_members"},"external_var":false},{"html_id":"can_restrict_members:Bool-instance-method","name":"can_restrict_members","doc":"True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics.","summary":"<p>True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":26,"url":null},"def":{"name":"can_restrict_members","return_type":"Bool","visibility":"Public","body":"@can_restrict_members"},"external_var":false},{"html_id":"can_restrict_members=(can_restrict_members:Bool)-instance-method","name":"can_restrict_members=","doc":"True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics.","summary":"<p>True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics.</p>","abstract":false,"args":[{"name":"can_restrict_members","external_name":"can_restrict_members","restriction":"Bool"}],"args_string":"(can_restrict_members : Bool)","args_html":"(can_restrict_members : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":26,"url":null},"def":{"name":"can_restrict_members=","args":[{"name":"can_restrict_members","external_name":"can_restrict_members","restriction":"Bool"}],"visibility":"Public","body":"@can_restrict_members = can_restrict_members"},"external_var":false},{"html_id":"is_anonymous:Bool-instance-method","name":"is_anonymous","doc":"True, if the user's presence in the chat is hidden.","summary":"<p>True, if the user's presence in the chat is hidden.</p>","abstract":false,"location":{"filename":"src/types/chat_administrator_rights.cr","line_number":11,"url":null},"def":{"name":"is_anonymous","return_type":"Bool","visibility":"Public","body":"@is_anonymous"},"external_var":false},{"html_id":"is_anonymous=(is_anonymous:Bool)-instance-method","name":"is_anonymous=","doc":"True, if the user's presence in the chat is hidden.","summary":"<p>True, if the user's presence in the chat is hidden.</p>","abstract":false,"args":[{"name":"is_anonymous","external_name":"is_anonymous","restriction":"Bool"}],"args_string":"(is_anonymous : Bool)","args_html":"(is_anonymous : Bool)","location":{"filename":"src/types/chat_administrator_rights.cr","line_number":11,"url":null},"def":{"name":"is_anonymous=","args":[{"name":"is_anonymous","external_name":"is_anonymous","restriction":"Bool"}],"visibility":"Public","body":"@is_anonymous = is_anonymous"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatBackground","path":"Hamilton/Types/ChatBackground.html","kind":"class","full_name":"Hamilton::Types::ChatBackground","name":"ChatBackground","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_background.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a chat background.","summary":"<p>This object represents a chat background.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_background.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_background.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:Hamilton::Types::BackgroundType-instance-method","name":"type","doc":"Type of the background.","summary":"<p>Type of the background.</p>","abstract":false,"location":{"filename":"src/types/chat_background.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"Hamilton::Types::BackgroundType","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:Hamilton::Types::BackgroundType)-instance-method","name":"type=","doc":"Type of the background.","summary":"<p>Type of the background.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Hamilton::Types::BackgroundType"}],"args_string":"(type : Hamilton::Types::BackgroundType)","args_html":"(type : <a href=\"../../Hamilton/Types/BackgroundType.html\">Hamilton::Types::BackgroundType</a>)","location":{"filename":"src/types/chat_background.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"Hamilton::Types::BackgroundType"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatBoost","path":"Hamilton/Types/ChatBoost.html","kind":"class","full_name":"Hamilton::Types::ChatBoost","name":"ChatBoost","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_boost.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about a chat boost.","summary":"<p>This object contains information about a chat boost.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"add_date:Int32-instance-method","name":"add_date","doc":"Point in time (Unix timestamp) when the chat was boosted.","summary":"<p>Point in time (Unix timestamp) when the chat was boosted.</p>","abstract":false,"location":{"filename":"src/types/chat_boost.cr","line_number":14,"url":null},"def":{"name":"add_date","return_type":"Int32","visibility":"Public","body":"@add_date"},"external_var":false},{"html_id":"add_date=(add_date:Int32)-instance-method","name":"add_date=","doc":"Point in time (Unix timestamp) when the chat was boosted.","summary":"<p>Point in time (Unix timestamp) when the chat was boosted.</p>","abstract":false,"args":[{"name":"add_date","external_name":"add_date","restriction":"Int32"}],"args_string":"(add_date : Int32)","args_html":"(add_date : Int32)","location":{"filename":"src/types/chat_boost.cr","line_number":14,"url":null},"def":{"name":"add_date=","args":[{"name":"add_date","external_name":"add_date","restriction":"Int32"}],"visibility":"Public","body":"@add_date = add_date"},"external_var":false},{"html_id":"boost_id:String-instance-method","name":"boost_id","doc":"Unique identifier of the boost.","summary":"<p>Unique identifier of the boost.</p>","abstract":false,"location":{"filename":"src/types/chat_boost.cr","line_number":11,"url":null},"def":{"name":"boost_id","return_type":"String","visibility":"Public","body":"@boost_id"},"external_var":false},{"html_id":"boost_id=(boost_id:String)-instance-method","name":"boost_id=","doc":"Unique identifier of the boost.","summary":"<p>Unique identifier of the boost.</p>","abstract":false,"args":[{"name":"boost_id","external_name":"boost_id","restriction":"String"}],"args_string":"(boost_id : String)","args_html":"(boost_id : String)","location":{"filename":"src/types/chat_boost.cr","line_number":11,"url":null},"def":{"name":"boost_id=","args":[{"name":"boost_id","external_name":"boost_id","restriction":"String"}],"visibility":"Public","body":"@boost_id = boost_id"},"external_var":false},{"html_id":"expiration_date:Int32-instance-method","name":"expiration_date","doc":"Point in time (Unix timestamp) when the boost will automatically expire, unless the booster's Telegram Premium subscription is prolonged.","summary":"<p>Point in time (Unix timestamp) when the boost will automatically expire, unless the booster's Telegram Premium subscription is prolonged.</p>","abstract":false,"location":{"filename":"src/types/chat_boost.cr","line_number":17,"url":null},"def":{"name":"expiration_date","return_type":"Int32","visibility":"Public","body":"@expiration_date"},"external_var":false},{"html_id":"expiration_date=(expiration_date:Int32)-instance-method","name":"expiration_date=","doc":"Point in time (Unix timestamp) when the boost will automatically expire, unless the booster's Telegram Premium subscription is prolonged.","summary":"<p>Point in time (Unix timestamp) when the boost will automatically expire, unless the booster's Telegram Premium subscription is prolonged.</p>","abstract":false,"args":[{"name":"expiration_date","external_name":"expiration_date","restriction":"Int32"}],"args_string":"(expiration_date : Int32)","args_html":"(expiration_date : Int32)","location":{"filename":"src/types/chat_boost.cr","line_number":17,"url":null},"def":{"name":"expiration_date=","args":[{"name":"expiration_date","external_name":"expiration_date","restriction":"Int32"}],"visibility":"Public","body":"@expiration_date = expiration_date"},"external_var":false},{"html_id":"source:Hamilton::Types::ChatBoostSource-instance-method","name":"source","doc":"Source of the added boost.","summary":"<p>Source of the added boost.</p>","abstract":false,"location":{"filename":"src/types/chat_boost.cr","line_number":20,"url":null},"def":{"name":"source","return_type":"Hamilton::Types::ChatBoostSource","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:Hamilton::Types::ChatBoostSource)-instance-method","name":"source=","doc":"Source of the added boost.","summary":"<p>Source of the added boost.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Hamilton::Types::ChatBoostSource"}],"args_string":"(source : Hamilton::Types::ChatBoostSource)","args_html":"(source : <a href=\"../../Hamilton/Types/ChatBoostSource.html\">Hamilton::Types::ChatBoostSource</a>)","location":{"filename":"src/types/chat_boost.cr","line_number":20,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"Hamilton::Types::ChatBoostSource"}],"visibility":"Public","body":"@source = source"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatBoostAdded","path":"Hamilton/Types/ChatBoostAdded.html","kind":"class","full_name":"Hamilton::Types::ChatBoostAdded","name":"ChatBoostAdded","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_boost_added.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about a user boosting a chat.","summary":"<p>This object represents a service message about a user boosting a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_added.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_added.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"boost_count:Int32-instance-method","name":"boost_count","doc":"Number of boosts added by the user.","summary":"<p>Number of boosts added by the user.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_added.cr","line_number":11,"url":null},"def":{"name":"boost_count","return_type":"Int32","visibility":"Public","body":"@boost_count"},"external_var":false},{"html_id":"boost_count=(boost_count:Int32)-instance-method","name":"boost_count=","doc":"Number of boosts added by the user.","summary":"<p>Number of boosts added by the user.</p>","abstract":false,"args":[{"name":"boost_count","external_name":"boost_count","restriction":"Int32"}],"args_string":"(boost_count : Int32)","args_html":"(boost_count : Int32)","location":{"filename":"src/types/chat_boost_added.cr","line_number":11,"url":null},"def":{"name":"boost_count=","args":[{"name":"boost_count","external_name":"boost_count","restriction":"Int32"}],"visibility":"Public","body":"@boost_count = boost_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatBoostRemoved","path":"Hamilton/Types/ChatBoostRemoved.html","kind":"class","full_name":"Hamilton::Types::ChatBoostRemoved","name":"ChatBoostRemoved","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_boost_removed.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a boost removed from a chat.","summary":"<p>This object represents a boost removed from a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_removed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_removed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"boost_id:String-instance-method","name":"boost_id","doc":"Unique identifier of the boost.","summary":"<p>Unique identifier of the boost.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_removed.cr","line_number":14,"url":null},"def":{"name":"boost_id","return_type":"String","visibility":"Public","body":"@boost_id"},"external_var":false},{"html_id":"boost_id=(boost_id:String)-instance-method","name":"boost_id=","doc":"Unique identifier of the boost.","summary":"<p>Unique identifier of the boost.</p>","abstract":false,"args":[{"name":"boost_id","external_name":"boost_id","restriction":"String"}],"args_string":"(boost_id : String)","args_html":"(boost_id : String)","location":{"filename":"src/types/chat_boost_removed.cr","line_number":14,"url":null},"def":{"name":"boost_id=","args":[{"name":"boost_id","external_name":"boost_id","restriction":"String"}],"visibility":"Public","body":"@boost_id = boost_id"},"external_var":false},{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Chat which was boosted.","summary":"<p>Chat which was boosted.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_removed.cr","line_number":11,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Chat which was boosted.","summary":"<p>Chat which was boosted.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/chat_boost_removed.cr","line_number":11,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"remove_date:Int32-instance-method","name":"remove_date","doc":"Point in time (Unix timestamp) when the boost was removed.","summary":"<p>Point in time (Unix timestamp) when the boost was removed.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_removed.cr","line_number":17,"url":null},"def":{"name":"remove_date","return_type":"Int32","visibility":"Public","body":"@remove_date"},"external_var":false},{"html_id":"remove_date=(remove_date:Int32)-instance-method","name":"remove_date=","doc":"Point in time (Unix timestamp) when the boost was removed.","summary":"<p>Point in time (Unix timestamp) when the boost was removed.</p>","abstract":false,"args":[{"name":"remove_date","external_name":"remove_date","restriction":"Int32"}],"args_string":"(remove_date : Int32)","args_html":"(remove_date : Int32)","location":{"filename":"src/types/chat_boost_removed.cr","line_number":17,"url":null},"def":{"name":"remove_date=","args":[{"name":"remove_date","external_name":"remove_date","restriction":"Int32"}],"visibility":"Public","body":"@remove_date = remove_date"},"external_var":false},{"html_id":"source:Hamilton::Types::ChatBoostSource-instance-method","name":"source","doc":"Source of the removed boost.","summary":"<p>Source of the removed boost.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_removed.cr","line_number":20,"url":null},"def":{"name":"source","return_type":"Hamilton::Types::ChatBoostSource","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:Hamilton::Types::ChatBoostSource)-instance-method","name":"source=","doc":"Source of the removed boost.","summary":"<p>Source of the removed boost.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Hamilton::Types::ChatBoostSource"}],"args_string":"(source : Hamilton::Types::ChatBoostSource)","args_html":"(source : <a href=\"../../Hamilton/Types/ChatBoostSource.html\">Hamilton::Types::ChatBoostSource</a>)","location":{"filename":"src/types/chat_boost_removed.cr","line_number":20,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"Hamilton::Types::ChatBoostSource"}],"visibility":"Public","body":"@source = source"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatBoostSource","path":"Hamilton/Types/ChatBoostSource.html","kind":"alias","full_name":"Hamilton::Types::ChatBoostSource","name":"ChatBoostSource","abstract":false,"locations":[{"filename":"src/types/chat_boost_source.cr","line_number":53,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::ChatBoostSourceGiftCode | Hamilton::Types::ChatBoostSourceGiveaway | Hamilton::Types::ChatBoostSourcePremium)","aliased_html":"<a href=\"../../Hamilton/Types/ChatBoostSourceGiftCode.html\">Hamilton::Types::ChatBoostSourceGiftCode</a> | <a href=\"../../Hamilton/Types/ChatBoostSourceGiveaway.html\">Hamilton::Types::ChatBoostSourceGiveaway</a> | <a href=\"../../Hamilton/Types/ChatBoostSourcePremium.html\">Hamilton::Types::ChatBoostSourcePremium</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the source of a chat boost.","summary":"<p>This object describes the source of a chat boost.</p>"},{"html_id":"hamilton/Hamilton/Types/ChatBoostSourceGiftCode","path":"Hamilton/Types/ChatBoostSourceGiftCode.html","kind":"class","full_name":"Hamilton::Types::ChatBoostSourceGiftCode","name":"ChatBoostSourceGiftCode","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_boost_source.cr","line_number":19,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.","summary":"<p>The boost was obtained by the creation of Telegram Premium gift codes to boost a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_source.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_source.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"source:String-instance-method","name":"source","doc":"Source of the boost, always \"gift_code\".","summary":"<p>Source of the boost, always &quot;gift_code&quot;.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_source.cr","line_number":24,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Source of the boost, always \"gift_code\".","summary":"<p>Source of the boost, always &quot;gift_code&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/chat_boost_source.cr","line_number":24,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"User for which the gift code was created.","summary":"<p>User for which the gift code was created.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_source.cr","line_number":27,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"User for which the gift code was created.","summary":"<p>User for which the gift code was created.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_boost_source.cr","line_number":27,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatBoostSourceGiveaway","path":"Hamilton/Types/ChatBoostSourceGiveaway.html","kind":"class","full_name":"Hamilton::Types::ChatBoostSourceGiveaway","name":"ChatBoostSourceGiveaway","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_boost_source.cr","line_number":32,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The boost was obtained by the creation of a Telegram Premium or a Telegram Star giveaway. This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription for Telegram Premium giveaways and prize_star_count / 500 times for one year for Telegram Star giveaways.","summary":"<p>The boost was obtained by the creation of a Telegram Premium or a Telegram Star giveaway.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_source.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_source.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"giveaway_message_id:Int32-instance-method","name":"giveaway_message_id","doc":"Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet.","summary":"<p>Identifier of a message in the chat with the giveaway; the message could have been deleted already.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_source.cr","line_number":40,"url":null},"def":{"name":"giveaway_message_id","return_type":"Int32","visibility":"Public","body":"@giveaway_message_id"},"external_var":false},{"html_id":"giveaway_message_id=(giveaway_message_id:Int32)-instance-method","name":"giveaway_message_id=","doc":"Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet.","summary":"<p>Identifier of a message in the chat with the giveaway; the message could have been deleted already.</p>","abstract":false,"args":[{"name":"giveaway_message_id","external_name":"giveaway_message_id","restriction":"Int32"}],"args_string":"(giveaway_message_id : Int32)","args_html":"(giveaway_message_id : Int32)","location":{"filename":"src/types/chat_boost_source.cr","line_number":40,"url":null},"def":{"name":"giveaway_message_id=","args":[{"name":"giveaway_message_id","external_name":"giveaway_message_id","restriction":"Int32"}],"visibility":"Public","body":"@giveaway_message_id = giveaway_message_id"},"external_var":false},{"html_id":"is_unclaimed:Bool|Nil-instance-method","name":"is_unclaimed","doc":"True, if the giveaway was completed, but there was no user to win the prize.","summary":"<p>True, if the giveaway was completed, but there was no user to win the prize.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_source.cr","line_number":49,"url":null},"def":{"name":"is_unclaimed","return_type":"Bool | Nil","visibility":"Public","body":"@is_unclaimed"},"external_var":false},{"html_id":"is_unclaimed=(is_unclaimed:Bool|Nil)-instance-method","name":"is_unclaimed=","doc":"True, if the giveaway was completed, but there was no user to win the prize.","summary":"<p>True, if the giveaway was completed, but there was no user to win the prize.</p>","abstract":false,"args":[{"name":"is_unclaimed","external_name":"is_unclaimed","restriction":"Bool | Nil"}],"args_string":"(is_unclaimed : Bool | Nil)","args_html":"(is_unclaimed : Bool | Nil)","location":{"filename":"src/types/chat_boost_source.cr","line_number":49,"url":null},"def":{"name":"is_unclaimed=","args":[{"name":"is_unclaimed","external_name":"is_unclaimed","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_unclaimed = is_unclaimed"},"external_var":false},{"html_id":"prize_star_count:Int32|Nil-instance-method","name":"prize_star_count","doc":"The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.","summary":"<p>The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_source.cr","line_number":46,"url":null},"def":{"name":"prize_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@prize_star_count"},"external_var":false},{"html_id":"prize_star_count=(prize_star_count:Int32|Nil)-instance-method","name":"prize_star_count=","doc":"The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.","summary":"<p>The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.</p>","abstract":false,"args":[{"name":"prize_star_count","external_name":"prize_star_count","restriction":"Int32 | Nil"}],"args_string":"(prize_star_count : Int32 | Nil)","args_html":"(prize_star_count : Int32 | Nil)","location":{"filename":"src/types/chat_boost_source.cr","line_number":46,"url":null},"def":{"name":"prize_star_count=","args":[{"name":"prize_star_count","external_name":"prize_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@prize_star_count = prize_star_count"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Source of the boost, always \"giveaway\".","summary":"<p>Source of the boost, always &quot;giveaway&quot;.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_source.cr","line_number":37,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Source of the boost, always \"giveaway\".","summary":"<p>Source of the boost, always &quot;giveaway&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/chat_boost_source.cr","line_number":37,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"user:Hamilton::Types::User|Nil-instance-method","name":"user","doc":"User that won the prize in the giveaway if any; for Telegram Premium giveaways only.","summary":"<p>User that won the prize in the giveaway if any; for Telegram Premium giveaways only.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_source.cr","line_number":43,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User|Nil)-instance-method","name":"user=","doc":"User that won the prize in the giveaway if any; for Telegram Premium giveaways only.","summary":"<p>User that won the prize in the giveaway if any; for Telegram Premium giveaways only.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(user : Hamilton::Types::User | Nil)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/chat_boost_source.cr","line_number":43,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatBoostSourcePremium","path":"Hamilton/Types/ChatBoostSourcePremium.html","kind":"class","full_name":"Hamilton::Types::ChatBoostSourcePremium","name":"ChatBoostSourcePremium","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_boost_source.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.","summary":"<p>The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_source.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_source.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"source:String-instance-method","name":"source","doc":"Source of the boost, always “premium”.","summary":"<p>Source of the boost, always “premium”.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_source.cr","line_number":11,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Source of the boost, always “premium”.","summary":"<p>Source of the boost, always “premium”.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/chat_boost_source.cr","line_number":11,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"User that boosted the chat.","summary":"<p>User that boosted the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_source.cr","line_number":14,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"User that boosted the chat.","summary":"<p>User that boosted the chat.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_boost_source.cr","line_number":14,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatBoostUpdated","path":"Hamilton/Types/ChatBoostUpdated.html","kind":"class","full_name":"Hamilton::Types::ChatBoostUpdated","name":"ChatBoostUpdated","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_boost_updated.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a boost added to a chat or changed.","summary":"<p>This object represents a boost added to a chat or changed.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_updated.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_boost_updated.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"boost:Hamilton::Types::ChatBoost-instance-method","name":"boost","doc":"Information about the chat boost.","summary":"<p>Information about the chat boost.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_updated.cr","line_number":14,"url":null},"def":{"name":"boost","return_type":"Hamilton::Types::ChatBoost","visibility":"Public","body":"@boost"},"external_var":false},{"html_id":"boost=(boost:Hamilton::Types::ChatBoost)-instance-method","name":"boost=","doc":"Information about the chat boost.","summary":"<p>Information about the chat boost.</p>","abstract":false,"args":[{"name":"boost","external_name":"boost","restriction":"Hamilton::Types::ChatBoost"}],"args_string":"(boost : Hamilton::Types::ChatBoost)","args_html":"(boost : <a href=\"../../Hamilton/Types/ChatBoost.html\">Hamilton::Types::ChatBoost</a>)","location":{"filename":"src/types/chat_boost_updated.cr","line_number":14,"url":null},"def":{"name":"boost=","args":[{"name":"boost","external_name":"boost","restriction":"Hamilton::Types::ChatBoost"}],"visibility":"Public","body":"@boost = boost"},"external_var":false},{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Chat which was boosted.","summary":"<p>Chat which was boosted.</p>","abstract":false,"location":{"filename":"src/types/chat_boost_updated.cr","line_number":11,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Chat which was boosted.","summary":"<p>Chat which was boosted.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/chat_boost_updated.cr","line_number":11,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatFullInfo","path":"Hamilton/Types/ChatFullInfo.html","kind":"class","full_name":"Hamilton::Types::ChatFullInfo","name":"ChatFullInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_full_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains full information about a chat.","summary":"<p>This object contains full information about a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_full_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_full_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"accent_color_id:Int32-instance-method","name":"accent_color_id","doc":"Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview.","summary":"<p>Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":35,"url":null},"def":{"name":"accent_color_id","return_type":"Int32","visibility":"Public","body":"@accent_color_id"},"external_var":false},{"html_id":"accent_color_id=(accent_color_id:Int32)-instance-method","name":"accent_color_id=","doc":"Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview.","summary":"<p>Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview.</p>","abstract":false,"args":[{"name":"accent_color_id","external_name":"accent_color_id","restriction":"Int32"}],"args_string":"(accent_color_id : Int32)","args_html":"(accent_color_id : Int32)","location":{"filename":"src/types/chat_full_info.cr","line_number":35,"url":null},"def":{"name":"accent_color_id=","args":[{"name":"accent_color_id","external_name":"accent_color_id","restriction":"Int32"}],"visibility":"Public","body":"@accent_color_id = accent_color_id"},"external_var":false},{"html_id":"accepted_gift_types:Hamilton::Types::AcceptedGiftTypes-instance-method","name":"accepted_gift_types","doc":"Information about types of gifts that are accepted by the chat or by the corresponding user for private chats.","summary":"<p>Information about types of gifts that are accepted by the chat or by the corresponding user for private chats.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":110,"url":null},"def":{"name":"accepted_gift_types","return_type":"Hamilton::Types::AcceptedGiftTypes","visibility":"Public","body":"@accepted_gift_types"},"external_var":false},{"html_id":"accepted_gift_types=(accepted_gift_types:Hamilton::Types::AcceptedGiftTypes)-instance-method","name":"accepted_gift_types=","doc":"Information about types of gifts that are accepted by the chat or by the corresponding user for private chats.","summary":"<p>Information about types of gifts that are accepted by the chat or by the corresponding user for private chats.</p>","abstract":false,"args":[{"name":"accepted_gift_types","external_name":"accepted_gift_types","restriction":"Hamilton::Types::AcceptedGiftTypes"}],"args_string":"(accepted_gift_types : Hamilton::Types::AcceptedGiftTypes)","args_html":"(accepted_gift_types : <a href=\"../../Hamilton/Types/AcceptedGiftTypes.html\">Hamilton::Types::AcceptedGiftTypes</a>)","location":{"filename":"src/types/chat_full_info.cr","line_number":110,"url":null},"def":{"name":"accepted_gift_types=","args":[{"name":"accepted_gift_types","external_name":"accepted_gift_types","restriction":"Hamilton::Types::AcceptedGiftTypes"}],"visibility":"Public","body":"@accepted_gift_types = accepted_gift_types"},"external_var":false},{"html_id":"active_usernames:Array(String)|Nil-instance-method","name":"active_usernames","doc":"If non-empty, the list of all active chat usernames; for private chats, supergroups and channels.","summary":"<p>If non-empty, the list of all active chat usernames; for private chats, supergroups and channels.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":44,"url":null},"def":{"name":"active_usernames","return_type":"Array(String) | Nil","visibility":"Public","body":"@active_usernames"},"external_var":false},{"html_id":"active_usernames=(active_usernames:Array(String)|Nil)-instance-method","name":"active_usernames=","doc":"If non-empty, the list of all active chat usernames; for private chats, supergroups and channels.","summary":"<p>If non-empty, the list of all active chat usernames; for private chats, supergroups and channels.</p>","abstract":false,"args":[{"name":"active_usernames","external_name":"active_usernames","restriction":"Array(String) | Nil"}],"args_string":"(active_usernames : Array(String) | Nil)","args_html":"(active_usernames : Array(String) | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":44,"url":null},"def":{"name":"active_usernames=","args":[{"name":"active_usernames","external_name":"active_usernames","restriction":"Array(String) | Nil"}],"visibility":"Public","body":"@active_usernames = active_usernames"},"external_var":false},{"html_id":"available_reactions:Array(Hamilton::Types::ReactionType)|Nil-instance-method","name":"available_reactions","doc":"List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed.","summary":"<p>List of available reactions allowed in the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":65,"url":null},"def":{"name":"available_reactions","return_type":"Array(Hamilton::Types::ReactionType) | Nil","visibility":"Public","body":"@available_reactions"},"external_var":false},{"html_id":"available_reactions=(available_reactions:Array(Hamilton::Types::ReactionType)|Nil)-instance-method","name":"available_reactions=","doc":"List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed.","summary":"<p>List of available reactions allowed in the chat.</p>","abstract":false,"args":[{"name":"available_reactions","external_name":"available_reactions","restriction":"Array(Hamilton::Types::ReactionType) | Nil"}],"args_string":"(available_reactions : Array(Hamilton::Types::ReactionType) | Nil)","args_html":"(available_reactions : Array(<a href=\"../../Hamilton/Types/ReactionType.html\">Hamilton::Types::ReactionType</a>) | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":65,"url":null},"def":{"name":"available_reactions=","args":[{"name":"available_reactions","external_name":"available_reactions","restriction":"Array(Hamilton::Types::ReactionType) | Nil"}],"visibility":"Public","body":"@available_reactions = available_reactions"},"external_var":false},{"html_id":"background_custom_emoji_id:String|Nil-instance-method","name":"background_custom_emoji_id","doc":"Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background.","summary":"<p>Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":68,"url":null},"def":{"name":"background_custom_emoji_id","return_type":"String | Nil","visibility":"Public","body":"@background_custom_emoji_id"},"external_var":false},{"html_id":"background_custom_emoji_id=(background_custom_emoji_id:String|Nil)-instance-method","name":"background_custom_emoji_id=","doc":"Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background.","summary":"<p>Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background.</p>","abstract":false,"args":[{"name":"background_custom_emoji_id","external_name":"background_custom_emoji_id","restriction":"String | Nil"}],"args_string":"(background_custom_emoji_id : String | Nil)","args_html":"(background_custom_emoji_id : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":68,"url":null},"def":{"name":"background_custom_emoji_id=","args":[{"name":"background_custom_emoji_id","external_name":"background_custom_emoji_id","restriction":"String | Nil"}],"visibility":"Public","body":"@background_custom_emoji_id = background_custom_emoji_id"},"external_var":false},{"html_id":"bio:String|Nil-instance-method","name":"bio","doc":"Bio of the other party in a private chat.","summary":"<p>Bio of the other party in a private chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":83,"url":null},"def":{"name":"bio","return_type":"String | Nil","visibility":"Public","body":"@bio"},"external_var":false},{"html_id":"bio=(bio:String|Nil)-instance-method","name":"bio=","doc":"Bio of the other party in a private chat.","summary":"<p>Bio of the other party in a private chat.</p>","abstract":false,"args":[{"name":"bio","external_name":"bio","restriction":"String | Nil"}],"args_string":"(bio : String | Nil)","args_html":"(bio : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":83,"url":null},"def":{"name":"bio=","args":[{"name":"bio","external_name":"bio","restriction":"String | Nil"}],"visibility":"Public","body":"@bio = bio"},"external_var":false},{"html_id":"birthdate:Hamilton::Types::Birthdate|Nil-instance-method","name":"birthdate","doc":"For private chats, the date of birth of the user.","summary":"<p>For private chats, the date of birth of the user.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":47,"url":null},"def":{"name":"birthdate","return_type":"Hamilton::Types::Birthdate | Nil","visibility":"Public","body":"@birthdate"},"external_var":false},{"html_id":"birthdate=(birthdate:Hamilton::Types::Birthdate|Nil)-instance-method","name":"birthdate=","doc":"For private chats, the date of birth of the user.","summary":"<p>For private chats, the date of birth of the user.</p>","abstract":false,"args":[{"name":"birthdate","external_name":"birthdate","restriction":"Hamilton::Types::Birthdate | Nil"}],"args_string":"(birthdate : Hamilton::Types::Birthdate | Nil)","args_html":"(birthdate : <a href=\"../../Hamilton/Types/Birthdate.html\">Hamilton::Types::Birthdate</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":47,"url":null},"def":{"name":"birthdate=","args":[{"name":"birthdate","external_name":"birthdate","restriction":"Hamilton::Types::Birthdate | Nil"}],"visibility":"Public","body":"@birthdate = birthdate"},"external_var":false},{"html_id":"business_intro:Hamilton::Types::BusinessIntro|Nil-instance-method","name":"business_intro","doc":"For private chats with business accounts, the intro of the business.","summary":"<p>For private chats with business accounts, the intro of the business.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":50,"url":null},"def":{"name":"business_intro","return_type":"Hamilton::Types::BusinessIntro | Nil","visibility":"Public","body":"@business_intro"},"external_var":false},{"html_id":"business_intro=(business_intro:Hamilton::Types::BusinessIntro|Nil)-instance-method","name":"business_intro=","doc":"For private chats with business accounts, the intro of the business.","summary":"<p>For private chats with business accounts, the intro of the business.</p>","abstract":false,"args":[{"name":"business_intro","external_name":"business_intro","restriction":"Hamilton::Types::BusinessIntro | Nil"}],"args_string":"(business_intro : Hamilton::Types::BusinessIntro | Nil)","args_html":"(business_intro : <a href=\"../../Hamilton/Types/BusinessIntro.html\">Hamilton::Types::BusinessIntro</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":50,"url":null},"def":{"name":"business_intro=","args":[{"name":"business_intro","external_name":"business_intro","restriction":"Hamilton::Types::BusinessIntro | Nil"}],"visibility":"Public","body":"@business_intro = business_intro"},"external_var":false},{"html_id":"business_location:Hamilton::Types::BusinessLocation|Nil-instance-method","name":"business_location","doc":"For private chats with business accounts, the location of the business.","summary":"<p>For private chats with business accounts, the location of the business.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":53,"url":null},"def":{"name":"business_location","return_type":"Hamilton::Types::BusinessLocation | Nil","visibility":"Public","body":"@business_location"},"external_var":false},{"html_id":"business_location=(business_location:Hamilton::Types::BusinessLocation|Nil)-instance-method","name":"business_location=","doc":"For private chats with business accounts, the location of the business.","summary":"<p>For private chats with business accounts, the location of the business.</p>","abstract":false,"args":[{"name":"business_location","external_name":"business_location","restriction":"Hamilton::Types::BusinessLocation | Nil"}],"args_string":"(business_location : Hamilton::Types::BusinessLocation | Nil)","args_html":"(business_location : <a href=\"../../Hamilton/Types/BusinessLocation.html\">Hamilton::Types::BusinessLocation</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":53,"url":null},"def":{"name":"business_location=","args":[{"name":"business_location","external_name":"business_location","restriction":"Hamilton::Types::BusinessLocation | Nil"}],"visibility":"Public","body":"@business_location = business_location"},"external_var":false},{"html_id":"business_opening_hours:Hamilton::Types::BusinessOpeningHours|Nil-instance-method","name":"business_opening_hours","doc":"For private chats with business accounts, the opening hours of the business.","summary":"<p>For private chats with business accounts, the opening hours of the business.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":56,"url":null},"def":{"name":"business_opening_hours","return_type":"Hamilton::Types::BusinessOpeningHours | Nil","visibility":"Public","body":"@business_opening_hours"},"external_var":false},{"html_id":"business_opening_hours=(business_opening_hours:Hamilton::Types::BusinessOpeningHours|Nil)-instance-method","name":"business_opening_hours=","doc":"For private chats with business accounts, the opening hours of the business.","summary":"<p>For private chats with business accounts, the opening hours of the business.</p>","abstract":false,"args":[{"name":"business_opening_hours","external_name":"business_opening_hours","restriction":"Hamilton::Types::BusinessOpeningHours | Nil"}],"args_string":"(business_opening_hours : Hamilton::Types::BusinessOpeningHours | Nil)","args_html":"(business_opening_hours : <a href=\"../../Hamilton/Types/BusinessOpeningHours.html\">Hamilton::Types::BusinessOpeningHours</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":56,"url":null},"def":{"name":"business_opening_hours=","args":[{"name":"business_opening_hours","external_name":"business_opening_hours","restriction":"Hamilton::Types::BusinessOpeningHours | Nil"}],"visibility":"Public","body":"@business_opening_hours = business_opening_hours"},"external_var":false},{"html_id":"can_send_paid_media:Bool|Nil-instance-method","name":"can_send_paid_media","doc":"True, if paid media messages can be sent or forwarded to the channel chat. The field is available only for channel chats.","summary":"<p>True, if paid media messages can be sent or forwarded to the channel chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":113,"url":null},"def":{"name":"can_send_paid_media","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_paid_media"},"external_var":false},{"html_id":"can_send_paid_media=(can_send_paid_media:Bool|Nil)-instance-method","name":"can_send_paid_media=","doc":"True, if paid media messages can be sent or forwarded to the channel chat. The field is available only for channel chats.","summary":"<p>True, if paid media messages can be sent or forwarded to the channel chat.</p>","abstract":false,"args":[{"name":"can_send_paid_media","external_name":"can_send_paid_media","restriction":"Bool | Nil"}],"args_string":"(can_send_paid_media : Bool | Nil)","args_html":"(can_send_paid_media : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":113,"url":null},"def":{"name":"can_send_paid_media=","args":[{"name":"can_send_paid_media","external_name":"can_send_paid_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_paid_media = can_send_paid_media"},"external_var":false},{"html_id":"can_set_sticker_set:Bool|Nil-instance-method","name":"can_set_sticker_set","doc":"True, if the bot can change the group sticker set.","summary":"<p>True, if the bot can change the group sticker set.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":140,"url":null},"def":{"name":"can_set_sticker_set","return_type":"Bool | Nil","visibility":"Public","body":"@can_set_sticker_set"},"external_var":false},{"html_id":"can_set_sticker_set=(can_set_sticker_set:Bool|Nil)-instance-method","name":"can_set_sticker_set=","doc":"True, if the bot can change the group sticker set.","summary":"<p>True, if the bot can change the group sticker set.</p>","abstract":false,"args":[{"name":"can_set_sticker_set","external_name":"can_set_sticker_set","restriction":"Bool | Nil"}],"args_string":"(can_set_sticker_set : Bool | Nil)","args_html":"(can_set_sticker_set : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":140,"url":null},"def":{"name":"can_set_sticker_set=","args":[{"name":"can_set_sticker_set","external_name":"can_set_sticker_set","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_set_sticker_set = can_set_sticker_set"},"external_var":false},{"html_id":"custom_emoji_sticker_set_name:String|Nil-instance-method","name":"custom_emoji_sticker_set_name","doc":"For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group.","summary":"<p>For supergroups, the name of the group's custom emoji sticker set.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":143,"url":null},"def":{"name":"custom_emoji_sticker_set_name","return_type":"String | Nil","visibility":"Public","body":"@custom_emoji_sticker_set_name"},"external_var":false},{"html_id":"custom_emoji_sticker_set_name=(custom_emoji_sticker_set_name:String|Nil)-instance-method","name":"custom_emoji_sticker_set_name=","doc":"For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group.","summary":"<p>For supergroups, the name of the group's custom emoji sticker set.</p>","abstract":false,"args":[{"name":"custom_emoji_sticker_set_name","external_name":"custom_emoji_sticker_set_name","restriction":"String | Nil"}],"args_string":"(custom_emoji_sticker_set_name : String | Nil)","args_html":"(custom_emoji_sticker_set_name : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":143,"url":null},"def":{"name":"custom_emoji_sticker_set_name=","args":[{"name":"custom_emoji_sticker_set_name","external_name":"custom_emoji_sticker_set_name","restriction":"String | Nil"}],"visibility":"Public","body":"@custom_emoji_sticker_set_name = custom_emoji_sticker_set_name"},"external_var":false},{"html_id":"description:String|Nil-instance-method","name":"description","doc":"Description, for groups, supergroups and channel chats.","summary":"<p>Description, for groups, supergroups and channel chats.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":98,"url":null},"def":{"name":"description","return_type":"String | Nil","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String|Nil)-instance-method","name":"description=","doc":"Description, for groups, supergroups and channel chats.","summary":"<p>Description, for groups, supergroups and channel chats.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"args_string":"(description : String | Nil)","args_html":"(description : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":98,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"emoji_status_custom_emoji_id:String|Nil-instance-method","name":"emoji_status_custom_emoji_id","doc":"Custom emoji identifier of the emoji status of the chat or the other party in a private chat.","summary":"<p>Custom emoji identifier of the emoji status of the chat or the other party in a private chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":77,"url":null},"def":{"name":"emoji_status_custom_emoji_id","return_type":"String | Nil","visibility":"Public","body":"@emoji_status_custom_emoji_id"},"external_var":false},{"html_id":"emoji_status_custom_emoji_id=(emoji_status_custom_emoji_id:String|Nil)-instance-method","name":"emoji_status_custom_emoji_id=","doc":"Custom emoji identifier of the emoji status of the chat or the other party in a private chat.","summary":"<p>Custom emoji identifier of the emoji status of the chat or the other party in a private chat.</p>","abstract":false,"args":[{"name":"emoji_status_custom_emoji_id","external_name":"emoji_status_custom_emoji_id","restriction":"String | Nil"}],"args_string":"(emoji_status_custom_emoji_id : String | Nil)","args_html":"(emoji_status_custom_emoji_id : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":77,"url":null},"def":{"name":"emoji_status_custom_emoji_id=","args":[{"name":"emoji_status_custom_emoji_id","external_name":"emoji_status_custom_emoji_id","restriction":"String | Nil"}],"visibility":"Public","body":"@emoji_status_custom_emoji_id = emoji_status_custom_emoji_id"},"external_var":false},{"html_id":"emoji_status_expiration_date:Int32|Nil-instance-method","name":"emoji_status_expiration_date","doc":"Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any.","summary":"<p>Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":80,"url":null},"def":{"name":"emoji_status_expiration_date","return_type":"Int32 | Nil","visibility":"Public","body":"@emoji_status_expiration_date"},"external_var":false},{"html_id":"emoji_status_expiration_date=(emoji_status_expiration_date:Int32|Nil)-instance-method","name":"emoji_status_expiration_date=","doc":"Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any.","summary":"<p>Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any.</p>","abstract":false,"args":[{"name":"emoji_status_expiration_date","external_name":"emoji_status_expiration_date","restriction":"Int32 | Nil"}],"args_string":"(emoji_status_expiration_date : Int32 | Nil)","args_html":"(emoji_status_expiration_date : Int32 | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":80,"url":null},"def":{"name":"emoji_status_expiration_date=","args":[{"name":"emoji_status_expiration_date","external_name":"emoji_status_expiration_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@emoji_status_expiration_date = emoji_status_expiration_date"},"external_var":false},{"html_id":"first_name:String|Nil-instance-method","name":"first_name","doc":"First name of the other party in a private chat.","summary":"<p>First name of the other party in a private chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":23,"url":null},"def":{"name":"first_name","return_type":"String | Nil","visibility":"Public","body":"@first_name"},"external_var":false},{"html_id":"first_name=(first_name:String|Nil)-instance-method","name":"first_name=","doc":"First name of the other party in a private chat.","summary":"<p>First name of the other party in a private chat.</p>","abstract":false,"args":[{"name":"first_name","external_name":"first_name","restriction":"String | Nil"}],"args_string":"(first_name : String | Nil)","args_html":"(first_name : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":23,"url":null},"def":{"name":"first_name=","args":[{"name":"first_name","external_name":"first_name","restriction":"String | Nil"}],"visibility":"Public","body":"@first_name = first_name"},"external_var":false},{"html_id":"has_aggressive_anti_spam_enabled:Bool|Nil-instance-method","name":"has_aggressive_anti_spam_enabled","doc":"True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.","summary":"<p>True, if aggressive anti-spam checks are enabled in the supergroup.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":125,"url":null},"def":{"name":"has_aggressive_anti_spam_enabled","return_type":"Bool | Nil","visibility":"Public","body":"@has_aggressive_anti_spam_enabled"},"external_var":false},{"html_id":"has_aggressive_anti_spam_enabled=(has_aggressive_anti_spam_enabled:Bool|Nil)-instance-method","name":"has_aggressive_anti_spam_enabled=","doc":"True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.","summary":"<p>True, if aggressive anti-spam checks are enabled in the supergroup.</p>","abstract":false,"args":[{"name":"has_aggressive_anti_spam_enabled","external_name":"has_aggressive_anti_spam_enabled","restriction":"Bool | Nil"}],"args_string":"(has_aggressive_anti_spam_enabled : Bool | Nil)","args_html":"(has_aggressive_anti_spam_enabled : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":125,"url":null},"def":{"name":"has_aggressive_anti_spam_enabled=","args":[{"name":"has_aggressive_anti_spam_enabled","external_name":"has_aggressive_anti_spam_enabled","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_aggressive_anti_spam_enabled = has_aggressive_anti_spam_enabled"},"external_var":false},{"html_id":"has_hidden_members:Bool|Nil-instance-method","name":"has_hidden_members","doc":"True, if non-administrators can only get the list of bots and administrators in the chat.","summary":"<p>True, if non-administrators can only get the list of bots and administrators in the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":128,"url":null},"def":{"name":"has_hidden_members","return_type":"Bool | Nil","visibility":"Public","body":"@has_hidden_members"},"external_var":false},{"html_id":"has_hidden_members=(has_hidden_members:Bool|Nil)-instance-method","name":"has_hidden_members=","doc":"True, if non-administrators can only get the list of bots and administrators in the chat.","summary":"<p>True, if non-administrators can only get the list of bots and administrators in the chat.</p>","abstract":false,"args":[{"name":"has_hidden_members","external_name":"has_hidden_members","restriction":"Bool | Nil"}],"args_string":"(has_hidden_members : Bool | Nil)","args_html":"(has_hidden_members : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":128,"url":null},"def":{"name":"has_hidden_members=","args":[{"name":"has_hidden_members","external_name":"has_hidden_members","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_hidden_members = has_hidden_members"},"external_var":false},{"html_id":"has_private_forwards:Bool|Nil-instance-method","name":"has_private_forwards","doc":"True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user.","summary":"<p>True, if privacy settings of the other party in the private chat allows to use tg://user?id=&lt;user_id&gt; links only in chats with the user.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":86,"url":null},"def":{"name":"has_private_forwards","return_type":"Bool | Nil","visibility":"Public","body":"@has_private_forwards"},"external_var":false},{"html_id":"has_private_forwards=(has_private_forwards:Bool|Nil)-instance-method","name":"has_private_forwards=","doc":"True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user.","summary":"<p>True, if privacy settings of the other party in the private chat allows to use tg://user?id=&lt;user_id&gt; links only in chats with the user.</p>","abstract":false,"args":[{"name":"has_private_forwards","external_name":"has_private_forwards","restriction":"Bool | Nil"}],"args_string":"(has_private_forwards : Bool | Nil)","args_html":"(has_private_forwards : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":86,"url":null},"def":{"name":"has_private_forwards=","args":[{"name":"has_private_forwards","external_name":"has_private_forwards","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_private_forwards = has_private_forwards"},"external_var":false},{"html_id":"has_protected_content:Bool|Nil-instance-method","name":"has_protected_content","doc":"True, if messages from the chat can't be forwarded to other chats.","summary":"<p>True, if messages from the chat can't be forwarded to other chats.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":131,"url":null},"def":{"name":"has_protected_content","return_type":"Bool | Nil","visibility":"Public","body":"@has_protected_content"},"external_var":false},{"html_id":"has_protected_content=(has_protected_content:Bool|Nil)-instance-method","name":"has_protected_content=","doc":"True, if messages from the chat can't be forwarded to other chats.","summary":"<p>True, if messages from the chat can't be forwarded to other chats.</p>","abstract":false,"args":[{"name":"has_protected_content","external_name":"has_protected_content","restriction":"Bool | Nil"}],"args_string":"(has_protected_content : Bool | Nil)","args_html":"(has_protected_content : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":131,"url":null},"def":{"name":"has_protected_content=","args":[{"name":"has_protected_content","external_name":"has_protected_content","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_protected_content = has_protected_content"},"external_var":false},{"html_id":"has_restricted_voice_and_video_messages:Bool|Nil-instance-method","name":"has_restricted_voice_and_video_messages","doc":"True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat.","summary":"<p>True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":89,"url":null},"def":{"name":"has_restricted_voice_and_video_messages","return_type":"Bool | Nil","visibility":"Public","body":"@has_restricted_voice_and_video_messages"},"external_var":false},{"html_id":"has_restricted_voice_and_video_messages=(has_restricted_voice_and_video_messages:Bool|Nil)-instance-method","name":"has_restricted_voice_and_video_messages=","doc":"True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat.","summary":"<p>True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat.</p>","abstract":false,"args":[{"name":"has_restricted_voice_and_video_messages","external_name":"has_restricted_voice_and_video_messages","restriction":"Bool | Nil"}],"args_string":"(has_restricted_voice_and_video_messages : Bool | Nil)","args_html":"(has_restricted_voice_and_video_messages : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":89,"url":null},"def":{"name":"has_restricted_voice_and_video_messages=","args":[{"name":"has_restricted_voice_and_video_messages","external_name":"has_restricted_voice_and_video_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_restricted_voice_and_video_messages = has_restricted_voice_and_video_messages"},"external_var":false},{"html_id":"has_visible_history:Bool|Nil-instance-method","name":"has_visible_history","doc":"True, if new chat members will have access to old messages; available only to chat administrators.","summary":"<p>True, if new chat members will have access to old messages; available only to chat administrators.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":134,"url":null},"def":{"name":"has_visible_history","return_type":"Bool | Nil","visibility":"Public","body":"@has_visible_history"},"external_var":false},{"html_id":"has_visible_history=(has_visible_history:Bool|Nil)-instance-method","name":"has_visible_history=","doc":"True, if new chat members will have access to old messages; available only to chat administrators.","summary":"<p>True, if new chat members will have access to old messages; available only to chat administrators.</p>","abstract":false,"args":[{"name":"has_visible_history","external_name":"has_visible_history","restriction":"Bool | Nil"}],"args_string":"(has_visible_history : Bool | Nil)","args_html":"(has_visible_history : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":134,"url":null},"def":{"name":"has_visible_history=","args":[{"name":"has_visible_history","external_name":"has_visible_history","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_visible_history = has_visible_history"},"external_var":false},{"html_id":"id:Int64-instance-method","name":"id","doc":"Unique identifier for this chat.","summary":"<p>Unique identifier for this chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"Int64","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:Int64)-instance-method","name":"id=","doc":"Unique identifier for this chat.","summary":"<p>Unique identifier for this chat.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int64"}],"args_string":"(id : Int64)","args_html":"(id : Int64)","location":{"filename":"src/types/chat_full_info.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"Int64"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"invite_link:String|Nil-instance-method","name":"invite_link","doc":"Primary invite link, for groups, supergroups and channel chats.","summary":"<p>Primary invite link, for groups, supergroups and channel chats.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":101,"url":null},"def":{"name":"invite_link","return_type":"String | Nil","visibility":"Public","body":"@invite_link"},"external_var":false},{"html_id":"invite_link=(invite_link:String|Nil)-instance-method","name":"invite_link=","doc":"Primary invite link, for groups, supergroups and channel chats.","summary":"<p>Primary invite link, for groups, supergroups and channel chats.</p>","abstract":false,"args":[{"name":"invite_link","external_name":"invite_link","restriction":"String | Nil"}],"args_string":"(invite_link : String | Nil)","args_html":"(invite_link : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":101,"url":null},"def":{"name":"invite_link=","args":[{"name":"invite_link","external_name":"invite_link","restriction":"String | Nil"}],"visibility":"Public","body":"@invite_link = invite_link"},"external_var":false},{"html_id":"is_direct_messaegs:Bool|Nil-instance-method","name":"is_direct_messaegs","doc":"True, if the chat is the direct messages chat of a channel.","summary":"<p>True, if the chat is the direct messages chat of a channel.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":32,"url":null},"def":{"name":"is_direct_messaegs","return_type":"Bool | Nil","visibility":"Public","body":"@is_direct_messaegs"},"external_var":false},{"html_id":"is_direct_messaegs=(is_direct_messaegs:Bool|Nil)-instance-method","name":"is_direct_messaegs=","doc":"True, if the chat is the direct messages chat of a channel.","summary":"<p>True, if the chat is the direct messages chat of a channel.</p>","abstract":false,"args":[{"name":"is_direct_messaegs","external_name":"is_direct_messaegs","restriction":"Bool | Nil"}],"args_string":"(is_direct_messaegs : Bool | Nil)","args_html":"(is_direct_messaegs : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":32,"url":null},"def":{"name":"is_direct_messaegs=","args":[{"name":"is_direct_messaegs","external_name":"is_direct_messaegs","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_direct_messaegs = is_direct_messaegs"},"external_var":false},{"html_id":"is_forum:Bool|Nil-instance-method","name":"is_forum","doc":"True, if the supergroup chat is a forum (has topics enabled).","summary":"<p>True, if the supergroup chat is a forum (has topics enabled).</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":29,"url":null},"def":{"name":"is_forum","return_type":"Bool | Nil","visibility":"Public","body":"@is_forum"},"external_var":false},{"html_id":"is_forum=(is_forum:Bool|Nil)-instance-method","name":"is_forum=","doc":"True, if the supergroup chat is a forum (has topics enabled).","summary":"<p>True, if the supergroup chat is a forum (has topics enabled).</p>","abstract":false,"args":[{"name":"is_forum","external_name":"is_forum","restriction":"Bool | Nil"}],"args_string":"(is_forum : Bool | Nil)","args_html":"(is_forum : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":29,"url":null},"def":{"name":"is_forum=","args":[{"name":"is_forum","external_name":"is_forum","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_forum = is_forum"},"external_var":false},{"html_id":"join_by_request:Bool|Nil-instance-method","name":"join_by_request","doc":"True, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators.","summary":"<p>True, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":95,"url":null},"def":{"name":"join_by_request","return_type":"Bool | Nil","visibility":"Public","body":"@join_by_request"},"external_var":false},{"html_id":"join_by_request=(join_by_request:Bool|Nil)-instance-method","name":"join_by_request=","doc":"True, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators.","summary":"<p>True, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators.</p>","abstract":false,"args":[{"name":"join_by_request","external_name":"join_by_request","restriction":"Bool | Nil"}],"args_string":"(join_by_request : Bool | Nil)","args_html":"(join_by_request : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":95,"url":null},"def":{"name":"join_by_request=","args":[{"name":"join_by_request","external_name":"join_by_request","restriction":"Bool | Nil"}],"visibility":"Public","body":"@join_by_request = join_by_request"},"external_var":false},{"html_id":"join_to_send_messages:Bool|Nil-instance-method","name":"join_to_send_messages","doc":"True, if users need to join the supergroup before they can send messages.","summary":"<p>True, if users need to join the supergroup before they can send messages.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":92,"url":null},"def":{"name":"join_to_send_messages","return_type":"Bool | Nil","visibility":"Public","body":"@join_to_send_messages"},"external_var":false},{"html_id":"join_to_send_messages=(join_to_send_messages:Bool|Nil)-instance-method","name":"join_to_send_messages=","doc":"True, if users need to join the supergroup before they can send messages.","summary":"<p>True, if users need to join the supergroup before they can send messages.</p>","abstract":false,"args":[{"name":"join_to_send_messages","external_name":"join_to_send_messages","restriction":"Bool | Nil"}],"args_string":"(join_to_send_messages : Bool | Nil)","args_html":"(join_to_send_messages : Bool | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":92,"url":null},"def":{"name":"join_to_send_messages=","args":[{"name":"join_to_send_messages","external_name":"join_to_send_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@join_to_send_messages = join_to_send_messages"},"external_var":false},{"html_id":"last_name:String|Nil-instance-method","name":"last_name","doc":"Last name of the other party in a private chat.","summary":"<p>Last name of the other party in a private chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":26,"url":null},"def":{"name":"last_name","return_type":"String | Nil","visibility":"Public","body":"@last_name"},"external_var":false},{"html_id":"last_name=(last_name:String|Nil)-instance-method","name":"last_name=","doc":"Last name of the other party in a private chat.","summary":"<p>Last name of the other party in a private chat.</p>","abstract":false,"args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"args_string":"(last_name : String | Nil)","args_html":"(last_name : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":26,"url":null},"def":{"name":"last_name=","args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"visibility":"Public","body":"@last_name = last_name"},"external_var":false},{"html_id":"linked_chat_id:Int64|Nil-instance-method","name":"linked_chat_id","doc":"Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats.","summary":"<p>Unique identifier for the linked chat, i.e.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":146,"url":null},"def":{"name":"linked_chat_id","return_type":"Int64 | Nil","visibility":"Public","body":"@linked_chat_id"},"external_var":false},{"html_id":"linked_chat_id=(linked_chat_id:Int64|Nil)-instance-method","name":"linked_chat_id=","doc":"Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats.","summary":"<p>Unique identifier for the linked chat, i.e.</p>","abstract":false,"args":[{"name":"linked_chat_id","external_name":"linked_chat_id","restriction":"Int64 | Nil"}],"args_string":"(linked_chat_id : Int64 | Nil)","args_html":"(linked_chat_id : Int64 | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":146,"url":null},"def":{"name":"linked_chat_id=","args":[{"name":"linked_chat_id","external_name":"linked_chat_id","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@linked_chat_id = linked_chat_id"},"external_var":false},{"html_id":"location:Hamilton::Types::ChatLocation|Nil-instance-method","name":"location","doc":"For supergroups, the location to which the supergroup is connected.","summary":"<p>For supergroups, the location to which the supergroup is connected.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":149,"url":null},"def":{"name":"location","return_type":"Hamilton::Types::ChatLocation | Nil","visibility":"Public","body":"@location"},"external_var":false},{"html_id":"location=(location:Hamilton::Types::ChatLocation|Nil)-instance-method","name":"location=","doc":"For supergroups, the location to which the supergroup is connected.","summary":"<p>For supergroups, the location to which the supergroup is connected.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::ChatLocation | Nil"}],"args_string":"(location : Hamilton::Types::ChatLocation | Nil)","args_html":"(location : <a href=\"../../Hamilton/Types/ChatLocation.html\">Hamilton::Types::ChatLocation</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":149,"url":null},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::ChatLocation | Nil"}],"visibility":"Public","body":"@location = location"},"external_var":false},{"html_id":"max_reaction_count:Int32-instance-method","name":"max_reaction_count","doc":"The maximum number of reactions that can be set on a message in the chat.","summary":"<p>The maximum number of reactions that can be set on a message in the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":38,"url":null},"def":{"name":"max_reaction_count","return_type":"Int32","visibility":"Public","body":"@max_reaction_count"},"external_var":false},{"html_id":"max_reaction_count=(max_reaction_count:Int32)-instance-method","name":"max_reaction_count=","doc":"The maximum number of reactions that can be set on a message in the chat.","summary":"<p>The maximum number of reactions that can be set on a message in the chat.</p>","abstract":false,"args":[{"name":"max_reaction_count","external_name":"max_reaction_count","restriction":"Int32"}],"args_string":"(max_reaction_count : Int32)","args_html":"(max_reaction_count : Int32)","location":{"filename":"src/types/chat_full_info.cr","line_number":38,"url":null},"def":{"name":"max_reaction_count=","args":[{"name":"max_reaction_count","external_name":"max_reaction_count","restriction":"Int32"}],"visibility":"Public","body":"@max_reaction_count = max_reaction_count"},"external_var":false},{"html_id":"message_auto_delete_time:Int32|Nil-instance-method","name":"message_auto_delete_time","doc":"The time after which all messages sent to the chat will be automatically deleted; in seconds.","summary":"<p>The time after which all messages sent to the chat will be automatically deleted; in seconds.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":122,"url":null},"def":{"name":"message_auto_delete_time","return_type":"Int32 | Nil","visibility":"Public","body":"@message_auto_delete_time"},"external_var":false},{"html_id":"message_auto_delete_time=(message_auto_delete_time:Int32|Nil)-instance-method","name":"message_auto_delete_time=","doc":"The time after which all messages sent to the chat will be automatically deleted; in seconds.","summary":"<p>The time after which all messages sent to the chat will be automatically deleted; in seconds.</p>","abstract":false,"args":[{"name":"message_auto_delete_time","external_name":"message_auto_delete_time","restriction":"Int32 | Nil"}],"args_string":"(message_auto_delete_time : Int32 | Nil)","args_html":"(message_auto_delete_time : Int32 | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":122,"url":null},"def":{"name":"message_auto_delete_time=","args":[{"name":"message_auto_delete_time","external_name":"message_auto_delete_time","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@message_auto_delete_time = message_auto_delete_time"},"external_var":false},{"html_id":"parent_chat:Hamilton::Types::Chat|Nil-instance-method","name":"parent_chat","doc":"Information about the corresponding channel chat; for direct messages chats only.","summary":"<p>Information about the corresponding channel chat; for direct messages chats only.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":62,"url":null},"def":{"name":"parent_chat","return_type":"Hamilton::Types::Chat | Nil","visibility":"Public","body":"@parent_chat"},"external_var":false},{"html_id":"parent_chat=(parent_chat:Hamilton::Types::Chat|Nil)-instance-method","name":"parent_chat=","doc":"Information about the corresponding channel chat; for direct messages chats only.","summary":"<p>Information about the corresponding channel chat; for direct messages chats only.</p>","abstract":false,"args":[{"name":"parent_chat","external_name":"parent_chat","restriction":"Hamilton::Types::Chat | Nil"}],"args_string":"(parent_chat : Hamilton::Types::Chat | Nil)","args_html":"(parent_chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":62,"url":null},"def":{"name":"parent_chat=","args":[{"name":"parent_chat","external_name":"parent_chat","restriction":"Hamilton::Types::Chat | Nil"}],"visibility":"Public","body":"@parent_chat = parent_chat"},"external_var":false},{"html_id":"permissions:Hamilton::Types::ChatPermissions|Nil-instance-method","name":"permissions","doc":"Default chat member permissions, for groups and supergroups.","summary":"<p>Default chat member permissions, for groups and supergroups.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":107,"url":null},"def":{"name":"permissions","return_type":"Hamilton::Types::ChatPermissions | Nil","visibility":"Public","body":"@permissions"},"external_var":false},{"html_id":"permissions=(permissions:Hamilton::Types::ChatPermissions|Nil)-instance-method","name":"permissions=","doc":"Default chat member permissions, for groups and supergroups.","summary":"<p>Default chat member permissions, for groups and supergroups.</p>","abstract":false,"args":[{"name":"permissions","external_name":"permissions","restriction":"Hamilton::Types::ChatPermissions | Nil"}],"args_string":"(permissions : Hamilton::Types::ChatPermissions | Nil)","args_html":"(permissions : <a href=\"../../Hamilton/Types/ChatPermissions.html\">Hamilton::Types::ChatPermissions</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":107,"url":null},"def":{"name":"permissions=","args":[{"name":"permissions","external_name":"permissions","restriction":"Hamilton::Types::ChatPermissions | Nil"}],"visibility":"Public","body":"@permissions = permissions"},"external_var":false},{"html_id":"personal_chat:Hamilton::Types::Chat|Nil-instance-method","name":"personal_chat","doc":"For private chats, the personal channel of the user.","summary":"<p>For private chats, the personal channel of the user.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":59,"url":null},"def":{"name":"personal_chat","return_type":"Hamilton::Types::Chat | Nil","visibility":"Public","body":"@personal_chat"},"external_var":false},{"html_id":"personal_chat=(personal_chat:Hamilton::Types::Chat|Nil)-instance-method","name":"personal_chat=","doc":"For private chats, the personal channel of the user.","summary":"<p>For private chats, the personal channel of the user.</p>","abstract":false,"args":[{"name":"personal_chat","external_name":"personal_chat","restriction":"Hamilton::Types::Chat | Nil"}],"args_string":"(personal_chat : Hamilton::Types::Chat | Nil)","args_html":"(personal_chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":59,"url":null},"def":{"name":"personal_chat=","args":[{"name":"personal_chat","external_name":"personal_chat","restriction":"Hamilton::Types::Chat | Nil"}],"visibility":"Public","body":"@personal_chat = personal_chat"},"external_var":false},{"html_id":"photo:Hamilton::Types::ChatPhoto|Nil-instance-method","name":"photo","doc":"Chat photo.","summary":"<p>Chat photo.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":41,"url":null},"def":{"name":"photo","return_type":"Hamilton::Types::ChatPhoto | Nil","visibility":"Public","body":"@photo"},"external_var":false},{"html_id":"photo=(photo:Hamilton::Types::ChatPhoto|Nil)-instance-method","name":"photo=","doc":"Chat photo.","summary":"<p>Chat photo.</p>","abstract":false,"args":[{"name":"photo","external_name":"photo","restriction":"Hamilton::Types::ChatPhoto | Nil"}],"args_string":"(photo : Hamilton::Types::ChatPhoto | Nil)","args_html":"(photo : <a href=\"../../Hamilton/Types/ChatPhoto.html\">Hamilton::Types::ChatPhoto</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":41,"url":null},"def":{"name":"photo=","args":[{"name":"photo","external_name":"photo","restriction":"Hamilton::Types::ChatPhoto | Nil"}],"visibility":"Public","body":"@photo = photo"},"external_var":false},{"html_id":"pinned_message:Hamilton::Types::Message|Nil-instance-method","name":"pinned_message","doc":"The most recent pinned message (by sending date).","summary":"<p>The most recent pinned message (by sending date).</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":104,"url":null},"def":{"name":"pinned_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@pinned_message"},"external_var":false},{"html_id":"pinned_message=(pinned_message:Hamilton::Types::Message|Nil)-instance-method","name":"pinned_message=","doc":"The most recent pinned message (by sending date).","summary":"<p>The most recent pinned message (by sending date).</p>","abstract":false,"args":[{"name":"pinned_message","external_name":"pinned_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(pinned_message : Hamilton::Types::Message | Nil)","args_html":"(pinned_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":104,"url":null},"def":{"name":"pinned_message=","args":[{"name":"pinned_message","external_name":"pinned_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@pinned_message = pinned_message"},"external_var":false},{"html_id":"profile_accent_color_id:Int32|Nil-instance-method","name":"profile_accent_color_id","doc":"Identifier of the accent color for the chat's profile background.","summary":"<p>Identifier of the accent color for the chat's profile background.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":71,"url":null},"def":{"name":"profile_accent_color_id","return_type":"Int32 | Nil","visibility":"Public","body":"@profile_accent_color_id"},"external_var":false},{"html_id":"profile_accent_color_id=(profile_accent_color_id:Int32|Nil)-instance-method","name":"profile_accent_color_id=","doc":"Identifier of the accent color for the chat's profile background.","summary":"<p>Identifier of the accent color for the chat's profile background.</p>","abstract":false,"args":[{"name":"profile_accent_color_id","external_name":"profile_accent_color_id","restriction":"Int32 | Nil"}],"args_string":"(profile_accent_color_id : Int32 | Nil)","args_html":"(profile_accent_color_id : Int32 | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":71,"url":null},"def":{"name":"profile_accent_color_id=","args":[{"name":"profile_accent_color_id","external_name":"profile_accent_color_id","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@profile_accent_color_id = profile_accent_color_id"},"external_var":false},{"html_id":"profile_background_custom_emoji_id:String|Nil-instance-method","name":"profile_background_custom_emoji_id","doc":"Custom emoji identifier of the emoji chosen by the chat for its profile background.","summary":"<p>Custom emoji identifier of the emoji chosen by the chat for its profile background.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":74,"url":null},"def":{"name":"profile_background_custom_emoji_id","return_type":"String | Nil","visibility":"Public","body":"@profile_background_custom_emoji_id"},"external_var":false},{"html_id":"profile_background_custom_emoji_id=(profile_background_custom_emoji_id:String|Nil)-instance-method","name":"profile_background_custom_emoji_id=","doc":"Custom emoji identifier of the emoji chosen by the chat for its profile background.","summary":"<p>Custom emoji identifier of the emoji chosen by the chat for its profile background.</p>","abstract":false,"args":[{"name":"profile_background_custom_emoji_id","external_name":"profile_background_custom_emoji_id","restriction":"String | Nil"}],"args_string":"(profile_background_custom_emoji_id : String | Nil)","args_html":"(profile_background_custom_emoji_id : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":74,"url":null},"def":{"name":"profile_background_custom_emoji_id=","args":[{"name":"profile_background_custom_emoji_id","external_name":"profile_background_custom_emoji_id","restriction":"String | Nil"}],"visibility":"Public","body":"@profile_background_custom_emoji_id = profile_background_custom_emoji_id"},"external_var":false},{"html_id":"slow_mode_delay:Int32|Nil-instance-method","name":"slow_mode_delay","doc":"For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds.","summary":"<p>For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":116,"url":null},"def":{"name":"slow_mode_delay","return_type":"Int32 | Nil","visibility":"Public","body":"@slow_mode_delay"},"external_var":false},{"html_id":"slow_mode_delay=(slow_mode_delay:Int32|Nil)-instance-method","name":"slow_mode_delay=","doc":"For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds.","summary":"<p>For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds.</p>","abstract":false,"args":[{"name":"slow_mode_delay","external_name":"slow_mode_delay","restriction":"Int32 | Nil"}],"args_string":"(slow_mode_delay : Int32 | Nil)","args_html":"(slow_mode_delay : Int32 | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":116,"url":null},"def":{"name":"slow_mode_delay=","args":[{"name":"slow_mode_delay","external_name":"slow_mode_delay","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@slow_mode_delay = slow_mode_delay"},"external_var":false},{"html_id":"sticker_set_name:String|Nil-instance-method","name":"sticker_set_name","doc":"For supergroups, name of the group sticker set.","summary":"<p>For supergroups, name of the group sticker set.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":137,"url":null},"def":{"name":"sticker_set_name","return_type":"String | Nil","visibility":"Public","body":"@sticker_set_name"},"external_var":false},{"html_id":"sticker_set_name=(sticker_set_name:String|Nil)-instance-method","name":"sticker_set_name=","doc":"For supergroups, name of the group sticker set.","summary":"<p>For supergroups, name of the group sticker set.</p>","abstract":false,"args":[{"name":"sticker_set_name","external_name":"sticker_set_name","restriction":"String | Nil"}],"args_string":"(sticker_set_name : String | Nil)","args_html":"(sticker_set_name : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":137,"url":null},"def":{"name":"sticker_set_name=","args":[{"name":"sticker_set_name","external_name":"sticker_set_name","restriction":"String | Nil"}],"visibility":"Public","body":"@sticker_set_name = sticker_set_name"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title, for supergroups, channels and group chats.","summary":"<p>Title, for supergroups, channels and group chats.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":17,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title, for supergroups, channels and group chats.","summary":"<p>Title, for supergroups, channels and group chats.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":17,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the chat, can be either “private”, “group”, “supergroup” or “channel”.","summary":"<p>Type of the chat, can be either “private”, “group”, “supergroup” or “channel”.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":14,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the chat, can be either “private”, “group”, “supergroup” or “channel”.","summary":"<p>Type of the chat, can be either “private”, “group”, “supergroup” or “channel”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/chat_full_info.cr","line_number":14,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"unrestrict_boost_count:Int32|Nil-instance-method","name":"unrestrict_boost_count","doc":"For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions.","summary":"<p>For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":119,"url":null},"def":{"name":"unrestrict_boost_count","return_type":"Int32 | Nil","visibility":"Public","body":"@unrestrict_boost_count"},"external_var":false},{"html_id":"unrestrict_boost_count=(unrestrict_boost_count:Int32|Nil)-instance-method","name":"unrestrict_boost_count=","doc":"For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions.","summary":"<p>For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions.</p>","abstract":false,"args":[{"name":"unrestrict_boost_count","external_name":"unrestrict_boost_count","restriction":"Int32 | Nil"}],"args_string":"(unrestrict_boost_count : Int32 | Nil)","args_html":"(unrestrict_boost_count : Int32 | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":119,"url":null},"def":{"name":"unrestrict_boost_count=","args":[{"name":"unrestrict_boost_count","external_name":"unrestrict_boost_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@unrestrict_boost_count = unrestrict_boost_count"},"external_var":false},{"html_id":"username:String|Nil-instance-method","name":"username","doc":"Username, for private chats, supergroups and channels if available.","summary":"<p>Username, for private chats, supergroups and channels if available.</p>","abstract":false,"location":{"filename":"src/types/chat_full_info.cr","line_number":20,"url":null},"def":{"name":"username","return_type":"String | Nil","visibility":"Public","body":"@username"},"external_var":false},{"html_id":"username=(username:String|Nil)-instance-method","name":"username=","doc":"Username, for private chats, supergroups and channels if available.","summary":"<p>Username, for private chats, supergroups and channels if available.</p>","abstract":false,"args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"args_string":"(username : String | Nil)","args_html":"(username : String | Nil)","location":{"filename":"src/types/chat_full_info.cr","line_number":20,"url":null},"def":{"name":"username=","args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"visibility":"Public","body":"@username = username"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatInviteLink","path":"Hamilton/Types/ChatInviteLink.html","kind":"class","full_name":"Hamilton::Types::ChatInviteLink","name":"ChatInviteLink","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_invite_link.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an invite link for a chat.","summary":"<p>Represents an invite link for a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_invite_link.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_invite_link.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"creates_join_request:Bool-instance-method","name":"creates_join_request","doc":"True, if users joining the chat via the link need to be approved by chat administrators.","summary":"<p>True, if users joining the chat via the link need to be approved by chat administrators.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":17,"url":null},"def":{"name":"creates_join_request","return_type":"Bool","visibility":"Public","body":"@creates_join_request"},"external_var":false},{"html_id":"creates_join_request=(creates_join_request:Bool)-instance-method","name":"creates_join_request=","doc":"True, if users joining the chat via the link need to be approved by chat administrators.","summary":"<p>True, if users joining the chat via the link need to be approved by chat administrators.</p>","abstract":false,"args":[{"name":"creates_join_request","external_name":"creates_join_request","restriction":"Bool"}],"args_string":"(creates_join_request : Bool)","args_html":"(creates_join_request : Bool)","location":{"filename":"src/types/chat_invite_link.cr","line_number":17,"url":null},"def":{"name":"creates_join_request=","args":[{"name":"creates_join_request","external_name":"creates_join_request","restriction":"Bool"}],"visibility":"Public","body":"@creates_join_request = creates_join_request"},"external_var":false},{"html_id":"creator:Hamilton::Types::User-instance-method","name":"creator","doc":"Creator of the link.","summary":"<p>Creator of the link.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":14,"url":null},"def":{"name":"creator","return_type":"Hamilton::Types::User","visibility":"Public","body":"@creator"},"external_var":false},{"html_id":"creator=(creator:Hamilton::Types::User)-instance-method","name":"creator=","doc":"Creator of the link.","summary":"<p>Creator of the link.</p>","abstract":false,"args":[{"name":"creator","external_name":"creator","restriction":"Hamilton::Types::User"}],"args_string":"(creator : Hamilton::Types::User)","args_html":"(creator : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_invite_link.cr","line_number":14,"url":null},"def":{"name":"creator=","args":[{"name":"creator","external_name":"creator","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@creator = creator"},"external_var":false},{"html_id":"expire_date:Int32|Nil-instance-method","name":"expire_date","doc":"Point in time (Unix timestamp) when the link will expire or has been expired.","summary":"<p>Point in time (Unix timestamp) when the link will expire or has been expired.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":29,"url":null},"def":{"name":"expire_date","return_type":"Int32 | Nil","visibility":"Public","body":"@expire_date"},"external_var":false},{"html_id":"expire_date=(expire_date:Int32|Nil)-instance-method","name":"expire_date=","doc":"Point in time (Unix timestamp) when the link will expire or has been expired.","summary":"<p>Point in time (Unix timestamp) when the link will expire or has been expired.</p>","abstract":false,"args":[{"name":"expire_date","external_name":"expire_date","restriction":"Int32 | Nil"}],"args_string":"(expire_date : Int32 | Nil)","args_html":"(expire_date : Int32 | Nil)","location":{"filename":"src/types/chat_invite_link.cr","line_number":29,"url":null},"def":{"name":"expire_date=","args":[{"name":"expire_date","external_name":"expire_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@expire_date = expire_date"},"external_var":false},{"html_id":"invite_link:String-instance-method","name":"invite_link","doc":"The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with “…”.","summary":"<p>The invite link.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":11,"url":null},"def":{"name":"invite_link","return_type":"String","visibility":"Public","body":"@invite_link"},"external_var":false},{"html_id":"invite_link=(invite_link:String)-instance-method","name":"invite_link=","doc":"The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with “…”.","summary":"<p>The invite link.</p>","abstract":false,"args":[{"name":"invite_link","external_name":"invite_link","restriction":"String"}],"args_string":"(invite_link : String)","args_html":"(invite_link : String)","location":{"filename":"src/types/chat_invite_link.cr","line_number":11,"url":null},"def":{"name":"invite_link=","args":[{"name":"invite_link","external_name":"invite_link","restriction":"String"}],"visibility":"Public","body":"@invite_link = invite_link"},"external_var":false},{"html_id":"is_primary:Bool-instance-method","name":"is_primary","doc":"True, if the link is primary.","summary":"<p>True, if the link is primary.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":20,"url":null},"def":{"name":"is_primary","return_type":"Bool","visibility":"Public","body":"@is_primary"},"external_var":false},{"html_id":"is_primary=(is_primary:Bool)-instance-method","name":"is_primary=","doc":"True, if the link is primary.","summary":"<p>True, if the link is primary.</p>","abstract":false,"args":[{"name":"is_primary","external_name":"is_primary","restriction":"Bool"}],"args_string":"(is_primary : Bool)","args_html":"(is_primary : Bool)","location":{"filename":"src/types/chat_invite_link.cr","line_number":20,"url":null},"def":{"name":"is_primary=","args":[{"name":"is_primary","external_name":"is_primary","restriction":"Bool"}],"visibility":"Public","body":"@is_primary = is_primary"},"external_var":false},{"html_id":"is_revoked:Bool-instance-method","name":"is_revoked","doc":"True, if the link is revoked.","summary":"<p>True, if the link is revoked.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":23,"url":null},"def":{"name":"is_revoked","return_type":"Bool","visibility":"Public","body":"@is_revoked"},"external_var":false},{"html_id":"is_revoked=(is_revoked:Bool)-instance-method","name":"is_revoked=","doc":"True, if the link is revoked.","summary":"<p>True, if the link is revoked.</p>","abstract":false,"args":[{"name":"is_revoked","external_name":"is_revoked","restriction":"Bool"}],"args_string":"(is_revoked : Bool)","args_html":"(is_revoked : Bool)","location":{"filename":"src/types/chat_invite_link.cr","line_number":23,"url":null},"def":{"name":"is_revoked=","args":[{"name":"is_revoked","external_name":"is_revoked","restriction":"Bool"}],"visibility":"Public","body":"@is_revoked = is_revoked"},"external_var":false},{"html_id":"member_limit:Int32|Nil-instance-method","name":"member_limit","doc":"The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999.","summary":"<p>The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":32,"url":null},"def":{"name":"member_limit","return_type":"Int32 | Nil","visibility":"Public","body":"@member_limit"},"external_var":false},{"html_id":"member_limit=(member_limit:Int32|Nil)-instance-method","name":"member_limit=","doc":"The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999.","summary":"<p>The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999.</p>","abstract":false,"args":[{"name":"member_limit","external_name":"member_limit","restriction":"Int32 | Nil"}],"args_string":"(member_limit : Int32 | Nil)","args_html":"(member_limit : Int32 | Nil)","location":{"filename":"src/types/chat_invite_link.cr","line_number":32,"url":null},"def":{"name":"member_limit=","args":[{"name":"member_limit","external_name":"member_limit","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@member_limit = member_limit"},"external_var":false},{"html_id":"name:String|Nil-instance-method","name":"name","doc":"Invite link name.","summary":"<p>Invite link name.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":26,"url":null},"def":{"name":"name","return_type":"String | Nil","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String|Nil)-instance-method","name":"name=","doc":"Invite link name.","summary":"<p>Invite link name.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | Nil"}],"args_string":"(name : String | Nil)","args_html":"(name : String | Nil)","location":{"filename":"src/types/chat_invite_link.cr","line_number":26,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String | Nil"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"pending_join_request_count:Int32|Nil-instance-method","name":"pending_join_request_count","doc":"Number of pending join requests created using this link.","summary":"<p>Number of pending join requests created using this link.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":35,"url":null},"def":{"name":"pending_join_request_count","return_type":"Int32 | Nil","visibility":"Public","body":"@pending_join_request_count"},"external_var":false},{"html_id":"pending_join_request_count=(pending_join_request_count:Int32|Nil)-instance-method","name":"pending_join_request_count=","doc":"Number of pending join requests created using this link.","summary":"<p>Number of pending join requests created using this link.</p>","abstract":false,"args":[{"name":"pending_join_request_count","external_name":"pending_join_request_count","restriction":"Int32 | Nil"}],"args_string":"(pending_join_request_count : Int32 | Nil)","args_html":"(pending_join_request_count : Int32 | Nil)","location":{"filename":"src/types/chat_invite_link.cr","line_number":35,"url":null},"def":{"name":"pending_join_request_count=","args":[{"name":"pending_join_request_count","external_name":"pending_join_request_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@pending_join_request_count = pending_join_request_count"},"external_var":false},{"html_id":"subscription_period:Int32|Nil-instance-method","name":"subscription_period","doc":"The number of seconds the subscription will be active for before the next payment.","summary":"<p>The number of seconds the subscription will be active for before the next payment.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":38,"url":null},"def":{"name":"subscription_period","return_type":"Int32 | Nil","visibility":"Public","body":"@subscription_period"},"external_var":false},{"html_id":"subscription_period=(subscription_period:Int32|Nil)-instance-method","name":"subscription_period=","doc":"The number of seconds the subscription will be active for before the next payment.","summary":"<p>The number of seconds the subscription will be active for before the next payment.</p>","abstract":false,"args":[{"name":"subscription_period","external_name":"subscription_period","restriction":"Int32 | Nil"}],"args_string":"(subscription_period : Int32 | Nil)","args_html":"(subscription_period : Int32 | Nil)","location":{"filename":"src/types/chat_invite_link.cr","line_number":38,"url":null},"def":{"name":"subscription_period=","args":[{"name":"subscription_period","external_name":"subscription_period","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@subscription_period = subscription_period"},"external_var":false},{"html_id":"subscription_price:Int32|Nil-instance-method","name":"subscription_price","doc":"The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat using the link.","summary":"<p>The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat using the link.</p>","abstract":false,"location":{"filename":"src/types/chat_invite_link.cr","line_number":41,"url":null},"def":{"name":"subscription_price","return_type":"Int32 | Nil","visibility":"Public","body":"@subscription_price"},"external_var":false},{"html_id":"subscription_price=(subscription_price:Int32|Nil)-instance-method","name":"subscription_price=","doc":"The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat using the link.","summary":"<p>The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat using the link.</p>","abstract":false,"args":[{"name":"subscription_price","external_name":"subscription_price","restriction":"Int32 | Nil"}],"args_string":"(subscription_price : Int32 | Nil)","args_html":"(subscription_price : Int32 | Nil)","location":{"filename":"src/types/chat_invite_link.cr","line_number":41,"url":null},"def":{"name":"subscription_price=","args":[{"name":"subscription_price","external_name":"subscription_price","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@subscription_price = subscription_price"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatJoinRequest","path":"Hamilton/Types/ChatJoinRequest.html","kind":"class","full_name":"Hamilton::Types::ChatJoinRequest","name":"ChatJoinRequest","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_join_request.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a join request sent to a chat.","summary":"<p>Represents a join request sent to a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_join_request.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_join_request.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"bio:String|Nil-instance-method","name":"bio","doc":"Bio of the user.","summary":"<p>Bio of the user.</p>","abstract":false,"location":{"filename":"src/types/chat_join_request.cr","line_number":23,"url":null},"def":{"name":"bio","return_type":"String | Nil","visibility":"Public","body":"@bio"},"external_var":false},{"html_id":"bio=(bio:String|Nil)-instance-method","name":"bio=","doc":"Bio of the user.","summary":"<p>Bio of the user.</p>","abstract":false,"args":[{"name":"bio","external_name":"bio","restriction":"String | Nil"}],"args_string":"(bio : String | Nil)","args_html":"(bio : String | Nil)","location":{"filename":"src/types/chat_join_request.cr","line_number":23,"url":null},"def":{"name":"bio=","args":[{"name":"bio","external_name":"bio","restriction":"String | Nil"}],"visibility":"Public","body":"@bio = bio"},"external_var":false},{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Chat to which the request was sent.","summary":"<p>Chat to which the request was sent.</p>","abstract":false,"location":{"filename":"src/types/chat_join_request.cr","line_number":11,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Chat to which the request was sent.","summary":"<p>Chat to which the request was sent.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/chat_join_request.cr","line_number":11,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"date:Int32-instance-method","name":"date","doc":"Date the request was sent in Unix time.","summary":"<p>Date the request was sent in Unix time.</p>","abstract":false,"location":{"filename":"src/types/chat_join_request.cr","line_number":20,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date the request was sent in Unix time.","summary":"<p>Date the request was sent in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/chat_join_request.cr","line_number":20,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"invite_link:Hamilton::Types::ChatInviteLink|Nil-instance-method","name":"invite_link","doc":"Chat invite link that was used by the user to send the join request.","summary":"<p>Chat invite link that was used by the user to send the join request.</p>","abstract":false,"location":{"filename":"src/types/chat_join_request.cr","line_number":26,"url":null},"def":{"name":"invite_link","return_type":"Hamilton::Types::ChatInviteLink | Nil","visibility":"Public","body":"@invite_link"},"external_var":false},{"html_id":"invite_link=(invite_link:Hamilton::Types::ChatInviteLink|Nil)-instance-method","name":"invite_link=","doc":"Chat invite link that was used by the user to send the join request.","summary":"<p>Chat invite link that was used by the user to send the join request.</p>","abstract":false,"args":[{"name":"invite_link","external_name":"invite_link","restriction":"Hamilton::Types::ChatInviteLink | Nil"}],"args_string":"(invite_link : Hamilton::Types::ChatInviteLink | Nil)","args_html":"(invite_link : <a href=\"../../Hamilton/Types/ChatInviteLink.html\">Hamilton::Types::ChatInviteLink</a> | Nil)","location":{"filename":"src/types/chat_join_request.cr","line_number":26,"url":null},"def":{"name":"invite_link=","args":[{"name":"invite_link","external_name":"invite_link","restriction":"Hamilton::Types::ChatInviteLink | Nil"}],"visibility":"Public","body":"@invite_link = invite_link"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"User that sent the join request.","summary":"<p>User that sent the join request.</p>","abstract":false,"location":{"filename":"src/types/chat_join_request.cr","line_number":14,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"User that sent the join request.","summary":"<p>User that sent the join request.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_join_request.cr","line_number":14,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false},{"html_id":"user_chat_id:Int32-instance-method","name":"user_chat_id","doc":"Identifier of a private chat with the user who sent the join request. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user.","summary":"<p>Identifier of a private chat with the user who sent the join request.</p>","abstract":false,"location":{"filename":"src/types/chat_join_request.cr","line_number":17,"url":null},"def":{"name":"user_chat_id","return_type":"Int32","visibility":"Public","body":"@user_chat_id"},"external_var":false},{"html_id":"user_chat_id=(user_chat_id:Int32)-instance-method","name":"user_chat_id=","doc":"Identifier of a private chat with the user who sent the join request. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user.","summary":"<p>Identifier of a private chat with the user who sent the join request.</p>","abstract":false,"args":[{"name":"user_chat_id","external_name":"user_chat_id","restriction":"Int32"}],"args_string":"(user_chat_id : Int32)","args_html":"(user_chat_id : Int32)","location":{"filename":"src/types/chat_join_request.cr","line_number":17,"url":null},"def":{"name":"user_chat_id=","args":[{"name":"user_chat_id","external_name":"user_chat_id","restriction":"Int32"}],"visibility":"Public","body":"@user_chat_id = user_chat_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatLocation","path":"Hamilton/Types/ChatLocation.html","kind":"class","full_name":"Hamilton::Types::ChatLocation","name":"ChatLocation","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_location.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a location to which a chat is connected.","summary":"<p>Represents a location to which a chat is connected.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_location.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_location.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"address:String-instance-method","name":"address","doc":"Location address; 1-64 characters, as defined by the chat owner.","summary":"<p>Location address; 1-64 characters, as defined by the chat owner.</p>","abstract":false,"location":{"filename":"src/types/chat_location.cr","line_number":14,"url":null},"def":{"name":"address","return_type":"String","visibility":"Public","body":"@address"},"external_var":false},{"html_id":"address=(address:String)-instance-method","name":"address=","doc":"Location address; 1-64 characters, as defined by the chat owner.","summary":"<p>Location address; 1-64 characters, as defined by the chat owner.</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"String"}],"args_string":"(address : String)","args_html":"(address : String)","location":{"filename":"src/types/chat_location.cr","line_number":14,"url":null},"def":{"name":"address=","args":[{"name":"address","external_name":"address","restriction":"String"}],"visibility":"Public","body":"@address = address"},"external_var":false},{"html_id":"location:Hamilton::Types::Location-instance-method","name":"location","doc":"The location to which the supergroup is connected. Can't be a live location.","summary":"<p>The location to which the supergroup is connected.</p>","abstract":false,"location":{"filename":"src/types/chat_location.cr","line_number":11,"url":null},"def":{"name":"location","return_type":"Hamilton::Types::Location","visibility":"Public","body":"@location"},"external_var":false},{"html_id":"location=(location:Hamilton::Types::Location)-instance-method","name":"location=","doc":"The location to which the supergroup is connected. Can't be a live location.","summary":"<p>The location to which the supergroup is connected.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location"}],"args_string":"(location : Hamilton::Types::Location)","args_html":"(location : <a href=\"../../Hamilton/Types/Location.html\">Hamilton::Types::Location</a>)","location":{"filename":"src/types/chat_location.cr","line_number":11,"url":null},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location"}],"visibility":"Public","body":"@location = location"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatMember","path":"Hamilton/Types/ChatMember.html","kind":"alias","full_name":"Hamilton::Types::ChatMember","name":"ChatMember","abstract":false,"locations":[{"filename":"src/types/chat_member.cr","line_number":197,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::ChatMemberAdministrator | Hamilton::Types::ChatMemberBanned | Hamilton::Types::ChatMemberLeft | Hamilton::Types::ChatMemberMember | Hamilton::Types::ChatMemberOwner | Hamilton::Types::ChatMemberRestricted)","aliased_html":"<a href=\"../../Hamilton/Types/ChatMemberAdministrator.html\">Hamilton::Types::ChatMemberAdministrator</a> | <a href=\"../../Hamilton/Types/ChatMemberBanned.html\">Hamilton::Types::ChatMemberBanned</a> | <a href=\"../../Hamilton/Types/ChatMemberLeft.html\">Hamilton::Types::ChatMemberLeft</a> | <a href=\"../../Hamilton/Types/ChatMemberMember.html\">Hamilton::Types::ChatMemberMember</a> | <a href=\"../../Hamilton/Types/ChatMemberOwner.html\">Hamilton::Types::ChatMemberOwner</a> | <a href=\"../../Hamilton/Types/ChatMemberRestricted.html\">Hamilton::Types::ChatMemberRestricted</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about one member of a chat.","summary":"<p>This object contains information about one member of a chat.</p>"},{"html_id":"hamilton/Hamilton/Types/ChatMemberAdministrator","path":"Hamilton/Types/ChatMemberAdministrator.html","kind":"class","full_name":"Hamilton::Types::ChatMemberAdministrator","name":"ChatMemberAdministrator","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_member.cr","line_number":25,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a chat member that has some additional privileges.","summary":"<p>Represents a chat member that has some additional privileges.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"can_be_edited:Bool-instance-method","name":"can_be_edited","doc":"True, if the bot is allowed to edit administrator privileges of that user.","summary":"<p>True, if the bot is allowed to edit administrator privileges of that user.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":36,"url":null},"def":{"name":"can_be_edited","return_type":"Bool","visibility":"Public","body":"@can_be_edited"},"external_var":false},{"html_id":"can_be_edited=(can_be_edited:Bool)-instance-method","name":"can_be_edited=","doc":"True, if the bot is allowed to edit administrator privileges of that user.","summary":"<p>True, if the bot is allowed to edit administrator privileges of that user.</p>","abstract":false,"args":[{"name":"can_be_edited","external_name":"can_be_edited","restriction":"Bool"}],"args_string":"(can_be_edited : Bool)","args_html":"(can_be_edited : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":36,"url":null},"def":{"name":"can_be_edited=","args":[{"name":"can_be_edited","external_name":"can_be_edited","restriction":"Bool"}],"visibility":"Public","body":"@can_be_edited = can_be_edited"},"external_var":false},{"html_id":"can_change_info:Bool-instance-method","name":"can_change_info","doc":"True, if the user is allowed to change the chat title, photo and other settings.","summary":"<p>True, if the user is allowed to change the chat title, photo and other settings.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":57,"url":null},"def":{"name":"can_change_info","return_type":"Bool","visibility":"Public","body":"@can_change_info"},"external_var":false},{"html_id":"can_change_info=(can_change_info:Bool)-instance-method","name":"can_change_info=","doc":"True, if the user is allowed to change the chat title, photo and other settings.","summary":"<p>True, if the user is allowed to change the chat title, photo and other settings.</p>","abstract":false,"args":[{"name":"can_change_info","external_name":"can_change_info","restriction":"Bool"}],"args_string":"(can_change_info : Bool)","args_html":"(can_change_info : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":57,"url":null},"def":{"name":"can_change_info=","args":[{"name":"can_change_info","external_name":"can_change_info","restriction":"Bool"}],"visibility":"Public","body":"@can_change_info = can_change_info"},"external_var":false},{"html_id":"can_delete_messages:Bool-instance-method","name":"can_delete_messages","doc":"True, if the administrator can delete messages of other users.","summary":"<p>True, if the administrator can delete messages of other users.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":45,"url":null},"def":{"name":"can_delete_messages","return_type":"Bool","visibility":"Public","body":"@can_delete_messages"},"external_var":false},{"html_id":"can_delete_messages=(can_delete_messages:Bool)-instance-method","name":"can_delete_messages=","doc":"True, if the administrator can delete messages of other users.","summary":"<p>True, if the administrator can delete messages of other users.</p>","abstract":false,"args":[{"name":"can_delete_messages","external_name":"can_delete_messages","restriction":"Bool"}],"args_string":"(can_delete_messages : Bool)","args_html":"(can_delete_messages : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":45,"url":null},"def":{"name":"can_delete_messages=","args":[{"name":"can_delete_messages","external_name":"can_delete_messages","restriction":"Bool"}],"visibility":"Public","body":"@can_delete_messages = can_delete_messages"},"external_var":false},{"html_id":"can_delete_stories:Bool-instance-method","name":"can_delete_stories","doc":"True, if the administrator can delete stories posted by other users.","summary":"<p>True, if the administrator can delete stories posted by other users.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":69,"url":null},"def":{"name":"can_delete_stories","return_type":"Bool","visibility":"Public","body":"@can_delete_stories"},"external_var":false},{"html_id":"can_delete_stories=(can_delete_stories:Bool)-instance-method","name":"can_delete_stories=","doc":"True, if the administrator can delete stories posted by other users.","summary":"<p>True, if the administrator can delete stories posted by other users.</p>","abstract":false,"args":[{"name":"can_delete_stories","external_name":"can_delete_stories","restriction":"Bool"}],"args_string":"(can_delete_stories : Bool)","args_html":"(can_delete_stories : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":69,"url":null},"def":{"name":"can_delete_stories=","args":[{"name":"can_delete_stories","external_name":"can_delete_stories","restriction":"Bool"}],"visibility":"Public","body":"@can_delete_stories = can_delete_stories"},"external_var":false},{"html_id":"can_edit_messages:Bool|Nil-instance-method","name":"can_edit_messages","doc":"True, if the administrator can edit messages of other users and can pin messages; for channels only.","summary":"<p>True, if the administrator can edit messages of other users and can pin messages; for channels only.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":75,"url":null},"def":{"name":"can_edit_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_edit_messages"},"external_var":false},{"html_id":"can_edit_messages=(can_edit_messages:Bool|Nil)-instance-method","name":"can_edit_messages=","doc":"True, if the administrator can edit messages of other users and can pin messages; for channels only.","summary":"<p>True, if the administrator can edit messages of other users and can pin messages; for channels only.</p>","abstract":false,"args":[{"name":"can_edit_messages","external_name":"can_edit_messages","restriction":"Bool | Nil"}],"args_string":"(can_edit_messages : Bool | Nil)","args_html":"(can_edit_messages : Bool | Nil)","location":{"filename":"src/types/chat_member.cr","line_number":75,"url":null},"def":{"name":"can_edit_messages=","args":[{"name":"can_edit_messages","external_name":"can_edit_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_edit_messages = can_edit_messages"},"external_var":false},{"html_id":"can_edit_stories:Bool-instance-method","name":"can_edit_stories","doc":"True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive.","summary":"<p>True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":66,"url":null},"def":{"name":"can_edit_stories","return_type":"Bool","visibility":"Public","body":"@can_edit_stories"},"external_var":false},{"html_id":"can_edit_stories=(can_edit_stories:Bool)-instance-method","name":"can_edit_stories=","doc":"True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive.","summary":"<p>True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive.</p>","abstract":false,"args":[{"name":"can_edit_stories","external_name":"can_edit_stories","restriction":"Bool"}],"args_string":"(can_edit_stories : Bool)","args_html":"(can_edit_stories : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":66,"url":null},"def":{"name":"can_edit_stories=","args":[{"name":"can_edit_stories","external_name":"can_edit_stories","restriction":"Bool"}],"visibility":"Public","body":"@can_edit_stories = can_edit_stories"},"external_var":false},{"html_id":"can_invite_users:Bool-instance-method","name":"can_invite_users","doc":"True, if the user is allowed to invite new users to the chat.","summary":"<p>True, if the user is allowed to invite new users to the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":60,"url":null},"def":{"name":"can_invite_users","return_type":"Bool","visibility":"Public","body":"@can_invite_users"},"external_var":false},{"html_id":"can_invite_users=(can_invite_users:Bool)-instance-method","name":"can_invite_users=","doc":"True, if the user is allowed to invite new users to the chat.","summary":"<p>True, if the user is allowed to invite new users to the chat.</p>","abstract":false,"args":[{"name":"can_invite_users","external_name":"can_invite_users","restriction":"Bool"}],"args_string":"(can_invite_users : Bool)","args_html":"(can_invite_users : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":60,"url":null},"def":{"name":"can_invite_users=","args":[{"name":"can_invite_users","external_name":"can_invite_users","restriction":"Bool"}],"visibility":"Public","body":"@can_invite_users = can_invite_users"},"external_var":false},{"html_id":"can_manage_chat:Bool-instance-method","name":"can_manage_chat","doc":"True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars. Implied by any other administrator privilege.","summary":"<p>True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":42,"url":null},"def":{"name":"can_manage_chat","return_type":"Bool","visibility":"Public","body":"@can_manage_chat"},"external_var":false},{"html_id":"can_manage_chat=(can_manage_chat:Bool)-instance-method","name":"can_manage_chat=","doc":"True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars. Implied by any other administrator privilege.","summary":"<p>True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages, ignore slow mode, and send messages to the chat without paying Telegram Stars.</p>","abstract":false,"args":[{"name":"can_manage_chat","external_name":"can_manage_chat","restriction":"Bool"}],"args_string":"(can_manage_chat : Bool)","args_html":"(can_manage_chat : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":42,"url":null},"def":{"name":"can_manage_chat=","args":[{"name":"can_manage_chat","external_name":"can_manage_chat","restriction":"Bool"}],"visibility":"Public","body":"@can_manage_chat = can_manage_chat"},"external_var":false},{"html_id":"can_manage_direct_messages:Bool|Nil-instance-method","name":"can_manage_direct_messages","doc":"True, if the administrator can manage direct messages of the channel and decline suggested posts; for channels only.","summary":"<p>True, if the administrator can manage direct messages of the channel and decline suggested posts; for channels only.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":84,"url":null},"def":{"name":"can_manage_direct_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_manage_direct_messages"},"external_var":false},{"html_id":"can_manage_direct_messages=(can_manage_direct_messages:Bool|Nil)-instance-method","name":"can_manage_direct_messages=","doc":"True, if the administrator can manage direct messages of the channel and decline suggested posts; for channels only.","summary":"<p>True, if the administrator can manage direct messages of the channel and decline suggested posts; for channels only.</p>","abstract":false,"args":[{"name":"can_manage_direct_messages","external_name":"can_manage_direct_messages","restriction":"Bool | Nil"}],"args_string":"(can_manage_direct_messages : Bool | Nil)","args_html":"(can_manage_direct_messages : Bool | Nil)","location":{"filename":"src/types/chat_member.cr","line_number":84,"url":null},"def":{"name":"can_manage_direct_messages=","args":[{"name":"can_manage_direct_messages","external_name":"can_manage_direct_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_manage_direct_messages = can_manage_direct_messages"},"external_var":false},{"html_id":"can_manage_topics:Bool|Nil-instance-method","name":"can_manage_topics","doc":"True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only.","summary":"<p>True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":81,"url":null},"def":{"name":"can_manage_topics","return_type":"Bool | Nil","visibility":"Public","body":"@can_manage_topics"},"external_var":false},{"html_id":"can_manage_topics=(can_manage_topics:Bool|Nil)-instance-method","name":"can_manage_topics=","doc":"True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only.","summary":"<p>True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only.</p>","abstract":false,"args":[{"name":"can_manage_topics","external_name":"can_manage_topics","restriction":"Bool | Nil"}],"args_string":"(can_manage_topics : Bool | Nil)","args_html":"(can_manage_topics : Bool | Nil)","location":{"filename":"src/types/chat_member.cr","line_number":81,"url":null},"def":{"name":"can_manage_topics=","args":[{"name":"can_manage_topics","external_name":"can_manage_topics","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_manage_topics = can_manage_topics"},"external_var":false},{"html_id":"can_manage_video_chats:Bool-instance-method","name":"can_manage_video_chats","doc":"True, if the administrator can manage video chats.","summary":"<p>True, if the administrator can manage video chats.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":48,"url":null},"def":{"name":"can_manage_video_chats","return_type":"Bool","visibility":"Public","body":"@can_manage_video_chats"},"external_var":false},{"html_id":"can_manage_video_chats=(can_manage_video_chats:Bool)-instance-method","name":"can_manage_video_chats=","doc":"True, if the administrator can manage video chats.","summary":"<p>True, if the administrator can manage video chats.</p>","abstract":false,"args":[{"name":"can_manage_video_chats","external_name":"can_manage_video_chats","restriction":"Bool"}],"args_string":"(can_manage_video_chats : Bool)","args_html":"(can_manage_video_chats : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":48,"url":null},"def":{"name":"can_manage_video_chats=","args":[{"name":"can_manage_video_chats","external_name":"can_manage_video_chats","restriction":"Bool"}],"visibility":"Public","body":"@can_manage_video_chats = can_manage_video_chats"},"external_var":false},{"html_id":"can_pin_messages:Bool|Nil-instance-method","name":"can_pin_messages","doc":"True, if the user is allowed to pin messages; for groups and supergroups only.","summary":"<p>True, if the user is allowed to pin messages; for groups and supergroups only.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":78,"url":null},"def":{"name":"can_pin_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_pin_messages"},"external_var":false},{"html_id":"can_pin_messages=(can_pin_messages:Bool|Nil)-instance-method","name":"can_pin_messages=","doc":"True, if the user is allowed to pin messages; for groups and supergroups only.","summary":"<p>True, if the user is allowed to pin messages; for groups and supergroups only.</p>","abstract":false,"args":[{"name":"can_pin_messages","external_name":"can_pin_messages","restriction":"Bool | Nil"}],"args_string":"(can_pin_messages : Bool | Nil)","args_html":"(can_pin_messages : Bool | Nil)","location":{"filename":"src/types/chat_member.cr","line_number":78,"url":null},"def":{"name":"can_pin_messages=","args":[{"name":"can_pin_messages","external_name":"can_pin_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_pin_messages = can_pin_messages"},"external_var":false},{"html_id":"can_post_messages:Bool|Nil-instance-method","name":"can_post_messages","doc":"True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only.","summary":"<p>True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":72,"url":null},"def":{"name":"can_post_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_post_messages"},"external_var":false},{"html_id":"can_post_messages=(can_post_messages:Bool|Nil)-instance-method","name":"can_post_messages=","doc":"True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only.","summary":"<p>True, if the administrator can post messages in the channel, approve suggested posts, or access channel statistics; for channels only.</p>","abstract":false,"args":[{"name":"can_post_messages","external_name":"can_post_messages","restriction":"Bool | Nil"}],"args_string":"(can_post_messages : Bool | Nil)","args_html":"(can_post_messages : Bool | Nil)","location":{"filename":"src/types/chat_member.cr","line_number":72,"url":null},"def":{"name":"can_post_messages=","args":[{"name":"can_post_messages","external_name":"can_post_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_post_messages = can_post_messages"},"external_var":false},{"html_id":"can_post_stories:Bool-instance-method","name":"can_post_stories","doc":"True, if the administrator can post stories to the chat.","summary":"<p>True, if the administrator can post stories to the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":63,"url":null},"def":{"name":"can_post_stories","return_type":"Bool","visibility":"Public","body":"@can_post_stories"},"external_var":false},{"html_id":"can_post_stories=(can_post_stories:Bool)-instance-method","name":"can_post_stories=","doc":"True, if the administrator can post stories to the chat.","summary":"<p>True, if the administrator can post stories to the chat.</p>","abstract":false,"args":[{"name":"can_post_stories","external_name":"can_post_stories","restriction":"Bool"}],"args_string":"(can_post_stories : Bool)","args_html":"(can_post_stories : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":63,"url":null},"def":{"name":"can_post_stories=","args":[{"name":"can_post_stories","external_name":"can_post_stories","restriction":"Bool"}],"visibility":"Public","body":"@can_post_stories = can_post_stories"},"external_var":false},{"html_id":"can_promote_members:Bool-instance-method","name":"can_promote_members","doc":"True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user).","summary":"<p>True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user).</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":54,"url":null},"def":{"name":"can_promote_members","return_type":"Bool","visibility":"Public","body":"@can_promote_members"},"external_var":false},{"html_id":"can_promote_members=(can_promote_members:Bool)-instance-method","name":"can_promote_members=","doc":"True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user).","summary":"<p>True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user).</p>","abstract":false,"args":[{"name":"can_promote_members","external_name":"can_promote_members","restriction":"Bool"}],"args_string":"(can_promote_members : Bool)","args_html":"(can_promote_members : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":54,"url":null},"def":{"name":"can_promote_members=","args":[{"name":"can_promote_members","external_name":"can_promote_members","restriction":"Bool"}],"visibility":"Public","body":"@can_promote_members = can_promote_members"},"external_var":false},{"html_id":"can_restrict_members:Bool-instance-method","name":"can_restrict_members","doc":"True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics.","summary":"<p>True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":51,"url":null},"def":{"name":"can_restrict_members","return_type":"Bool","visibility":"Public","body":"@can_restrict_members"},"external_var":false},{"html_id":"can_restrict_members=(can_restrict_members:Bool)-instance-method","name":"can_restrict_members=","doc":"True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics.","summary":"<p>True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics.</p>","abstract":false,"args":[{"name":"can_restrict_members","external_name":"can_restrict_members","restriction":"Bool"}],"args_string":"(can_restrict_members : Bool)","args_html":"(can_restrict_members : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":51,"url":null},"def":{"name":"can_restrict_members=","args":[{"name":"can_restrict_members","external_name":"can_restrict_members","restriction":"Bool"}],"visibility":"Public","body":"@can_restrict_members = can_restrict_members"},"external_var":false},{"html_id":"custom_title:String|Nil-instance-method","name":"custom_title","doc":"Custom title for this user.","summary":"<p>Custom title for this user.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":87,"url":null},"def":{"name":"custom_title","return_type":"String | Nil","visibility":"Public","body":"@custom_title"},"external_var":false},{"html_id":"custom_title=(custom_title:String|Nil)-instance-method","name":"custom_title=","doc":"Custom title for this user.","summary":"<p>Custom title for this user.</p>","abstract":false,"args":[{"name":"custom_title","external_name":"custom_title","restriction":"String | Nil"}],"args_string":"(custom_title : String | Nil)","args_html":"(custom_title : String | Nil)","location":{"filename":"src/types/chat_member.cr","line_number":87,"url":null},"def":{"name":"custom_title=","args":[{"name":"custom_title","external_name":"custom_title","restriction":"String | Nil"}],"visibility":"Public","body":"@custom_title = custom_title"},"external_var":false},{"html_id":"is_anonymous:Bool-instance-method","name":"is_anonymous","doc":"True, if the user's presence in the chat is hidden.","summary":"<p>True, if the user's presence in the chat is hidden.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":39,"url":null},"def":{"name":"is_anonymous","return_type":"Bool","visibility":"Public","body":"@is_anonymous"},"external_var":false},{"html_id":"is_anonymous=(is_anonymous:Bool)-instance-method","name":"is_anonymous=","doc":"True, if the user's presence in the chat is hidden.","summary":"<p>True, if the user's presence in the chat is hidden.</p>","abstract":false,"args":[{"name":"is_anonymous","external_name":"is_anonymous","restriction":"Bool"}],"args_string":"(is_anonymous : Bool)","args_html":"(is_anonymous : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":39,"url":null},"def":{"name":"is_anonymous=","args":[{"name":"is_anonymous","external_name":"is_anonymous","restriction":"Bool"}],"visibility":"Public","body":"@is_anonymous = is_anonymous"},"external_var":false},{"html_id":"status:String-instance-method","name":"status","doc":"The member's status in the chat, always \"administrator\".","summary":"<p>The member's status in the chat, always &quot;administrator&quot;.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":30,"url":null},"def":{"name":"status","return_type":"String","visibility":"Public","body":"@status"},"external_var":false},{"html_id":"status=(status:String)-instance-method","name":"status=","doc":"The member's status in the chat, always \"administrator\".","summary":"<p>The member's status in the chat, always &quot;administrator&quot;.</p>","abstract":false,"args":[{"name":"status","external_name":"status","restriction":"String"}],"args_string":"(status : String)","args_html":"(status : String)","location":{"filename":"src/types/chat_member.cr","line_number":30,"url":null},"def":{"name":"status=","args":[{"name":"status","external_name":"status","restriction":"String"}],"visibility":"Public","body":"@status = status"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":33,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_member.cr","line_number":33,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatMemberBanned","path":"Hamilton/Types/ChatMemberBanned.html","kind":"class","full_name":"Hamilton::Types::ChatMemberBanned","name":"ChatMemberBanned","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_member.cr","line_number":182,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.","summary":"<p>Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":183,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":183,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"status:String-instance-method","name":"status","doc":"The member's status in the chat, always \"kicked\".","summary":"<p>The member's status in the chat, always &quot;kicked&quot;.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":187,"url":null},"def":{"name":"status","return_type":"String","visibility":"Public","body":"@status"},"external_var":false},{"html_id":"status=(status:String)-instance-method","name":"status=","doc":"The member's status in the chat, always \"kicked\".","summary":"<p>The member's status in the chat, always &quot;kicked&quot;.</p>","abstract":false,"args":[{"name":"status","external_name":"status","restriction":"String"}],"args_string":"(status : String)","args_html":"(status : String)","location":{"filename":"src/types/chat_member.cr","line_number":187,"url":null},"def":{"name":"status=","args":[{"name":"status","external_name":"status","restriction":"String"}],"visibility":"Public","body":"@status = status"},"external_var":false},{"html_id":"until_date:Int32-instance-method","name":"until_date","doc":"Date when restrictions will be lifted for this user; Unix time. If 0, then the user is banned forever","summary":"<p>Date when restrictions will be lifted for this user; Unix time.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":193,"url":null},"def":{"name":"until_date","return_type":"Int32","visibility":"Public","body":"@until_date"},"external_var":false},{"html_id":"until_date=(until_date:Int32)-instance-method","name":"until_date=","doc":"Date when restrictions will be lifted for this user; Unix time. If 0, then the user is banned forever","summary":"<p>Date when restrictions will be lifted for this user; Unix time.</p>","abstract":false,"args":[{"name":"until_date","external_name":"until_date","restriction":"Int32"}],"args_string":"(until_date : Int32)","args_html":"(until_date : Int32)","location":{"filename":"src/types/chat_member.cr","line_number":193,"url":null},"def":{"name":"until_date=","args":[{"name":"until_date","external_name":"until_date","restriction":"Int32"}],"visibility":"Public","body":"@until_date = until_date"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":190,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_member.cr","line_number":190,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatMemberLeft","path":"Hamilton/Types/ChatMemberLeft.html","kind":"class","full_name":"Hamilton::Types::ChatMemberLeft","name":"ChatMemberLeft","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_member.cr","line_number":169,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a chat member that isn't currently a member of the chat, but may join it themselves.","summary":"<p>Represents a chat member that isn't currently a member of the chat, but may join it themselves.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":170,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":170,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"status:String-instance-method","name":"status","doc":"The member's status in the chat, always \"left\".","summary":"<p>The member's status in the chat, always &quot;left&quot;.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":174,"url":null},"def":{"name":"status","return_type":"String","visibility":"Public","body":"@status"},"external_var":false},{"html_id":"status=(status:String)-instance-method","name":"status=","doc":"The member's status in the chat, always \"left\".","summary":"<p>The member's status in the chat, always &quot;left&quot;.</p>","abstract":false,"args":[{"name":"status","external_name":"status","restriction":"String"}],"args_string":"(status : String)","args_html":"(status : String)","location":{"filename":"src/types/chat_member.cr","line_number":174,"url":null},"def":{"name":"status=","args":[{"name":"status","external_name":"status","restriction":"String"}],"visibility":"Public","body":"@status = status"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":177,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_member.cr","line_number":177,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatMemberMember","path":"Hamilton/Types/ChatMemberMember.html","kind":"class","full_name":"Hamilton::Types::ChatMemberMember","name":"ChatMemberMember","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_member.cr","line_number":92,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a chat member that has no additional privileges or restrictions.","summary":"<p>Represents a chat member that has no additional privileges or restrictions.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":93,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":93,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"status:String-instance-method","name":"status","doc":"The member's status in the chat, always \"member\".","summary":"<p>The member's status in the chat, always &quot;member&quot;.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":97,"url":null},"def":{"name":"status","return_type":"String","visibility":"Public","body":"@status"},"external_var":false},{"html_id":"status=(status:String)-instance-method","name":"status=","doc":"The member's status in the chat, always \"member\".","summary":"<p>The member's status in the chat, always &quot;member&quot;.</p>","abstract":false,"args":[{"name":"status","external_name":"status","restriction":"String"}],"args_string":"(status : String)","args_html":"(status : String)","location":{"filename":"src/types/chat_member.cr","line_number":97,"url":null},"def":{"name":"status=","args":[{"name":"status","external_name":"status","restriction":"String"}],"visibility":"Public","body":"@status = status"},"external_var":false},{"html_id":"until_date:Int32|Nil-instance-method","name":"until_date","doc":"Date when the user's subscription will expire; Unix time.","summary":"<p>Date when the user's subscription will expire; Unix time.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":103,"url":null},"def":{"name":"until_date","return_type":"Int32 | Nil","visibility":"Public","body":"@until_date"},"external_var":false},{"html_id":"until_date=(until_date:Int32|Nil)-instance-method","name":"until_date=","doc":"Date when the user's subscription will expire; Unix time.","summary":"<p>Date when the user's subscription will expire; Unix time.</p>","abstract":false,"args":[{"name":"until_date","external_name":"until_date","restriction":"Int32 | Nil"}],"args_string":"(until_date : Int32 | Nil)","args_html":"(until_date : Int32 | Nil)","location":{"filename":"src/types/chat_member.cr","line_number":103,"url":null},"def":{"name":"until_date=","args":[{"name":"until_date","external_name":"until_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@until_date = until_date"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":100,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_member.cr","line_number":100,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatMemberOwner","path":"Hamilton/Types/ChatMemberOwner.html","kind":"class","full_name":"Hamilton::Types::ChatMemberOwner","name":"ChatMemberOwner","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_member.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a chat member that owns the chat and has all administrator privileges.","summary":"<p>Represents a chat member that owns the chat and has all administrator privileges.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"custom_title:String|Nil-instance-method","name":"custom_title","doc":"Custom title for this user.","summary":"<p>Custom title for this user.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":20,"url":null},"def":{"name":"custom_title","return_type":"String | Nil","visibility":"Public","body":"@custom_title"},"external_var":false},{"html_id":"custom_title=(custom_title:String|Nil)-instance-method","name":"custom_title=","doc":"Custom title for this user.","summary":"<p>Custom title for this user.</p>","abstract":false,"args":[{"name":"custom_title","external_name":"custom_title","restriction":"String | Nil"}],"args_string":"(custom_title : String | Nil)","args_html":"(custom_title : String | Nil)","location":{"filename":"src/types/chat_member.cr","line_number":20,"url":null},"def":{"name":"custom_title=","args":[{"name":"custom_title","external_name":"custom_title","restriction":"String | Nil"}],"visibility":"Public","body":"@custom_title = custom_title"},"external_var":false},{"html_id":"is_anonymous:Bool-instance-method","name":"is_anonymous","doc":"True, if the user's presence in the chat is hidden.","summary":"<p>True, if the user's presence in the chat is hidden.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":17,"url":null},"def":{"name":"is_anonymous","return_type":"Bool","visibility":"Public","body":"@is_anonymous"},"external_var":false},{"html_id":"is_anonymous=(is_anonymous:Bool)-instance-method","name":"is_anonymous=","doc":"True, if the user's presence in the chat is hidden.","summary":"<p>True, if the user's presence in the chat is hidden.</p>","abstract":false,"args":[{"name":"is_anonymous","external_name":"is_anonymous","restriction":"Bool"}],"args_string":"(is_anonymous : Bool)","args_html":"(is_anonymous : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":17,"url":null},"def":{"name":"is_anonymous=","args":[{"name":"is_anonymous","external_name":"is_anonymous","restriction":"Bool"}],"visibility":"Public","body":"@is_anonymous = is_anonymous"},"external_var":false},{"html_id":"status:String-instance-method","name":"status","doc":"The member's status in the chat, always “creator”.","summary":"<p>The member's status in the chat, always “creator”.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":11,"url":null},"def":{"name":"status","return_type":"String","visibility":"Public","body":"@status"},"external_var":false},{"html_id":"status=(status:String)-instance-method","name":"status=","doc":"The member's status in the chat, always “creator”.","summary":"<p>The member's status in the chat, always “creator”.</p>","abstract":false,"args":[{"name":"status","external_name":"status","restriction":"String"}],"args_string":"(status : String)","args_html":"(status : String)","location":{"filename":"src/types/chat_member.cr","line_number":11,"url":null},"def":{"name":"status=","args":[{"name":"status","external_name":"status","restriction":"String"}],"visibility":"Public","body":"@status = status"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":14,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_member.cr","line_number":14,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatMemberRestricted","path":"Hamilton/Types/ChatMemberRestricted.html","kind":"class","full_name":"Hamilton::Types::ChatMemberRestricted","name":"ChatMemberRestricted","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_member.cr","line_number":108,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a chat member that is under certain restrictions in the chat. Supergroups only.","summary":"<p>Represents a chat member that is under certain restrictions in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":109,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_member.cr","line_number":109,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"can_add_web_page_previews:Bool-instance-method","name":"can_add_web_page_previews","doc":"True, if the user is allowed to add web page previews to their messages.","summary":"<p>True, if the user is allowed to add web page previews to their messages.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":149,"url":null},"def":{"name":"can_add_web_page_previews","return_type":"Bool","visibility":"Public","body":"@can_add_web_page_previews"},"external_var":false},{"html_id":"can_add_web_page_previews=(can_add_web_page_previews:Bool)-instance-method","name":"can_add_web_page_previews=","doc":"True, if the user is allowed to add web page previews to their messages.","summary":"<p>True, if the user is allowed to add web page previews to their messages.</p>","abstract":false,"args":[{"name":"can_add_web_page_previews","external_name":"can_add_web_page_previews","restriction":"Bool"}],"args_string":"(can_add_web_page_previews : Bool)","args_html":"(can_add_web_page_previews : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":149,"url":null},"def":{"name":"can_add_web_page_previews=","args":[{"name":"can_add_web_page_previews","external_name":"can_add_web_page_previews","restriction":"Bool"}],"visibility":"Public","body":"@can_add_web_page_previews = can_add_web_page_previews"},"external_var":false},{"html_id":"can_change_info:Bool-instance-method","name":"can_change_info","doc":"True, if the user is allowed to change the chat title, photo and other settings.","summary":"<p>True, if the user is allowed to change the chat title, photo and other settings.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":152,"url":null},"def":{"name":"can_change_info","return_type":"Bool","visibility":"Public","body":"@can_change_info"},"external_var":false},{"html_id":"can_change_info=(can_change_info:Bool)-instance-method","name":"can_change_info=","doc":"True, if the user is allowed to change the chat title, photo and other settings.","summary":"<p>True, if the user is allowed to change the chat title, photo and other settings.</p>","abstract":false,"args":[{"name":"can_change_info","external_name":"can_change_info","restriction":"Bool"}],"args_string":"(can_change_info : Bool)","args_html":"(can_change_info : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":152,"url":null},"def":{"name":"can_change_info=","args":[{"name":"can_change_info","external_name":"can_change_info","restriction":"Bool"}],"visibility":"Public","body":"@can_change_info = can_change_info"},"external_var":false},{"html_id":"can_invite_users:Bool-instance-method","name":"can_invite_users","doc":"True, if the user is allowed to invite new users to the chat.","summary":"<p>True, if the user is allowed to invite new users to the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":155,"url":null},"def":{"name":"can_invite_users","return_type":"Bool","visibility":"Public","body":"@can_invite_users"},"external_var":false},{"html_id":"can_invite_users=(can_invite_users:Bool)-instance-method","name":"can_invite_users=","doc":"True, if the user is allowed to invite new users to the chat.","summary":"<p>True, if the user is allowed to invite new users to the chat.</p>","abstract":false,"args":[{"name":"can_invite_users","external_name":"can_invite_users","restriction":"Bool"}],"args_string":"(can_invite_users : Bool)","args_html":"(can_invite_users : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":155,"url":null},"def":{"name":"can_invite_users=","args":[{"name":"can_invite_users","external_name":"can_invite_users","restriction":"Bool"}],"visibility":"Public","body":"@can_invite_users = can_invite_users"},"external_var":false},{"html_id":"can_manage_topics:Bool-instance-method","name":"can_manage_topics","doc":"True, if the user is allowed to create forum topics.","summary":"<p>True, if the user is allowed to create forum topics.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":161,"url":null},"def":{"name":"can_manage_topics","return_type":"Bool","visibility":"Public","body":"@can_manage_topics"},"external_var":false},{"html_id":"can_manage_topics=(can_manage_topics:Bool)-instance-method","name":"can_manage_topics=","doc":"True, if the user is allowed to create forum topics.","summary":"<p>True, if the user is allowed to create forum topics.</p>","abstract":false,"args":[{"name":"can_manage_topics","external_name":"can_manage_topics","restriction":"Bool"}],"args_string":"(can_manage_topics : Bool)","args_html":"(can_manage_topics : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":161,"url":null},"def":{"name":"can_manage_topics=","args":[{"name":"can_manage_topics","external_name":"can_manage_topics","restriction":"Bool"}],"visibility":"Public","body":"@can_manage_topics = can_manage_topics"},"external_var":false},{"html_id":"can_pin_messages:Bool-instance-method","name":"can_pin_messages","doc":"True, if the user is allowed to pin messages.","summary":"<p>True, if the user is allowed to pin messages.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":158,"url":null},"def":{"name":"can_pin_messages","return_type":"Bool","visibility":"Public","body":"@can_pin_messages"},"external_var":false},{"html_id":"can_pin_messages=(can_pin_messages:Bool)-instance-method","name":"can_pin_messages=","doc":"True, if the user is allowed to pin messages.","summary":"<p>True, if the user is allowed to pin messages.</p>","abstract":false,"args":[{"name":"can_pin_messages","external_name":"can_pin_messages","restriction":"Bool"}],"args_string":"(can_pin_messages : Bool)","args_html":"(can_pin_messages : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":158,"url":null},"def":{"name":"can_pin_messages=","args":[{"name":"can_pin_messages","external_name":"can_pin_messages","restriction":"Bool"}],"visibility":"Public","body":"@can_pin_messages = can_pin_messages"},"external_var":false},{"html_id":"can_send_audios:Bool-instance-method","name":"can_send_audios","doc":"True, if the user is allowed to send audios.","summary":"<p>True, if the user is allowed to send audios.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":125,"url":null},"def":{"name":"can_send_audios","return_type":"Bool","visibility":"Public","body":"@can_send_audios"},"external_var":false},{"html_id":"can_send_audios=(can_send_audios:Bool)-instance-method","name":"can_send_audios=","doc":"True, if the user is allowed to send audios.","summary":"<p>True, if the user is allowed to send audios.</p>","abstract":false,"args":[{"name":"can_send_audios","external_name":"can_send_audios","restriction":"Bool"}],"args_string":"(can_send_audios : Bool)","args_html":"(can_send_audios : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":125,"url":null},"def":{"name":"can_send_audios=","args":[{"name":"can_send_audios","external_name":"can_send_audios","restriction":"Bool"}],"visibility":"Public","body":"@can_send_audios = can_send_audios"},"external_var":false},{"html_id":"can_send_documents:Bool-instance-method","name":"can_send_documents","doc":"True, if the user is allowed to send documents.","summary":"<p>True, if the user is allowed to send documents.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":128,"url":null},"def":{"name":"can_send_documents","return_type":"Bool","visibility":"Public","body":"@can_send_documents"},"external_var":false},{"html_id":"can_send_documents=(can_send_documents:Bool)-instance-method","name":"can_send_documents=","doc":"True, if the user is allowed to send documents.","summary":"<p>True, if the user is allowed to send documents.</p>","abstract":false,"args":[{"name":"can_send_documents","external_name":"can_send_documents","restriction":"Bool"}],"args_string":"(can_send_documents : Bool)","args_html":"(can_send_documents : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":128,"url":null},"def":{"name":"can_send_documents=","args":[{"name":"can_send_documents","external_name":"can_send_documents","restriction":"Bool"}],"visibility":"Public","body":"@can_send_documents = can_send_documents"},"external_var":false},{"html_id":"can_send_messages:Bool-instance-method","name":"can_send_messages","doc":"True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues.","summary":"<p>True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":122,"url":null},"def":{"name":"can_send_messages","return_type":"Bool","visibility":"Public","body":"@can_send_messages"},"external_var":false},{"html_id":"can_send_messages=(can_send_messages:Bool)-instance-method","name":"can_send_messages=","doc":"True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues.","summary":"<p>True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues.</p>","abstract":false,"args":[{"name":"can_send_messages","external_name":"can_send_messages","restriction":"Bool"}],"args_string":"(can_send_messages : Bool)","args_html":"(can_send_messages : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":122,"url":null},"def":{"name":"can_send_messages=","args":[{"name":"can_send_messages","external_name":"can_send_messages","restriction":"Bool"}],"visibility":"Public","body":"@can_send_messages = can_send_messages"},"external_var":false},{"html_id":"can_send_other_messages:Bool-instance-method","name":"can_send_other_messages","doc":"True, if the user is allowed to send animations, games, stickers and use inline bots.","summary":"<p>True, if the user is allowed to send animations, games, stickers and use inline bots.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":146,"url":null},"def":{"name":"can_send_other_messages","return_type":"Bool","visibility":"Public","body":"@can_send_other_messages"},"external_var":false},{"html_id":"can_send_other_messages=(can_send_other_messages:Bool)-instance-method","name":"can_send_other_messages=","doc":"True, if the user is allowed to send animations, games, stickers and use inline bots.","summary":"<p>True, if the user is allowed to send animations, games, stickers and use inline bots.</p>","abstract":false,"args":[{"name":"can_send_other_messages","external_name":"can_send_other_messages","restriction":"Bool"}],"args_string":"(can_send_other_messages : Bool)","args_html":"(can_send_other_messages : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":146,"url":null},"def":{"name":"can_send_other_messages=","args":[{"name":"can_send_other_messages","external_name":"can_send_other_messages","restriction":"Bool"}],"visibility":"Public","body":"@can_send_other_messages = can_send_other_messages"},"external_var":false},{"html_id":"can_send_photos:Bool-instance-method","name":"can_send_photos","doc":"True, if the user is allowed to send photos.","summary":"<p>True, if the user is allowed to send photos.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":131,"url":null},"def":{"name":"can_send_photos","return_type":"Bool","visibility":"Public","body":"@can_send_photos"},"external_var":false},{"html_id":"can_send_photos=(can_send_photos:Bool)-instance-method","name":"can_send_photos=","doc":"True, if the user is allowed to send photos.","summary":"<p>True, if the user is allowed to send photos.</p>","abstract":false,"args":[{"name":"can_send_photos","external_name":"can_send_photos","restriction":"Bool"}],"args_string":"(can_send_photos : Bool)","args_html":"(can_send_photos : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":131,"url":null},"def":{"name":"can_send_photos=","args":[{"name":"can_send_photos","external_name":"can_send_photos","restriction":"Bool"}],"visibility":"Public","body":"@can_send_photos = can_send_photos"},"external_var":false},{"html_id":"can_send_polls:Bool-instance-method","name":"can_send_polls","doc":"True, if the user is allowed to send polls and checklists.","summary":"<p>True, if the user is allowed to send polls and checklists.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":143,"url":null},"def":{"name":"can_send_polls","return_type":"Bool","visibility":"Public","body":"@can_send_polls"},"external_var":false},{"html_id":"can_send_polls=(can_send_polls:Bool)-instance-method","name":"can_send_polls=","doc":"True, if the user is allowed to send polls and checklists.","summary":"<p>True, if the user is allowed to send polls and checklists.</p>","abstract":false,"args":[{"name":"can_send_polls","external_name":"can_send_polls","restriction":"Bool"}],"args_string":"(can_send_polls : Bool)","args_html":"(can_send_polls : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":143,"url":null},"def":{"name":"can_send_polls=","args":[{"name":"can_send_polls","external_name":"can_send_polls","restriction":"Bool"}],"visibility":"Public","body":"@can_send_polls = can_send_polls"},"external_var":false},{"html_id":"can_send_video_notes:Bool-instance-method","name":"can_send_video_notes","doc":"True, if the user is allowed to send video notes.","summary":"<p>True, if the user is allowed to send video notes.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":137,"url":null},"def":{"name":"can_send_video_notes","return_type":"Bool","visibility":"Public","body":"@can_send_video_notes"},"external_var":false},{"html_id":"can_send_video_notes=(can_send_video_notes:Bool)-instance-method","name":"can_send_video_notes=","doc":"True, if the user is allowed to send video notes.","summary":"<p>True, if the user is allowed to send video notes.</p>","abstract":false,"args":[{"name":"can_send_video_notes","external_name":"can_send_video_notes","restriction":"Bool"}],"args_string":"(can_send_video_notes : Bool)","args_html":"(can_send_video_notes : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":137,"url":null},"def":{"name":"can_send_video_notes=","args":[{"name":"can_send_video_notes","external_name":"can_send_video_notes","restriction":"Bool"}],"visibility":"Public","body":"@can_send_video_notes = can_send_video_notes"},"external_var":false},{"html_id":"can_send_videos:Bool-instance-method","name":"can_send_videos","doc":"True, if the user is allowed to send videos.","summary":"<p>True, if the user is allowed to send videos.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":134,"url":null},"def":{"name":"can_send_videos","return_type":"Bool","visibility":"Public","body":"@can_send_videos"},"external_var":false},{"html_id":"can_send_videos=(can_send_videos:Bool)-instance-method","name":"can_send_videos=","doc":"True, if the user is allowed to send videos.","summary":"<p>True, if the user is allowed to send videos.</p>","abstract":false,"args":[{"name":"can_send_videos","external_name":"can_send_videos","restriction":"Bool"}],"args_string":"(can_send_videos : Bool)","args_html":"(can_send_videos : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":134,"url":null},"def":{"name":"can_send_videos=","args":[{"name":"can_send_videos","external_name":"can_send_videos","restriction":"Bool"}],"visibility":"Public","body":"@can_send_videos = can_send_videos"},"external_var":false},{"html_id":"can_send_voice_notes:Bool-instance-method","name":"can_send_voice_notes","doc":"True, if the user is allowed to send voice notes.","summary":"<p>True, if the user is allowed to send voice notes.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":140,"url":null},"def":{"name":"can_send_voice_notes","return_type":"Bool","visibility":"Public","body":"@can_send_voice_notes"},"external_var":false},{"html_id":"can_send_voice_notes=(can_send_voice_notes:Bool)-instance-method","name":"can_send_voice_notes=","doc":"True, if the user is allowed to send voice notes.","summary":"<p>True, if the user is allowed to send voice notes.</p>","abstract":false,"args":[{"name":"can_send_voice_notes","external_name":"can_send_voice_notes","restriction":"Bool"}],"args_string":"(can_send_voice_notes : Bool)","args_html":"(can_send_voice_notes : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":140,"url":null},"def":{"name":"can_send_voice_notes=","args":[{"name":"can_send_voice_notes","external_name":"can_send_voice_notes","restriction":"Bool"}],"visibility":"Public","body":"@can_send_voice_notes = can_send_voice_notes"},"external_var":false},{"html_id":"is_member:Bool-instance-method","name":"is_member","doc":"True, if the user is a member of the chat at the moment of the request.","summary":"<p>True, if the user is a member of the chat at the moment of the request.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":119,"url":null},"def":{"name":"is_member","return_type":"Bool","visibility":"Public","body":"@is_member"},"external_var":false},{"html_id":"is_member=(is_member:Bool)-instance-method","name":"is_member=","doc":"True, if the user is a member of the chat at the moment of the request.","summary":"<p>True, if the user is a member of the chat at the moment of the request.</p>","abstract":false,"args":[{"name":"is_member","external_name":"is_member","restriction":"Bool"}],"args_string":"(is_member : Bool)","args_html":"(is_member : Bool)","location":{"filename":"src/types/chat_member.cr","line_number":119,"url":null},"def":{"name":"is_member=","args":[{"name":"is_member","external_name":"is_member","restriction":"Bool"}],"visibility":"Public","body":"@is_member = is_member"},"external_var":false},{"html_id":"status:String-instance-method","name":"status","doc":"The member's status in the chat, always \"restricted\".","summary":"<p>The member's status in the chat, always &quot;restricted&quot;.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":113,"url":null},"def":{"name":"status","return_type":"String","visibility":"Public","body":"@status"},"external_var":false},{"html_id":"status=(status:String)-instance-method","name":"status=","doc":"The member's status in the chat, always \"restricted\".","summary":"<p>The member's status in the chat, always &quot;restricted&quot;.</p>","abstract":false,"args":[{"name":"status","external_name":"status","restriction":"String"}],"args_string":"(status : String)","args_html":"(status : String)","location":{"filename":"src/types/chat_member.cr","line_number":113,"url":null},"def":{"name":"status=","args":[{"name":"status","external_name":"status","restriction":"String"}],"visibility":"Public","body":"@status = status"},"external_var":false},{"html_id":"until_date:Int32-instance-method","name":"until_date","doc":"Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted forever","summary":"<p>Date when restrictions will be lifted for this user; Unix time.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":164,"url":null},"def":{"name":"until_date","return_type":"Int32","visibility":"Public","body":"@until_date"},"external_var":false},{"html_id":"until_date=(until_date:Int32)-instance-method","name":"until_date=","doc":"Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted forever","summary":"<p>Date when restrictions will be lifted for this user; Unix time.</p>","abstract":false,"args":[{"name":"until_date","external_name":"until_date","restriction":"Int32"}],"args_string":"(until_date : Int32)","args_html":"(until_date : Int32)","location":{"filename":"src/types/chat_member.cr","line_number":164,"url":null},"def":{"name":"until_date=","args":[{"name":"until_date","external_name":"until_date","restriction":"Int32"}],"visibility":"Public","body":"@until_date = until_date"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"location":{"filename":"src/types/chat_member.cr","line_number":116,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_member.cr","line_number":116,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatMemberUpdated","path":"Hamilton/Types/ChatMemberUpdated.html","kind":"class","full_name":"Hamilton::Types::ChatMemberUpdated","name":"ChatMemberUpdated","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_member_update.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents changes in the status of a chat member.","summary":"<p>This object represents changes in the status of a chat member.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_member_update.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_member_update.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Chat the user belongs to.","summary":"<p>Chat the user belongs to.</p>","abstract":false,"location":{"filename":"src/types/chat_member_update.cr","line_number":11,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Chat the user belongs to.","summary":"<p>Chat the user belongs to.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/chat_member_update.cr","line_number":11,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"date:Int32-instance-method","name":"date","doc":"Date the change was done in Unix time.","summary":"<p>Date the change was done in Unix time.</p>","abstract":false,"location":{"filename":"src/types/chat_member_update.cr","line_number":17,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date the change was done in Unix time.","summary":"<p>Date the change was done in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/chat_member_update.cr","line_number":17,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"from:Hamilton::Types::User-instance-method","name":"from","doc":"Performer of the action, which resulted in the change.","summary":"<p>Performer of the action, which resulted in the change.</p>","abstract":false,"location":{"filename":"src/types/chat_member_update.cr","line_number":14,"url":null},"def":{"name":"from","return_type":"Hamilton::Types::User","visibility":"Public","body":"@from"},"external_var":false},{"html_id":"from=(from:Hamilton::Types::User)-instance-method","name":"from=","doc":"Performer of the action, which resulted in the change.","summary":"<p>Performer of the action, which resulted in the change.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"args_string":"(from : Hamilton::Types::User)","args_html":"(from : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chat_member_update.cr","line_number":14,"url":null},"def":{"name":"from=","args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@from = from"},"external_var":false},{"html_id":"invite_link:Hamilton::Types::ChatInviteLink|Nil-instance-method","name":"invite_link","doc":"Chat invite link, which was used by the user to join the chat; for joining by invite link events only.","summary":"<p>Chat invite link, which was used by the user to join the chat; for joining by invite link events only.</p>","abstract":false,"location":{"filename":"src/types/chat_member_update.cr","line_number":26,"url":null},"def":{"name":"invite_link","return_type":"Hamilton::Types::ChatInviteLink | Nil","visibility":"Public","body":"@invite_link"},"external_var":false},{"html_id":"invite_link=(invite_link:Hamilton::Types::ChatInviteLink|Nil)-instance-method","name":"invite_link=","doc":"Chat invite link, which was used by the user to join the chat; for joining by invite link events only.","summary":"<p>Chat invite link, which was used by the user to join the chat; for joining by invite link events only.</p>","abstract":false,"args":[{"name":"invite_link","external_name":"invite_link","restriction":"Hamilton::Types::ChatInviteLink | Nil"}],"args_string":"(invite_link : Hamilton::Types::ChatInviteLink | Nil)","args_html":"(invite_link : <a href=\"../../Hamilton/Types/ChatInviteLink.html\">Hamilton::Types::ChatInviteLink</a> | Nil)","location":{"filename":"src/types/chat_member_update.cr","line_number":26,"url":null},"def":{"name":"invite_link=","args":[{"name":"invite_link","external_name":"invite_link","restriction":"Hamilton::Types::ChatInviteLink | Nil"}],"visibility":"Public","body":"@invite_link = invite_link"},"external_var":false},{"html_id":"new_chat_member:Hamilton::Types::ChatMember-instance-method","name":"new_chat_member","doc":"New information about the chat member.","summary":"<p>New information about the chat member.</p>","abstract":false,"location":{"filename":"src/types/chat_member_update.cr","line_number":23,"url":null},"def":{"name":"new_chat_member","return_type":"Hamilton::Types::ChatMember","visibility":"Public","body":"@new_chat_member"},"external_var":false},{"html_id":"new_chat_member=(new_chat_member:Hamilton::Types::ChatMember)-instance-method","name":"new_chat_member=","doc":"New information about the chat member.","summary":"<p>New information about the chat member.</p>","abstract":false,"args":[{"name":"new_chat_member","external_name":"new_chat_member","restriction":"Hamilton::Types::ChatMember"}],"args_string":"(new_chat_member : Hamilton::Types::ChatMember)","args_html":"(new_chat_member : <a href=\"../../Hamilton/Types/ChatMember.html\">Hamilton::Types::ChatMember</a>)","location":{"filename":"src/types/chat_member_update.cr","line_number":23,"url":null},"def":{"name":"new_chat_member=","args":[{"name":"new_chat_member","external_name":"new_chat_member","restriction":"Hamilton::Types::ChatMember"}],"visibility":"Public","body":"@new_chat_member = new_chat_member"},"external_var":false},{"html_id":"old_chat_member:Hamilton::Types::ChatMember-instance-method","name":"old_chat_member","doc":"Previous information about the chat member.","summary":"<p>Previous information about the chat member.</p>","abstract":false,"location":{"filename":"src/types/chat_member_update.cr","line_number":20,"url":null},"def":{"name":"old_chat_member","return_type":"Hamilton::Types::ChatMember","visibility":"Public","body":"@old_chat_member"},"external_var":false},{"html_id":"old_chat_member=(old_chat_member:Hamilton::Types::ChatMember)-instance-method","name":"old_chat_member=","doc":"Previous information about the chat member.","summary":"<p>Previous information about the chat member.</p>","abstract":false,"args":[{"name":"old_chat_member","external_name":"old_chat_member","restriction":"Hamilton::Types::ChatMember"}],"args_string":"(old_chat_member : Hamilton::Types::ChatMember)","args_html":"(old_chat_member : <a href=\"../../Hamilton/Types/ChatMember.html\">Hamilton::Types::ChatMember</a>)","location":{"filename":"src/types/chat_member_update.cr","line_number":20,"url":null},"def":{"name":"old_chat_member=","args":[{"name":"old_chat_member","external_name":"old_chat_member","restriction":"Hamilton::Types::ChatMember"}],"visibility":"Public","body":"@old_chat_member = old_chat_member"},"external_var":false},{"html_id":"via_chat_folder_invite_link:Bool|Nil-instance-method","name":"via_chat_folder_invite_link","doc":"True, if the user joined the chat via a chat folder invite link.","summary":"<p>True, if the user joined the chat via a chat folder invite link.</p>","abstract":false,"location":{"filename":"src/types/chat_member_update.cr","line_number":32,"url":null},"def":{"name":"via_chat_folder_invite_link","return_type":"Bool | Nil","visibility":"Public","body":"@via_chat_folder_invite_link"},"external_var":false},{"html_id":"via_chat_folder_invite_link=(via_chat_folder_invite_link:Bool|Nil)-instance-method","name":"via_chat_folder_invite_link=","doc":"True, if the user joined the chat via a chat folder invite link.","summary":"<p>True, if the user joined the chat via a chat folder invite link.</p>","abstract":false,"args":[{"name":"via_chat_folder_invite_link","external_name":"via_chat_folder_invite_link","restriction":"Bool | Nil"}],"args_string":"(via_chat_folder_invite_link : Bool | Nil)","args_html":"(via_chat_folder_invite_link : Bool | Nil)","location":{"filename":"src/types/chat_member_update.cr","line_number":32,"url":null},"def":{"name":"via_chat_folder_invite_link=","args":[{"name":"via_chat_folder_invite_link","external_name":"via_chat_folder_invite_link","restriction":"Bool | Nil"}],"visibility":"Public","body":"@via_chat_folder_invite_link = via_chat_folder_invite_link"},"external_var":false},{"html_id":"via_join_request:Bool|Nil-instance-method","name":"via_join_request","doc":"True, if the user joined the chat after sending a direct join request without using an invite link and being approved by an administrator.","summary":"<p>True, if the user joined the chat after sending a direct join request without using an invite link and being approved by an administrator.</p>","abstract":false,"location":{"filename":"src/types/chat_member_update.cr","line_number":29,"url":null},"def":{"name":"via_join_request","return_type":"Bool | Nil","visibility":"Public","body":"@via_join_request"},"external_var":false},{"html_id":"via_join_request=(via_join_request:Bool|Nil)-instance-method","name":"via_join_request=","doc":"True, if the user joined the chat after sending a direct join request without using an invite link and being approved by an administrator.","summary":"<p>True, if the user joined the chat after sending a direct join request without using an invite link and being approved by an administrator.</p>","abstract":false,"args":[{"name":"via_join_request","external_name":"via_join_request","restriction":"Bool | Nil"}],"args_string":"(via_join_request : Bool | Nil)","args_html":"(via_join_request : Bool | Nil)","location":{"filename":"src/types/chat_member_update.cr","line_number":29,"url":null},"def":{"name":"via_join_request=","args":[{"name":"via_join_request","external_name":"via_join_request","restriction":"Bool | Nil"}],"visibility":"Public","body":"@via_join_request = via_join_request"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatPermissions","path":"Hamilton/Types/ChatPermissions.html","kind":"class","full_name":"Hamilton::Types::ChatPermissions","name":"ChatPermissions","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_permissions.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes actions that a non-administrator user is allowed to take in a chat.","summary":"<p>Describes actions that a non-administrator user is allowed to take in a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_permissions.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_permissions.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"can_add_web_page_previews:Bool|Nil-instance-method","name":"can_add_web_page_previews","doc":"True, if the user is allowed to add web page previews to their messages.","summary":"<p>True, if the user is allowed to add web page previews to their messages.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":38,"url":null},"def":{"name":"can_add_web_page_previews","return_type":"Bool | Nil","visibility":"Public","body":"@can_add_web_page_previews"},"external_var":false},{"html_id":"can_add_web_page_previews=(can_add_web_page_previews:Bool|Nil)-instance-method","name":"can_add_web_page_previews=","doc":"True, if the user is allowed to add web page previews to their messages.","summary":"<p>True, if the user is allowed to add web page previews to their messages.</p>","abstract":false,"args":[{"name":"can_add_web_page_previews","external_name":"can_add_web_page_previews","restriction":"Bool | Nil"}],"args_string":"(can_add_web_page_previews : Bool | Nil)","args_html":"(can_add_web_page_previews : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":38,"url":null},"def":{"name":"can_add_web_page_previews=","args":[{"name":"can_add_web_page_previews","external_name":"can_add_web_page_previews","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_add_web_page_previews = can_add_web_page_previews"},"external_var":false},{"html_id":"can_change_info:Bool|Nil-instance-method","name":"can_change_info","doc":"True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups.","summary":"<p>True, if the user is allowed to change the chat title, photo and other settings.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":41,"url":null},"def":{"name":"can_change_info","return_type":"Bool | Nil","visibility":"Public","body":"@can_change_info"},"external_var":false},{"html_id":"can_change_info=(can_change_info:Bool|Nil)-instance-method","name":"can_change_info=","doc":"True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups.","summary":"<p>True, if the user is allowed to change the chat title, photo and other settings.</p>","abstract":false,"args":[{"name":"can_change_info","external_name":"can_change_info","restriction":"Bool | Nil"}],"args_string":"(can_change_info : Bool | Nil)","args_html":"(can_change_info : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":41,"url":null},"def":{"name":"can_change_info=","args":[{"name":"can_change_info","external_name":"can_change_info","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_change_info = can_change_info"},"external_var":false},{"html_id":"can_invite_users:Bool|Nil-instance-method","name":"can_invite_users","doc":"True, if the user is allowed to invite new users to the chat.","summary":"<p>True, if the user is allowed to invite new users to the chat.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":44,"url":null},"def":{"name":"can_invite_users","return_type":"Bool | Nil","visibility":"Public","body":"@can_invite_users"},"external_var":false},{"html_id":"can_invite_users=(can_invite_users:Bool|Nil)-instance-method","name":"can_invite_users=","doc":"True, if the user is allowed to invite new users to the chat.","summary":"<p>True, if the user is allowed to invite new users to the chat.</p>","abstract":false,"args":[{"name":"can_invite_users","external_name":"can_invite_users","restriction":"Bool | Nil"}],"args_string":"(can_invite_users : Bool | Nil)","args_html":"(can_invite_users : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":44,"url":null},"def":{"name":"can_invite_users=","args":[{"name":"can_invite_users","external_name":"can_invite_users","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_invite_users = can_invite_users"},"external_var":false},{"html_id":"can_manage_topics:Bool|Nil-instance-method","name":"can_manage_topics","doc":"True, if the user is allowed to create forum topics. If omitted defaults to the value of `can_pin_messages`.","summary":"<p>True, if the user is allowed to create forum topics.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":50,"url":null},"def":{"name":"can_manage_topics","return_type":"Bool | Nil","visibility":"Public","body":"@can_manage_topics"},"external_var":false},{"html_id":"can_manage_topics=(can_manage_topics:Bool|Nil)-instance-method","name":"can_manage_topics=","doc":"True, if the user is allowed to create forum topics. If omitted defaults to the value of `can_pin_messages`.","summary":"<p>True, if the user is allowed to create forum topics.</p>","abstract":false,"args":[{"name":"can_manage_topics","external_name":"can_manage_topics","restriction":"Bool | Nil"}],"args_string":"(can_manage_topics : Bool | Nil)","args_html":"(can_manage_topics : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":50,"url":null},"def":{"name":"can_manage_topics=","args":[{"name":"can_manage_topics","external_name":"can_manage_topics","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_manage_topics = can_manage_topics"},"external_var":false},{"html_id":"can_pin_messages:Bool|Nil-instance-method","name":"can_pin_messages","doc":"True, if the user is allowed to pin messages. Ignored in public supergroups.","summary":"<p>True, if the user is allowed to pin messages.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":47,"url":null},"def":{"name":"can_pin_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_pin_messages"},"external_var":false},{"html_id":"can_pin_messages=(can_pin_messages:Bool|Nil)-instance-method","name":"can_pin_messages=","doc":"True, if the user is allowed to pin messages. Ignored in public supergroups.","summary":"<p>True, if the user is allowed to pin messages.</p>","abstract":false,"args":[{"name":"can_pin_messages","external_name":"can_pin_messages","restriction":"Bool | Nil"}],"args_string":"(can_pin_messages : Bool | Nil)","args_html":"(can_pin_messages : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":47,"url":null},"def":{"name":"can_pin_messages=","args":[{"name":"can_pin_messages","external_name":"can_pin_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_pin_messages = can_pin_messages"},"external_var":false},{"html_id":"can_send_audios:Bool|Nil-instance-method","name":"can_send_audios","doc":"True, if the user is allowed to send audios.","summary":"<p>True, if the user is allowed to send audios.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":14,"url":null},"def":{"name":"can_send_audios","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_audios"},"external_var":false},{"html_id":"can_send_audios=(can_send_audios:Bool|Nil)-instance-method","name":"can_send_audios=","doc":"True, if the user is allowed to send audios.","summary":"<p>True, if the user is allowed to send audios.</p>","abstract":false,"args":[{"name":"can_send_audios","external_name":"can_send_audios","restriction":"Bool | Nil"}],"args_string":"(can_send_audios : Bool | Nil)","args_html":"(can_send_audios : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":14,"url":null},"def":{"name":"can_send_audios=","args":[{"name":"can_send_audios","external_name":"can_send_audios","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_audios = can_send_audios"},"external_var":false},{"html_id":"can_send_documents:Bool|Nil-instance-method","name":"can_send_documents","doc":"True, if the user is allowed to send documents.","summary":"<p>True, if the user is allowed to send documents.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":17,"url":null},"def":{"name":"can_send_documents","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_documents"},"external_var":false},{"html_id":"can_send_documents=(can_send_documents:Bool|Nil)-instance-method","name":"can_send_documents=","doc":"True, if the user is allowed to send documents.","summary":"<p>True, if the user is allowed to send documents.</p>","abstract":false,"args":[{"name":"can_send_documents","external_name":"can_send_documents","restriction":"Bool | Nil"}],"args_string":"(can_send_documents : Bool | Nil)","args_html":"(can_send_documents : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":17,"url":null},"def":{"name":"can_send_documents=","args":[{"name":"can_send_documents","external_name":"can_send_documents","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_documents = can_send_documents"},"external_var":false},{"html_id":"can_send_messages:Bool|Nil-instance-method","name":"can_send_messages","doc":"True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues.","summary":"<p>True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":11,"url":null},"def":{"name":"can_send_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_messages"},"external_var":false},{"html_id":"can_send_messages=(can_send_messages:Bool|Nil)-instance-method","name":"can_send_messages=","doc":"True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues.","summary":"<p>True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues.</p>","abstract":false,"args":[{"name":"can_send_messages","external_name":"can_send_messages","restriction":"Bool | Nil"}],"args_string":"(can_send_messages : Bool | Nil)","args_html":"(can_send_messages : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":11,"url":null},"def":{"name":"can_send_messages=","args":[{"name":"can_send_messages","external_name":"can_send_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_messages = can_send_messages"},"external_var":false},{"html_id":"can_send_other_messages:Bool|Nil-instance-method","name":"can_send_other_messages","doc":"True, if the user is allowed to send animations, games, stickers and use inline bots.","summary":"<p>True, if the user is allowed to send animations, games, stickers and use inline bots.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":35,"url":null},"def":{"name":"can_send_other_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_other_messages"},"external_var":false},{"html_id":"can_send_other_messages=(can_send_other_messages:Bool|Nil)-instance-method","name":"can_send_other_messages=","doc":"True, if the user is allowed to send animations, games, stickers and use inline bots.","summary":"<p>True, if the user is allowed to send animations, games, stickers and use inline bots.</p>","abstract":false,"args":[{"name":"can_send_other_messages","external_name":"can_send_other_messages","restriction":"Bool | Nil"}],"args_string":"(can_send_other_messages : Bool | Nil)","args_html":"(can_send_other_messages : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":35,"url":null},"def":{"name":"can_send_other_messages=","args":[{"name":"can_send_other_messages","external_name":"can_send_other_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_other_messages = can_send_other_messages"},"external_var":false},{"html_id":"can_send_photos:Bool|Nil-instance-method","name":"can_send_photos","doc":"True, if the user is allowed to send photos.","summary":"<p>True, if the user is allowed to send photos.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":20,"url":null},"def":{"name":"can_send_photos","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_photos"},"external_var":false},{"html_id":"can_send_photos=(can_send_photos:Bool|Nil)-instance-method","name":"can_send_photos=","doc":"True, if the user is allowed to send photos.","summary":"<p>True, if the user is allowed to send photos.</p>","abstract":false,"args":[{"name":"can_send_photos","external_name":"can_send_photos","restriction":"Bool | Nil"}],"args_string":"(can_send_photos : Bool | Nil)","args_html":"(can_send_photos : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":20,"url":null},"def":{"name":"can_send_photos=","args":[{"name":"can_send_photos","external_name":"can_send_photos","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_photos = can_send_photos"},"external_var":false},{"html_id":"can_send_polls:Bool|Nil-instance-method","name":"can_send_polls","doc":"True, if the user is allowed to send polls and checklists.","summary":"<p>True, if the user is allowed to send polls and checklists.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":32,"url":null},"def":{"name":"can_send_polls","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_polls"},"external_var":false},{"html_id":"can_send_polls=(can_send_polls:Bool|Nil)-instance-method","name":"can_send_polls=","doc":"True, if the user is allowed to send polls and checklists.","summary":"<p>True, if the user is allowed to send polls and checklists.</p>","abstract":false,"args":[{"name":"can_send_polls","external_name":"can_send_polls","restriction":"Bool | Nil"}],"args_string":"(can_send_polls : Bool | Nil)","args_html":"(can_send_polls : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":32,"url":null},"def":{"name":"can_send_polls=","args":[{"name":"can_send_polls","external_name":"can_send_polls","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_polls = can_send_polls"},"external_var":false},{"html_id":"can_send_video_notes:Bool|Nil-instance-method","name":"can_send_video_notes","doc":"True, if the user is allowed to send video notes.","summary":"<p>True, if the user is allowed to send video notes.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":26,"url":null},"def":{"name":"can_send_video_notes","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_video_notes"},"external_var":false},{"html_id":"can_send_video_notes=(can_send_video_notes:Bool|Nil)-instance-method","name":"can_send_video_notes=","doc":"True, if the user is allowed to send video notes.","summary":"<p>True, if the user is allowed to send video notes.</p>","abstract":false,"args":[{"name":"can_send_video_notes","external_name":"can_send_video_notes","restriction":"Bool | Nil"}],"args_string":"(can_send_video_notes : Bool | Nil)","args_html":"(can_send_video_notes : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":26,"url":null},"def":{"name":"can_send_video_notes=","args":[{"name":"can_send_video_notes","external_name":"can_send_video_notes","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_video_notes = can_send_video_notes"},"external_var":false},{"html_id":"can_send_videos:Bool|Nil-instance-method","name":"can_send_videos","doc":"True, if the user is allowed to send videos.","summary":"<p>True, if the user is allowed to send videos.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":23,"url":null},"def":{"name":"can_send_videos","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_videos"},"external_var":false},{"html_id":"can_send_videos=(can_send_videos:Bool|Nil)-instance-method","name":"can_send_videos=","doc":"True, if the user is allowed to send videos.","summary":"<p>True, if the user is allowed to send videos.</p>","abstract":false,"args":[{"name":"can_send_videos","external_name":"can_send_videos","restriction":"Bool | Nil"}],"args_string":"(can_send_videos : Bool | Nil)","args_html":"(can_send_videos : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":23,"url":null},"def":{"name":"can_send_videos=","args":[{"name":"can_send_videos","external_name":"can_send_videos","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_videos = can_send_videos"},"external_var":false},{"html_id":"can_send_voice_notes:Bool|Nil-instance-method","name":"can_send_voice_notes","doc":"True, if the user is allowed to send voice notes.","summary":"<p>True, if the user is allowed to send voice notes.</p>","abstract":false,"location":{"filename":"src/types/chat_permissions.cr","line_number":29,"url":null},"def":{"name":"can_send_voice_notes","return_type":"Bool | Nil","visibility":"Public","body":"@can_send_voice_notes"},"external_var":false},{"html_id":"can_send_voice_notes=(can_send_voice_notes:Bool|Nil)-instance-method","name":"can_send_voice_notes=","doc":"True, if the user is allowed to send voice notes.","summary":"<p>True, if the user is allowed to send voice notes.</p>","abstract":false,"args":[{"name":"can_send_voice_notes","external_name":"can_send_voice_notes","restriction":"Bool | Nil"}],"args_string":"(can_send_voice_notes : Bool | Nil)","args_html":"(can_send_voice_notes : Bool | Nil)","location":{"filename":"src/types/chat_permissions.cr","line_number":29,"url":null},"def":{"name":"can_send_voice_notes=","args":[{"name":"can_send_voice_notes","external_name":"can_send_voice_notes","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_send_voice_notes = can_send_voice_notes"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatPhoto","path":"Hamilton/Types/ChatPhoto.html","kind":"class","full_name":"Hamilton::Types::ChatPhoto","name":"ChatPhoto","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_photo.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a chat photo.","summary":"<p>This object represents a chat photo.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_photo.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_photo.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"big_file_id:String-instance-method","name":"big_file_id","doc":"File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.","summary":"<p>File identifier of big (640x640) chat photo.</p>","abstract":false,"location":{"filename":"src/types/chat_photo.cr","line_number":17,"url":null},"def":{"name":"big_file_id","return_type":"String","visibility":"Public","body":"@big_file_id"},"external_var":false},{"html_id":"big_file_id=(big_file_id:String)-instance-method","name":"big_file_id=","doc":"File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.","summary":"<p>File identifier of big (640x640) chat photo.</p>","abstract":false,"args":[{"name":"big_file_id","external_name":"big_file_id","restriction":"String"}],"args_string":"(big_file_id : String)","args_html":"(big_file_id : String)","location":{"filename":"src/types/chat_photo.cr","line_number":17,"url":null},"def":{"name":"big_file_id=","args":[{"name":"big_file_id","external_name":"big_file_id","restriction":"String"}],"visibility":"Public","body":"@big_file_id = big_file_id"},"external_var":false},{"html_id":"big_file_unique_id:String-instance-method","name":"big_file_unique_id","doc":"Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/chat_photo.cr","line_number":20,"url":null},"def":{"name":"big_file_unique_id","return_type":"String","visibility":"Public","body":"@big_file_unique_id"},"external_var":false},{"html_id":"big_file_unique_id=(big_file_unique_id:String)-instance-method","name":"big_file_unique_id=","doc":"Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"big_file_unique_id","external_name":"big_file_unique_id","restriction":"String"}],"args_string":"(big_file_unique_id : String)","args_html":"(big_file_unique_id : String)","location":{"filename":"src/types/chat_photo.cr","line_number":20,"url":null},"def":{"name":"big_file_unique_id=","args":[{"name":"big_file_unique_id","external_name":"big_file_unique_id","restriction":"String"}],"visibility":"Public","body":"@big_file_unique_id = big_file_unique_id"},"external_var":false},{"html_id":"small_file_id:String-instance-method","name":"small_file_id","doc":"File identifier of small (160x160) chat photo. This `file_id` can be used only for photo download and only for as long as the photo is not changed.","summary":"<p>File identifier of small (160x160) chat photo.</p>","abstract":false,"location":{"filename":"src/types/chat_photo.cr","line_number":11,"url":null},"def":{"name":"small_file_id","return_type":"String","visibility":"Public","body":"@small_file_id"},"external_var":false},{"html_id":"small_file_id=(small_file_id:String)-instance-method","name":"small_file_id=","doc":"File identifier of small (160x160) chat photo. This `file_id` can be used only for photo download and only for as long as the photo is not changed.","summary":"<p>File identifier of small (160x160) chat photo.</p>","abstract":false,"args":[{"name":"small_file_id","external_name":"small_file_id","restriction":"String"}],"args_string":"(small_file_id : String)","args_html":"(small_file_id : String)","location":{"filename":"src/types/chat_photo.cr","line_number":11,"url":null},"def":{"name":"small_file_id=","args":[{"name":"small_file_id","external_name":"small_file_id","restriction":"String"}],"visibility":"Public","body":"@small_file_id = small_file_id"},"external_var":false},{"html_id":"small_file_unique_id:String-instance-method","name":"small_file_unique_id","doc":"Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/chat_photo.cr","line_number":14,"url":null},"def":{"name":"small_file_unique_id","return_type":"String","visibility":"Public","body":"@small_file_unique_id"},"external_var":false},{"html_id":"small_file_unique_id=(small_file_unique_id:String)-instance-method","name":"small_file_unique_id=","doc":"Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"small_file_unique_id","external_name":"small_file_unique_id","restriction":"String"}],"args_string":"(small_file_unique_id : String)","args_html":"(small_file_unique_id : String)","location":{"filename":"src/types/chat_photo.cr","line_number":14,"url":null},"def":{"name":"small_file_unique_id=","args":[{"name":"small_file_unique_id","external_name":"small_file_unique_id","restriction":"String"}],"visibility":"Public","body":"@small_file_unique_id = small_file_unique_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChatShared","path":"Hamilton/Types/ChatShared.html","kind":"class","full_name":"Hamilton::Types::ChatShared","name":"ChatShared","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chat_shared.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about a chat that was shared with the bot using a KeyboardButtonRequestChat button.","summary":"<p>This object contains information about a chat that was shared with the bot using a KeyboardButtonRequestChat button.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chat_shared.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chat_shared.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat_id:Int32-instance-method","name":"chat_id","doc":"Identifier of the shared chat. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means.","summary":"<p>Identifier of the shared chat.</p>","abstract":false,"location":{"filename":"src/types/chat_shared.cr","line_number":14,"url":null},"def":{"name":"chat_id","return_type":"Int32","visibility":"Public","body":"@chat_id"},"external_var":false},{"html_id":"chat_id=(chat_id:Int32)-instance-method","name":"chat_id=","doc":"Identifier of the shared chat. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means.","summary":"<p>Identifier of the shared chat.</p>","abstract":false,"args":[{"name":"chat_id","external_name":"chat_id","restriction":"Int32"}],"args_string":"(chat_id : Int32)","args_html":"(chat_id : Int32)","location":{"filename":"src/types/chat_shared.cr","line_number":14,"url":null},"def":{"name":"chat_id=","args":[{"name":"chat_id","external_name":"chat_id","restriction":"Int32"}],"visibility":"Public","body":"@chat_id = chat_id"},"external_var":false},{"html_id":"photo:Array(Hamilton::Types::PhotoSize)-instance-method","name":"photo","doc":"Available sizes of the chat photo, if the photo was requested by the bot.","summary":"<p>Available sizes of the chat photo, if the photo was requested by the bot.</p>","abstract":false,"location":{"filename":"src/types/chat_shared.cr","line_number":23,"url":null},"def":{"name":"photo","return_type":"Array(Hamilton::Types::PhotoSize)","visibility":"Public","body":"@photo"},"external_var":false},{"html_id":"photo=(photo:Array(Hamilton::Types::PhotoSize))-instance-method","name":"photo=","doc":"Available sizes of the chat photo, if the photo was requested by the bot.","summary":"<p>Available sizes of the chat photo, if the photo was requested by the bot.</p>","abstract":false,"args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize)"}],"args_string":"(photo : Array(Hamilton::Types::PhotoSize))","args_html":"(photo : Array(<a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a>))","location":{"filename":"src/types/chat_shared.cr","line_number":23,"url":null},"def":{"name":"photo=","args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize)"}],"visibility":"Public","body":"@photo = photo"},"external_var":false},{"html_id":"request_id:Int32-instance-method","name":"request_id","doc":"Identifier of the request.","summary":"<p>Identifier of the request.</p>","abstract":false,"location":{"filename":"src/types/chat_shared.cr","line_number":11,"url":null},"def":{"name":"request_id","return_type":"Int32","visibility":"Public","body":"@request_id"},"external_var":false},{"html_id":"request_id=(request_id:Int32)-instance-method","name":"request_id=","doc":"Identifier of the request.","summary":"<p>Identifier of the request.</p>","abstract":false,"args":[{"name":"request_id","external_name":"request_id","restriction":"Int32"}],"args_string":"(request_id : Int32)","args_html":"(request_id : Int32)","location":{"filename":"src/types/chat_shared.cr","line_number":11,"url":null},"def":{"name":"request_id=","args":[{"name":"request_id","external_name":"request_id","restriction":"Int32"}],"visibility":"Public","body":"@request_id = request_id"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title of the chat, if the title was requested by the bot.","summary":"<p>Title of the chat, if the title was requested by the bot.</p>","abstract":false,"location":{"filename":"src/types/chat_shared.cr","line_number":17,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title of the chat, if the title was requested by the bot.","summary":"<p>Title of the chat, if the title was requested by the bot.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/chat_shared.cr","line_number":17,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"username:String|Nil-instance-method","name":"username","doc":"Username of the chat, if the username was requested by the bot and available.","summary":"<p>Username of the chat, if the username was requested by the bot and available.</p>","abstract":false,"location":{"filename":"src/types/chat_shared.cr","line_number":20,"url":null},"def":{"name":"username","return_type":"String | Nil","visibility":"Public","body":"@username"},"external_var":false},{"html_id":"username=(username:String|Nil)-instance-method","name":"username=","doc":"Username of the chat, if the username was requested by the bot and available.","summary":"<p>Username of the chat, if the username was requested by the bot and available.</p>","abstract":false,"args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"args_string":"(username : String | Nil)","args_html":"(username : String | Nil)","location":{"filename":"src/types/chat_shared.cr","line_number":20,"url":null},"def":{"name":"username=","args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"visibility":"Public","body":"@username = username"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Checklist","path":"Hamilton/Types/Checklist.html","kind":"class","full_name":"Hamilton::Types::Checklist","name":"Checklist","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/checklist.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a checklist.","summary":"<p>Describes a checklist.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/checklist.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/checklist.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"others_can_add_tasks:Bool|Nil-instance-method","name":"others_can_add_tasks","doc":"True, if users other than the creator of the list can add tasks to the list.","summary":"<p>True, if users other than the creator of the list can add tasks to the list.</p>","abstract":false,"location":{"filename":"src/types/checklist.cr","line_number":20,"url":null},"def":{"name":"others_can_add_tasks","return_type":"Bool | Nil","visibility":"Public","body":"@others_can_add_tasks"},"external_var":false},{"html_id":"others_can_add_tasks=(others_can_add_tasks:Bool|Nil)-instance-method","name":"others_can_add_tasks=","doc":"True, if users other than the creator of the list can add tasks to the list.","summary":"<p>True, if users other than the creator of the list can add tasks to the list.</p>","abstract":false,"args":[{"name":"others_can_add_tasks","external_name":"others_can_add_tasks","restriction":"Bool | Nil"}],"args_string":"(others_can_add_tasks : Bool | Nil)","args_html":"(others_can_add_tasks : Bool | Nil)","location":{"filename":"src/types/checklist.cr","line_number":20,"url":null},"def":{"name":"others_can_add_tasks=","args":[{"name":"others_can_add_tasks","external_name":"others_can_add_tasks","restriction":"Bool | Nil"}],"visibility":"Public","body":"@others_can_add_tasks = others_can_add_tasks"},"external_var":false},{"html_id":"others_can_mark_tasks_as_done:Bool|Nil-instance-method","name":"others_can_mark_tasks_as_done","doc":"True, if users other than the creator of the list can mark tasks as done or not done.","summary":"<p>True, if users other than the creator of the list can mark tasks as done or not done.</p>","abstract":false,"location":{"filename":"src/types/checklist.cr","line_number":23,"url":null},"def":{"name":"others_can_mark_tasks_as_done","return_type":"Bool | Nil","visibility":"Public","body":"@others_can_mark_tasks_as_done"},"external_var":false},{"html_id":"others_can_mark_tasks_as_done=(others_can_mark_tasks_as_done:Bool|Nil)-instance-method","name":"others_can_mark_tasks_as_done=","doc":"True, if users other than the creator of the list can mark tasks as done or not done.","summary":"<p>True, if users other than the creator of the list can mark tasks as done or not done.</p>","abstract":false,"args":[{"name":"others_can_mark_tasks_as_done","external_name":"others_can_mark_tasks_as_done","restriction":"Bool | Nil"}],"args_string":"(others_can_mark_tasks_as_done : Bool | Nil)","args_html":"(others_can_mark_tasks_as_done : Bool | Nil)","location":{"filename":"src/types/checklist.cr","line_number":23,"url":null},"def":{"name":"others_can_mark_tasks_as_done=","args":[{"name":"others_can_mark_tasks_as_done","external_name":"others_can_mark_tasks_as_done","restriction":"Bool | Nil"}],"visibility":"Public","body":"@others_can_mark_tasks_as_done = others_can_mark_tasks_as_done"},"external_var":false},{"html_id":"tasks:Array(Hamilton::Types::ChecklistTask)-instance-method","name":"tasks","doc":"List of tasks in the checklist.","summary":"<p>List of tasks in the checklist.</p>","abstract":false,"location":{"filename":"src/types/checklist.cr","line_number":17,"url":null},"def":{"name":"tasks","return_type":"Array(Hamilton::Types::ChecklistTask)","visibility":"Public","body":"@tasks"},"external_var":false},{"html_id":"tasks=(tasks:Array(Hamilton::Types::ChecklistTask))-instance-method","name":"tasks=","doc":"List of tasks in the checklist.","summary":"<p>List of tasks in the checklist.</p>","abstract":false,"args":[{"name":"tasks","external_name":"tasks","restriction":"Array(Hamilton::Types::ChecklistTask)"}],"args_string":"(tasks : Array(Hamilton::Types::ChecklistTask))","args_html":"(tasks : Array(<a href=\"../../Hamilton/Types/ChecklistTask.html\">Hamilton::Types::ChecklistTask</a>))","location":{"filename":"src/types/checklist.cr","line_number":17,"url":null},"def":{"name":"tasks=","args":[{"name":"tasks","external_name":"tasks","restriction":"Array(Hamilton::Types::ChecklistTask)"}],"visibility":"Public","body":"@tasks = tasks"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title of the checklist.","summary":"<p>Title of the checklist.</p>","abstract":false,"location":{"filename":"src/types/checklist.cr","line_number":11,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title of the checklist.","summary":"<p>Title of the checklist.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/checklist.cr","line_number":11,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"title_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"title_entities","doc":"Special entities that appear in the checklist title.","summary":"<p>Special entities that appear in the checklist title.</p>","abstract":false,"location":{"filename":"src/types/checklist.cr","line_number":14,"url":null},"def":{"name":"title_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@title_entities"},"external_var":false},{"html_id":"title_entities=(title_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"title_entities=","doc":"Special entities that appear in the checklist title.","summary":"<p>Special entities that appear in the checklist title.</p>","abstract":false,"args":[{"name":"title_entities","external_name":"title_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(title_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(title_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/checklist.cr","line_number":14,"url":null},"def":{"name":"title_entities=","args":[{"name":"title_entities","external_name":"title_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@title_entities = title_entities"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChecklistTask","path":"Hamilton/Types/ChecklistTask.html","kind":"class","full_name":"Hamilton::Types::ChecklistTask","name":"ChecklistTask","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/checklist_task.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a task in a checklist.","summary":"<p>Describes a task in a checklist.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/checklist_task.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/checklist_task.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"completed_by_user:Hamilton::Types::User-instance-method","name":"completed_by_user","doc":"User that completed the task; omitted if the task wasn't completed.","summary":"<p>User that completed the task; omitted if the task wasn't completed.</p>","abstract":false,"location":{"filename":"src/types/checklist_task.cr","line_number":20,"url":null},"def":{"name":"completed_by_user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@completed_by_user"},"external_var":false},{"html_id":"completed_by_user=(completed_by_user:Hamilton::Types::User)-instance-method","name":"completed_by_user=","doc":"User that completed the task; omitted if the task wasn't completed.","summary":"<p>User that completed the task; omitted if the task wasn't completed.</p>","abstract":false,"args":[{"name":"completed_by_user","external_name":"completed_by_user","restriction":"Hamilton::Types::User"}],"args_string":"(completed_by_user : Hamilton::Types::User)","args_html":"(completed_by_user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/checklist_task.cr","line_number":20,"url":null},"def":{"name":"completed_by_user=","args":[{"name":"completed_by_user","external_name":"completed_by_user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@completed_by_user = completed_by_user"},"external_var":false},{"html_id":"completion_date:Int32-instance-method","name":"completion_date","doc":"Point in time (Unix timestamp) when the task was completed; 0 if the task wasn't completed.","summary":"<p>Point in time (Unix timestamp) when the task was completed; 0 if the task wasn't completed.</p>","abstract":false,"location":{"filename":"src/types/checklist_task.cr","line_number":23,"url":null},"def":{"name":"completion_date","return_type":"Int32","visibility":"Public","body":"@completion_date"},"external_var":false},{"html_id":"completion_date=(completion_date:Int32)-instance-method","name":"completion_date=","doc":"Point in time (Unix timestamp) when the task was completed; 0 if the task wasn't completed.","summary":"<p>Point in time (Unix timestamp) when the task was completed; 0 if the task wasn't completed.</p>","abstract":false,"args":[{"name":"completion_date","external_name":"completion_date","restriction":"Int32"}],"args_string":"(completion_date : Int32)","args_html":"(completion_date : Int32)","location":{"filename":"src/types/checklist_task.cr","line_number":23,"url":null},"def":{"name":"completion_date=","args":[{"name":"completion_date","external_name":"completion_date","restriction":"Int32"}],"visibility":"Public","body":"@completion_date = completion_date"},"external_var":false},{"html_id":"id:Int32-instance-method","name":"id","doc":"Unique identifier of the task","summary":"<p>Unique identifier of the task</p>","abstract":false,"location":{"filename":"src/types/checklist_task.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"Int32","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:Int32)-instance-method","name":"id=","doc":"Unique identifier of the task","summary":"<p>Unique identifier of the task</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int32"}],"args_string":"(id : Int32)","args_html":"(id : Int32)","location":{"filename":"src/types/checklist_task.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"Int32"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"text:String-instance-method","name":"text","doc":"Text of the task","summary":"<p>Text of the task</p>","abstract":false,"location":{"filename":"src/types/checklist_task.cr","line_number":14,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"Text of the task","summary":"<p>Text of the task</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/checklist_task.cr","line_number":14,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"text_entities:Array(Hamilton::Types::MessageEntity)-instance-method","name":"text_entities","doc":"Special entities that appear in the task text.","summary":"<p>Special entities that appear in the task text.</p>","abstract":false,"location":{"filename":"src/types/checklist_task.cr","line_number":17,"url":null},"def":{"name":"text_entities","return_type":"Array(Hamilton::Types::MessageEntity)","visibility":"Public","body":"@text_entities"},"external_var":false},{"html_id":"text_entities=(text_entities:Array(Hamilton::Types::MessageEntity))-instance-method","name":"text_entities=","doc":"Special entities that appear in the task text.","summary":"<p>Special entities that appear in the task text.</p>","abstract":false,"args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity)"}],"args_string":"(text_entities : Array(Hamilton::Types::MessageEntity))","args_html":"(text_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>))","location":{"filename":"src/types/checklist_task.cr","line_number":17,"url":null},"def":{"name":"text_entities=","args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity)"}],"visibility":"Public","body":"@text_entities = text_entities"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChecklistTasksAdded","path":"Hamilton/Types/ChecklistTasksAdded.html","kind":"class","full_name":"Hamilton::Types::ChecklistTasksAdded","name":"ChecklistTasksAdded","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/checklist_tasks_added.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about tasks added to a checklist.","summary":"<p>Describes a service message about tasks added to a checklist.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/checklist_tasks_added.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/checklist_tasks_added.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"checklist_message:Hamilton::Types::Message|Nil-instance-method","name":"checklist_message","doc":"Message containing the checklist to which the tasks were added. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the checklist to which the tasks were added.</p>","abstract":false,"location":{"filename":"src/types/checklist_tasks_added.cr","line_number":11,"url":null},"def":{"name":"checklist_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@checklist_message"},"external_var":false},{"html_id":"checklist_message=(checklist_message:Hamilton::Types::Message|Nil)-instance-method","name":"checklist_message=","doc":"Message containing the checklist to which the tasks were added. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the checklist to which the tasks were added.</p>","abstract":false,"args":[{"name":"checklist_message","external_name":"checklist_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(checklist_message : Hamilton::Types::Message | Nil)","args_html":"(checklist_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/checklist_tasks_added.cr","line_number":11,"url":null},"def":{"name":"checklist_message=","args":[{"name":"checklist_message","external_name":"checklist_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@checklist_message = checklist_message"},"external_var":false},{"html_id":"tasks:Array(Hamilton::Types::ChecklistTask)-instance-method","name":"tasks","doc":"List of tasks added to the checklist.","summary":"<p>List of tasks added to the checklist.</p>","abstract":false,"location":{"filename":"src/types/checklist_tasks_added.cr","line_number":14,"url":null},"def":{"name":"tasks","return_type":"Array(Hamilton::Types::ChecklistTask)","visibility":"Public","body":"@tasks"},"external_var":false},{"html_id":"tasks=(tasks:Array(Hamilton::Types::ChecklistTask))-instance-method","name":"tasks=","doc":"List of tasks added to the checklist.","summary":"<p>List of tasks added to the checklist.</p>","abstract":false,"args":[{"name":"tasks","external_name":"tasks","restriction":"Array(Hamilton::Types::ChecklistTask)"}],"args_string":"(tasks : Array(Hamilton::Types::ChecklistTask))","args_html":"(tasks : Array(<a href=\"../../Hamilton/Types/ChecklistTask.html\">Hamilton::Types::ChecklistTask</a>))","location":{"filename":"src/types/checklist_tasks_added.cr","line_number":14,"url":null},"def":{"name":"tasks=","args":[{"name":"tasks","external_name":"tasks","restriction":"Array(Hamilton::Types::ChecklistTask)"}],"visibility":"Public","body":"@tasks = tasks"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChecklistTasksDone","path":"Hamilton/Types/ChecklistTasksDone.html","kind":"class","full_name":"Hamilton::Types::ChecklistTasksDone","name":"ChecklistTasksDone","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/checklist_tasks_done.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about checklist tasks marked as done or not done.","summary":"<p>Describes a service message about checklist tasks marked as done or not done.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/checklist_tasks_done.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/checklist_tasks_done.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"checklist_message:Hamilton::Types::Message|Nil-instance-method","name":"checklist_message","doc":"Message containing the checklist whose tasks were marked as done or not done. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the checklist whose tasks were marked as done or not done.</p>","abstract":false,"location":{"filename":"src/types/checklist_tasks_done.cr","line_number":11,"url":null},"def":{"name":"checklist_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@checklist_message"},"external_var":false},{"html_id":"checklist_message=(checklist_message:Hamilton::Types::Message|Nil)-instance-method","name":"checklist_message=","doc":"Message containing the checklist whose tasks were marked as done or not done. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the checklist whose tasks were marked as done or not done.</p>","abstract":false,"args":[{"name":"checklist_message","external_name":"checklist_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(checklist_message : Hamilton::Types::Message | Nil)","args_html":"(checklist_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/checklist_tasks_done.cr","line_number":11,"url":null},"def":{"name":"checklist_message=","args":[{"name":"checklist_message","external_name":"checklist_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@checklist_message = checklist_message"},"external_var":false},{"html_id":"marked_as_done_task_ids:Array(Int32)-instance-method","name":"marked_as_done_task_ids","doc":"Identifiers of the tasks that were marked as done.","summary":"<p>Identifiers of the tasks that were marked as done.</p>","abstract":false,"location":{"filename":"src/types/checklist_tasks_done.cr","line_number":14,"url":null},"def":{"name":"marked_as_done_task_ids","return_type":"Array(Int32)","visibility":"Public","body":"@marked_as_done_task_ids"},"external_var":false},{"html_id":"marked_as_done_task_ids=(marked_as_done_task_ids:Array(Int32))-instance-method","name":"marked_as_done_task_ids=","doc":"Identifiers of the tasks that were marked as done.","summary":"<p>Identifiers of the tasks that were marked as done.</p>","abstract":false,"args":[{"name":"marked_as_done_task_ids","external_name":"marked_as_done_task_ids","restriction":"Array(Int32)"}],"args_string":"(marked_as_done_task_ids : Array(Int32))","args_html":"(marked_as_done_task_ids : Array(Int32))","location":{"filename":"src/types/checklist_tasks_done.cr","line_number":14,"url":null},"def":{"name":"marked_as_done_task_ids=","args":[{"name":"marked_as_done_task_ids","external_name":"marked_as_done_task_ids","restriction":"Array(Int32)"}],"visibility":"Public","body":"@marked_as_done_task_ids = marked_as_done_task_ids"},"external_var":false},{"html_id":"marked_as_not_done_task_ids:Array(Int32)-instance-method","name":"marked_as_not_done_task_ids","doc":"Identifiers of the tasks that were marked as not done.","summary":"<p>Identifiers of the tasks that were marked as not done.</p>","abstract":false,"location":{"filename":"src/types/checklist_tasks_done.cr","line_number":17,"url":null},"def":{"name":"marked_as_not_done_task_ids","return_type":"Array(Int32)","visibility":"Public","body":"@marked_as_not_done_task_ids"},"external_var":false},{"html_id":"marked_as_not_done_task_ids=(marked_as_not_done_task_ids:Array(Int32))-instance-method","name":"marked_as_not_done_task_ids=","doc":"Identifiers of the tasks that were marked as not done.","summary":"<p>Identifiers of the tasks that were marked as not done.</p>","abstract":false,"args":[{"name":"marked_as_not_done_task_ids","external_name":"marked_as_not_done_task_ids","restriction":"Array(Int32)"}],"args_string":"(marked_as_not_done_task_ids : Array(Int32))","args_html":"(marked_as_not_done_task_ids : Array(Int32))","location":{"filename":"src/types/checklist_tasks_done.cr","line_number":17,"url":null},"def":{"name":"marked_as_not_done_task_ids=","args":[{"name":"marked_as_not_done_task_ids","external_name":"marked_as_not_done_task_ids","restriction":"Array(Int32)"}],"visibility":"Public","body":"@marked_as_not_done_task_ids = marked_as_not_done_task_ids"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ChosenInlineResult","path":"Hamilton/Types/ChosenInlineResult.html","kind":"class","full_name":"Hamilton::Types::ChosenInlineResult","name":"ChosenInlineResult","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/chosen_inline_reslt.cr","line_number":8,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a result of an inline query that was chosen by the user and sent to their chat partner.\n\nNOTE: It is necessary to enable inline feedback via @BotFather in order to receive these objects in updates.","summary":"<p>Represents a result of an inline query that was chosen by the user and sent to their chat partner.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"from:Hamilton::Types::User-instance-method","name":"from","doc":"The user that chose the result.","summary":"<p>The user that chose the result.</p>","abstract":false,"location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":16,"url":null},"def":{"name":"from","return_type":"Hamilton::Types::User","visibility":"Public","body":"@from"},"external_var":false},{"html_id":"from=(from:Hamilton::Types::User)-instance-method","name":"from=","doc":"The user that chose the result.","summary":"<p>The user that chose the result.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"args_string":"(from : Hamilton::Types::User)","args_html":"(from : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":16,"url":null},"def":{"name":"from=","args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@from = from"},"external_var":false},{"html_id":"inline_message_id:String|Nil-instance-method","name":"inline_message_id","doc":"Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.","summary":"<p>Identifier of the sent inline message.</p>","abstract":false,"location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":22,"url":null},"def":{"name":"inline_message_id","return_type":"String | Nil","visibility":"Public","body":"@inline_message_id"},"external_var":false},{"html_id":"inline_message_id=(inline_message_id:String|Nil)-instance-method","name":"inline_message_id=","doc":"Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.","summary":"<p>Identifier of the sent inline message.</p>","abstract":false,"args":[{"name":"inline_message_id","external_name":"inline_message_id","restriction":"String | Nil"}],"args_string":"(inline_message_id : String | Nil)","args_html":"(inline_message_id : String | Nil)","location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":22,"url":null},"def":{"name":"inline_message_id=","args":[{"name":"inline_message_id","external_name":"inline_message_id","restriction":"String | Nil"}],"visibility":"Public","body":"@inline_message_id = inline_message_id"},"external_var":false},{"html_id":"location:Hamilton::Types::Location|Nil-instance-method","name":"location","doc":"Sender location, only for bots that require user location.","summary":"<p>Sender location, only for bots that require user location.</p>","abstract":false,"location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":19,"url":null},"def":{"name":"location","return_type":"Hamilton::Types::Location | Nil","visibility":"Public","body":"@location"},"external_var":false},{"html_id":"location=(location:Hamilton::Types::Location|Nil)-instance-method","name":"location=","doc":"Sender location, only for bots that require user location.","summary":"<p>Sender location, only for bots that require user location.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"args_string":"(location : Hamilton::Types::Location | Nil)","args_html":"(location : <a href=\"../../Hamilton/Types/Location.html\">Hamilton::Types::Location</a> | Nil)","location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":19,"url":null},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"visibility":"Public","body":"@location = location"},"external_var":false},{"html_id":"query:String-instance-method","name":"query","doc":"The query that was used to obtain the result.","summary":"<p>The query that was used to obtain the result.</p>","abstract":false,"location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":25,"url":null},"def":{"name":"query","return_type":"String","visibility":"Public","body":"@query"},"external_var":false},{"html_id":"query=(query:String)-instance-method","name":"query=","doc":"The query that was used to obtain the result.","summary":"<p>The query that was used to obtain the result.</p>","abstract":false,"args":[{"name":"query","external_name":"query","restriction":"String"}],"args_string":"(query : String)","args_html":"(query : String)","location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":25,"url":null},"def":{"name":"query=","args":[{"name":"query","external_name":"query","restriction":"String"}],"visibility":"Public","body":"@query = query"},"external_var":false},{"html_id":"result_id:String-instance-method","name":"result_id","doc":"The unique identifier for the result that was chosen.","summary":"<p>The unique identifier for the result that was chosen.</p>","abstract":false,"location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":13,"url":null},"def":{"name":"result_id","return_type":"String","visibility":"Public","body":"@result_id"},"external_var":false},{"html_id":"result_id=(result_id:String)-instance-method","name":"result_id=","doc":"The unique identifier for the result that was chosen.","summary":"<p>The unique identifier for the result that was chosen.</p>","abstract":false,"args":[{"name":"result_id","external_name":"result_id","restriction":"String"}],"args_string":"(result_id : String)","args_html":"(result_id : String)","location":{"filename":"src/types/chosen_inline_reslt.cr","line_number":13,"url":null},"def":{"name":"result_id=","args":[{"name":"result_id","external_name":"result_id","restriction":"String"}],"visibility":"Public","body":"@result_id = result_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Common","path":"Hamilton/Types/Common.html","kind":"module","full_name":"Hamilton::Types::Common","name":"Common","abstract":false,"locations":[{"filename":"src/types/utils.cr","line_number":2,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"hamilton/Hamilton/Types/AcceptedGiftTypes","kind":"class","full_name":"Hamilton::Types::AcceptedGiftTypes","name":"AcceptedGiftTypes"},{"html_id":"hamilton/Hamilton/Types/AffiliateInfo","kind":"class","full_name":"Hamilton::Types::AffiliateInfo","name":"AffiliateInfo"},{"html_id":"hamilton/Hamilton/Types/Animation","kind":"class","full_name":"Hamilton::Types::Animation","name":"Animation"},{"html_id":"hamilton/Hamilton/Types/Audio","kind":"class","full_name":"Hamilton::Types::Audio","name":"Audio"},{"html_id":"hamilton/Hamilton/Types/BackgroundFillFreeformGradient","kind":"class","full_name":"Hamilton::Types::BackgroundFillFreeformGradient","name":"BackgroundFillFreeformGradient"},{"html_id":"hamilton/Hamilton/Types/BackgroundFillGradient","kind":"class","full_name":"Hamilton::Types::BackgroundFillGradient","name":"BackgroundFillGradient"},{"html_id":"hamilton/Hamilton/Types/BackgroundFillSolid","kind":"class","full_name":"Hamilton::Types::BackgroundFillSolid","name":"BackgroundFillSolid"},{"html_id":"hamilton/Hamilton/Types/BackgroundTypeChatTheme","kind":"class","full_name":"Hamilton::Types::BackgroundTypeChatTheme","name":"BackgroundTypeChatTheme"},{"html_id":"hamilton/Hamilton/Types/BackgroundTypeFill","kind":"class","full_name":"Hamilton::Types::BackgroundTypeFill","name":"BackgroundTypeFill"},{"html_id":"hamilton/Hamilton/Types/BackgroundTypePattern","kind":"class","full_name":"Hamilton::Types::BackgroundTypePattern","name":"BackgroundTypePattern"},{"html_id":"hamilton/Hamilton/Types/BackgroundTypeWallpaper","kind":"class","full_name":"Hamilton::Types::BackgroundTypeWallpaper","name":"BackgroundTypeWallpaper"},{"html_id":"hamilton/Hamilton/Types/Birthdate","kind":"class","full_name":"Hamilton::Types::Birthdate","name":"Birthdate"},{"html_id":"hamilton/Hamilton/Types/BotCommand","kind":"class","full_name":"Hamilton::Types::BotCommand","name":"BotCommand"},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeAllChatAdministrators","kind":"class","full_name":"Hamilton::Types::BotCommandScopeAllChatAdministrators","name":"BotCommandScopeAllChatAdministrators"},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeAllGroupChats","kind":"class","full_name":"Hamilton::Types::BotCommandScopeAllGroupChats","name":"BotCommandScopeAllGroupChats"},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeAllPrivateChats","kind":"class","full_name":"Hamilton::Types::BotCommandScopeAllPrivateChats","name":"BotCommandScopeAllPrivateChats"},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeChat","kind":"class","full_name":"Hamilton::Types::BotCommandScopeChat","name":"BotCommandScopeChat"},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeChatAdministrators","kind":"class","full_name":"Hamilton::Types::BotCommandScopeChatAdministrators","name":"BotCommandScopeChatAdministrators"},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeChatMember","kind":"class","full_name":"Hamilton::Types::BotCommandScopeChatMember","name":"BotCommandScopeChatMember"},{"html_id":"hamilton/Hamilton/Types/BotCommandScopeDefault","kind":"class","full_name":"Hamilton::Types::BotCommandScopeDefault","name":"BotCommandScopeDefault"},{"html_id":"hamilton/Hamilton/Types/BotDescription","kind":"class","full_name":"Hamilton::Types::BotDescription","name":"BotDescription"},{"html_id":"hamilton/Hamilton/Types/BotName","kind":"class","full_name":"Hamilton::Types::BotName","name":"BotName"},{"html_id":"hamilton/Hamilton/Types/BotShortDescription","kind":"class","full_name":"Hamilton::Types::BotShortDescription","name":"BotShortDescription"},{"html_id":"hamilton/Hamilton/Types/BusinessBotRights","kind":"class","full_name":"Hamilton::Types::BusinessBotRights","name":"BusinessBotRights"},{"html_id":"hamilton/Hamilton/Types/BusinessConnection","kind":"class","full_name":"Hamilton::Types::BusinessConnection","name":"BusinessConnection"},{"html_id":"hamilton/Hamilton/Types/BusinessIntro","kind":"class","full_name":"Hamilton::Types::BusinessIntro","name":"BusinessIntro"},{"html_id":"hamilton/Hamilton/Types/BusinessLocation","kind":"class","full_name":"Hamilton::Types::BusinessLocation","name":"BusinessLocation"},{"html_id":"hamilton/Hamilton/Types/BusinessMessagesDeleted","kind":"class","full_name":"Hamilton::Types::BusinessMessagesDeleted","name":"BusinessMessagesDeleted"},{"html_id":"hamilton/Hamilton/Types/BusinessOpeningHours","kind":"class","full_name":"Hamilton::Types::BusinessOpeningHours","name":"BusinessOpeningHours"},{"html_id":"hamilton/Hamilton/Types/BusinessOpeningHoursInterval","kind":"class","full_name":"Hamilton::Types::BusinessOpeningHoursInterval","name":"BusinessOpeningHoursInterval"},{"html_id":"hamilton/Hamilton/Types/CallbackGame","kind":"class","full_name":"Hamilton::Types::CallbackGame","name":"CallbackGame"},{"html_id":"hamilton/Hamilton/Types/CallbackQuery","kind":"class","full_name":"Hamilton::Types::CallbackQuery","name":"CallbackQuery"},{"html_id":"hamilton/Hamilton/Types/Chat","kind":"class","full_name":"Hamilton::Types::Chat","name":"Chat"},{"html_id":"hamilton/Hamilton/Types/ChatAdministratorRights","kind":"class","full_name":"Hamilton::Types::ChatAdministratorRights","name":"ChatAdministratorRights"},{"html_id":"hamilton/Hamilton/Types/ChatBackground","kind":"class","full_name":"Hamilton::Types::ChatBackground","name":"ChatBackground"},{"html_id":"hamilton/Hamilton/Types/ChatBoost","kind":"class","full_name":"Hamilton::Types::ChatBoost","name":"ChatBoost"},{"html_id":"hamilton/Hamilton/Types/ChatBoostAdded","kind":"class","full_name":"Hamilton::Types::ChatBoostAdded","name":"ChatBoostAdded"},{"html_id":"hamilton/Hamilton/Types/ChatBoostRemoved","kind":"class","full_name":"Hamilton::Types::ChatBoostRemoved","name":"ChatBoostRemoved"},{"html_id":"hamilton/Hamilton/Types/ChatBoostSourceGiftCode","kind":"class","full_name":"Hamilton::Types::ChatBoostSourceGiftCode","name":"ChatBoostSourceGiftCode"},{"html_id":"hamilton/Hamilton/Types/ChatBoostSourceGiveaway","kind":"class","full_name":"Hamilton::Types::ChatBoostSourceGiveaway","name":"ChatBoostSourceGiveaway"},{"html_id":"hamilton/Hamilton/Types/ChatBoostSourcePremium","kind":"class","full_name":"Hamilton::Types::ChatBoostSourcePremium","name":"ChatBoostSourcePremium"},{"html_id":"hamilton/Hamilton/Types/ChatBoostUpdated","kind":"class","full_name":"Hamilton::Types::ChatBoostUpdated","name":"ChatBoostUpdated"},{"html_id":"hamilton/Hamilton/Types/ChatFullInfo","kind":"class","full_name":"Hamilton::Types::ChatFullInfo","name":"ChatFullInfo"},{"html_id":"hamilton/Hamilton/Types/ChatInviteLink","kind":"class","full_name":"Hamilton::Types::ChatInviteLink","name":"ChatInviteLink"},{"html_id":"hamilton/Hamilton/Types/ChatJoinRequest","kind":"class","full_name":"Hamilton::Types::ChatJoinRequest","name":"ChatJoinRequest"},{"html_id":"hamilton/Hamilton/Types/ChatLocation","kind":"class","full_name":"Hamilton::Types::ChatLocation","name":"ChatLocation"},{"html_id":"hamilton/Hamilton/Types/ChatMemberAdministrator","kind":"class","full_name":"Hamilton::Types::ChatMemberAdministrator","name":"ChatMemberAdministrator"},{"html_id":"hamilton/Hamilton/Types/ChatMemberBanned","kind":"class","full_name":"Hamilton::Types::ChatMemberBanned","name":"ChatMemberBanned"},{"html_id":"hamilton/Hamilton/Types/ChatMemberLeft","kind":"class","full_name":"Hamilton::Types::ChatMemberLeft","name":"ChatMemberLeft"},{"html_id":"hamilton/Hamilton/Types/ChatMemberMember","kind":"class","full_name":"Hamilton::Types::ChatMemberMember","name":"ChatMemberMember"},{"html_id":"hamilton/Hamilton/Types/ChatMemberOwner","kind":"class","full_name":"Hamilton::Types::ChatMemberOwner","name":"ChatMemberOwner"},{"html_id":"hamilton/Hamilton/Types/ChatMemberRestricted","kind":"class","full_name":"Hamilton::Types::ChatMemberRestricted","name":"ChatMemberRestricted"},{"html_id":"hamilton/Hamilton/Types/ChatMemberUpdated","kind":"class","full_name":"Hamilton::Types::ChatMemberUpdated","name":"ChatMemberUpdated"},{"html_id":"hamilton/Hamilton/Types/ChatPermissions","kind":"class","full_name":"Hamilton::Types::ChatPermissions","name":"ChatPermissions"},{"html_id":"hamilton/Hamilton/Types/ChatPhoto","kind":"class","full_name":"Hamilton::Types::ChatPhoto","name":"ChatPhoto"},{"html_id":"hamilton/Hamilton/Types/ChatShared","kind":"class","full_name":"Hamilton::Types::ChatShared","name":"ChatShared"},{"html_id":"hamilton/Hamilton/Types/Checklist","kind":"class","full_name":"Hamilton::Types::Checklist","name":"Checklist"},{"html_id":"hamilton/Hamilton/Types/ChecklistTask","kind":"class","full_name":"Hamilton::Types::ChecklistTask","name":"ChecklistTask"},{"html_id":"hamilton/Hamilton/Types/ChecklistTasksAdded","kind":"class","full_name":"Hamilton::Types::ChecklistTasksAdded","name":"ChecklistTasksAdded"},{"html_id":"hamilton/Hamilton/Types/ChecklistTasksDone","kind":"class","full_name":"Hamilton::Types::ChecklistTasksDone","name":"ChecklistTasksDone"},{"html_id":"hamilton/Hamilton/Types/ChosenInlineResult","kind":"class","full_name":"Hamilton::Types::ChosenInlineResult","name":"ChosenInlineResult"},{"html_id":"hamilton/Hamilton/Types/Contact","kind":"class","full_name":"Hamilton::Types::Contact","name":"Contact"},{"html_id":"hamilton/Hamilton/Types/CopyTextButton","kind":"class","full_name":"Hamilton::Types::CopyTextButton","name":"CopyTextButton"},{"html_id":"hamilton/Hamilton/Types/Dice","kind":"class","full_name":"Hamilton::Types::Dice","name":"Dice"},{"html_id":"hamilton/Hamilton/Types/DirectMessagePriceChanged","kind":"class","full_name":"Hamilton::Types::DirectMessagePriceChanged","name":"DirectMessagePriceChanged"},{"html_id":"hamilton/Hamilton/Types/DirectMessagesTopic","kind":"class","full_name":"Hamilton::Types::DirectMessagesTopic","name":"DirectMessagesTopic"},{"html_id":"hamilton/Hamilton/Types/Document","kind":"class","full_name":"Hamilton::Types::Document","name":"Document"},{"html_id":"hamilton/Hamilton/Types/EncryptedCredentials","kind":"class","full_name":"Hamilton::Types::EncryptedCredentials","name":"EncryptedCredentials"},{"html_id":"hamilton/Hamilton/Types/EncryptedPassportElement","kind":"class","full_name":"Hamilton::Types::EncryptedPassportElement","name":"EncryptedPassportElement"},{"html_id":"hamilton/Hamilton/Types/ExternalReplyInfo","kind":"class","full_name":"Hamilton::Types::ExternalReplyInfo","name":"ExternalReplyInfo"},{"html_id":"hamilton/Hamilton/Types/File","kind":"class","full_name":"Hamilton::Types::File","name":"File"},{"html_id":"hamilton/Hamilton/Types/ForceReply","kind":"class","full_name":"Hamilton::Types::ForceReply","name":"ForceReply"},{"html_id":"hamilton/Hamilton/Types/ForumTopic","kind":"class","full_name":"Hamilton::Types::ForumTopic","name":"ForumTopic"},{"html_id":"hamilton/Hamilton/Types/ForumTopicClosed","kind":"class","full_name":"Hamilton::Types::ForumTopicClosed","name":"ForumTopicClosed"},{"html_id":"hamilton/Hamilton/Types/ForumTopicCreated","kind":"class","full_name":"Hamilton::Types::ForumTopicCreated","name":"ForumTopicCreated"},{"html_id":"hamilton/Hamilton/Types/ForumTopicEdited","kind":"class","full_name":"Hamilton::Types::ForumTopicEdited","name":"ForumTopicEdited"},{"html_id":"hamilton/Hamilton/Types/ForumTopicReopened","kind":"class","full_name":"Hamilton::Types::ForumTopicReopened","name":"ForumTopicReopened"},{"html_id":"hamilton/Hamilton/Types/Game","kind":"class","full_name":"Hamilton::Types::Game","name":"Game"},{"html_id":"hamilton/Hamilton/Types/GameHighScore","kind":"class","full_name":"Hamilton::Types::GameHighScore","name":"GameHighScore"},{"html_id":"hamilton/Hamilton/Types/GeneralForumTopicHidden","kind":"class","full_name":"Hamilton::Types::GeneralForumTopicHidden","name":"GeneralForumTopicHidden"},{"html_id":"hamilton/Hamilton/Types/GeneralForumTopicUnhidden","kind":"class","full_name":"Hamilton::Types::GeneralForumTopicUnhidden","name":"GeneralForumTopicUnhidden"},{"html_id":"hamilton/Hamilton/Types/Gift","kind":"class","full_name":"Hamilton::Types::Gift","name":"Gift"},{"html_id":"hamilton/Hamilton/Types/GiftInfo","kind":"class","full_name":"Hamilton::Types::GiftInfo","name":"GiftInfo"},{"html_id":"hamilton/Hamilton/Types/Gifts","kind":"class","full_name":"Hamilton::Types::Gifts","name":"Gifts"},{"html_id":"hamilton/Hamilton/Types/Giveaway","kind":"class","full_name":"Hamilton::Types::Giveaway","name":"Giveaway"},{"html_id":"hamilton/Hamilton/Types/GiveawayCompleted","kind":"class","full_name":"Hamilton::Types::GiveawayCompleted","name":"GiveawayCompleted"},{"html_id":"hamilton/Hamilton/Types/GiveawayCreated","kind":"class","full_name":"Hamilton::Types::GiveawayCreated","name":"GiveawayCreated"},{"html_id":"hamilton/Hamilton/Types/GiveawayWinners","kind":"class","full_name":"Hamilton::Types::GiveawayWinners","name":"GiveawayWinners"},{"html_id":"hamilton/Hamilton/Types/InaccessibleMessage","kind":"class","full_name":"Hamilton::Types::InaccessibleMessage","name":"InaccessibleMessage"},{"html_id":"hamilton/Hamilton/Types/InlineKeyboardButton","kind":"class","full_name":"Hamilton::Types::InlineKeyboardButton","name":"InlineKeyboardButton"},{"html_id":"hamilton/Hamilton/Types/InlineKeyboardMarkup","kind":"class","full_name":"Hamilton::Types::InlineKeyboardMarkup","name":"InlineKeyboardMarkup"},{"html_id":"hamilton/Hamilton/Types/InlineQuery","kind":"class","full_name":"Hamilton::Types::InlineQuery","name":"InlineQuery"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultArticle","kind":"class","full_name":"Hamilton::Types::InlineQueryResultArticle","name":"InlineQueryResultArticle"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultAudio","kind":"class","full_name":"Hamilton::Types::InlineQueryResultAudio","name":"InlineQueryResultAudio"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedAudio","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedAudio","name":"InlineQueryResultCachedAudio"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedDocument","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedDocument","name":"InlineQueryResultCachedDocument"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedGif","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedGif","name":"InlineQueryResultCachedGif"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedMpeg4Gif","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedMpeg4Gif","name":"InlineQueryResultCachedMpeg4Gif"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedPhoto","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedPhoto","name":"InlineQueryResultCachedPhoto"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedSticker","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedSticker","name":"InlineQueryResultCachedSticker"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedVideo","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedVideo","name":"InlineQueryResultCachedVideo"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedVoice","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedVoice","name":"InlineQueryResultCachedVoice"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultContact","kind":"class","full_name":"Hamilton::Types::InlineQueryResultContact","name":"InlineQueryResultContact"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultDocument","kind":"class","full_name":"Hamilton::Types::InlineQueryResultDocument","name":"InlineQueryResultDocument"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultGame","kind":"class","full_name":"Hamilton::Types::InlineQueryResultGame","name":"InlineQueryResultGame"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultGif","kind":"class","full_name":"Hamilton::Types::InlineQueryResultGif","name":"InlineQueryResultGif"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultLocation","kind":"class","full_name":"Hamilton::Types::InlineQueryResultLocation","name":"InlineQueryResultLocation"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultMpeg4Gif","kind":"class","full_name":"Hamilton::Types::InlineQueryResultMpeg4Gif","name":"InlineQueryResultMpeg4Gif"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultPhoto","kind":"class","full_name":"Hamilton::Types::InlineQueryResultPhoto","name":"InlineQueryResultPhoto"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultsButton","kind":"class","full_name":"Hamilton::Types::InlineQueryResultsButton","name":"InlineQueryResultsButton"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultVenue","kind":"class","full_name":"Hamilton::Types::InlineQueryResultVenue","name":"InlineQueryResultVenue"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultVideo","kind":"class","full_name":"Hamilton::Types::InlineQueryResultVideo","name":"InlineQueryResultVideo"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultVoice","kind":"class","full_name":"Hamilton::Types::InlineQueryResultVoice","name":"InlineQueryResultVoice"},{"html_id":"hamilton/Hamilton/Types/InputChecklist","kind":"class","full_name":"Hamilton::Types::InputChecklist","name":"InputChecklist"},{"html_id":"hamilton/Hamilton/Types/InputChecklistTask","kind":"class","full_name":"Hamilton::Types::InputChecklistTask","name":"InputChecklistTask"},{"html_id":"hamilton/Hamilton/Types/InputContactMessageContent","kind":"class","full_name":"Hamilton::Types::InputContactMessageContent","name":"InputContactMessageContent"},{"html_id":"hamilton/Hamilton/Types/InputFile","kind":"class","full_name":"Hamilton::Types::InputFile","name":"InputFile"},{"html_id":"hamilton/Hamilton/Types/InputInvoiceMessageContent","kind":"class","full_name":"Hamilton::Types::InputInvoiceMessageContent","name":"InputInvoiceMessageContent"},{"html_id":"hamilton/Hamilton/Types/InputLocationMessageContent","kind":"class","full_name":"Hamilton::Types::InputLocationMessageContent","name":"InputLocationMessageContent"},{"html_id":"hamilton/Hamilton/Types/InputMediaAnimation","kind":"class","full_name":"Hamilton::Types::InputMediaAnimation","name":"InputMediaAnimation"},{"html_id":"hamilton/Hamilton/Types/InputMediaAudio","kind":"class","full_name":"Hamilton::Types::InputMediaAudio","name":"InputMediaAudio"},{"html_id":"hamilton/Hamilton/Types/InputMediaDocument","kind":"class","full_name":"Hamilton::Types::InputMediaDocument","name":"InputMediaDocument"},{"html_id":"hamilton/Hamilton/Types/InputMediaPhoto","kind":"class","full_name":"Hamilton::Types::InputMediaPhoto","name":"InputMediaPhoto"},{"html_id":"hamilton/Hamilton/Types/InputMediaVideo","kind":"class","full_name":"Hamilton::Types::InputMediaVideo","name":"InputMediaVideo"},{"html_id":"hamilton/Hamilton/Types/InputPaidMediaPhoto","kind":"class","full_name":"Hamilton::Types::InputPaidMediaPhoto","name":"InputPaidMediaPhoto"},{"html_id":"hamilton/Hamilton/Types/InputPaidMediaVideo","kind":"class","full_name":"Hamilton::Types::InputPaidMediaVideo","name":"InputPaidMediaVideo"},{"html_id":"hamilton/Hamilton/Types/InputPollOption","kind":"class","full_name":"Hamilton::Types::InputPollOption","name":"InputPollOption"},{"html_id":"hamilton/Hamilton/Types/InputProfilePhotoAnimated","kind":"class","full_name":"Hamilton::Types::InputProfilePhotoAnimated","name":"InputProfilePhotoAnimated"},{"html_id":"hamilton/Hamilton/Types/InputProfilePhotoStatic","kind":"class","full_name":"Hamilton::Types::InputProfilePhotoStatic","name":"InputProfilePhotoStatic"},{"html_id":"hamilton/Hamilton/Types/InputSticker","kind":"class","full_name":"Hamilton::Types::InputSticker","name":"InputSticker"},{"html_id":"hamilton/Hamilton/Types/InputStoryContentPhoto","kind":"class","full_name":"Hamilton::Types::InputStoryContentPhoto","name":"InputStoryContentPhoto"},{"html_id":"hamilton/Hamilton/Types/InputStoryContentVideo","kind":"class","full_name":"Hamilton::Types::InputStoryContentVideo","name":"InputStoryContentVideo"},{"html_id":"hamilton/Hamilton/Types/InputTextMessageContent","kind":"class","full_name":"Hamilton::Types::InputTextMessageContent","name":"InputTextMessageContent"},{"html_id":"hamilton/Hamilton/Types/InputVenueMessageContent","kind":"class","full_name":"Hamilton::Types::InputVenueMessageContent","name":"InputVenueMessageContent"},{"html_id":"hamilton/Hamilton/Types/Invoice","kind":"class","full_name":"Hamilton::Types::Invoice","name":"Invoice"},{"html_id":"hamilton/Hamilton/Types/KeyboardButton","kind":"class","full_name":"Hamilton::Types::KeyboardButton","name":"KeyboardButton"},{"html_id":"hamilton/Hamilton/Types/KeyboardButtonPollType","kind":"class","full_name":"Hamilton::Types::KeyboardButtonPollType","name":"KeyboardButtonPollType"},{"html_id":"hamilton/Hamilton/Types/KeyboardButtonRequestChat","kind":"class","full_name":"Hamilton::Types::KeyboardButtonRequestChat","name":"KeyboardButtonRequestChat"},{"html_id":"hamilton/Hamilton/Types/KeyboardButtonRequestUsers","kind":"class","full_name":"Hamilton::Types::KeyboardButtonRequestUsers","name":"KeyboardButtonRequestUsers"},{"html_id":"hamilton/Hamilton/Types/LabeledPrice","kind":"class","full_name":"Hamilton::Types::LabeledPrice","name":"LabeledPrice"},{"html_id":"hamilton/Hamilton/Types/LinkPreviewOptions","kind":"class","full_name":"Hamilton::Types::LinkPreviewOptions","name":"LinkPreviewOptions"},{"html_id":"hamilton/Hamilton/Types/Location","kind":"class","full_name":"Hamilton::Types::Location","name":"Location"},{"html_id":"hamilton/Hamilton/Types/LocationAddress","kind":"class","full_name":"Hamilton::Types::LocationAddress","name":"LocationAddress"},{"html_id":"hamilton/Hamilton/Types/LoginUrl","kind":"class","full_name":"Hamilton::Types::LoginUrl","name":"LoginUrl"},{"html_id":"hamilton/Hamilton/Types/MaskPosition","kind":"class","full_name":"Hamilton::Types::MaskPosition","name":"MaskPosition"},{"html_id":"hamilton/Hamilton/Types/MenuButtonCommands","kind":"class","full_name":"Hamilton::Types::MenuButtonCommands","name":"MenuButtonCommands"},{"html_id":"hamilton/Hamilton/Types/MenuButtonDefault","kind":"class","full_name":"Hamilton::Types::MenuButtonDefault","name":"MenuButtonDefault"},{"html_id":"hamilton/Hamilton/Types/MenuButtonWebApp","kind":"class","full_name":"Hamilton::Types::MenuButtonWebApp","name":"MenuButtonWebApp"},{"html_id":"hamilton/Hamilton/Types/Message","kind":"class","full_name":"Hamilton::Types::Message","name":"Message"},{"html_id":"hamilton/Hamilton/Types/MessageAutoDeleteTimerChanged","kind":"class","full_name":"Hamilton::Types::MessageAutoDeleteTimerChanged","name":"MessageAutoDeleteTimerChanged"},{"html_id":"hamilton/Hamilton/Types/MessageEntity","kind":"class","full_name":"Hamilton::Types::MessageEntity","name":"MessageEntity"},{"html_id":"hamilton/Hamilton/Types/MessageId","kind":"class","full_name":"Hamilton::Types::MessageId","name":"MessageId"},{"html_id":"hamilton/Hamilton/Types/MessageOriginChannel","kind":"class","full_name":"Hamilton::Types::MessageOriginChannel","name":"MessageOriginChannel"},{"html_id":"hamilton/Hamilton/Types/MessageOriginHiddenUser","kind":"class","full_name":"Hamilton::Types::MessageOriginHiddenUser","name":"MessageOriginHiddenUser"},{"html_id":"hamilton/Hamilton/Types/MessageOriginUser","kind":"class","full_name":"Hamilton::Types::MessageOriginUser","name":"MessageOriginUser"},{"html_id":"hamilton/Hamilton/Types/MessageReactionCountUpdated","kind":"class","full_name":"Hamilton::Types::MessageReactionCountUpdated","name":"MessageReactionCountUpdated"},{"html_id":"hamilton/Hamilton/Types/MessageReactionUpdated","kind":"class","full_name":"Hamilton::Types::MessageReactionUpdated","name":"MessageReactionUpdated"},{"html_id":"hamilton/Hamilton/Types/OrderInfo","kind":"class","full_name":"Hamilton::Types::OrderInfo","name":"OrderInfo"},{"html_id":"hamilton/Hamilton/Types/OwnedGiftRegular","kind":"class","full_name":"Hamilton::Types::OwnedGiftRegular","name":"OwnedGiftRegular"},{"html_id":"hamilton/Hamilton/Types/OwnedGifts","kind":"class","full_name":"Hamilton::Types::OwnedGifts","name":"OwnedGifts"},{"html_id":"hamilton/Hamilton/Types/OwnedGiftUnique","kind":"class","full_name":"Hamilton::Types::OwnedGiftUnique","name":"OwnedGiftUnique"},{"html_id":"hamilton/Hamilton/Types/PaidMediaInfo","kind":"class","full_name":"Hamilton::Types::PaidMediaInfo","name":"PaidMediaInfo"},{"html_id":"hamilton/Hamilton/Types/PaidMediaPhoto","kind":"class","full_name":"Hamilton::Types::PaidMediaPhoto","name":"PaidMediaPhoto"},{"html_id":"hamilton/Hamilton/Types/PaidMediaPreview","kind":"class","full_name":"Hamilton::Types::PaidMediaPreview","name":"PaidMediaPreview"},{"html_id":"hamilton/Hamilton/Types/PaidMediaPurchased","kind":"class","full_name":"Hamilton::Types::PaidMediaPurchased","name":"PaidMediaPurchased"},{"html_id":"hamilton/Hamilton/Types/PaidMediaVideo","kind":"class","full_name":"Hamilton::Types::PaidMediaVideo","name":"PaidMediaVideo"},{"html_id":"hamilton/Hamilton/Types/PaidMessagePriceChanged","kind":"class","full_name":"Hamilton::Types::PaidMessagePriceChanged","name":"PaidMessagePriceChanged"},{"html_id":"hamilton/Hamilton/Types/PassportData","kind":"class","full_name":"Hamilton::Types::PassportData","name":"PassportData"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorDataField","kind":"class","full_name":"Hamilton::Types::PassportElementErrorDataField","name":"PassportElementErrorDataField"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorFile","kind":"class","full_name":"Hamilton::Types::PassportElementErrorFile","name":"PassportElementErrorFile"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorFiles","kind":"class","full_name":"Hamilton::Types::PassportElementErrorFiles","name":"PassportElementErrorFiles"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorFrontSide","kind":"class","full_name":"Hamilton::Types::PassportElementErrorFrontSide","name":"PassportElementErrorFrontSide"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorReverseSide","kind":"class","full_name":"Hamilton::Types::PassportElementErrorReverseSide","name":"PassportElementErrorReverseSide"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorSelfie","kind":"class","full_name":"Hamilton::Types::PassportElementErrorSelfie","name":"PassportElementErrorSelfie"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorTranslationFile","kind":"class","full_name":"Hamilton::Types::PassportElementErrorTranslationFile","name":"PassportElementErrorTranslationFile"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorTranslationFiles","kind":"class","full_name":"Hamilton::Types::PassportElementErrorTranslationFiles","name":"PassportElementErrorTranslationFiles"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorUnspecified","kind":"class","full_name":"Hamilton::Types::PassportElementErrorUnspecified","name":"PassportElementErrorUnspecified"},{"html_id":"hamilton/Hamilton/Types/PassportFile","kind":"class","full_name":"Hamilton::Types::PassportFile","name":"PassportFile"},{"html_id":"hamilton/Hamilton/Types/PhotoSize","kind":"class","full_name":"Hamilton::Types::PhotoSize","name":"PhotoSize"},{"html_id":"hamilton/Hamilton/Types/Poll","kind":"class","full_name":"Hamilton::Types::Poll","name":"Poll"},{"html_id":"hamilton/Hamilton/Types/PollAnswer","kind":"class","full_name":"Hamilton::Types::PollAnswer","name":"PollAnswer"},{"html_id":"hamilton/Hamilton/Types/PollOption","kind":"class","full_name":"Hamilton::Types::PollOption","name":"PollOption"},{"html_id":"hamilton/Hamilton/Types/PreCheckoutQuery","kind":"class","full_name":"Hamilton::Types::PreCheckoutQuery","name":"PreCheckoutQuery"},{"html_id":"hamilton/Hamilton/Types/PreparedInlineMessage","kind":"class","full_name":"Hamilton::Types::PreparedInlineMessage","name":"PreparedInlineMessage"},{"html_id":"hamilton/Hamilton/Types/ProximityAlertTriggered","kind":"class","full_name":"Hamilton::Types::ProximityAlertTriggered","name":"ProximityAlertTriggered"},{"html_id":"hamilton/Hamilton/Types/ReactionCount","kind":"class","full_name":"Hamilton::Types::ReactionCount","name":"ReactionCount"},{"html_id":"hamilton/Hamilton/Types/ReactionTypeCustomEmoji","kind":"class","full_name":"Hamilton::Types::ReactionTypeCustomEmoji","name":"ReactionTypeCustomEmoji"},{"html_id":"hamilton/Hamilton/Types/ReactionTypeEmoji","kind":"class","full_name":"Hamilton::Types::ReactionTypeEmoji","name":"ReactionTypeEmoji"},{"html_id":"hamilton/Hamilton/Types/ReactionTypePaid","kind":"class","full_name":"Hamilton::Types::ReactionTypePaid","name":"ReactionTypePaid"},{"html_id":"hamilton/Hamilton/Types/RefundedPayment","kind":"class","full_name":"Hamilton::Types::RefundedPayment","name":"RefundedPayment"},{"html_id":"hamilton/Hamilton/Types/ReplyKeyboardMarkup","kind":"class","full_name":"Hamilton::Types::ReplyKeyboardMarkup","name":"ReplyKeyboardMarkup"},{"html_id":"hamilton/Hamilton/Types/ReplyKeyboardRemove","kind":"class","full_name":"Hamilton::Types::ReplyKeyboardRemove","name":"ReplyKeyboardRemove"},{"html_id":"hamilton/Hamilton/Types/ReplyParameters","kind":"class","full_name":"Hamilton::Types::ReplyParameters","name":"ReplyParameters"},{"html_id":"hamilton/Hamilton/Types/ResponseParameters","kind":"class","full_name":"Hamilton::Types::ResponseParameters","name":"ResponseParameters"},{"html_id":"hamilton/Hamilton/Types/RevenueWithdrawalStateFailed","kind":"class","full_name":"Hamilton::Types::RevenueWithdrawalStateFailed","name":"RevenueWithdrawalStateFailed"},{"html_id":"hamilton/Hamilton/Types/RevenueWithdrawalStatePending","kind":"class","full_name":"Hamilton::Types::RevenueWithdrawalStatePending","name":"RevenueWithdrawalStatePending"},{"html_id":"hamilton/Hamilton/Types/RevenueWithdrawalStateSucceeded","kind":"class","full_name":"Hamilton::Types::RevenueWithdrawalStateSucceeded","name":"RevenueWithdrawalStateSucceeded"},{"html_id":"hamilton/Hamilton/Types/SentWebAppMessage","kind":"class","full_name":"Hamilton::Types::SentWebAppMessage","name":"SentWebAppMessage"},{"html_id":"hamilton/Hamilton/Types/SharedUser","kind":"class","full_name":"Hamilton::Types::SharedUser","name":"SharedUser"},{"html_id":"hamilton/Hamilton/Types/ShippingAddress","kind":"class","full_name":"Hamilton::Types::ShippingAddress","name":"ShippingAddress"},{"html_id":"hamilton/Hamilton/Types/ShippingOption","kind":"class","full_name":"Hamilton::Types::ShippingOption","name":"ShippingOption"},{"html_id":"hamilton/Hamilton/Types/ShippingQuery","kind":"class","full_name":"Hamilton::Types::ShippingQuery","name":"ShippingQuery"},{"html_id":"hamilton/Hamilton/Types/StarAmount","kind":"class","full_name":"Hamilton::Types::StarAmount","name":"StarAmount"},{"html_id":"hamilton/Hamilton/Types/StarTransaction","kind":"class","full_name":"Hamilton::Types::StarTransaction","name":"StarTransaction"},{"html_id":"hamilton/Hamilton/Types/StarTransactions","kind":"class","full_name":"Hamilton::Types::StarTransactions","name":"StarTransactions"},{"html_id":"hamilton/Hamilton/Types/Sticker","kind":"class","full_name":"Hamilton::Types::Sticker","name":"Sticker"},{"html_id":"hamilton/Hamilton/Types/StickerSet","kind":"class","full_name":"Hamilton::Types::StickerSet","name":"StickerSet"},{"html_id":"hamilton/Hamilton/Types/Story","kind":"class","full_name":"Hamilton::Types::Story","name":"Story"},{"html_id":"hamilton/Hamilton/Types/StoryArea","kind":"class","full_name":"Hamilton::Types::StoryArea","name":"StoryArea"},{"html_id":"hamilton/Hamilton/Types/StoryAreaPosition","kind":"class","full_name":"Hamilton::Types::StoryAreaPosition","name":"StoryAreaPosition"},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeLink","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeLink","name":"StoryAreaTypeLink"},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeLocation","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeLocation","name":"StoryAreaTypeLocation"},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeSuggestedReaction","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeSuggestedReaction","name":"StoryAreaTypeSuggestedReaction"},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeUniqueGift","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeUniqueGift","name":"StoryAreaTypeUniqueGift"},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeWeather","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeWeather","name":"StoryAreaTypeWeather"},{"html_id":"hamilton/Hamilton/Types/SuccessfulPayment","kind":"class","full_name":"Hamilton::Types::SuccessfulPayment","name":"SuccessfulPayment"},{"html_id":"hamilton/Hamilton/Types/SuggestedPostApprovalFailed","kind":"class","full_name":"Hamilton::Types::SuggestedPostApprovalFailed","name":"SuggestedPostApprovalFailed"},{"html_id":"hamilton/Hamilton/Types/SuggestedPostApproved","kind":"class","full_name":"Hamilton::Types::SuggestedPostApproved","name":"SuggestedPostApproved"},{"html_id":"hamilton/Hamilton/Types/SuggestedPostDeclined","kind":"class","full_name":"Hamilton::Types::SuggestedPostDeclined","name":"SuggestedPostDeclined"},{"html_id":"hamilton/Hamilton/Types/SuggestedPostInfo","kind":"class","full_name":"Hamilton::Types::SuggestedPostInfo","name":"SuggestedPostInfo"},{"html_id":"hamilton/Hamilton/Types/SuggestedPostPaid","kind":"class","full_name":"Hamilton::Types::SuggestedPostPaid","name":"SuggestedPostPaid"},{"html_id":"hamilton/Hamilton/Types/SuggestedPostParameters","kind":"class","full_name":"Hamilton::Types::SuggestedPostParameters","name":"SuggestedPostParameters"},{"html_id":"hamilton/Hamilton/Types/SuggestedPostPrice","kind":"class","full_name":"Hamilton::Types::SuggestedPostPrice","name":"SuggestedPostPrice"},{"html_id":"hamilton/Hamilton/Types/SuggestedPostRefunded","kind":"class","full_name":"Hamilton::Types::SuggestedPostRefunded","name":"SuggestedPostRefunded"},{"html_id":"hamilton/Hamilton/Types/SwitchInlineQueryChosenChat","kind":"class","full_name":"Hamilton::Types::SwitchInlineQueryChosenChat","name":"SwitchInlineQueryChosenChat"},{"html_id":"hamilton/Hamilton/Types/TextQuote","kind":"class","full_name":"Hamilton::Types::TextQuote","name":"TextQuote"},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerAffiliateProgram","kind":"class","full_name":"Hamilton::Types::TransactionPartnerAffiliateProgram","name":"TransactionPartnerAffiliateProgram"},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerChat","kind":"class","full_name":"Hamilton::Types::TransactionPartnerChat","name":"TransactionPartnerChat"},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerFragment","kind":"class","full_name":"Hamilton::Types::TransactionPartnerFragment","name":"TransactionPartnerFragment"},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerOther","kind":"class","full_name":"Hamilton::Types::TransactionPartnerOther","name":"TransactionPartnerOther"},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerTelegramAds","kind":"class","full_name":"Hamilton::Types::TransactionPartnerTelegramAds","name":"TransactionPartnerTelegramAds"},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerTelegramApi","kind":"class","full_name":"Hamilton::Types::TransactionPartnerTelegramApi","name":"TransactionPartnerTelegramApi"},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerUser","kind":"class","full_name":"Hamilton::Types::TransactionPartnerUser","name":"TransactionPartnerUser"},{"html_id":"hamilton/Hamilton/Types/UniqueGift","kind":"class","full_name":"Hamilton::Types::UniqueGift","name":"UniqueGift"},{"html_id":"hamilton/Hamilton/Types/UniqueGiftBackdrop","kind":"class","full_name":"Hamilton::Types::UniqueGiftBackdrop","name":"UniqueGiftBackdrop"},{"html_id":"hamilton/Hamilton/Types/UniqueGiftBackdropColors","kind":"class","full_name":"Hamilton::Types::UniqueGiftBackdropColors","name":"UniqueGiftBackdropColors"},{"html_id":"hamilton/Hamilton/Types/UniqueGiftInfo","kind":"class","full_name":"Hamilton::Types::UniqueGiftInfo","name":"UniqueGiftInfo"},{"html_id":"hamilton/Hamilton/Types/UniqueGiftModel","kind":"class","full_name":"Hamilton::Types::UniqueGiftModel","name":"UniqueGiftModel"},{"html_id":"hamilton/Hamilton/Types/UniqueGiftSymbol","kind":"class","full_name":"Hamilton::Types::UniqueGiftSymbol","name":"UniqueGiftSymbol"},{"html_id":"hamilton/Hamilton/Types/Update","kind":"class","full_name":"Hamilton::Types::Update","name":"Update"},{"html_id":"hamilton/Hamilton/Types/User","kind":"class","full_name":"Hamilton::Types::User","name":"User"},{"html_id":"hamilton/Hamilton/Types/UserChatBoosts","kind":"class","full_name":"Hamilton::Types::UserChatBoosts","name":"UserChatBoosts"},{"html_id":"hamilton/Hamilton/Types/UserProfilePhotos","kind":"class","full_name":"Hamilton::Types::UserProfilePhotos","name":"UserProfilePhotos"},{"html_id":"hamilton/Hamilton/Types/UsersShared","kind":"class","full_name":"Hamilton::Types::UsersShared","name":"UsersShared"},{"html_id":"hamilton/Hamilton/Types/Venue","kind":"class","full_name":"Hamilton::Types::Venue","name":"Venue"},{"html_id":"hamilton/Hamilton/Types/Video","kind":"class","full_name":"Hamilton::Types::Video","name":"Video"},{"html_id":"hamilton/Hamilton/Types/VideoChatEnded","kind":"class","full_name":"Hamilton::Types::VideoChatEnded","name":"VideoChatEnded"},{"html_id":"hamilton/Hamilton/Types/VideoChatParticipantsInvited","kind":"class","full_name":"Hamilton::Types::VideoChatParticipantsInvited","name":"VideoChatParticipantsInvited"},{"html_id":"hamilton/Hamilton/Types/VideoChatScheduled","kind":"class","full_name":"Hamilton::Types::VideoChatScheduled","name":"VideoChatScheduled"},{"html_id":"hamilton/Hamilton/Types/VideoChatStarted","kind":"class","full_name":"Hamilton::Types::VideoChatStarted","name":"VideoChatStarted"},{"html_id":"hamilton/Hamilton/Types/VideoNote","kind":"class","full_name":"Hamilton::Types::VideoNote","name":"VideoNote"},{"html_id":"hamilton/Hamilton/Types/Voice","kind":"class","full_name":"Hamilton::Types::Voice","name":"Voice"},{"html_id":"hamilton/Hamilton/Types/WebAppData","kind":"class","full_name":"Hamilton::Types::WebAppData","name":"WebAppData"},{"html_id":"hamilton/Hamilton/Types/WebAppInfo","kind":"class","full_name":"Hamilton::Types::WebAppInfo","name":"WebAppInfo"},{"html_id":"hamilton/Hamilton/Types/WebhookInfo","kind":"class","full_name":"Hamilton::Types::WebhookInfo","name":"WebhookInfo"},{"html_id":"hamilton/Hamilton/Types/WriteAccessAllowed","kind":"class","full_name":"Hamilton::Types::WriteAccessAllowed","name":"WriteAccessAllowed"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Module that encapsulates type construction and serialization logic (initialize from `**params` and `from_json`; `to_json`).","summary":"<p>Module that encapsulates type construction and serialization logic (initialize from <code>**params</code> and <code>from_json</code>; <code>to_json</code>).</p>","constructors":[{"html_id":"new(**params)-class-method","name":"new","abstract":false,"location":{"filename":"src/types/utils.cr","line_number":4,"url":null},"def":{"name":"new","double_splat":{"name":"params","external_name":"params","restriction":""},"visibility":"Public","body":"instance = ({{ @type.name }}).allocate\n{% for var, index in @type.instance_vars %} \n      {% unless var.name.stringify == \"non_nil_fields\" %}\n        {% if Nil <= var.type %}\n        instance.{{ var.name }} = params[{{ var.name.stringify }}]?\n        {% else %}\n        instance.{{ var.name }} = params[{{ var.name.stringify }}]\n        {% end %}\n      {% end %}   \n    {% end %}\n\ninstance.after_initialize\ninstance\n"},"external_var":false}],"instance_methods":[{"html_id":"non_nil_fields:Array(String)-instance-method","name":"non_nil_fields","doc":"List of available non-nil fields.","summary":"<p>List of available non-nil fields.</p>","abstract":false,"location":{"filename":"src/types/utils.cr","line_number":30,"url":null},"def":{"name":"non_nil_fields","return_type":"Array(String)","visibility":"Public","body":"@non_nil_fields"},"external_var":false},{"html_id":"non_nil_fields=(non_nil_fields:Array(String))-instance-method","name":"non_nil_fields=","doc":"List of available non-nil fields.","summary":"<p>List of available non-nil fields.</p>","abstract":false,"args":[{"name":"non_nil_fields","external_name":"non_nil_fields","restriction":"Array(String)"}],"args_string":"(non_nil_fields : Array(String))","args_html":"(non_nil_fields : Array(String))","location":{"filename":"src/types/utils.cr","line_number":30,"url":null},"def":{"name":"non_nil_fields=","args":[{"name":"non_nil_fields","external_name":"non_nil_fields","restriction":"Array(String)"}],"visibility":"Public","body":"@non_nil_fields = non_nil_fields"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Contact","path":"Hamilton/Types/Contact.html","kind":"class","full_name":"Hamilton::Types::Contact","name":"Contact","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/contact.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a phone contact.","summary":"<p>This object represents a phone contact.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/contact.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/contact.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"first_name:String-instance-method","name":"first_name","doc":"Contact's first name.","summary":"<p>Contact's first name.</p>","abstract":false,"location":{"filename":"src/types/contact.cr","line_number":14,"url":null},"def":{"name":"first_name","return_type":"String","visibility":"Public","body":"@first_name"},"external_var":false},{"html_id":"first_name=(first_name:String)-instance-method","name":"first_name=","doc":"Contact's first name.","summary":"<p>Contact's first name.</p>","abstract":false,"args":[{"name":"first_name","external_name":"first_name","restriction":"String"}],"args_string":"(first_name : String)","args_html":"(first_name : String)","location":{"filename":"src/types/contact.cr","line_number":14,"url":null},"def":{"name":"first_name=","args":[{"name":"first_name","external_name":"first_name","restriction":"String"}],"visibility":"Public","body":"@first_name = first_name"},"external_var":false},{"html_id":"last_name:String|Nil-instance-method","name":"last_name","doc":"Contact's last name.","summary":"<p>Contact's last name.</p>","abstract":false,"location":{"filename":"src/types/contact.cr","line_number":17,"url":null},"def":{"name":"last_name","return_type":"String | Nil","visibility":"Public","body":"@last_name"},"external_var":false},{"html_id":"last_name=(last_name:String|Nil)-instance-method","name":"last_name=","doc":"Contact's last name.","summary":"<p>Contact's last name.</p>","abstract":false,"args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"args_string":"(last_name : String | Nil)","args_html":"(last_name : String | Nil)","location":{"filename":"src/types/contact.cr","line_number":17,"url":null},"def":{"name":"last_name=","args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"visibility":"Public","body":"@last_name = last_name"},"external_var":false},{"html_id":"phone_number:String-instance-method","name":"phone_number","doc":"Contact's phone number.","summary":"<p>Contact's phone number.</p>","abstract":false,"location":{"filename":"src/types/contact.cr","line_number":11,"url":null},"def":{"name":"phone_number","return_type":"String","visibility":"Public","body":"@phone_number"},"external_var":false},{"html_id":"phone_number=(phone_number:String)-instance-method","name":"phone_number=","doc":"Contact's phone number.","summary":"<p>Contact's phone number.</p>","abstract":false,"args":[{"name":"phone_number","external_name":"phone_number","restriction":"String"}],"args_string":"(phone_number : String)","args_html":"(phone_number : String)","location":{"filename":"src/types/contact.cr","line_number":11,"url":null},"def":{"name":"phone_number=","args":[{"name":"phone_number","external_name":"phone_number","restriction":"String"}],"visibility":"Public","body":"@phone_number = phone_number"},"external_var":false},{"html_id":"user_id:Int64|Nil-instance-method","name":"user_id","doc":"Contact's user identifier in Telegram.","summary":"<p>Contact's user identifier in Telegram.</p>","abstract":false,"location":{"filename":"src/types/contact.cr","line_number":20,"url":null},"def":{"name":"user_id","return_type":"Int64 | Nil","visibility":"Public","body":"@user_id"},"external_var":false},{"html_id":"user_id=(user_id:Int64|Nil)-instance-method","name":"user_id=","doc":"Contact's user identifier in Telegram.","summary":"<p>Contact's user identifier in Telegram.</p>","abstract":false,"args":[{"name":"user_id","external_name":"user_id","restriction":"Int64 | Nil"}],"args_string":"(user_id : Int64 | Nil)","args_html":"(user_id : Int64 | Nil)","location":{"filename":"src/types/contact.cr","line_number":20,"url":null},"def":{"name":"user_id=","args":[{"name":"user_id","external_name":"user_id","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@user_id = user_id"},"external_var":false},{"html_id":"vcard:String|Nil-instance-method","name":"vcard","doc":"Additional data about the contact in the form of a vCard.","summary":"<p>Additional data about the contact in the form of a vCard.</p>","abstract":false,"location":{"filename":"src/types/contact.cr","line_number":23,"url":null},"def":{"name":"vcard","return_type":"String | Nil","visibility":"Public","body":"@vcard"},"external_var":false},{"html_id":"vcard=(vcard:String|Nil)-instance-method","name":"vcard=","doc":"Additional data about the contact in the form of a vCard.","summary":"<p>Additional data about the contact in the form of a vCard.</p>","abstract":false,"args":[{"name":"vcard","external_name":"vcard","restriction":"String | Nil"}],"args_string":"(vcard : String | Nil)","args_html":"(vcard : String | Nil)","location":{"filename":"src/types/contact.cr","line_number":23,"url":null},"def":{"name":"vcard=","args":[{"name":"vcard","external_name":"vcard","restriction":"String | Nil"}],"visibility":"Public","body":"@vcard = vcard"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/CopyTextButton","path":"Hamilton/Types/CopyTextButton.html","kind":"class","full_name":"Hamilton::Types::CopyTextButton","name":"CopyTextButton","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/copy_text_button.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an inline keyboard button that copies specified text to the clipboard.","summary":"<p>This object represents an inline keyboard button that copies specified text to the clipboard.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/copy_text_button.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/copy_text_button.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"text:String-instance-method","name":"text","doc":"The text to be copied to the clipboard; 1-256 characters.","summary":"<p>The text to be copied to the clipboard; 1-256 characters.</p>","abstract":false,"location":{"filename":"src/types/copy_text_button.cr","line_number":11,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"The text to be copied to the clipboard; 1-256 characters.","summary":"<p>The text to be copied to the clipboard; 1-256 characters.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/copy_text_button.cr","line_number":11,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Dice","path":"Hamilton/Types/Dice.html","kind":"class","full_name":"Hamilton::Types::Dice","name":"Dice","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/dice.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an animated emoji that displays a random value.","summary":"<p>This object represents an animated emoji that displays a random value.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/dice.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/dice.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"emoji:String-instance-method","name":"emoji","doc":"Emoji on which the dice throw animation is based.","summary":"<p>Emoji on which the dice throw animation is based.</p>","abstract":false,"location":{"filename":"src/types/dice.cr","line_number":11,"url":null},"def":{"name":"emoji","return_type":"String","visibility":"Public","body":"@emoji"},"external_var":false},{"html_id":"emoji=(emoji:String)-instance-method","name":"emoji=","doc":"Emoji on which the dice throw animation is based.","summary":"<p>Emoji on which the dice throw animation is based.</p>","abstract":false,"args":[{"name":"emoji","external_name":"emoji","restriction":"String"}],"args_string":"(emoji : String)","args_html":"(emoji : String)","location":{"filename":"src/types/dice.cr","line_number":11,"url":null},"def":{"name":"emoji=","args":[{"name":"emoji","external_name":"emoji","restriction":"String"}],"visibility":"Public","body":"@emoji = emoji"},"external_var":false},{"html_id":"value:Int32-instance-method","name":"value","doc":"Value of the dice, 1-6 for “🎲”, “🎯” and “🎳” base emoji, 1-5 for “🏀” and “⚽” base emoji, 1-64 for “🎰” base emoji.","summary":"<p>Value of the dice, 1-6 for “🎲”, “🎯” and “🎳” base emoji, 1-5 for “🏀” and “⚽” base emoji, 1-64 for “🎰” base emoji.</p>","abstract":false,"location":{"filename":"src/types/dice.cr","line_number":14,"url":null},"def":{"name":"value","return_type":"Int32","visibility":"Public","body":"@value"},"external_var":false},{"html_id":"value=(value:Int32)-instance-method","name":"value=","doc":"Value of the dice, 1-6 for “🎲”, “🎯” and “🎳” base emoji, 1-5 for “🏀” and “⚽” base emoji, 1-64 for “🎰” base emoji.","summary":"<p>Value of the dice, 1-6 for “🎲”, “🎯” and “🎳” base emoji, 1-5 for “🏀” and “⚽” base emoji, 1-64 for “🎰” base emoji.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","location":{"filename":"src/types/dice.cr","line_number":14,"url":null},"def":{"name":"value=","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"visibility":"Public","body":"@value = value"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/DirectMessagePriceChanged","path":"Hamilton/Types/DirectMessagePriceChanged.html","kind":"class","full_name":"Hamilton::Types::DirectMessagePriceChanged","name":"DirectMessagePriceChanged","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/direct_message_price_changed.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about a change in the price of direct messages sent to a channel chat.","summary":"<p>Describes a service message about a change in the price of direct messages sent to a channel chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/direct_message_price_changed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/direct_message_price_changed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"are_direct_messages_enabled:Bool-instance-method","name":"are_direct_messages_enabled","doc":"True, if direct messages are enabled for the channel chat; false otherwise","summary":"<p>True, if direct messages are enabled for the channel chat; false otherwise</p>","abstract":false,"location":{"filename":"src/types/direct_message_price_changed.cr","line_number":11,"url":null},"def":{"name":"are_direct_messages_enabled","return_type":"Bool","visibility":"Public","body":"@are_direct_messages_enabled"},"external_var":false},{"html_id":"are_direct_messages_enabled=(are_direct_messages_enabled:Bool)-instance-method","name":"are_direct_messages_enabled=","doc":"True, if direct messages are enabled for the channel chat; false otherwise","summary":"<p>True, if direct messages are enabled for the channel chat; false otherwise</p>","abstract":false,"args":[{"name":"are_direct_messages_enabled","external_name":"are_direct_messages_enabled","restriction":"Bool"}],"args_string":"(are_direct_messages_enabled : Bool)","args_html":"(are_direct_messages_enabled : Bool)","location":{"filename":"src/types/direct_message_price_changed.cr","line_number":11,"url":null},"def":{"name":"are_direct_messages_enabled=","args":[{"name":"are_direct_messages_enabled","external_name":"are_direct_messages_enabled","restriction":"Bool"}],"visibility":"Public","body":"@are_direct_messages_enabled = are_direct_messages_enabled"},"external_var":false},{"html_id":"direct_message_star_count:Int32|Nil-instance-method","name":"direct_message_star_count","doc":"The new number of Telegram Stars that must be paid by users for each direct message sent to the channel. Does not apply to users who have been exempted by administrators. Defaults to 0.","summary":"<p>The new number of Telegram Stars that must be paid by users for each direct message sent to the channel.</p>","abstract":false,"location":{"filename":"src/types/direct_message_price_changed.cr","line_number":14,"url":null},"def":{"name":"direct_message_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@direct_message_star_count"},"external_var":false},{"html_id":"direct_message_star_count=(direct_message_star_count:Int32|Nil)-instance-method","name":"direct_message_star_count=","doc":"The new number of Telegram Stars that must be paid by users for each direct message sent to the channel. Does not apply to users who have been exempted by administrators. Defaults to 0.","summary":"<p>The new number of Telegram Stars that must be paid by users for each direct message sent to the channel.</p>","abstract":false,"args":[{"name":"direct_message_star_count","external_name":"direct_message_star_count","restriction":"Int32 | Nil"}],"args_string":"(direct_message_star_count : Int32 | Nil)","args_html":"(direct_message_star_count : Int32 | Nil)","location":{"filename":"src/types/direct_message_price_changed.cr","line_number":14,"url":null},"def":{"name":"direct_message_star_count=","args":[{"name":"direct_message_star_count","external_name":"direct_message_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@direct_message_star_count = direct_message_star_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/DirectMessagesTopic","path":"Hamilton/Types/DirectMessagesTopic.html","kind":"class","full_name":"Hamilton::Types::DirectMessagesTopic","name":"DirectMessagesTopic","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/direct_messages_topic.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a topic of a direct messages chat.","summary":"<p>Describes a topic of a direct messages chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/direct_messages_topic.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/direct_messages_topic.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"topic_id:Int32-instance-method","name":"topic_id","doc":"Unique identifier of the topic","summary":"<p>Unique identifier of the topic</p>","abstract":false,"location":{"filename":"src/types/direct_messages_topic.cr","line_number":11,"url":null},"def":{"name":"topic_id","return_type":"Int32","visibility":"Public","body":"@topic_id"},"external_var":false},{"html_id":"topic_id=(topic_id:Int32)-instance-method","name":"topic_id=","doc":"Unique identifier of the topic","summary":"<p>Unique identifier of the topic</p>","abstract":false,"args":[{"name":"topic_id","external_name":"topic_id","restriction":"Int32"}],"args_string":"(topic_id : Int32)","args_html":"(topic_id : Int32)","location":{"filename":"src/types/direct_messages_topic.cr","line_number":11,"url":null},"def":{"name":"topic_id=","args":[{"name":"topic_id","external_name":"topic_id","restriction":"Int32"}],"visibility":"Public","body":"@topic_id = topic_id"},"external_var":false},{"html_id":"user:Hamilton::Types::User|Nil-instance-method","name":"user","doc":"Information about the user that created the topic. Currently, it is always present.","summary":"<p>Information about the user that created the topic.</p>","abstract":false,"location":{"filename":"src/types/direct_messages_topic.cr","line_number":14,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User|Nil)-instance-method","name":"user=","doc":"Information about the user that created the topic. Currently, it is always present.","summary":"<p>Information about the user that created the topic.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(user : Hamilton::Types::User | Nil)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/direct_messages_topic.cr","line_number":14,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Document","path":"Hamilton/Types/Document.html","kind":"class","full_name":"Hamilton::Types::Document","name":"Document","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/document.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a general file (as opposed to photos, voice messages and audio files).","summary":"<p>This object represents a general file (as opposed to photos, voice messages and audio files).</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/document.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/document.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/document.cr","line_number":11,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/document.cr","line_number":11,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_name:String|Nil-instance-method","name":"file_name","doc":"Original filename as defined by the sender.","summary":"<p>Original filename as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/document.cr","line_number":20,"url":null},"def":{"name":"file_name","return_type":"String | Nil","visibility":"Public","body":"@file_name"},"external_var":false},{"html_id":"file_name=(file_name:String|Nil)-instance-method","name":"file_name=","doc":"Original filename as defined by the sender.","summary":"<p>Original filename as defined by the sender.</p>","abstract":false,"args":[{"name":"file_name","external_name":"file_name","restriction":"String | Nil"}],"args_string":"(file_name : String | Nil)","args_html":"(file_name : String | Nil)","location":{"filename":"src/types/document.cr","line_number":20,"url":null},"def":{"name":"file_name=","args":[{"name":"file_name","external_name":"file_name","restriction":"String | Nil"}],"visibility":"Public","body":"@file_name = file_name"},"external_var":false},{"html_id":"file_size:Int64|Nil-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/document.cr","line_number":26,"url":null},"def":{"name":"file_size","return_type":"Int64 | Nil","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int64|Nil)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"args_string":"(file_size : Int64 | Nil)","args_html":"(file_size : Int64 | Nil)","location":{"filename":"src/types/document.cr","line_number":26,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/document.cr","line_number":14,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/document.cr","line_number":14,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false},{"html_id":"mime_type:String|Nil-instance-method","name":"mime_type","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/document.cr","line_number":23,"url":null},"def":{"name":"mime_type","return_type":"String | Nil","visibility":"Public","body":"@mime_type"},"external_var":false},{"html_id":"mime_type=(mime_type:String|Nil)-instance-method","name":"mime_type=","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"args_string":"(mime_type : String | Nil)","args_html":"(mime_type : String | Nil)","location":{"filename":"src/types/document.cr","line_number":23,"url":null},"def":{"name":"mime_type=","args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"visibility":"Public","body":"@mime_type = mime_type"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::PhotoSize|Nil-instance-method","name":"thumbnail","doc":"Document thumbnail as defined by the sender.","summary":"<p>Document thumbnail as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/document.cr","line_number":17,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::PhotoSize | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::PhotoSize|Nil)-instance-method","name":"thumbnail=","doc":"Document thumbnail as defined by the sender.","summary":"<p>Document thumbnail as defined by the sender.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"args_string":"(thumbnail : Hamilton::Types::PhotoSize | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a> | Nil)","location":{"filename":"src/types/document.cr","line_number":17,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/EncryptedCredentials","path":"Hamilton/Types/EncryptedCredentials.html","kind":"class","full_name":"Hamilton::Types::EncryptedCredentials","name":"EncryptedCredentials","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/encrypted_credentials.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes data required for decrypting and authenticating EncryptedPassportElement.","summary":"<p>Describes data required for decrypting and authenticating EncryptedPassportElement.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/encrypted_credentials.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/encrypted_credentials.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"data:String-instance-method","name":"data","doc":"Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for `EncryptedPassportElement` decryption and authentication.","summary":"<p>Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for <code><a href=\"../../Hamilton/Types/EncryptedPassportElement.html\">EncryptedPassportElement</a></code> decryption and authentication.</p>","abstract":false,"location":{"filename":"src/types/encrypted_credentials.cr","line_number":11,"url":null},"def":{"name":"data","return_type":"String","visibility":"Public","body":"@data"},"external_var":false},{"html_id":"data=(data:String)-instance-method","name":"data=","doc":"Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for `EncryptedPassportElement` decryption and authentication.","summary":"<p>Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for <code><a href=\"../../Hamilton/Types/EncryptedPassportElement.html\">EncryptedPassportElement</a></code> decryption and authentication.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"String"}],"args_string":"(data : String)","args_html":"(data : String)","location":{"filename":"src/types/encrypted_credentials.cr","line_number":11,"url":null},"def":{"name":"data=","args":[{"name":"data","external_name":"data","restriction":"String"}],"visibility":"Public","body":"@data = data"},"external_var":false},{"html_id":"hash:String-instance-method","name":"hash","doc":"Base64-encoded data hash for data authentication.","summary":"<p>Base64-encoded data hash for data authentication.</p>","abstract":false,"location":{"filename":"src/types/encrypted_credentials.cr","line_number":14,"url":null},"def":{"name":"hash","return_type":"String","visibility":"Public","body":"@hash"},"external_var":false},{"html_id":"hash=(hash:String)-instance-method","name":"hash=","doc":"Base64-encoded data hash for data authentication.","summary":"<p>Base64-encoded data hash for data authentication.</p>","abstract":false,"args":[{"name":"hash","external_name":"hash","restriction":"String"}],"args_string":"(hash : String)","args_html":"(hash : String)","location":{"filename":"src/types/encrypted_credentials.cr","line_number":14,"url":null},"def":{"name":"hash=","args":[{"name":"hash","external_name":"hash","restriction":"String"}],"visibility":"Public","body":"@hash = hash"},"external_var":false},{"html_id":"secret:String-instance-method","name":"secret","doc":"Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption.","summary":"<p>Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption.</p>","abstract":false,"location":{"filename":"src/types/encrypted_credentials.cr","line_number":17,"url":null},"def":{"name":"secret","return_type":"String","visibility":"Public","body":"@secret"},"external_var":false},{"html_id":"secret=(secret:String)-instance-method","name":"secret=","doc":"Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption.","summary":"<p>Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption.</p>","abstract":false,"args":[{"name":"secret","external_name":"secret","restriction":"String"}],"args_string":"(secret : String)","args_html":"(secret : String)","location":{"filename":"src/types/encrypted_credentials.cr","line_number":17,"url":null},"def":{"name":"secret=","args":[{"name":"secret","external_name":"secret","restriction":"String"}],"visibility":"Public","body":"@secret = secret"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/EncryptedPassportElement","path":"Hamilton/Types/EncryptedPassportElement.html","kind":"class","full_name":"Hamilton::Types::EncryptedPassportElement","name":"EncryptedPassportElement","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/encrypted_passport_element.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes documents or other Telegram Passport elements shared with the bot by the user.","summary":"<p>Describes documents or other Telegram Passport elements shared with the bot by the user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"data:String|Nil-instance-method","name":"data","doc":"Base64-encoded encrypted Telegram Passport element data provided by the user; available only for “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport” and “address” types. Can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Base64-encoded encrypted Telegram Passport element data provided by the user; available only for “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport” and “address” types.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":14,"url":null},"def":{"name":"data","return_type":"String | Nil","visibility":"Public","body":"@data"},"external_var":false},{"html_id":"data=(data:String|Nil)-instance-method","name":"data=","doc":"Base64-encoded encrypted Telegram Passport element data provided by the user; available only for “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport” and “address” types. Can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Base64-encoded encrypted Telegram Passport element data provided by the user; available only for “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport” and “address” types.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"String | Nil"}],"args_string":"(data : String | Nil)","args_html":"(data : String | Nil)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":14,"url":null},"def":{"name":"data=","args":[{"name":"data","external_name":"data","restriction":"String | Nil"}],"visibility":"Public","body":"@data = data"},"external_var":false},{"html_id":"email:String|Nil-instance-method","name":"email","doc":"User's verified email address; available only for “email” type.","summary":"<p>User's verified email address; available only for “email” type.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":20,"url":null},"def":{"name":"email","return_type":"String | Nil","visibility":"Public","body":"@email"},"external_var":false},{"html_id":"email=(email:String|Nil)-instance-method","name":"email=","doc":"User's verified email address; available only for “email” type.","summary":"<p>User's verified email address; available only for “email” type.</p>","abstract":false,"args":[{"name":"email","external_name":"email","restriction":"String | Nil"}],"args_string":"(email : String | Nil)","args_html":"(email : String | Nil)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":20,"url":null},"def":{"name":"email=","args":[{"name":"email","external_name":"email","restriction":"String | Nil"}],"visibility":"Public","body":"@email = email"},"external_var":false},{"html_id":"files:Array(Hamilton::Types::PassportFile)|Nil-instance-method","name":"files","doc":"Array of encrypted files with documents provided by the user; available only for “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Array of encrypted files with documents provided by the user; available only for “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":23,"url":null},"def":{"name":"files","return_type":"Array(Hamilton::Types::PassportFile) | Nil","visibility":"Public","body":"@files"},"external_var":false},{"html_id":"files=(files:Array(Hamilton::Types::PassportFile)|Nil)-instance-method","name":"files=","doc":"Array of encrypted files with documents provided by the user; available only for “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Array of encrypted files with documents provided by the user; available only for “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types.</p>","abstract":false,"args":[{"name":"files","external_name":"files","restriction":"Array(Hamilton::Types::PassportFile) | Nil"}],"args_string":"(files : Array(Hamilton::Types::PassportFile) | Nil)","args_html":"(files : Array(<a href=\"../../Hamilton/Types/PassportFile.html\">Hamilton::Types::PassportFile</a>) | Nil)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":23,"url":null},"def":{"name":"files=","args":[{"name":"files","external_name":"files","restriction":"Array(Hamilton::Types::PassportFile) | Nil"}],"visibility":"Public","body":"@files = files"},"external_var":false},{"html_id":"front_side:Hamilton::Types::PassportFile|Nil-instance-method","name":"front_side","doc":"Encrypted file with the front side of the document, provided by the user; available only for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Encrypted file with the front side of the document, provided by the user; available only for “passport”, “driver_license”, “identity_card” and “internal_passport”.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":26,"url":null},"def":{"name":"front_side","return_type":"Hamilton::Types::PassportFile | Nil","visibility":"Public","body":"@front_side"},"external_var":false},{"html_id":"front_side=(front_side:Hamilton::Types::PassportFile|Nil)-instance-method","name":"front_side=","doc":"Encrypted file with the front side of the document, provided by the user; available only for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Encrypted file with the front side of the document, provided by the user; available only for “passport”, “driver_license”, “identity_card” and “internal_passport”.</p>","abstract":false,"args":[{"name":"front_side","external_name":"front_side","restriction":"Hamilton::Types::PassportFile | Nil"}],"args_string":"(front_side : Hamilton::Types::PassportFile | Nil)","args_html":"(front_side : <a href=\"../../Hamilton/Types/PassportFile.html\">Hamilton::Types::PassportFile</a> | Nil)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":26,"url":null},"def":{"name":"front_side=","args":[{"name":"front_side","external_name":"front_side","restriction":"Hamilton::Types::PassportFile | Nil"}],"visibility":"Public","body":"@front_side = front_side"},"external_var":false},{"html_id":"hash:String-instance-method","name":"hash","doc":"Base64-encoded element hash for using in `PassportElementErrorUnspecified`.","summary":"<p>Base64-encoded element hash for using in <code><a href=\"../../Hamilton/Types/PassportElementErrorUnspecified.html\">PassportElementErrorUnspecified</a></code>.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":38,"url":null},"def":{"name":"hash","return_type":"String","visibility":"Public","body":"@hash"},"external_var":false},{"html_id":"hash=(hash:String)-instance-method","name":"hash=","doc":"Base64-encoded element hash for using in `PassportElementErrorUnspecified`.","summary":"<p>Base64-encoded element hash for using in <code><a href=\"../../Hamilton/Types/PassportElementErrorUnspecified.html\">PassportElementErrorUnspecified</a></code>.</p>","abstract":false,"args":[{"name":"hash","external_name":"hash","restriction":"String"}],"args_string":"(hash : String)","args_html":"(hash : String)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":38,"url":null},"def":{"name":"hash=","args":[{"name":"hash","external_name":"hash","restriction":"String"}],"visibility":"Public","body":"@hash = hash"},"external_var":false},{"html_id":"phone_number:String|Nil-instance-method","name":"phone_number","doc":"User's verified phone number; available only for “phone_number” type.","summary":"<p>User's verified phone number; available only for “phone_number” type.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":17,"url":null},"def":{"name":"phone_number","return_type":"String | Nil","visibility":"Public","body":"@phone_number"},"external_var":false},{"html_id":"phone_number=(phone_number:String|Nil)-instance-method","name":"phone_number=","doc":"User's verified phone number; available only for “phone_number” type.","summary":"<p>User's verified phone number; available only for “phone_number” type.</p>","abstract":false,"args":[{"name":"phone_number","external_name":"phone_number","restriction":"String | Nil"}],"args_string":"(phone_number : String | Nil)","args_html":"(phone_number : String | Nil)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":17,"url":null},"def":{"name":"phone_number=","args":[{"name":"phone_number","external_name":"phone_number","restriction":"String | Nil"}],"visibility":"Public","body":"@phone_number = phone_number"},"external_var":false},{"html_id":"reverse_side:Hamilton::Types::PassportFile|Nil-instance-method","name":"reverse_side","doc":"Encrypted file with the reverse side of the document, provided by the user; available only for “driver_license” and “identity_card”. The file can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Encrypted file with the reverse side of the document, provided by the user; available only for “driver_license” and “identity_card”.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":29,"url":null},"def":{"name":"reverse_side","return_type":"Hamilton::Types::PassportFile | Nil","visibility":"Public","body":"@reverse_side"},"external_var":false},{"html_id":"reverse_side=(reverse_side:Hamilton::Types::PassportFile|Nil)-instance-method","name":"reverse_side=","doc":"Encrypted file with the reverse side of the document, provided by the user; available only for “driver_license” and “identity_card”. The file can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Encrypted file with the reverse side of the document, provided by the user; available only for “driver_license” and “identity_card”.</p>","abstract":false,"args":[{"name":"reverse_side","external_name":"reverse_side","restriction":"Hamilton::Types::PassportFile | Nil"}],"args_string":"(reverse_side : Hamilton::Types::PassportFile | Nil)","args_html":"(reverse_side : <a href=\"../../Hamilton/Types/PassportFile.html\">Hamilton::Types::PassportFile</a> | Nil)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":29,"url":null},"def":{"name":"reverse_side=","args":[{"name":"reverse_side","external_name":"reverse_side","restriction":"Hamilton::Types::PassportFile | Nil"}],"visibility":"Public","body":"@reverse_side = reverse_side"},"external_var":false},{"html_id":"selfie:Hamilton::Types::PassportFile|Nil-instance-method","name":"selfie","doc":"Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for “passport”, “driver_license”, “identity_card” and “internal_passport”.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":32,"url":null},"def":{"name":"selfie","return_type":"Hamilton::Types::PassportFile | Nil","visibility":"Public","body":"@selfie"},"external_var":false},{"html_id":"selfie=(selfie:Hamilton::Types::PassportFile|Nil)-instance-method","name":"selfie=","doc":"Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for “passport”, “driver_license”, “identity_card” and “internal_passport”.</p>","abstract":false,"args":[{"name":"selfie","external_name":"selfie","restriction":"Hamilton::Types::PassportFile | Nil"}],"args_string":"(selfie : Hamilton::Types::PassportFile | Nil)","args_html":"(selfie : <a href=\"../../Hamilton/Types/PassportFile.html\">Hamilton::Types::PassportFile</a> | Nil)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":32,"url":null},"def":{"name":"selfie=","args":[{"name":"selfie","external_name":"selfie","restriction":"Hamilton::Types::PassportFile | Nil"}],"visibility":"Public","body":"@selfie = selfie"},"external_var":false},{"html_id":"translation:Array(Hamilton::Types::PassportFile)|Nil-instance-method","name":"translation","doc":"Array of encrypted files with translated versions of documents provided by the user; available if requested for “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Array of encrypted files with translated versions of documents provided by the user; available if requested for “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":35,"url":null},"def":{"name":"translation","return_type":"Array(Hamilton::Types::PassportFile) | Nil","visibility":"Public","body":"@translation"},"external_var":false},{"html_id":"translation=(translation:Array(Hamilton::Types::PassportFile)|Nil)-instance-method","name":"translation=","doc":"Array of encrypted files with translated versions of documents provided by the user; available if requested for “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying `EncryptedCredentials`.","summary":"<p>Array of encrypted files with translated versions of documents provided by the user; available if requested for “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types.</p>","abstract":false,"args":[{"name":"translation","external_name":"translation","restriction":"Array(Hamilton::Types::PassportFile) | Nil"}],"args_string":"(translation : Array(Hamilton::Types::PassportFile) | Nil)","args_html":"(translation : Array(<a href=\"../../Hamilton/Types/PassportFile.html\">Hamilton::Types::PassportFile</a>) | Nil)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":35,"url":null},"def":{"name":"translation=","args":[{"name":"translation","external_name":"translation","restriction":"Array(Hamilton::Types::PassportFile) | Nil"}],"visibility":"Public","body":"@translation = translation"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Element type. One of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”, “phone_number”, “email”.","summary":"<p>Element type.</p>","abstract":false,"location":{"filename":"src/types/encrypted_passport_element.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Element type. One of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”, “phone_number”, “email”.","summary":"<p>Element type.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/encrypted_passport_element.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ExternalReplyInfo","path":"Hamilton/Types/ExternalReplyInfo.html","kind":"class","full_name":"Hamilton::Types::ExternalReplyInfo","name":"ExternalReplyInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/external_reply_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about a message that is being replied to, which may come from another chat or forum topic.","summary":"<p>This object contains information about a message that is being replied to, which may come from another chat or forum topic.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/external_reply_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/external_reply_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"animation:Hamilton::Types::Animation|Nil-instance-method","name":"animation","doc":"Message is an animation, information about the animation.","summary":"<p>Message is an animation, information about the animation.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":23,"url":null},"def":{"name":"animation","return_type":"Hamilton::Types::Animation | Nil","visibility":"Public","body":"@animation"},"external_var":false},{"html_id":"animation=(animation:Hamilton::Types::Animation|Nil)-instance-method","name":"animation=","doc":"Message is an animation, information about the animation.","summary":"<p>Message is an animation, information about the animation.</p>","abstract":false,"args":[{"name":"animation","external_name":"animation","restriction":"Hamilton::Types::Animation | Nil"}],"args_string":"(animation : Hamilton::Types::Animation | Nil)","args_html":"(animation : <a href=\"../../Hamilton/Types/Animation.html\">Hamilton::Types::Animation</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":23,"url":null},"def":{"name":"animation=","args":[{"name":"animation","external_name":"animation","restriction":"Hamilton::Types::Animation | Nil"}],"visibility":"Public","body":"@animation = animation"},"external_var":false},{"html_id":"audio:Hamilton::Types::Audio|Nil-instance-method","name":"audio","doc":"Message is an audio file, information about the file.","summary":"<p>Message is an audio file, information about the file.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":26,"url":null},"def":{"name":"audio","return_type":"Hamilton::Types::Audio | Nil","visibility":"Public","body":"@audio"},"external_var":false},{"html_id":"audio=(audio:Hamilton::Types::Audio|Nil)-instance-method","name":"audio=","doc":"Message is an audio file, information about the file.","summary":"<p>Message is an audio file, information about the file.</p>","abstract":false,"args":[{"name":"audio","external_name":"audio","restriction":"Hamilton::Types::Audio | Nil"}],"args_string":"(audio : Hamilton::Types::Audio | Nil)","args_html":"(audio : <a href=\"../../Hamilton/Types/Audio.html\">Hamilton::Types::Audio</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":26,"url":null},"def":{"name":"audio=","args":[{"name":"audio","external_name":"audio","restriction":"Hamilton::Types::Audio | Nil"}],"visibility":"Public","body":"@audio = audio"},"external_var":false},{"html_id":"chat:Hamilton::Types::Chat|Nil-instance-method","name":"chat","doc":"Chat the original message belongs to. Available only if the chat is a supergroup or a channel.","summary":"<p>Chat the original message belongs to.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":14,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat | Nil","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat|Nil)-instance-method","name":"chat=","doc":"Chat the original message belongs to. Available only if the chat is a supergroup or a channel.","summary":"<p>Chat the original message belongs to.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat | Nil"}],"args_string":"(chat : Hamilton::Types::Chat | Nil)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":14,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat | Nil"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"checklist:Hamilton::Types::Checklist|Nil-instance-method","name":"checklist","doc":"Message is a checklist.","summary":"<p>Message is a checklist.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":56,"url":null},"def":{"name":"checklist","return_type":"Hamilton::Types::Checklist | Nil","visibility":"Public","body":"@checklist"},"external_var":false},{"html_id":"checklist=(checklist:Hamilton::Types::Checklist|Nil)-instance-method","name":"checklist=","doc":"Message is a checklist.","summary":"<p>Message is a checklist.</p>","abstract":false,"args":[{"name":"checklist","external_name":"checklist","restriction":"Hamilton::Types::Checklist | Nil"}],"args_string":"(checklist : Hamilton::Types::Checklist | Nil)","args_html":"(checklist : <a href=\"../../Hamilton/Types/Checklist.html\">Hamilton::Types::Checklist</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":56,"url":null},"def":{"name":"checklist=","args":[{"name":"checklist","external_name":"checklist","restriction":"Hamilton::Types::Checklist | Nil"}],"visibility":"Public","body":"@checklist = checklist"},"external_var":false},{"html_id":"contact:Hamilton::Types::Contact|Nil-instance-method","name":"contact","doc":"Message is a shared contact, information about the contact.","summary":"<p>Message is a shared contact, information about the contact.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":59,"url":null},"def":{"name":"contact","return_type":"Hamilton::Types::Contact | Nil","visibility":"Public","body":"@contact"},"external_var":false},{"html_id":"contact=(contact:Hamilton::Types::Contact|Nil)-instance-method","name":"contact=","doc":"Message is a shared contact, information about the contact.","summary":"<p>Message is a shared contact, information about the contact.</p>","abstract":false,"args":[{"name":"contact","external_name":"contact","restriction":"Hamilton::Types::Contact | Nil"}],"args_string":"(contact : Hamilton::Types::Contact | Nil)","args_html":"(contact : <a href=\"../../Hamilton/Types/Contact.html\">Hamilton::Types::Contact</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":59,"url":null},"def":{"name":"contact=","args":[{"name":"contact","external_name":"contact","restriction":"Hamilton::Types::Contact | Nil"}],"visibility":"Public","body":"@contact = contact"},"external_var":false},{"html_id":"dice:Hamilton::Types::Dice|Nil-instance-method","name":"dice","doc":"Message is a dice with random value.","summary":"<p>Message is a dice with random value.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":62,"url":null},"def":{"name":"dice","return_type":"Hamilton::Types::Dice | Nil","visibility":"Public","body":"@dice"},"external_var":false},{"html_id":"dice=(dice:Hamilton::Types::Dice|Nil)-instance-method","name":"dice=","doc":"Message is a dice with random value.","summary":"<p>Message is a dice with random value.</p>","abstract":false,"args":[{"name":"dice","external_name":"dice","restriction":"Hamilton::Types::Dice | Nil"}],"args_string":"(dice : Hamilton::Types::Dice | Nil)","args_html":"(dice : <a href=\"../../Hamilton/Types/Dice.html\">Hamilton::Types::Dice</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":62,"url":null},"def":{"name":"dice=","args":[{"name":"dice","external_name":"dice","restriction":"Hamilton::Types::Dice | Nil"}],"visibility":"Public","body":"@dice = dice"},"external_var":false},{"html_id":"document:Hamilton::Types::Document|Nil-instance-method","name":"document","doc":"Message is a general file, information about the file.","summary":"<p>Message is a general file, information about the file.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":29,"url":null},"def":{"name":"document","return_type":"Hamilton::Types::Document | Nil","visibility":"Public","body":"@document"},"external_var":false},{"html_id":"document=(document:Hamilton::Types::Document|Nil)-instance-method","name":"document=","doc":"Message is a general file, information about the file.","summary":"<p>Message is a general file, information about the file.</p>","abstract":false,"args":[{"name":"document","external_name":"document","restriction":"Hamilton::Types::Document | Nil"}],"args_string":"(document : Hamilton::Types::Document | Nil)","args_html":"(document : <a href=\"../../Hamilton/Types/Document.html\">Hamilton::Types::Document</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":29,"url":null},"def":{"name":"document=","args":[{"name":"document","external_name":"document","restriction":"Hamilton::Types::Document | Nil"}],"visibility":"Public","body":"@document = document"},"external_var":false},{"html_id":"game:Hamilton::Types::Game|Nil-instance-method","name":"game","doc":"Message is a game, information about the game.","summary":"<p>Message is a game, information about the game.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":65,"url":null},"def":{"name":"game","return_type":"Hamilton::Types::Game | Nil","visibility":"Public","body":"@game"},"external_var":false},{"html_id":"game=(game:Hamilton::Types::Game|Nil)-instance-method","name":"game=","doc":"Message is a game, information about the game.","summary":"<p>Message is a game, information about the game.</p>","abstract":false,"args":[{"name":"game","external_name":"game","restriction":"Hamilton::Types::Game | Nil"}],"args_string":"(game : Hamilton::Types::Game | Nil)","args_html":"(game : <a href=\"../../Hamilton/Types/Game.html\">Hamilton::Types::Game</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":65,"url":null},"def":{"name":"game=","args":[{"name":"game","external_name":"game","restriction":"Hamilton::Types::Game | Nil"}],"visibility":"Public","body":"@game = game"},"external_var":false},{"html_id":"giveaway:Hamilton::Types::Giveaway|Nil-instance-method","name":"giveaway","doc":"Message is a scheduled giveaway, information about the giveaway.","summary":"<p>Message is a scheduled giveaway, information about the giveaway.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":68,"url":null},"def":{"name":"giveaway","return_type":"Hamilton::Types::Giveaway | Nil","visibility":"Public","body":"@giveaway"},"external_var":false},{"html_id":"giveaway=(giveaway:Hamilton::Types::Giveaway|Nil)-instance-method","name":"giveaway=","doc":"Message is a scheduled giveaway, information about the giveaway.","summary":"<p>Message is a scheduled giveaway, information about the giveaway.</p>","abstract":false,"args":[{"name":"giveaway","external_name":"giveaway","restriction":"Hamilton::Types::Giveaway | Nil"}],"args_string":"(giveaway : Hamilton::Types::Giveaway | Nil)","args_html":"(giveaway : <a href=\"../../Hamilton/Types/Giveaway.html\">Hamilton::Types::Giveaway</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":68,"url":null},"def":{"name":"giveaway=","args":[{"name":"giveaway","external_name":"giveaway","restriction":"Hamilton::Types::Giveaway | Nil"}],"visibility":"Public","body":"@giveaway = giveaway"},"external_var":false},{"html_id":"giveaway_winners:Hamilton::Types::GiveawayWinners|Nil-instance-method","name":"giveaway_winners","doc":"A giveaway with public winners was completed.","summary":"<p>A giveaway with public winners was completed.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":71,"url":null},"def":{"name":"giveaway_winners","return_type":"Hamilton::Types::GiveawayWinners | Nil","visibility":"Public","body":"@giveaway_winners"},"external_var":false},{"html_id":"giveaway_winners=(giveaway_winners:Hamilton::Types::GiveawayWinners|Nil)-instance-method","name":"giveaway_winners=","doc":"A giveaway with public winners was completed.","summary":"<p>A giveaway with public winners was completed.</p>","abstract":false,"args":[{"name":"giveaway_winners","external_name":"giveaway_winners","restriction":"Hamilton::Types::GiveawayWinners | Nil"}],"args_string":"(giveaway_winners : Hamilton::Types::GiveawayWinners | Nil)","args_html":"(giveaway_winners : <a href=\"../../Hamilton/Types/GiveawayWinners.html\">Hamilton::Types::GiveawayWinners</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":71,"url":null},"def":{"name":"giveaway_winners=","args":[{"name":"giveaway_winners","external_name":"giveaway_winners","restriction":"Hamilton::Types::GiveawayWinners | Nil"}],"visibility":"Public","body":"@giveaway_winners = giveaway_winners"},"external_var":false},{"html_id":"has_media_spoiler:Bool|Nil-instance-method","name":"has_media_spoiler","doc":"True, if the message media is covered by a spoiler animation.","summary":"<p>True, if the message media is covered by a spoiler animation.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":53,"url":null},"def":{"name":"has_media_spoiler","return_type":"Bool | Nil","visibility":"Public","body":"@has_media_spoiler"},"external_var":false},{"html_id":"has_media_spoiler=(has_media_spoiler:Bool|Nil)-instance-method","name":"has_media_spoiler=","doc":"True, if the message media is covered by a spoiler animation.","summary":"<p>True, if the message media is covered by a spoiler animation.</p>","abstract":false,"args":[{"name":"has_media_spoiler","external_name":"has_media_spoiler","restriction":"Bool | Nil"}],"args_string":"(has_media_spoiler : Bool | Nil)","args_html":"(has_media_spoiler : Bool | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":53,"url":null},"def":{"name":"has_media_spoiler=","args":[{"name":"has_media_spoiler","external_name":"has_media_spoiler","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_media_spoiler = has_media_spoiler"},"external_var":false},{"html_id":"invoice:Hamilton::Types::Invoice|Nil-instance-method","name":"invoice","doc":"Message is an invoice for a payment, information about the invoice.","summary":"<p>Message is an invoice for a payment, information about the invoice.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":74,"url":null},"def":{"name":"invoice","return_type":"Hamilton::Types::Invoice | Nil","visibility":"Public","body":"@invoice"},"external_var":false},{"html_id":"invoice=(invoice:Hamilton::Types::Invoice|Nil)-instance-method","name":"invoice=","doc":"Message is an invoice for a payment, information about the invoice.","summary":"<p>Message is an invoice for a payment, information about the invoice.</p>","abstract":false,"args":[{"name":"invoice","external_name":"invoice","restriction":"Hamilton::Types::Invoice | Nil"}],"args_string":"(invoice : Hamilton::Types::Invoice | Nil)","args_html":"(invoice : <a href=\"../../Hamilton/Types/Invoice.html\">Hamilton::Types::Invoice</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":74,"url":null},"def":{"name":"invoice=","args":[{"name":"invoice","external_name":"invoice","restriction":"Hamilton::Types::Invoice | Nil"}],"visibility":"Public","body":"@invoice = invoice"},"external_var":false},{"html_id":"link_preview_options:Hamilton::Types::LinkPreviewOptions|Nil-instance-method","name":"link_preview_options","doc":"Options used for link preview generation for the original message, if it is a text message.","summary":"<p>Options used for link preview generation for the original message, if it is a text message.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":20,"url":null},"def":{"name":"link_preview_options","return_type":"Hamilton::Types::LinkPreviewOptions | Nil","visibility":"Public","body":"@link_preview_options"},"external_var":false},{"html_id":"link_preview_options=(link_preview_options:Hamilton::Types::LinkPreviewOptions|Nil)-instance-method","name":"link_preview_options=","doc":"Options used for link preview generation for the original message, if it is a text message.","summary":"<p>Options used for link preview generation for the original message, if it is a text message.</p>","abstract":false,"args":[{"name":"link_preview_options","external_name":"link_preview_options","restriction":"Hamilton::Types::LinkPreviewOptions | Nil"}],"args_string":"(link_preview_options : Hamilton::Types::LinkPreviewOptions | Nil)","args_html":"(link_preview_options : <a href=\"../../Hamilton/Types/LinkPreviewOptions.html\">Hamilton::Types::LinkPreviewOptions</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":20,"url":null},"def":{"name":"link_preview_options=","args":[{"name":"link_preview_options","external_name":"link_preview_options","restriction":"Hamilton::Types::LinkPreviewOptions | Nil"}],"visibility":"Public","body":"@link_preview_options = link_preview_options"},"external_var":false},{"html_id":"location:Hamilton::Types::Location|Nil-instance-method","name":"location","doc":"Message is a shared location, information about the location.","summary":"<p>Message is a shared location, information about the location.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":77,"url":null},"def":{"name":"location","return_type":"Hamilton::Types::Location | Nil","visibility":"Public","body":"@location"},"external_var":false},{"html_id":"location=(location:Hamilton::Types::Location|Nil)-instance-method","name":"location=","doc":"Message is a shared location, information about the location.","summary":"<p>Message is a shared location, information about the location.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"args_string":"(location : Hamilton::Types::Location | Nil)","args_html":"(location : <a href=\"../../Hamilton/Types/Location.html\">Hamilton::Types::Location</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":77,"url":null},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"visibility":"Public","body":"@location = location"},"external_var":false},{"html_id":"message_id:Int32|Nil-instance-method","name":"message_id","doc":"Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel.","summary":"<p>Unique message identifier inside the original chat.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":17,"url":null},"def":{"name":"message_id","return_type":"Int32 | Nil","visibility":"Public","body":"@message_id"},"external_var":false},{"html_id":"message_id=(message_id:Int32|Nil)-instance-method","name":"message_id=","doc":"Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel.","summary":"<p>Unique message identifier inside the original chat.</p>","abstract":false,"args":[{"name":"message_id","external_name":"message_id","restriction":"Int32 | Nil"}],"args_string":"(message_id : Int32 | Nil)","args_html":"(message_id : Int32 | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":17,"url":null},"def":{"name":"message_id=","args":[{"name":"message_id","external_name":"message_id","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@message_id = message_id"},"external_var":false},{"html_id":"origin:Hamilton::Types::MessageOrigin-instance-method","name":"origin","doc":"Origin of the message replied to by the given message.","summary":"<p>Origin of the message replied to by the given message.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":11,"url":null},"def":{"name":"origin","return_type":"Hamilton::Types::MessageOrigin","visibility":"Public","body":"@origin"},"external_var":false},{"html_id":"origin=(origin:Hamilton::Types::MessageOrigin)-instance-method","name":"origin=","doc":"Origin of the message replied to by the given message.","summary":"<p>Origin of the message replied to by the given message.</p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"Hamilton::Types::MessageOrigin"}],"args_string":"(origin : Hamilton::Types::MessageOrigin)","args_html":"(origin : <a href=\"../../Hamilton/Types/MessageOrigin.html\">Hamilton::Types::MessageOrigin</a>)","location":{"filename":"src/types/external_reply_info.cr","line_number":11,"url":null},"def":{"name":"origin=","args":[{"name":"origin","external_name":"origin","restriction":"Hamilton::Types::MessageOrigin"}],"visibility":"Public","body":"@origin = origin"},"external_var":false},{"html_id":"paid_media:Hamilton::Types::PaidMediaInfo|Nil-instance-method","name":"paid_media","doc":"Message contains paid media; information about the paid media.","summary":"<p>Message contains paid media; information about the paid media.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":32,"url":null},"def":{"name":"paid_media","return_type":"Hamilton::Types::PaidMediaInfo | Nil","visibility":"Public","body":"@paid_media"},"external_var":false},{"html_id":"paid_media=(paid_media:Hamilton::Types::PaidMediaInfo|Nil)-instance-method","name":"paid_media=","doc":"Message contains paid media; information about the paid media.","summary":"<p>Message contains paid media; information about the paid media.</p>","abstract":false,"args":[{"name":"paid_media","external_name":"paid_media","restriction":"Hamilton::Types::PaidMediaInfo | Nil"}],"args_string":"(paid_media : Hamilton::Types::PaidMediaInfo | Nil)","args_html":"(paid_media : <a href=\"../../Hamilton/Types/PaidMediaInfo.html\">Hamilton::Types::PaidMediaInfo</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":32,"url":null},"def":{"name":"paid_media=","args":[{"name":"paid_media","external_name":"paid_media","restriction":"Hamilton::Types::PaidMediaInfo | Nil"}],"visibility":"Public","body":"@paid_media = paid_media"},"external_var":false},{"html_id":"photo:Array(Hamilton::Types::PhotoSize)|Nil-instance-method","name":"photo","doc":"Message is a photo, available sizes of the photo.","summary":"<p>Message is a photo, available sizes of the photo.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":35,"url":null},"def":{"name":"photo","return_type":"Array(Hamilton::Types::PhotoSize) | Nil","visibility":"Public","body":"@photo"},"external_var":false},{"html_id":"photo=(photo:Array(Hamilton::Types::PhotoSize)|Nil)-instance-method","name":"photo=","doc":"Message is a photo, available sizes of the photo.","summary":"<p>Message is a photo, available sizes of the photo.</p>","abstract":false,"args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"args_string":"(photo : Array(Hamilton::Types::PhotoSize) | Nil)","args_html":"(photo : Array(<a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a>) | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":35,"url":null},"def":{"name":"photo=","args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"visibility":"Public","body":"@photo = photo"},"external_var":false},{"html_id":"poll:Hamilton::Types::Poll|Nil-instance-method","name":"poll","doc":"Message is a native poll, information about the poll.","summary":"<p>Message is a native poll, information about the poll.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":80,"url":null},"def":{"name":"poll","return_type":"Hamilton::Types::Poll | Nil","visibility":"Public","body":"@poll"},"external_var":false},{"html_id":"poll=(poll:Hamilton::Types::Poll|Nil)-instance-method","name":"poll=","doc":"Message is a native poll, information about the poll.","summary":"<p>Message is a native poll, information about the poll.</p>","abstract":false,"args":[{"name":"poll","external_name":"poll","restriction":"Hamilton::Types::Poll | Nil"}],"args_string":"(poll : Hamilton::Types::Poll | Nil)","args_html":"(poll : <a href=\"../../Hamilton/Types/Poll.html\">Hamilton::Types::Poll</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":80,"url":null},"def":{"name":"poll=","args":[{"name":"poll","external_name":"poll","restriction":"Hamilton::Types::Poll | Nil"}],"visibility":"Public","body":"@poll = poll"},"external_var":false},{"html_id":"sticker:Hamilton::Types::Sticker|Nil-instance-method","name":"sticker","doc":"Message is a sticker, information about the sticker.","summary":"<p>Message is a sticker, information about the sticker.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":38,"url":null},"def":{"name":"sticker","return_type":"Hamilton::Types::Sticker | Nil","visibility":"Public","body":"@sticker"},"external_var":false},{"html_id":"sticker=(sticker:Hamilton::Types::Sticker|Nil)-instance-method","name":"sticker=","doc":"Message is a sticker, information about the sticker.","summary":"<p>Message is a sticker, information about the sticker.</p>","abstract":false,"args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker | Nil"}],"args_string":"(sticker : Hamilton::Types::Sticker | Nil)","args_html":"(sticker : <a href=\"../../Hamilton/Types/Sticker.html\">Hamilton::Types::Sticker</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":38,"url":null},"def":{"name":"sticker=","args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker | Nil"}],"visibility":"Public","body":"@sticker = sticker"},"external_var":false},{"html_id":"story:Hamilton::Types::Story|Nil-instance-method","name":"story","doc":"Message is a forwarded story.","summary":"<p>Message is a forwarded story.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":41,"url":null},"def":{"name":"story","return_type":"Hamilton::Types::Story | Nil","visibility":"Public","body":"@story"},"external_var":false},{"html_id":"story=(story:Hamilton::Types::Story|Nil)-instance-method","name":"story=","doc":"Message is a forwarded story.","summary":"<p>Message is a forwarded story.</p>","abstract":false,"args":[{"name":"story","external_name":"story","restriction":"Hamilton::Types::Story | Nil"}],"args_string":"(story : Hamilton::Types::Story | Nil)","args_html":"(story : <a href=\"../../Hamilton/Types/Story.html\">Hamilton::Types::Story</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":41,"url":null},"def":{"name":"story=","args":[{"name":"story","external_name":"story","restriction":"Hamilton::Types::Story | Nil"}],"visibility":"Public","body":"@story = story"},"external_var":false},{"html_id":"venue:Hamilton::Types::Venue|Nil-instance-method","name":"venue","doc":"Message is a venue, information about the venue.","summary":"<p>Message is a venue, information about the venue.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":83,"url":null},"def":{"name":"venue","return_type":"Hamilton::Types::Venue | Nil","visibility":"Public","body":"@venue"},"external_var":false},{"html_id":"venue=(venue:Hamilton::Types::Venue|Nil)-instance-method","name":"venue=","doc":"Message is a venue, information about the venue.","summary":"<p>Message is a venue, information about the venue.</p>","abstract":false,"args":[{"name":"venue","external_name":"venue","restriction":"Hamilton::Types::Venue | Nil"}],"args_string":"(venue : Hamilton::Types::Venue | Nil)","args_html":"(venue : <a href=\"../../Hamilton/Types/Venue.html\">Hamilton::Types::Venue</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":83,"url":null},"def":{"name":"venue=","args":[{"name":"venue","external_name":"venue","restriction":"Hamilton::Types::Venue | Nil"}],"visibility":"Public","body":"@venue = venue"},"external_var":false},{"html_id":"video:Hamilton::Types::Video|Nil-instance-method","name":"video","doc":"Message is a video, information about the video.","summary":"<p>Message is a video, information about the video.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":44,"url":null},"def":{"name":"video","return_type":"Hamilton::Types::Video | Nil","visibility":"Public","body":"@video"},"external_var":false},{"html_id":"video=(video:Hamilton::Types::Video|Nil)-instance-method","name":"video=","doc":"Message is a video, information about the video.","summary":"<p>Message is a video, information about the video.</p>","abstract":false,"args":[{"name":"video","external_name":"video","restriction":"Hamilton::Types::Video | Nil"}],"args_string":"(video : Hamilton::Types::Video | Nil)","args_html":"(video : <a href=\"../../Hamilton/Types/Video.html\">Hamilton::Types::Video</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":44,"url":null},"def":{"name":"video=","args":[{"name":"video","external_name":"video","restriction":"Hamilton::Types::Video | Nil"}],"visibility":"Public","body":"@video = video"},"external_var":false},{"html_id":"video_note:Hamilton::Types::VideoNote|Nil-instance-method","name":"video_note","doc":"Message is a video note, information about the video message.","summary":"<p>Message is a video note, information about the video message.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":47,"url":null},"def":{"name":"video_note","return_type":"Hamilton::Types::VideoNote | Nil","visibility":"Public","body":"@video_note"},"external_var":false},{"html_id":"video_note=(video_note:Hamilton::Types::VideoNote|Nil)-instance-method","name":"video_note=","doc":"Message is a video note, information about the video message.","summary":"<p>Message is a video note, information about the video message.</p>","abstract":false,"args":[{"name":"video_note","external_name":"video_note","restriction":"Hamilton::Types::VideoNote | Nil"}],"args_string":"(video_note : Hamilton::Types::VideoNote | Nil)","args_html":"(video_note : <a href=\"../../Hamilton/Types/VideoNote.html\">Hamilton::Types::VideoNote</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":47,"url":null},"def":{"name":"video_note=","args":[{"name":"video_note","external_name":"video_note","restriction":"Hamilton::Types::VideoNote | Nil"}],"visibility":"Public","body":"@video_note = video_note"},"external_var":false},{"html_id":"voice:Hamilton::Types::Voice|Nil-instance-method","name":"voice","doc":"Message is a voice message, information about the file.","summary":"<p>Message is a voice message, information about the file.</p>","abstract":false,"location":{"filename":"src/types/external_reply_info.cr","line_number":50,"url":null},"def":{"name":"voice","return_type":"Hamilton::Types::Voice | Nil","visibility":"Public","body":"@voice"},"external_var":false},{"html_id":"voice=(voice:Hamilton::Types::Voice|Nil)-instance-method","name":"voice=","doc":"Message is a voice message, information about the file.","summary":"<p>Message is a voice message, information about the file.</p>","abstract":false,"args":[{"name":"voice","external_name":"voice","restriction":"Hamilton::Types::Voice | Nil"}],"args_string":"(voice : Hamilton::Types::Voice | Nil)","args_html":"(voice : <a href=\"../../Hamilton/Types/Voice.html\">Hamilton::Types::Voice</a> | Nil)","location":{"filename":"src/types/external_reply_info.cr","line_number":50,"url":null},"def":{"name":"voice=","args":[{"name":"voice","external_name":"voice","restriction":"Hamilton::Types::Voice | Nil"}],"visibility":"Public","body":"@voice = voice"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/File","path":"Hamilton/Types/File.html","kind":"class","full_name":"Hamilton::Types::File","name":"File","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/file.cr","line_number":8,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.\n\nNOTE: The maximum file size to download is 20 MB.","summary":"<p>This object represents a file ready to be downloaded.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/file.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/file.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/file.cr","line_number":13,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/file.cr","line_number":13,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_path:String|Nil-instance-method","name":"file_path","doc":"File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.","summary":"<p>File path.</p>","abstract":false,"location":{"filename":"src/types/file.cr","line_number":22,"url":null},"def":{"name":"file_path","return_type":"String | Nil","visibility":"Public","body":"@file_path"},"external_var":false},{"html_id":"file_path=(file_path:String|Nil)-instance-method","name":"file_path=","doc":"File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.","summary":"<p>File path.</p>","abstract":false,"args":[{"name":"file_path","external_name":"file_path","restriction":"String | Nil"}],"args_string":"(file_path : String | Nil)","args_html":"(file_path : String | Nil)","location":{"filename":"src/types/file.cr","line_number":22,"url":null},"def":{"name":"file_path=","args":[{"name":"file_path","external_name":"file_path","restriction":"String | Nil"}],"visibility":"Public","body":"@file_path = file_path"},"external_var":false},{"html_id":"file_size:Int64|Nil-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/file.cr","line_number":19,"url":null},"def":{"name":"file_size","return_type":"Int64 | Nil","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int64|Nil)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"args_string":"(file_size : Int64 | Nil)","args_html":"(file_size : Int64 | Nil)","location":{"filename":"src/types/file.cr","line_number":19,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/file.cr","line_number":16,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/file.cr","line_number":16,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ForceReply","path":"Hamilton/Types/ForceReply.html","kind":"class","full_name":"Hamilton::Types::ForceReply","name":"ForceReply","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/force_reply.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode. Not supported in channels and for messages sent on behalf of a Telegram Business account.","summary":"<p>Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply').</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/force_reply.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/force_reply.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"force_reply:Bool-instance-method","name":"force_reply","doc":"Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'","summary":"<p>Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'</p>","abstract":false,"location":{"filename":"src/types/force_reply.cr","line_number":11,"url":null},"def":{"name":"force_reply","return_type":"Bool","visibility":"Public","body":"@force_reply"},"external_var":false},{"html_id":"force_reply=(force_reply:Bool)-instance-method","name":"force_reply=","doc":"Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'","summary":"<p>Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'</p>","abstract":false,"args":[{"name":"force_reply","external_name":"force_reply","restriction":"Bool"}],"args_string":"(force_reply : Bool)","args_html":"(force_reply : Bool)","location":{"filename":"src/types/force_reply.cr","line_number":11,"url":null},"def":{"name":"force_reply=","args":[{"name":"force_reply","external_name":"force_reply","restriction":"Bool"}],"visibility":"Public","body":"@force_reply = force_reply"},"external_var":false},{"html_id":"input_field_placeholder:String|Nil-instance-method","name":"input_field_placeholder","doc":"The placeholder to be shown in the input field when the reply is active; 1-64 characters.","summary":"<p>The placeholder to be shown in the input field when the reply is active; 1-64 characters.</p>","abstract":false,"location":{"filename":"src/types/force_reply.cr","line_number":14,"url":null},"def":{"name":"input_field_placeholder","return_type":"String | Nil","visibility":"Public","body":"@input_field_placeholder"},"external_var":false},{"html_id":"input_field_placeholder=(input_field_placeholder:String|Nil)-instance-method","name":"input_field_placeholder=","doc":"The placeholder to be shown in the input field when the reply is active; 1-64 characters.","summary":"<p>The placeholder to be shown in the input field when the reply is active; 1-64 characters.</p>","abstract":false,"args":[{"name":"input_field_placeholder","external_name":"input_field_placeholder","restriction":"String | Nil"}],"args_string":"(input_field_placeholder : String | Nil)","args_html":"(input_field_placeholder : String | Nil)","location":{"filename":"src/types/force_reply.cr","line_number":14,"url":null},"def":{"name":"input_field_placeholder=","args":[{"name":"input_field_placeholder","external_name":"input_field_placeholder","restriction":"String | Nil"}],"visibility":"Public","body":"@input_field_placeholder = input_field_placeholder"},"external_var":false},{"html_id":"selective:Bool|Nil-instance-method","name":"selective","doc":"Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.","summary":"<p>Use this parameter if you want to force reply from specific users only.</p>","abstract":false,"location":{"filename":"src/types/force_reply.cr","line_number":17,"url":null},"def":{"name":"selective","return_type":"Bool | Nil","visibility":"Public","body":"@selective"},"external_var":false},{"html_id":"selective=(selective:Bool|Nil)-instance-method","name":"selective=","doc":"Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.","summary":"<p>Use this parameter if you want to force reply from specific users only.</p>","abstract":false,"args":[{"name":"selective","external_name":"selective","restriction":"Bool | Nil"}],"args_string":"(selective : Bool | Nil)","args_html":"(selective : Bool | Nil)","location":{"filename":"src/types/force_reply.cr","line_number":17,"url":null},"def":{"name":"selective=","args":[{"name":"selective","external_name":"selective","restriction":"Bool | Nil"}],"visibility":"Public","body":"@selective = selective"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ForumTopic","path":"Hamilton/Types/ForumTopic.html","kind":"class","full_name":"Hamilton::Types::ForumTopic","name":"ForumTopic","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/forum_topic.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a forum topic.","summary":"<p>This object represents a forum topic.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"icon_color:Int32-instance-method","name":"icon_color","doc":"Color of the topic icon in RGB format.","summary":"<p>Color of the topic icon in RGB format.</p>","abstract":false,"location":{"filename":"src/types/forum_topic.cr","line_number":17,"url":null},"def":{"name":"icon_color","return_type":"Int32","visibility":"Public","body":"@icon_color"},"external_var":false},{"html_id":"icon_color=(icon_color:Int32)-instance-method","name":"icon_color=","doc":"Color of the topic icon in RGB format.","summary":"<p>Color of the topic icon in RGB format.</p>","abstract":false,"args":[{"name":"icon_color","external_name":"icon_color","restriction":"Int32"}],"args_string":"(icon_color : Int32)","args_html":"(icon_color : Int32)","location":{"filename":"src/types/forum_topic.cr","line_number":17,"url":null},"def":{"name":"icon_color=","args":[{"name":"icon_color","external_name":"icon_color","restriction":"Int32"}],"visibility":"Public","body":"@icon_color = icon_color"},"external_var":false},{"html_id":"icon_custom_emoji_id:String|Nil-instance-method","name":"icon_custom_emoji_id","doc":"Unique identifier of the custom emoji shown as the topic icon.","summary":"<p>Unique identifier of the custom emoji shown as the topic icon.</p>","abstract":false,"location":{"filename":"src/types/forum_topic.cr","line_number":20,"url":null},"def":{"name":"icon_custom_emoji_id","return_type":"String | Nil","visibility":"Public","body":"@icon_custom_emoji_id"},"external_var":false},{"html_id":"icon_custom_emoji_id=(icon_custom_emoji_id:String|Nil)-instance-method","name":"icon_custom_emoji_id=","doc":"Unique identifier of the custom emoji shown as the topic icon.","summary":"<p>Unique identifier of the custom emoji shown as the topic icon.</p>","abstract":false,"args":[{"name":"icon_custom_emoji_id","external_name":"icon_custom_emoji_id","restriction":"String | Nil"}],"args_string":"(icon_custom_emoji_id : String | Nil)","args_html":"(icon_custom_emoji_id : String | Nil)","location":{"filename":"src/types/forum_topic.cr","line_number":20,"url":null},"def":{"name":"icon_custom_emoji_id=","args":[{"name":"icon_custom_emoji_id","external_name":"icon_custom_emoji_id","restriction":"String | Nil"}],"visibility":"Public","body":"@icon_custom_emoji_id = icon_custom_emoji_id"},"external_var":false},{"html_id":"message_thread_id:Int32-instance-method","name":"message_thread_id","doc":"Unique identifier of the forum topic.","summary":"<p>Unique identifier of the forum topic.</p>","abstract":false,"location":{"filename":"src/types/forum_topic.cr","line_number":11,"url":null},"def":{"name":"message_thread_id","return_type":"Int32","visibility":"Public","body":"@message_thread_id"},"external_var":false},{"html_id":"message_thread_id=(message_thread_id:Int32)-instance-method","name":"message_thread_id=","doc":"Unique identifier of the forum topic.","summary":"<p>Unique identifier of the forum topic.</p>","abstract":false,"args":[{"name":"message_thread_id","external_name":"message_thread_id","restriction":"Int32"}],"args_string":"(message_thread_id : Int32)","args_html":"(message_thread_id : Int32)","location":{"filename":"src/types/forum_topic.cr","line_number":11,"url":null},"def":{"name":"message_thread_id=","args":[{"name":"message_thread_id","external_name":"message_thread_id","restriction":"Int32"}],"visibility":"Public","body":"@message_thread_id = message_thread_id"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","doc":"Name of the topic.","summary":"<p>Name of the topic.</p>","abstract":false,"location":{"filename":"src/types/forum_topic.cr","line_number":14,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"Name of the topic.","summary":"<p>Name of the topic.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/types/forum_topic.cr","line_number":14,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ForumTopicClosed","path":"Hamilton/Types/ForumTopicClosed.html","kind":"class","full_name":"Hamilton::Types::ForumTopicClosed","name":"ForumTopicClosed","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/forum_topic_closed.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about a forum topic closed in the chat. Currently holds no information.","summary":"<p>This object represents a service message about a forum topic closed in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic_closed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic_closed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ForumTopicCreated","path":"Hamilton/Types/ForumTopicCreated.html","kind":"class","full_name":"Hamilton::Types::ForumTopicCreated","name":"ForumTopicCreated","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/forum_topic_created.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about a new forum topic created in the chat.","summary":"<p>This object represents a service message about a new forum topic created in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic_created.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic_created.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"icon_color:Int32-instance-method","name":"icon_color","doc":"Color of the topic icon in RGB format.","summary":"<p>Color of the topic icon in RGB format.</p>","abstract":false,"location":{"filename":"src/types/forum_topic_created.cr","line_number":14,"url":null},"def":{"name":"icon_color","return_type":"Int32","visibility":"Public","body":"@icon_color"},"external_var":false},{"html_id":"icon_color=(icon_color:Int32)-instance-method","name":"icon_color=","doc":"Color of the topic icon in RGB format.","summary":"<p>Color of the topic icon in RGB format.</p>","abstract":false,"args":[{"name":"icon_color","external_name":"icon_color","restriction":"Int32"}],"args_string":"(icon_color : Int32)","args_html":"(icon_color : Int32)","location":{"filename":"src/types/forum_topic_created.cr","line_number":14,"url":null},"def":{"name":"icon_color=","args":[{"name":"icon_color","external_name":"icon_color","restriction":"Int32"}],"visibility":"Public","body":"@icon_color = icon_color"},"external_var":false},{"html_id":"icon_custom_emoji_id:String|Nil-instance-method","name":"icon_custom_emoji_id","doc":"Unique identifier of the custom emoji shown as the topic icon.","summary":"<p>Unique identifier of the custom emoji shown as the topic icon.</p>","abstract":false,"location":{"filename":"src/types/forum_topic_created.cr","line_number":17,"url":null},"def":{"name":"icon_custom_emoji_id","return_type":"String | Nil","visibility":"Public","body":"@icon_custom_emoji_id"},"external_var":false},{"html_id":"icon_custom_emoji_id=(icon_custom_emoji_id:String|Nil)-instance-method","name":"icon_custom_emoji_id=","doc":"Unique identifier of the custom emoji shown as the topic icon.","summary":"<p>Unique identifier of the custom emoji shown as the topic icon.</p>","abstract":false,"args":[{"name":"icon_custom_emoji_id","external_name":"icon_custom_emoji_id","restriction":"String | Nil"}],"args_string":"(icon_custom_emoji_id : String | Nil)","args_html":"(icon_custom_emoji_id : String | Nil)","location":{"filename":"src/types/forum_topic_created.cr","line_number":17,"url":null},"def":{"name":"icon_custom_emoji_id=","args":[{"name":"icon_custom_emoji_id","external_name":"icon_custom_emoji_id","restriction":"String | Nil"}],"visibility":"Public","body":"@icon_custom_emoji_id = icon_custom_emoji_id"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","doc":"Name of the topic.","summary":"<p>Name of the topic.</p>","abstract":false,"location":{"filename":"src/types/forum_topic_created.cr","line_number":11,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"Name of the topic.","summary":"<p>Name of the topic.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/types/forum_topic_created.cr","line_number":11,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ForumTopicEdited","path":"Hamilton/Types/ForumTopicEdited.html","kind":"class","full_name":"Hamilton::Types::ForumTopicEdited","name":"ForumTopicEdited","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/forum_topic_edited.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about an edited forum topic.","summary":"<p>This object represents a service message about an edited forum topic.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic_edited.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic_edited.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"icon_custom_emoji_id:String|Nil-instance-method","name":"icon_custom_emoji_id","doc":"New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed.","summary":"<p>New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed.</p>","abstract":false,"location":{"filename":"src/types/forum_topic_edited.cr","line_number":14,"url":null},"def":{"name":"icon_custom_emoji_id","return_type":"String | Nil","visibility":"Public","body":"@icon_custom_emoji_id"},"external_var":false},{"html_id":"icon_custom_emoji_id=(icon_custom_emoji_id:String|Nil)-instance-method","name":"icon_custom_emoji_id=","doc":"New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed.","summary":"<p>New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed.</p>","abstract":false,"args":[{"name":"icon_custom_emoji_id","external_name":"icon_custom_emoji_id","restriction":"String | Nil"}],"args_string":"(icon_custom_emoji_id : String | Nil)","args_html":"(icon_custom_emoji_id : String | Nil)","location":{"filename":"src/types/forum_topic_edited.cr","line_number":14,"url":null},"def":{"name":"icon_custom_emoji_id=","args":[{"name":"icon_custom_emoji_id","external_name":"icon_custom_emoji_id","restriction":"String | Nil"}],"visibility":"Public","body":"@icon_custom_emoji_id = icon_custom_emoji_id"},"external_var":false},{"html_id":"name:String|Nil-instance-method","name":"name","doc":"New name of the topic, if it was edited.","summary":"<p>New name of the topic, if it was edited.</p>","abstract":false,"location":{"filename":"src/types/forum_topic_edited.cr","line_number":11,"url":null},"def":{"name":"name","return_type":"String | Nil","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String|Nil)-instance-method","name":"name=","doc":"New name of the topic, if it was edited.","summary":"<p>New name of the topic, if it was edited.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | Nil"}],"args_string":"(name : String | Nil)","args_html":"(name : String | Nil)","location":{"filename":"src/types/forum_topic_edited.cr","line_number":11,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String | Nil"}],"visibility":"Public","body":"@name = name"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ForumTopicReopened","path":"Hamilton/Types/ForumTopicReopened.html","kind":"class","full_name":"Hamilton::Types::ForumTopicReopened","name":"ForumTopicReopened","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/forum_topic_reopened.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about a forum topic reopened in the chat. Currently holds no information.","summary":"<p>This object represents a service message about a forum topic reopened in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic_reopened.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/forum_topic_reopened.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Game","path":"Hamilton/Types/Game.html","kind":"class","full_name":"Hamilton::Types::Game","name":"Game","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/game.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.","summary":"<p>This object represents a game.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/game.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/game.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"animation:Hamilton::Types::Animation|Nil-instance-method","name":"animation","doc":"Animation that will be displayed in the game message in chats. Upload via BotFather.","summary":"<p>Animation that will be displayed in the game message in chats.</p>","abstract":false,"location":{"filename":"src/types/game.cr","line_number":26,"url":null},"def":{"name":"animation","return_type":"Hamilton::Types::Animation | Nil","visibility":"Public","body":"@animation"},"external_var":false},{"html_id":"animation=(animation:Hamilton::Types::Animation|Nil)-instance-method","name":"animation=","doc":"Animation that will be displayed in the game message in chats. Upload via BotFather.","summary":"<p>Animation that will be displayed in the game message in chats.</p>","abstract":false,"args":[{"name":"animation","external_name":"animation","restriction":"Hamilton::Types::Animation | Nil"}],"args_string":"(animation : Hamilton::Types::Animation | Nil)","args_html":"(animation : <a href=\"../../Hamilton/Types/Animation.html\">Hamilton::Types::Animation</a> | Nil)","location":{"filename":"src/types/game.cr","line_number":26,"url":null},"def":{"name":"animation=","args":[{"name":"animation","external_name":"animation","restriction":"Hamilton::Types::Animation | Nil"}],"visibility":"Public","body":"@animation = animation"},"external_var":false},{"html_id":"description:String-instance-method","name":"description","doc":"Description of the game.","summary":"<p>Description of the game.</p>","abstract":false,"location":{"filename":"src/types/game.cr","line_number":14,"url":null},"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String)-instance-method","name":"description=","doc":"Description of the game.","summary":"<p>Description of the game.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","location":{"filename":"src/types/game.cr","line_number":14,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"photo:Array(PhotoSize)-instance-method","name":"photo","doc":"Photo that will be displayed in the game message in chats.","summary":"<p>Photo that will be displayed in the game message in chats.</p>","abstract":false,"location":{"filename":"src/types/game.cr","line_number":17,"url":null},"def":{"name":"photo","return_type":"Array(PhotoSize)","visibility":"Public","body":"@photo"},"external_var":false},{"html_id":"photo=(photo:Array(PhotoSize))-instance-method","name":"photo=","doc":"Photo that will be displayed in the game message in chats.","summary":"<p>Photo that will be displayed in the game message in chats.</p>","abstract":false,"args":[{"name":"photo","external_name":"photo","restriction":"Array(PhotoSize)"}],"args_string":"(photo : Array(PhotoSize))","args_html":"(photo : Array(<a href=\"../../Hamilton/Types/PhotoSize.html\">PhotoSize</a>))","location":{"filename":"src/types/game.cr","line_number":17,"url":null},"def":{"name":"photo=","args":[{"name":"photo","external_name":"photo","restriction":"Array(PhotoSize)"}],"visibility":"Public","body":"@photo = photo"},"external_var":false},{"html_id":"text:String|Nil-instance-method","name":"text","doc":"Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls `setGameScore`, or manually edited using `editMessageText`. 0-4096 characters.","summary":"<p>Brief description of the game or high scores included in the game message.</p>","abstract":false,"location":{"filename":"src/types/game.cr","line_number":20,"url":null},"def":{"name":"text","return_type":"String | Nil","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String|Nil)-instance-method","name":"text=","doc":"Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls `setGameScore`, or manually edited using `editMessageText`. 0-4096 characters.","summary":"<p>Brief description of the game or high scores included in the game message.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | Nil"}],"args_string":"(text : String | Nil)","args_html":"(text : String | Nil)","location":{"filename":"src/types/game.cr","line_number":20,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String | Nil"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"text_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"text_entities","doc":"Special entities that appear in text, such as usernames, URLs, bot commands, etc.","summary":"<p>Special entities that appear in text, such as usernames, URLs, bot commands, etc.</p>","abstract":false,"location":{"filename":"src/types/game.cr","line_number":23,"url":null},"def":{"name":"text_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@text_entities"},"external_var":false},{"html_id":"text_entities=(text_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"text_entities=","doc":"Special entities that appear in text, such as usernames, URLs, bot commands, etc.","summary":"<p>Special entities that appear in text, such as usernames, URLs, bot commands, etc.</p>","abstract":false,"args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(text_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(text_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/game.cr","line_number":23,"url":null},"def":{"name":"text_entities=","args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@text_entities = text_entities"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title of the game.","summary":"<p>Title of the game.</p>","abstract":false,"location":{"filename":"src/types/game.cr","line_number":11,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title of the game.","summary":"<p>Title of the game.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/game.cr","line_number":11,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/GameHighScore","path":"Hamilton/Types/GameHighScore.html","kind":"class","full_name":"Hamilton::Types::GameHighScore","name":"GameHighScore","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/game_high_score.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents one row of the high scores table for a game.","summary":"<p>This object represents one row of the high scores table for a game.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/game_high_score.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/game_high_score.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"position:Int32-instance-method","name":"position","doc":"Position in high score table for the game.","summary":"<p>Position in high score table for the game.</p>","abstract":false,"location":{"filename":"src/types/game_high_score.cr","line_number":11,"url":null},"def":{"name":"position","return_type":"Int32","visibility":"Public","body":"@position"},"external_var":false},{"html_id":"position=(position:Int32)-instance-method","name":"position=","doc":"Position in high score table for the game.","summary":"<p>Position in high score table for the game.</p>","abstract":false,"args":[{"name":"position","external_name":"position","restriction":"Int32"}],"args_string":"(position : Int32)","args_html":"(position : Int32)","location":{"filename":"src/types/game_high_score.cr","line_number":11,"url":null},"def":{"name":"position=","args":[{"name":"position","external_name":"position","restriction":"Int32"}],"visibility":"Public","body":"@position = position"},"external_var":false},{"html_id":"score:Int32-instance-method","name":"score","doc":"Score.","summary":"<p>Score.</p>","abstract":false,"location":{"filename":"src/types/game_high_score.cr","line_number":17,"url":null},"def":{"name":"score","return_type":"Int32","visibility":"Public","body":"@score"},"external_var":false},{"html_id":"score=(score:Int32)-instance-method","name":"score=","doc":"Score.","summary":"<p>Score.</p>","abstract":false,"args":[{"name":"score","external_name":"score","restriction":"Int32"}],"args_string":"(score : Int32)","args_html":"(score : Int32)","location":{"filename":"src/types/game_high_score.cr","line_number":17,"url":null},"def":{"name":"score=","args":[{"name":"score","external_name":"score","restriction":"Int32"}],"visibility":"Public","body":"@score = score"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"User.","summary":"<p>User.</p>","abstract":false,"location":{"filename":"src/types/game_high_score.cr","line_number":14,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"User.","summary":"<p>User.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/game_high_score.cr","line_number":14,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/GeneralForumTopicHidden","path":"Hamilton/Types/GeneralForumTopicHidden.html","kind":"class","full_name":"Hamilton::Types::GeneralForumTopicHidden","name":"GeneralForumTopicHidden","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/general_forum_topic_hidden.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about General forum topic hidden in the chat. Currently holds no information.","summary":"<p>This object represents a service message about General forum topic hidden in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/general_forum_topic_hidden.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/general_forum_topic_hidden.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/GeneralForumTopicUnhidden","path":"Hamilton/Types/GeneralForumTopicUnhidden.html","kind":"class","full_name":"Hamilton::Types::GeneralForumTopicUnhidden","name":"GeneralForumTopicUnhidden","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/general_forum_topic_unhidden.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about General forum topic unhidden in the chat. Currently holds no information.","summary":"<p>This object represents a service message about General forum topic unhidden in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/general_forum_topic_unhidden.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/general_forum_topic_unhidden.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Gift","path":"Hamilton/Types/Gift.html","kind":"class","full_name":"Hamilton::Types::Gift","name":"Gift","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/gift.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a gift that can be sent by the bot.","summary":"<p>This object represents a gift that can be sent by the bot.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/gift.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/gift.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier of the gift.","summary":"<p>Unique identifier of the gift.</p>","abstract":false,"location":{"filename":"src/types/gift.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier of the gift.","summary":"<p>Unique identifier of the gift.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/gift.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"publisher_chat:Hamilton::Types::Chat|Nil-instance-method","name":"publisher_chat","doc":"Information about the chat that published the gift.","summary":"<p>Information about the chat that published the gift.</p>","abstract":false,"location":{"filename":"src/types/gift.cr","line_number":29,"url":null},"def":{"name":"publisher_chat","return_type":"Hamilton::Types::Chat | Nil","visibility":"Public","body":"@publisher_chat"},"external_var":false},{"html_id":"publisher_chat=(publisher_chat:Hamilton::Types::Chat|Nil)-instance-method","name":"publisher_chat=","doc":"Information about the chat that published the gift.","summary":"<p>Information about the chat that published the gift.</p>","abstract":false,"args":[{"name":"publisher_chat","external_name":"publisher_chat","restriction":"Hamilton::Types::Chat | Nil"}],"args_string":"(publisher_chat : Hamilton::Types::Chat | Nil)","args_html":"(publisher_chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a> | Nil)","location":{"filename":"src/types/gift.cr","line_number":29,"url":null},"def":{"name":"publisher_chat=","args":[{"name":"publisher_chat","external_name":"publisher_chat","restriction":"Hamilton::Types::Chat | Nil"}],"visibility":"Public","body":"@publisher_chat = publisher_chat"},"external_var":false},{"html_id":"remaining_count:Int32|Nil-instance-method","name":"remaining_count","doc":"The number of remaining gifts of this type that can be sent; for limited gifts only.","summary":"<p>The number of remaining gifts of this type that can be sent; for limited gifts only.</p>","abstract":false,"location":{"filename":"src/types/gift.cr","line_number":26,"url":null},"def":{"name":"remaining_count","return_type":"Int32 | Nil","visibility":"Public","body":"@remaining_count"},"external_var":false},{"html_id":"remaining_count=(remaining_count:Int32|Nil)-instance-method","name":"remaining_count=","doc":"The number of remaining gifts of this type that can be sent; for limited gifts only.","summary":"<p>The number of remaining gifts of this type that can be sent; for limited gifts only.</p>","abstract":false,"args":[{"name":"remaining_count","external_name":"remaining_count","restriction":"Int32 | Nil"}],"args_string":"(remaining_count : Int32 | Nil)","args_html":"(remaining_count : Int32 | Nil)","location":{"filename":"src/types/gift.cr","line_number":26,"url":null},"def":{"name":"remaining_count=","args":[{"name":"remaining_count","external_name":"remaining_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@remaining_count = remaining_count"},"external_var":false},{"html_id":"star_count:Int32-instance-method","name":"star_count","doc":"The number of Telegram Stars that must be paid to send the sticker.","summary":"<p>The number of Telegram Stars that must be paid to send the sticker.</p>","abstract":false,"location":{"filename":"src/types/gift.cr","line_number":17,"url":null},"def":{"name":"star_count","return_type":"Int32","visibility":"Public","body":"@star_count"},"external_var":false},{"html_id":"star_count=(star_count:Int32)-instance-method","name":"star_count=","doc":"The number of Telegram Stars that must be paid to send the sticker.","summary":"<p>The number of Telegram Stars that must be paid to send the sticker.</p>","abstract":false,"args":[{"name":"star_count","external_name":"star_count","restriction":"Int32"}],"args_string":"(star_count : Int32)","args_html":"(star_count : Int32)","location":{"filename":"src/types/gift.cr","line_number":17,"url":null},"def":{"name":"star_count=","args":[{"name":"star_count","external_name":"star_count","restriction":"Int32"}],"visibility":"Public","body":"@star_count = star_count"},"external_var":false},{"html_id":"sticker:Hamilton::Types::Sticker-instance-method","name":"sticker","doc":"The sticker that represents the gift.","summary":"<p>The sticker that represents the gift.</p>","abstract":false,"location":{"filename":"src/types/gift.cr","line_number":14,"url":null},"def":{"name":"sticker","return_type":"Hamilton::Types::Sticker","visibility":"Public","body":"@sticker"},"external_var":false},{"html_id":"sticker=(sticker:Hamilton::Types::Sticker)-instance-method","name":"sticker=","doc":"The sticker that represents the gift.","summary":"<p>The sticker that represents the gift.</p>","abstract":false,"args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker"}],"args_string":"(sticker : Hamilton::Types::Sticker)","args_html":"(sticker : <a href=\"../../Hamilton/Types/Sticker.html\">Hamilton::Types::Sticker</a>)","location":{"filename":"src/types/gift.cr","line_number":14,"url":null},"def":{"name":"sticker=","args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker"}],"visibility":"Public","body":"@sticker = sticker"},"external_var":false},{"html_id":"total_count:Int32|Nil-instance-method","name":"total_count","doc":"The total number of the gifts of this type that can be sent; for limited gifts only.","summary":"<p>The total number of the gifts of this type that can be sent; for limited gifts only.</p>","abstract":false,"location":{"filename":"src/types/gift.cr","line_number":23,"url":null},"def":{"name":"total_count","return_type":"Int32 | Nil","visibility":"Public","body":"@total_count"},"external_var":false},{"html_id":"total_count=(total_count:Int32|Nil)-instance-method","name":"total_count=","doc":"The total number of the gifts of this type that can be sent; for limited gifts only.","summary":"<p>The total number of the gifts of this type that can be sent; for limited gifts only.</p>","abstract":false,"args":[{"name":"total_count","external_name":"total_count","restriction":"Int32 | Nil"}],"args_string":"(total_count : Int32 | Nil)","args_html":"(total_count : Int32 | Nil)","location":{"filename":"src/types/gift.cr","line_number":23,"url":null},"def":{"name":"total_count=","args":[{"name":"total_count","external_name":"total_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@total_count = total_count"},"external_var":false},{"html_id":"upgrade_star_count:Int32|Nil-instance-method","name":"upgrade_star_count","doc":"The number of Telegram Stars that must be paid to upgrade the gift to a unique one.","summary":"<p>The number of Telegram Stars that must be paid to upgrade the gift to a unique one.</p>","abstract":false,"location":{"filename":"src/types/gift.cr","line_number":20,"url":null},"def":{"name":"upgrade_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@upgrade_star_count"},"external_var":false},{"html_id":"upgrade_star_count=(upgrade_star_count:Int32|Nil)-instance-method","name":"upgrade_star_count=","doc":"The number of Telegram Stars that must be paid to upgrade the gift to a unique one.","summary":"<p>The number of Telegram Stars that must be paid to upgrade the gift to a unique one.</p>","abstract":false,"args":[{"name":"upgrade_star_count","external_name":"upgrade_star_count","restriction":"Int32 | Nil"}],"args_string":"(upgrade_star_count : Int32 | Nil)","args_html":"(upgrade_star_count : Int32 | Nil)","location":{"filename":"src/types/gift.cr","line_number":20,"url":null},"def":{"name":"upgrade_star_count=","args":[{"name":"upgrade_star_count","external_name":"upgrade_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@upgrade_star_count = upgrade_star_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/GiftInfo","path":"Hamilton/Types/GiftInfo.html","kind":"class","full_name":"Hamilton::Types::GiftInfo","name":"GiftInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/gift_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about a regular gift that was sent or received.","summary":"<p>Describes a service message about a regular gift that was sent or received.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/gift_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/gift_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"can_be_upgraded:Bool|Nil-instance-method","name":"can_be_upgraded","doc":"True, if the gift can be upgraded to a unique gift.","summary":"<p>True, if the gift can be upgraded to a unique gift.</p>","abstract":false,"location":{"filename":"src/types/gift_info.cr","line_number":23,"url":null},"def":{"name":"can_be_upgraded","return_type":"Bool | Nil","visibility":"Public","body":"@can_be_upgraded"},"external_var":false},{"html_id":"can_be_upgraded=(can_be_upgraded:Bool|Nil)-instance-method","name":"can_be_upgraded=","doc":"True, if the gift can be upgraded to a unique gift.","summary":"<p>True, if the gift can be upgraded to a unique gift.</p>","abstract":false,"args":[{"name":"can_be_upgraded","external_name":"can_be_upgraded","restriction":"Bool | Nil"}],"args_string":"(can_be_upgraded : Bool | Nil)","args_html":"(can_be_upgraded : Bool | Nil)","location":{"filename":"src/types/gift_info.cr","line_number":23,"url":null},"def":{"name":"can_be_upgraded=","args":[{"name":"can_be_upgraded","external_name":"can_be_upgraded","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_be_upgraded = can_be_upgraded"},"external_var":false},{"html_id":"convert_star_count:Int32|Nil-instance-method","name":"convert_star_count","doc":"Number of Telegram Stars that can be claimed by the receiver by converting the gift; omitted if conversion to Telegram Stars is impossible.","summary":"<p>Number of Telegram Stars that can be claimed by the receiver by converting the gift; omitted if conversion to Telegram Stars is impossible.</p>","abstract":false,"location":{"filename":"src/types/gift_info.cr","line_number":17,"url":null},"def":{"name":"convert_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@convert_star_count"},"external_var":false},{"html_id":"convert_star_count=(convert_star_count:Int32|Nil)-instance-method","name":"convert_star_count=","doc":"Number of Telegram Stars that can be claimed by the receiver by converting the gift; omitted if conversion to Telegram Stars is impossible.","summary":"<p>Number of Telegram Stars that can be claimed by the receiver by converting the gift; omitted if conversion to Telegram Stars is impossible.</p>","abstract":false,"args":[{"name":"convert_star_count","external_name":"convert_star_count","restriction":"Int32 | Nil"}],"args_string":"(convert_star_count : Int32 | Nil)","args_html":"(convert_star_count : Int32 | Nil)","location":{"filename":"src/types/gift_info.cr","line_number":17,"url":null},"def":{"name":"convert_star_count=","args":[{"name":"convert_star_count","external_name":"convert_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@convert_star_count = convert_star_count"},"external_var":false},{"html_id":"entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"entities","doc":"Special entities that appear in the text.","summary":"<p>Special entities that appear in the text.</p>","abstract":false,"location":{"filename":"src/types/gift_info.cr","line_number":29,"url":null},"def":{"name":"entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@entities"},"external_var":false},{"html_id":"entities=(entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"entities=","doc":"Special entities that appear in the text.","summary":"<p>Special entities that appear in the text.</p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/gift_info.cr","line_number":29,"url":null},"def":{"name":"entities=","args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@entities = entities"},"external_var":false},{"html_id":"gift:Hamilton::Types::Gift-instance-method","name":"gift","doc":"Information about the gift.","summary":"<p>Information about the gift.</p>","abstract":false,"location":{"filename":"src/types/gift_info.cr","line_number":11,"url":null},"def":{"name":"gift","return_type":"Hamilton::Types::Gift","visibility":"Public","body":"@gift"},"external_var":false},{"html_id":"gift=(gift:Hamilton::Types::Gift)-instance-method","name":"gift=","doc":"Information about the gift.","summary":"<p>Information about the gift.</p>","abstract":false,"args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::Gift"}],"args_string":"(gift : Hamilton::Types::Gift)","args_html":"(gift : <a href=\"../../Hamilton/Types/Gift.html\">Hamilton::Types::Gift</a>)","location":{"filename":"src/types/gift_info.cr","line_number":11,"url":null},"def":{"name":"gift=","args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::Gift"}],"visibility":"Public","body":"@gift = gift"},"external_var":false},{"html_id":"is_private:Bool|Nil-instance-method","name":"is_private","doc":"True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them.","summary":"<p>True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them.</p>","abstract":false,"location":{"filename":"src/types/gift_info.cr","line_number":32,"url":null},"def":{"name":"is_private","return_type":"Bool | Nil","visibility":"Public","body":"@is_private"},"external_var":false},{"html_id":"is_private=(is_private:Bool|Nil)-instance-method","name":"is_private=","doc":"True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them.","summary":"<p>True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them.</p>","abstract":false,"args":[{"name":"is_private","external_name":"is_private","restriction":"Bool | Nil"}],"args_string":"(is_private : Bool | Nil)","args_html":"(is_private : Bool | Nil)","location":{"filename":"src/types/gift_info.cr","line_number":32,"url":null},"def":{"name":"is_private=","args":[{"name":"is_private","external_name":"is_private","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_private = is_private"},"external_var":false},{"html_id":"owned_gift_id:String|Nil-instance-method","name":"owned_gift_id","doc":"Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts.","summary":"<p>Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts.</p>","abstract":false,"location":{"filename":"src/types/gift_info.cr","line_number":14,"url":null},"def":{"name":"owned_gift_id","return_type":"String | Nil","visibility":"Public","body":"@owned_gift_id"},"external_var":false},{"html_id":"owned_gift_id=(owned_gift_id:String|Nil)-instance-method","name":"owned_gift_id=","doc":"Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts.","summary":"<p>Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts.</p>","abstract":false,"args":[{"name":"owned_gift_id","external_name":"owned_gift_id","restriction":"String | Nil"}],"args_string":"(owned_gift_id : String | Nil)","args_html":"(owned_gift_id : String | Nil)","location":{"filename":"src/types/gift_info.cr","line_number":14,"url":null},"def":{"name":"owned_gift_id=","args":[{"name":"owned_gift_id","external_name":"owned_gift_id","restriction":"String | Nil"}],"visibility":"Public","body":"@owned_gift_id = owned_gift_id"},"external_var":false},{"html_id":"prepaid_upgrade_star_count:Int32|Nil-instance-method","name":"prepaid_upgrade_star_count","doc":"Number of Telegram Stars that were prepaid by the sender for the ability to upgrade the gift.","summary":"<p>Number of Telegram Stars that were prepaid by the sender for the ability to upgrade the gift.</p>","abstract":false,"location":{"filename":"src/types/gift_info.cr","line_number":20,"url":null},"def":{"name":"prepaid_upgrade_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@prepaid_upgrade_star_count"},"external_var":false},{"html_id":"prepaid_upgrade_star_count=(prepaid_upgrade_star_count:Int32|Nil)-instance-method","name":"prepaid_upgrade_star_count=","doc":"Number of Telegram Stars that were prepaid by the sender for the ability to upgrade the gift.","summary":"<p>Number of Telegram Stars that were prepaid by the sender for the ability to upgrade the gift.</p>","abstract":false,"args":[{"name":"prepaid_upgrade_star_count","external_name":"prepaid_upgrade_star_count","restriction":"Int32 | Nil"}],"args_string":"(prepaid_upgrade_star_count : Int32 | Nil)","args_html":"(prepaid_upgrade_star_count : Int32 | Nil)","location":{"filename":"src/types/gift_info.cr","line_number":20,"url":null},"def":{"name":"prepaid_upgrade_star_count=","args":[{"name":"prepaid_upgrade_star_count","external_name":"prepaid_upgrade_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@prepaid_upgrade_star_count = prepaid_upgrade_star_count"},"external_var":false},{"html_id":"text:String|Nil-instance-method","name":"text","doc":"Text of the message that was added to the gift.","summary":"<p>Text of the message that was added to the gift.</p>","abstract":false,"location":{"filename":"src/types/gift_info.cr","line_number":26,"url":null},"def":{"name":"text","return_type":"String | Nil","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String|Nil)-instance-method","name":"text=","doc":"Text of the message that was added to the gift.","summary":"<p>Text of the message that was added to the gift.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | Nil"}],"args_string":"(text : String | Nil)","args_html":"(text : String | Nil)","location":{"filename":"src/types/gift_info.cr","line_number":26,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String | Nil"}],"visibility":"Public","body":"@text = text"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Gifts","path":"Hamilton/Types/Gifts.html","kind":"class","full_name":"Hamilton::Types::Gifts","name":"Gifts","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/gift.cr","line_number":34,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represent a list of gifts.","summary":"<p>This object represent a list of gifts.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/gift.cr","line_number":35,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/gift.cr","line_number":35,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"gifts:Array(Hamilton::Types::Gift)-instance-method","name":"gifts","doc":"The list of gifts.","summary":"<p>The list of gifts.</p>","abstract":false,"location":{"filename":"src/types/gift.cr","line_number":39,"url":null},"def":{"name":"gifts","return_type":"Array(Hamilton::Types::Gift)","visibility":"Public","body":"@gifts"},"external_var":false},{"html_id":"gifts=(gifts:Array(Hamilton::Types::Gift))-instance-method","name":"gifts=","doc":"The list of gifts.","summary":"<p>The list of gifts.</p>","abstract":false,"args":[{"name":"gifts","external_name":"gifts","restriction":"Array(Hamilton::Types::Gift)"}],"args_string":"(gifts : Array(Hamilton::Types::Gift))","args_html":"(gifts : Array(<a href=\"../../Hamilton/Types/Gift.html\">Hamilton::Types::Gift</a>))","location":{"filename":"src/types/gift.cr","line_number":39,"url":null},"def":{"name":"gifts=","args":[{"name":"gifts","external_name":"gifts","restriction":"Array(Hamilton::Types::Gift)"}],"visibility":"Public","body":"@gifts = gifts"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Giveaway","path":"Hamilton/Types/Giveaway.html","kind":"class","full_name":"Hamilton::Types::Giveaway","name":"Giveaway","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/giveaway.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a message about a scheduled giveaway.","summary":"<p>This object represents a message about a scheduled giveaway.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/giveaway.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/giveaway.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chats:Array(Hamilton::Types::Chat)-instance-method","name":"chats","doc":"The list of chats which the user must join to participate in the giveaway.","summary":"<p>The list of chats which the user must join to participate in the giveaway.</p>","abstract":false,"location":{"filename":"src/types/giveaway.cr","line_number":11,"url":null},"def":{"name":"chats","return_type":"Array(Hamilton::Types::Chat)","visibility":"Public","body":"@chats"},"external_var":false},{"html_id":"chats=(chats:Array(Hamilton::Types::Chat))-instance-method","name":"chats=","doc":"The list of chats which the user must join to participate in the giveaway.","summary":"<p>The list of chats which the user must join to participate in the giveaway.</p>","abstract":false,"args":[{"name":"chats","external_name":"chats","restriction":"Array(Hamilton::Types::Chat)"}],"args_string":"(chats : Array(Hamilton::Types::Chat))","args_html":"(chats : Array(<a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>))","location":{"filename":"src/types/giveaway.cr","line_number":11,"url":null},"def":{"name":"chats=","args":[{"name":"chats","external_name":"chats","restriction":"Array(Hamilton::Types::Chat)"}],"visibility":"Public","body":"@chats = chats"},"external_var":false},{"html_id":"country_codes:Array(String)|Nil-instance-method","name":"country_codes","doc":"A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways.","summary":"<p>A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come.</p>","abstract":false,"location":{"filename":"src/types/giveaway.cr","line_number":29,"url":null},"def":{"name":"country_codes","return_type":"Array(String) | Nil","visibility":"Public","body":"@country_codes"},"external_var":false},{"html_id":"country_codes=(country_codes:Array(String)|Nil)-instance-method","name":"country_codes=","doc":"A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways.","summary":"<p>A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come.</p>","abstract":false,"args":[{"name":"country_codes","external_name":"country_codes","restriction":"Array(String) | Nil"}],"args_string":"(country_codes : Array(String) | Nil)","args_html":"(country_codes : Array(String) | Nil)","location":{"filename":"src/types/giveaway.cr","line_number":29,"url":null},"def":{"name":"country_codes=","args":[{"name":"country_codes","external_name":"country_codes","restriction":"Array(String) | Nil"}],"visibility":"Public","body":"@country_codes = country_codes"},"external_var":false},{"html_id":"has_public_winners:Bool|Nil-instance-method","name":"has_public_winners","doc":"True, if the list of giveaway winners will be visible to everyone.","summary":"<p>True, if the list of giveaway winners will be visible to everyone.</p>","abstract":false,"location":{"filename":"src/types/giveaway.cr","line_number":23,"url":null},"def":{"name":"has_public_winners","return_type":"Bool | Nil","visibility":"Public","body":"@has_public_winners"},"external_var":false},{"html_id":"has_public_winners=(has_public_winners:Bool|Nil)-instance-method","name":"has_public_winners=","doc":"True, if the list of giveaway winners will be visible to everyone.","summary":"<p>True, if the list of giveaway winners will be visible to everyone.</p>","abstract":false,"args":[{"name":"has_public_winners","external_name":"has_public_winners","restriction":"Bool | Nil"}],"args_string":"(has_public_winners : Bool | Nil)","args_html":"(has_public_winners : Bool | Nil)","location":{"filename":"src/types/giveaway.cr","line_number":23,"url":null},"def":{"name":"has_public_winners=","args":[{"name":"has_public_winners","external_name":"has_public_winners","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_public_winners = has_public_winners"},"external_var":false},{"html_id":"only_new_members:Bool|Nil-instance-method","name":"only_new_members","doc":"True, if only users who join the chats after the giveaway started should be eligible to win.","summary":"<p>True, if only users who join the chats after the giveaway started should be eligible to win.</p>","abstract":false,"location":{"filename":"src/types/giveaway.cr","line_number":20,"url":null},"def":{"name":"only_new_members","return_type":"Bool | Nil","visibility":"Public","body":"@only_new_members"},"external_var":false},{"html_id":"only_new_members=(only_new_members:Bool|Nil)-instance-method","name":"only_new_members=","doc":"True, if only users who join the chats after the giveaway started should be eligible to win.","summary":"<p>True, if only users who join the chats after the giveaway started should be eligible to win.</p>","abstract":false,"args":[{"name":"only_new_members","external_name":"only_new_members","restriction":"Bool | Nil"}],"args_string":"(only_new_members : Bool | Nil)","args_html":"(only_new_members : Bool | Nil)","location":{"filename":"src/types/giveaway.cr","line_number":20,"url":null},"def":{"name":"only_new_members=","args":[{"name":"only_new_members","external_name":"only_new_members","restriction":"Bool | Nil"}],"visibility":"Public","body":"@only_new_members = only_new_members"},"external_var":false},{"html_id":"premium_subscription_month_count:Int32|Nil-instance-method","name":"premium_subscription_month_count","doc":"The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only.","summary":"<p>The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only.</p>","abstract":false,"location":{"filename":"src/types/giveaway.cr","line_number":35,"url":null},"def":{"name":"premium_subscription_month_count","return_type":"Int32 | Nil","visibility":"Public","body":"@premium_subscription_month_count"},"external_var":false},{"html_id":"premium_subscription_month_count=(premium_subscription_month_count:Int32|Nil)-instance-method","name":"premium_subscription_month_count=","doc":"The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only.","summary":"<p>The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only.</p>","abstract":false,"args":[{"name":"premium_subscription_month_count","external_name":"premium_subscription_month_count","restriction":"Int32 | Nil"}],"args_string":"(premium_subscription_month_count : Int32 | Nil)","args_html":"(premium_subscription_month_count : Int32 | Nil)","location":{"filename":"src/types/giveaway.cr","line_number":35,"url":null},"def":{"name":"premium_subscription_month_count=","args":[{"name":"premium_subscription_month_count","external_name":"premium_subscription_month_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@premium_subscription_month_count = premium_subscription_month_count"},"external_var":false},{"html_id":"prize_description:String|Nil-instance-method","name":"prize_description","doc":"Description of additional giveaway prize.","summary":"<p>Description of additional giveaway prize.</p>","abstract":false,"location":{"filename":"src/types/giveaway.cr","line_number":26,"url":null},"def":{"name":"prize_description","return_type":"String | Nil","visibility":"Public","body":"@prize_description"},"external_var":false},{"html_id":"prize_description=(prize_description:String|Nil)-instance-method","name":"prize_description=","doc":"Description of additional giveaway prize.","summary":"<p>Description of additional giveaway prize.</p>","abstract":false,"args":[{"name":"prize_description","external_name":"prize_description","restriction":"String | Nil"}],"args_string":"(prize_description : String | Nil)","args_html":"(prize_description : String | Nil)","location":{"filename":"src/types/giveaway.cr","line_number":26,"url":null},"def":{"name":"prize_description=","args":[{"name":"prize_description","external_name":"prize_description","restriction":"String | Nil"}],"visibility":"Public","body":"@prize_description = prize_description"},"external_var":false},{"html_id":"prize_star_count:Int32|Nil-instance-method","name":"prize_star_count","doc":"The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.","summary":"<p>The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.</p>","abstract":false,"location":{"filename":"src/types/giveaway.cr","line_number":32,"url":null},"def":{"name":"prize_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@prize_star_count"},"external_var":false},{"html_id":"prize_star_count=(prize_star_count:Int32|Nil)-instance-method","name":"prize_star_count=","doc":"The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.","summary":"<p>The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.</p>","abstract":false,"args":[{"name":"prize_star_count","external_name":"prize_star_count","restriction":"Int32 | Nil"}],"args_string":"(prize_star_count : Int32 | Nil)","args_html":"(prize_star_count : Int32 | Nil)","location":{"filename":"src/types/giveaway.cr","line_number":32,"url":null},"def":{"name":"prize_star_count=","args":[{"name":"prize_star_count","external_name":"prize_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@prize_star_count = prize_star_count"},"external_var":false},{"html_id":"winner_count:Int32-instance-method","name":"winner_count","doc":"The number of users which are supposed to be selected as winners of the giveaway.","summary":"<p>The number of users which are supposed to be selected as winners of the giveaway.</p>","abstract":false,"location":{"filename":"src/types/giveaway.cr","line_number":17,"url":null},"def":{"name":"winner_count","return_type":"Int32","visibility":"Public","body":"@winner_count"},"external_var":false},{"html_id":"winner_count=(winner_count:Int32)-instance-method","name":"winner_count=","doc":"The number of users which are supposed to be selected as winners of the giveaway.","summary":"<p>The number of users which are supposed to be selected as winners of the giveaway.</p>","abstract":false,"args":[{"name":"winner_count","external_name":"winner_count","restriction":"Int32"}],"args_string":"(winner_count : Int32)","args_html":"(winner_count : Int32)","location":{"filename":"src/types/giveaway.cr","line_number":17,"url":null},"def":{"name":"winner_count=","args":[{"name":"winner_count","external_name":"winner_count","restriction":"Int32"}],"visibility":"Public","body":"@winner_count = winner_count"},"external_var":false},{"html_id":"winners_selection_date:Int32-instance-method","name":"winners_selection_date","doc":"Point in time (Unix timestamp) when winners of the giveaway will be selected.","summary":"<p>Point in time (Unix timestamp) when winners of the giveaway will be selected.</p>","abstract":false,"location":{"filename":"src/types/giveaway.cr","line_number":14,"url":null},"def":{"name":"winners_selection_date","return_type":"Int32","visibility":"Public","body":"@winners_selection_date"},"external_var":false},{"html_id":"winners_selection_date=(winners_selection_date:Int32)-instance-method","name":"winners_selection_date=","doc":"Point in time (Unix timestamp) when winners of the giveaway will be selected.","summary":"<p>Point in time (Unix timestamp) when winners of the giveaway will be selected.</p>","abstract":false,"args":[{"name":"winners_selection_date","external_name":"winners_selection_date","restriction":"Int32"}],"args_string":"(winners_selection_date : Int32)","args_html":"(winners_selection_date : Int32)","location":{"filename":"src/types/giveaway.cr","line_number":14,"url":null},"def":{"name":"winners_selection_date=","args":[{"name":"winners_selection_date","external_name":"winners_selection_date","restriction":"Int32"}],"visibility":"Public","body":"@winners_selection_date = winners_selection_date"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/GiveawayCompleted","path":"Hamilton/Types/GiveawayCompleted.html","kind":"class","full_name":"Hamilton::Types::GiveawayCompleted","name":"GiveawayCompleted","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/giveaway_completed.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about the completion of a giveaway without public winners.","summary":"<p>This object represents a service message about the completion of a giveaway without public winners.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/giveaway_completed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/giveaway_completed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"giveaway_message:Hamilton::Types::Message|Nil-instance-method","name":"giveaway_message","doc":"Message with the giveaway that was completed, if it wasn't deleted.","summary":"<p>Message with the giveaway that was completed, if it wasn't deleted.</p>","abstract":false,"location":{"filename":"src/types/giveaway_completed.cr","line_number":17,"url":null},"def":{"name":"giveaway_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@giveaway_message"},"external_var":false},{"html_id":"giveaway_message=(giveaway_message:Hamilton::Types::Message|Nil)-instance-method","name":"giveaway_message=","doc":"Message with the giveaway that was completed, if it wasn't deleted.","summary":"<p>Message with the giveaway that was completed, if it wasn't deleted.</p>","abstract":false,"args":[{"name":"giveaway_message","external_name":"giveaway_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(giveaway_message : Hamilton::Types::Message | Nil)","args_html":"(giveaway_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/giveaway_completed.cr","line_number":17,"url":null},"def":{"name":"giveaway_message=","args":[{"name":"giveaway_message","external_name":"giveaway_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@giveaway_message = giveaway_message"},"external_var":false},{"html_id":"is_star_giveaway:Bool|Nil-instance-method","name":"is_star_giveaway","doc":"True, if the giveaway is a Telegram Star giveaway. Otherwise, currently, the giveaway is a Telegram Premium giveaway.","summary":"<p>True, if the giveaway is a Telegram Star giveaway.</p>","abstract":false,"location":{"filename":"src/types/giveaway_completed.cr","line_number":20,"url":null},"def":{"name":"is_star_giveaway","return_type":"Bool | Nil","visibility":"Public","body":"@is_star_giveaway"},"external_var":false},{"html_id":"is_star_giveaway=(is_star_giveaway:Bool|Nil)-instance-method","name":"is_star_giveaway=","doc":"True, if the giveaway is a Telegram Star giveaway. Otherwise, currently, the giveaway is a Telegram Premium giveaway.","summary":"<p>True, if the giveaway is a Telegram Star giveaway.</p>","abstract":false,"args":[{"name":"is_star_giveaway","external_name":"is_star_giveaway","restriction":"Bool | Nil"}],"args_string":"(is_star_giveaway : Bool | Nil)","args_html":"(is_star_giveaway : Bool | Nil)","location":{"filename":"src/types/giveaway_completed.cr","line_number":20,"url":null},"def":{"name":"is_star_giveaway=","args":[{"name":"is_star_giveaway","external_name":"is_star_giveaway","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_star_giveaway = is_star_giveaway"},"external_var":false},{"html_id":"unclaimed_prize_count:Int32|Nil-instance-method","name":"unclaimed_prize_count","doc":"Number of undistributed prizes.","summary":"<p>Number of undistributed prizes.</p>","abstract":false,"location":{"filename":"src/types/giveaway_completed.cr","line_number":14,"url":null},"def":{"name":"unclaimed_prize_count","return_type":"Int32 | Nil","visibility":"Public","body":"@unclaimed_prize_count"},"external_var":false},{"html_id":"unclaimed_prize_count=(unclaimed_prize_count:Int32|Nil)-instance-method","name":"unclaimed_prize_count=","doc":"Number of undistributed prizes.","summary":"<p>Number of undistributed prizes.</p>","abstract":false,"args":[{"name":"unclaimed_prize_count","external_name":"unclaimed_prize_count","restriction":"Int32 | Nil"}],"args_string":"(unclaimed_prize_count : Int32 | Nil)","args_html":"(unclaimed_prize_count : Int32 | Nil)","location":{"filename":"src/types/giveaway_completed.cr","line_number":14,"url":null},"def":{"name":"unclaimed_prize_count=","args":[{"name":"unclaimed_prize_count","external_name":"unclaimed_prize_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@unclaimed_prize_count = unclaimed_prize_count"},"external_var":false},{"html_id":"winner_count:Int32-instance-method","name":"winner_count","doc":"Number of winners in the giveaway.","summary":"<p>Number of winners in the giveaway.</p>","abstract":false,"location":{"filename":"src/types/giveaway_completed.cr","line_number":11,"url":null},"def":{"name":"winner_count","return_type":"Int32","visibility":"Public","body":"@winner_count"},"external_var":false},{"html_id":"winner_count=(winner_count:Int32)-instance-method","name":"winner_count=","doc":"Number of winners in the giveaway.","summary":"<p>Number of winners in the giveaway.</p>","abstract":false,"args":[{"name":"winner_count","external_name":"winner_count","restriction":"Int32"}],"args_string":"(winner_count : Int32)","args_html":"(winner_count : Int32)","location":{"filename":"src/types/giveaway_completed.cr","line_number":11,"url":null},"def":{"name":"winner_count=","args":[{"name":"winner_count","external_name":"winner_count","restriction":"Int32"}],"visibility":"Public","body":"@winner_count = winner_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/GiveawayCreated","path":"Hamilton/Types/GiveawayCreated.html","kind":"class","full_name":"Hamilton::Types::GiveawayCreated","name":"GiveawayCreated","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/giveaway_created.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about the creation of a scheduled giveaway.","summary":"<p>This object represents a service message about the creation of a scheduled giveaway.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/giveaway_created.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/giveaway_created.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"prize_star_count:Int32|Nil-instance-method","name":"prize_star_count","doc":"The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.","summary":"<p>The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.</p>","abstract":false,"location":{"filename":"src/types/giveaway_created.cr","line_number":11,"url":null},"def":{"name":"prize_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@prize_star_count"},"external_var":false},{"html_id":"prize_star_count=(prize_star_count:Int32|Nil)-instance-method","name":"prize_star_count=","doc":"The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.","summary":"<p>The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only.</p>","abstract":false,"args":[{"name":"prize_star_count","external_name":"prize_star_count","restriction":"Int32 | Nil"}],"args_string":"(prize_star_count : Int32 | Nil)","args_html":"(prize_star_count : Int32 | Nil)","location":{"filename":"src/types/giveaway_created.cr","line_number":11,"url":null},"def":{"name":"prize_star_count=","args":[{"name":"prize_star_count","external_name":"prize_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@prize_star_count = prize_star_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/GiveawayWinners","path":"Hamilton/Types/GiveawayWinners.html","kind":"class","full_name":"Hamilton::Types::GiveawayWinners","name":"GiveawayWinners","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/giveaway_winners.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a message about the completion of a giveaway with public winners.","summary":"<p>This object represents a message about the completion of a giveaway with public winners.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/giveaway_winners.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/giveaway_winners.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"additional_chat_count:Int32|Nil-instance-method","name":"additional_chat_count","doc":"The number of other chats the user had to join in order to be eligible for the giveaway.","summary":"<p>The number of other chats the user had to join in order to be eligible for the giveaway.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":26,"url":null},"def":{"name":"additional_chat_count","return_type":"Int32 | Nil","visibility":"Public","body":"@additional_chat_count"},"external_var":false},{"html_id":"additional_chat_count=(additional_chat_count:Int32|Nil)-instance-method","name":"additional_chat_count=","doc":"The number of other chats the user had to join in order to be eligible for the giveaway.","summary":"<p>The number of other chats the user had to join in order to be eligible for the giveaway.</p>","abstract":false,"args":[{"name":"additional_chat_count","external_name":"additional_chat_count","restriction":"Int32 | Nil"}],"args_string":"(additional_chat_count : Int32 | Nil)","args_html":"(additional_chat_count : Int32 | Nil)","location":{"filename":"src/types/giveaway_winners.cr","line_number":26,"url":null},"def":{"name":"additional_chat_count=","args":[{"name":"additional_chat_count","external_name":"additional_chat_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@additional_chat_count = additional_chat_count"},"external_var":false},{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"The chat that created the giveaway.","summary":"<p>The chat that created the giveaway.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":11,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"The chat that created the giveaway.","summary":"<p>The chat that created the giveaway.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/giveaway_winners.cr","line_number":11,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"giveaway_message_id:Int32-instance-method","name":"giveaway_message_id","doc":"Identifier of the message with the giveaway in the chat.","summary":"<p>Identifier of the message with the giveaway in the chat.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":14,"url":null},"def":{"name":"giveaway_message_id","return_type":"Int32","visibility":"Public","body":"@giveaway_message_id"},"external_var":false},{"html_id":"giveaway_message_id=(giveaway_message_id:Int32)-instance-method","name":"giveaway_message_id=","doc":"Identifier of the message with the giveaway in the chat.","summary":"<p>Identifier of the message with the giveaway in the chat.</p>","abstract":false,"args":[{"name":"giveaway_message_id","external_name":"giveaway_message_id","restriction":"Int32"}],"args_string":"(giveaway_message_id : Int32)","args_html":"(giveaway_message_id : Int32)","location":{"filename":"src/types/giveaway_winners.cr","line_number":14,"url":null},"def":{"name":"giveaway_message_id=","args":[{"name":"giveaway_message_id","external_name":"giveaway_message_id","restriction":"Int32"}],"visibility":"Public","body":"@giveaway_message_id = giveaway_message_id"},"external_var":false},{"html_id":"only_new_members:Bool|Nil-instance-method","name":"only_new_members","doc":"True, if only users who had joined the chats after the giveaway started were eligible to win.","summary":"<p>True, if only users who had joined the chats after the giveaway started were eligible to win.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":38,"url":null},"def":{"name":"only_new_members","return_type":"Bool | Nil","visibility":"Public","body":"@only_new_members"},"external_var":false},{"html_id":"only_new_members=(only_new_members:Bool|Nil)-instance-method","name":"only_new_members=","doc":"True, if only users who had joined the chats after the giveaway started were eligible to win.","summary":"<p>True, if only users who had joined the chats after the giveaway started were eligible to win.</p>","abstract":false,"args":[{"name":"only_new_members","external_name":"only_new_members","restriction":"Bool | Nil"}],"args_string":"(only_new_members : Bool | Nil)","args_html":"(only_new_members : Bool | Nil)","location":{"filename":"src/types/giveaway_winners.cr","line_number":38,"url":null},"def":{"name":"only_new_members=","args":[{"name":"only_new_members","external_name":"only_new_members","restriction":"Bool | Nil"}],"visibility":"Public","body":"@only_new_members = only_new_members"},"external_var":false},{"html_id":"premium_subscription_month_count:Int32|Nil-instance-method","name":"premium_subscription_month_count","doc":"The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only.","summary":"<p>The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":32,"url":null},"def":{"name":"premium_subscription_month_count","return_type":"Int32 | Nil","visibility":"Public","body":"@premium_subscription_month_count"},"external_var":false},{"html_id":"premium_subscription_month_count=(premium_subscription_month_count:Int32|Nil)-instance-method","name":"premium_subscription_month_count=","doc":"The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only.","summary":"<p>The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only.</p>","abstract":false,"args":[{"name":"premium_subscription_month_count","external_name":"premium_subscription_month_count","restriction":"Int32 | Nil"}],"args_string":"(premium_subscription_month_count : Int32 | Nil)","args_html":"(premium_subscription_month_count : Int32 | Nil)","location":{"filename":"src/types/giveaway_winners.cr","line_number":32,"url":null},"def":{"name":"premium_subscription_month_count=","args":[{"name":"premium_subscription_month_count","external_name":"premium_subscription_month_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@premium_subscription_month_count = premium_subscription_month_count"},"external_var":false},{"html_id":"prize_description:String|Nil-instance-method","name":"prize_description","doc":"Description of additional giveaway prize.","summary":"<p>Description of additional giveaway prize.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":44,"url":null},"def":{"name":"prize_description","return_type":"String | Nil","visibility":"Public","body":"@prize_description"},"external_var":false},{"html_id":"prize_description=(prize_description:String|Nil)-instance-method","name":"prize_description=","doc":"Description of additional giveaway prize.","summary":"<p>Description of additional giveaway prize.</p>","abstract":false,"args":[{"name":"prize_description","external_name":"prize_description","restriction":"String | Nil"}],"args_string":"(prize_description : String | Nil)","args_html":"(prize_description : String | Nil)","location":{"filename":"src/types/giveaway_winners.cr","line_number":44,"url":null},"def":{"name":"prize_description=","args":[{"name":"prize_description","external_name":"prize_description","restriction":"String | Nil"}],"visibility":"Public","body":"@prize_description = prize_description"},"external_var":false},{"html_id":"prize_star_count:Int32|Nil-instance-method","name":"prize_star_count","doc":"The number of Telegram Stars that were split between giveaway winners; for Telegram Star giveaways only.","summary":"<p>The number of Telegram Stars that were split between giveaway winners; for Telegram Star giveaways only.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":29,"url":null},"def":{"name":"prize_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@prize_star_count"},"external_var":false},{"html_id":"prize_star_count=(prize_star_count:Int32|Nil)-instance-method","name":"prize_star_count=","doc":"The number of Telegram Stars that were split between giveaway winners; for Telegram Star giveaways only.","summary":"<p>The number of Telegram Stars that were split between giveaway winners; for Telegram Star giveaways only.</p>","abstract":false,"args":[{"name":"prize_star_count","external_name":"prize_star_count","restriction":"Int32 | Nil"}],"args_string":"(prize_star_count : Int32 | Nil)","args_html":"(prize_star_count : Int32 | Nil)","location":{"filename":"src/types/giveaway_winners.cr","line_number":29,"url":null},"def":{"name":"prize_star_count=","args":[{"name":"prize_star_count","external_name":"prize_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@prize_star_count = prize_star_count"},"external_var":false},{"html_id":"unclaimed_prize_count:Int32|Nil-instance-method","name":"unclaimed_prize_count","doc":"Number of undistributed prizes.","summary":"<p>Number of undistributed prizes.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":35,"url":null},"def":{"name":"unclaimed_prize_count","return_type":"Int32 | Nil","visibility":"Public","body":"@unclaimed_prize_count"},"external_var":false},{"html_id":"unclaimed_prize_count=(unclaimed_prize_count:Int32|Nil)-instance-method","name":"unclaimed_prize_count=","doc":"Number of undistributed prizes.","summary":"<p>Number of undistributed prizes.</p>","abstract":false,"args":[{"name":"unclaimed_prize_count","external_name":"unclaimed_prize_count","restriction":"Int32 | Nil"}],"args_string":"(unclaimed_prize_count : Int32 | Nil)","args_html":"(unclaimed_prize_count : Int32 | Nil)","location":{"filename":"src/types/giveaway_winners.cr","line_number":35,"url":null},"def":{"name":"unclaimed_prize_count=","args":[{"name":"unclaimed_prize_count","external_name":"unclaimed_prize_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@unclaimed_prize_count = unclaimed_prize_count"},"external_var":false},{"html_id":"was_refunded:Bool|Nil-instance-method","name":"was_refunded","doc":"True, if the giveaway was canceled because the payment for it was refunded.","summary":"<p>True, if the giveaway was canceled because the payment for it was refunded.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":41,"url":null},"def":{"name":"was_refunded","return_type":"Bool | Nil","visibility":"Public","body":"@was_refunded"},"external_var":false},{"html_id":"was_refunded=(was_refunded:Bool|Nil)-instance-method","name":"was_refunded=","doc":"True, if the giveaway was canceled because the payment for it was refunded.","summary":"<p>True, if the giveaway was canceled because the payment for it was refunded.</p>","abstract":false,"args":[{"name":"was_refunded","external_name":"was_refunded","restriction":"Bool | Nil"}],"args_string":"(was_refunded : Bool | Nil)","args_html":"(was_refunded : Bool | Nil)","location":{"filename":"src/types/giveaway_winners.cr","line_number":41,"url":null},"def":{"name":"was_refunded=","args":[{"name":"was_refunded","external_name":"was_refunded","restriction":"Bool | Nil"}],"visibility":"Public","body":"@was_refunded = was_refunded"},"external_var":false},{"html_id":"winner_count:Int32-instance-method","name":"winner_count","doc":"Total number of winners in the giveaway.","summary":"<p>Total number of winners in the giveaway.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":20,"url":null},"def":{"name":"winner_count","return_type":"Int32","visibility":"Public","body":"@winner_count"},"external_var":false},{"html_id":"winner_count=(winner_count:Int32)-instance-method","name":"winner_count=","doc":"Total number of winners in the giveaway.","summary":"<p>Total number of winners in the giveaway.</p>","abstract":false,"args":[{"name":"winner_count","external_name":"winner_count","restriction":"Int32"}],"args_string":"(winner_count : Int32)","args_html":"(winner_count : Int32)","location":{"filename":"src/types/giveaway_winners.cr","line_number":20,"url":null},"def":{"name":"winner_count=","args":[{"name":"winner_count","external_name":"winner_count","restriction":"Int32"}],"visibility":"Public","body":"@winner_count = winner_count"},"external_var":false},{"html_id":"winners:Array(Hamilton::Types::User)-instance-method","name":"winners","doc":"List of up to 100 winners of the giveaway.","summary":"<p>List of up to 100 winners of the giveaway.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":23,"url":null},"def":{"name":"winners","return_type":"Array(Hamilton::Types::User)","visibility":"Public","body":"@winners"},"external_var":false},{"html_id":"winners=(winners:Array(Hamilton::Types::User))-instance-method","name":"winners=","doc":"List of up to 100 winners of the giveaway.","summary":"<p>List of up to 100 winners of the giveaway.</p>","abstract":false,"args":[{"name":"winners","external_name":"winners","restriction":"Array(Hamilton::Types::User)"}],"args_string":"(winners : Array(Hamilton::Types::User))","args_html":"(winners : Array(<a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>))","location":{"filename":"src/types/giveaway_winners.cr","line_number":23,"url":null},"def":{"name":"winners=","args":[{"name":"winners","external_name":"winners","restriction":"Array(Hamilton::Types::User)"}],"visibility":"Public","body":"@winners = winners"},"external_var":false},{"html_id":"winners_selection_date:Int32-instance-method","name":"winners_selection_date","doc":"Point in time (Unix timestamp) when winners of the giveaway were selected.","summary":"<p>Point in time (Unix timestamp) when winners of the giveaway were selected.</p>","abstract":false,"location":{"filename":"src/types/giveaway_winners.cr","line_number":17,"url":null},"def":{"name":"winners_selection_date","return_type":"Int32","visibility":"Public","body":"@winners_selection_date"},"external_var":false},{"html_id":"winners_selection_date=(winners_selection_date:Int32)-instance-method","name":"winners_selection_date=","doc":"Point in time (Unix timestamp) when winners of the giveaway were selected.","summary":"<p>Point in time (Unix timestamp) when winners of the giveaway were selected.</p>","abstract":false,"args":[{"name":"winners_selection_date","external_name":"winners_selection_date","restriction":"Int32"}],"args_string":"(winners_selection_date : Int32)","args_html":"(winners_selection_date : Int32)","location":{"filename":"src/types/giveaway_winners.cr","line_number":17,"url":null},"def":{"name":"winners_selection_date=","args":[{"name":"winners_selection_date","external_name":"winners_selection_date","restriction":"Int32"}],"visibility":"Public","body":"@winners_selection_date = winners_selection_date"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InaccessibleMessage","path":"Hamilton/Types/InaccessibleMessage.html","kind":"class","full_name":"Hamilton::Types::InaccessibleMessage","name":"InaccessibleMessage","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inaccessible_message.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes a message that was deleted or is otherwise inaccessible to the bot.","summary":"<p>This object describes a message that was deleted or is otherwise inaccessible to the bot.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inaccessible_message.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inaccessible_message.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Chat the message belonged to.","summary":"<p>Chat the message belonged to.</p>","abstract":false,"location":{"filename":"src/types/inaccessible_message.cr","line_number":11,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Chat the message belonged to.","summary":"<p>Chat the message belonged to.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/inaccessible_message.cr","line_number":11,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"date:Int32-instance-method","name":"date","doc":"Always 0. The field can be used to differentiate regular and inaccessible messages.","summary":"<p>Always 0.</p>","abstract":false,"location":{"filename":"src/types/inaccessible_message.cr","line_number":17,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Always 0. The field can be used to differentiate regular and inaccessible messages.","summary":"<p>Always 0.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/inaccessible_message.cr","line_number":17,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"message_id:Int32-instance-method","name":"message_id","doc":"Unique message identifier inside the chat.","summary":"<p>Unique message identifier inside the chat.</p>","abstract":false,"location":{"filename":"src/types/inaccessible_message.cr","line_number":14,"url":null},"def":{"name":"message_id","return_type":"Int32","visibility":"Public","body":"@message_id"},"external_var":false},{"html_id":"message_id=(message_id:Int32)-instance-method","name":"message_id=","doc":"Unique message identifier inside the chat.","summary":"<p>Unique message identifier inside the chat.</p>","abstract":false,"args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"args_string":"(message_id : Int32)","args_html":"(message_id : Int32)","location":{"filename":"src/types/inaccessible_message.cr","line_number":14,"url":null},"def":{"name":"message_id=","args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"visibility":"Public","body":"@message_id = message_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineKeyboardButton","path":"Hamilton/Types/InlineKeyboardButton.html","kind":"class","full_name":"Hamilton::Types::InlineKeyboardButton","name":"InlineKeyboardButton","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_keyboard_button.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents one button of an inline keyboard. Exactly one of the optional fields must be used to specify type of the button.","summary":"<p>This object represents one button of an inline keyboard.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"callback_data:String|Nil-instance-method","name":"callback_data","doc":"Data to be sent in a callback query to the bot when the button is pressed, 1-64 bytes.","summary":"<p>Data to be sent in a callback query to the bot when the button is pressed, 1-64 bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":17,"url":null},"def":{"name":"callback_data","return_type":"String | Nil","visibility":"Public","body":"@callback_data"},"external_var":false},{"html_id":"callback_data=(callback_data:String|Nil)-instance-method","name":"callback_data=","doc":"Data to be sent in a callback query to the bot when the button is pressed, 1-64 bytes.","summary":"<p>Data to be sent in a callback query to the bot when the button is pressed, 1-64 bytes.</p>","abstract":false,"args":[{"name":"callback_data","external_name":"callback_data","restriction":"String | Nil"}],"args_string":"(callback_data : String | Nil)","args_html":"(callback_data : String | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":17,"url":null},"def":{"name":"callback_data=","args":[{"name":"callback_data","external_name":"callback_data","restriction":"String | Nil"}],"visibility":"Public","body":"@callback_data = callback_data"},"external_var":false},{"html_id":"callback_game:Hamilton::Types::CallbackGame|Nil-instance-method","name":"callback_game","doc":"Description of the game that will be launched when the user presses the button.\n\nNOTE: This type of button must always be the first button in the first row.","summary":"<p>Description of the game that will be launched when the user presses the button.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":41,"url":null},"def":{"name":"callback_game","return_type":"Hamilton::Types::CallbackGame | Nil","visibility":"Public","body":"@callback_game"},"external_var":false},{"html_id":"callback_game=(callback_game:Hamilton::Types::CallbackGame|Nil)-instance-method","name":"callback_game=","doc":"Description of the game that will be launched when the user presses the button.\n\nNOTE: This type of button must always be the first button in the first row.","summary":"<p>Description of the game that will be launched when the user presses the button.</p>","abstract":false,"args":[{"name":"callback_game","external_name":"callback_game","restriction":"Hamilton::Types::CallbackGame | Nil"}],"args_string":"(callback_game : Hamilton::Types::CallbackGame | Nil)","args_html":"(callback_game : <a href=\"../../Hamilton/Types/CallbackGame.html\">Hamilton::Types::CallbackGame</a> | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":41,"url":null},"def":{"name":"callback_game=","args":[{"name":"callback_game","external_name":"callback_game","restriction":"Hamilton::Types::CallbackGame | Nil"}],"visibility":"Public","body":"@callback_game = callback_game"},"external_var":false},{"html_id":"copy_text:Hamilton::Types::CopyTextButton|Nil-instance-method","name":"copy_text","doc":"Description of the button that copies the specified text to the clipboard.","summary":"<p>Description of the button that copies the specified text to the clipboard.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":36,"url":null},"def":{"name":"copy_text","return_type":"Hamilton::Types::CopyTextButton | Nil","visibility":"Public","body":"@copy_text"},"external_var":false},{"html_id":"copy_text=(copy_text:Hamilton::Types::CopyTextButton|Nil)-instance-method","name":"copy_text=","doc":"Description of the button that copies the specified text to the clipboard.","summary":"<p>Description of the button that copies the specified text to the clipboard.</p>","abstract":false,"args":[{"name":"copy_text","external_name":"copy_text","restriction":"Hamilton::Types::CopyTextButton | Nil"}],"args_string":"(copy_text : Hamilton::Types::CopyTextButton | Nil)","args_html":"(copy_text : <a href=\"../../Hamilton/Types/CopyTextButton.html\">Hamilton::Types::CopyTextButton</a> | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":36,"url":null},"def":{"name":"copy_text=","args":[{"name":"copy_text","external_name":"copy_text","restriction":"Hamilton::Types::CopyTextButton | Nil"}],"visibility":"Public","body":"@copy_text = copy_text"},"external_var":false},{"html_id":"login_url:Hamilton::Types::LoginUrl|Nil-instance-method","name":"login_url","doc":"An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget.","summary":"<p>An HTTPS URL used to automatically authorize the user.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":23,"url":null},"def":{"name":"login_url","return_type":"Hamilton::Types::LoginUrl | Nil","visibility":"Public","body":"@login_url"},"external_var":false},{"html_id":"login_url=(login_url:Hamilton::Types::LoginUrl|Nil)-instance-method","name":"login_url=","doc":"An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget.","summary":"<p>An HTTPS URL used to automatically authorize the user.</p>","abstract":false,"args":[{"name":"login_url","external_name":"login_url","restriction":"Hamilton::Types::LoginUrl | Nil"}],"args_string":"(login_url : Hamilton::Types::LoginUrl | Nil)","args_html":"(login_url : <a href=\"../../Hamilton/Types/LoginUrl.html\">Hamilton::Types::LoginUrl</a> | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":23,"url":null},"def":{"name":"login_url=","args":[{"name":"login_url","external_name":"login_url","restriction":"Hamilton::Types::LoginUrl | Nil"}],"visibility":"Public","body":"@login_url = login_url"},"external_var":false},{"html_id":"pay:Bool|Nil-instance-method","name":"pay","doc":"Specify True, to send a Pay button. Substrings “⭐” and “XTR” in the buttons's text will be replaced with a Telegram Star icon.\n\nNOTE: This type of button must always be the first button in the first row and can only be used in invoice messages.","summary":"<p>Specify True, to send a Pay button.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":46,"url":null},"def":{"name":"pay","return_type":"Bool | Nil","visibility":"Public","body":"@pay"},"external_var":false},{"html_id":"pay=(pay:Bool|Nil)-instance-method","name":"pay=","doc":"Specify True, to send a Pay button. Substrings “⭐” and “XTR” in the buttons's text will be replaced with a Telegram Star icon.\n\nNOTE: This type of button must always be the first button in the first row and can only be used in invoice messages.","summary":"<p>Specify True, to send a Pay button.</p>","abstract":false,"args":[{"name":"pay","external_name":"pay","restriction":"Bool | Nil"}],"args_string":"(pay : Bool | Nil)","args_html":"(pay : Bool | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":46,"url":null},"def":{"name":"pay=","args":[{"name":"pay","external_name":"pay","restriction":"Bool | Nil"}],"visibility":"Public","body":"@pay = pay"},"external_var":false},{"html_id":"switch_inline_query:String|Nil-instance-method","name":"switch_inline_query","doc":"If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent in channel direct messages chats and on behalf of a Telegram Business account.","summary":"<p>If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":26,"url":null},"def":{"name":"switch_inline_query","return_type":"String | Nil","visibility":"Public","body":"@switch_inline_query"},"external_var":false},{"html_id":"switch_inline_query=(switch_inline_query:String|Nil)-instance-method","name":"switch_inline_query=","doc":"If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent in channel direct messages chats and on behalf of a Telegram Business account.","summary":"<p>If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field.</p>","abstract":false,"args":[{"name":"switch_inline_query","external_name":"switch_inline_query","restriction":"String | Nil"}],"args_string":"(switch_inline_query : String | Nil)","args_html":"(switch_inline_query : String | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":26,"url":null},"def":{"name":"switch_inline_query=","args":[{"name":"switch_inline_query","external_name":"switch_inline_query","restriction":"String | Nil"}],"visibility":"Public","body":"@switch_inline_query = switch_inline_query"},"external_var":false},{"html_id":"switch_inline_query_chosen_chat:Hamilton::Types::SwitchInlineQueryChosenChat|Nil-instance-method","name":"switch_inline_query_chosen_chat","doc":"If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent in channel direct messages chats and on behalf of a Telegram Business account.","summary":"<p>If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":33,"url":null},"def":{"name":"switch_inline_query_chosen_chat","return_type":"Hamilton::Types::SwitchInlineQueryChosenChat | Nil","visibility":"Public","body":"@switch_inline_query_chosen_chat"},"external_var":false},{"html_id":"switch_inline_query_chosen_chat=(switch_inline_query_chosen_chat:Hamilton::Types::SwitchInlineQueryChosenChat|Nil)-instance-method","name":"switch_inline_query_chosen_chat=","doc":"If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent in channel direct messages chats and on behalf of a Telegram Business account.","summary":"<p>If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field.</p>","abstract":false,"args":[{"name":"switch_inline_query_chosen_chat","external_name":"switch_inline_query_chosen_chat","restriction":"Hamilton::Types::SwitchInlineQueryChosenChat | Nil"}],"args_string":"(switch_inline_query_chosen_chat : Hamilton::Types::SwitchInlineQueryChosenChat | Nil)","args_html":"(switch_inline_query_chosen_chat : <a href=\"../../Hamilton/Types/SwitchInlineQueryChosenChat.html\">Hamilton::Types::SwitchInlineQueryChosenChat</a> | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":33,"url":null},"def":{"name":"switch_inline_query_chosen_chat=","args":[{"name":"switch_inline_query_chosen_chat","external_name":"switch_inline_query_chosen_chat","restriction":"Hamilton::Types::SwitchInlineQueryChosenChat | Nil"}],"visibility":"Public","body":"@switch_inline_query_chosen_chat = switch_inline_query_chosen_chat"},"external_var":false},{"html_id":"switch_inline_query_current_chat:String|Nil-instance-method","name":"switch_inline_query_current_chat","doc":"If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted.\nThis offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent in channel direct messages chats and on behalf of a Telegram Business account.","summary":"<p>If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":30,"url":null},"def":{"name":"switch_inline_query_current_chat","return_type":"String | Nil","visibility":"Public","body":"@switch_inline_query_current_chat"},"external_var":false},{"html_id":"switch_inline_query_current_chat=(switch_inline_query_current_chat:String|Nil)-instance-method","name":"switch_inline_query_current_chat=","doc":"If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted.\nThis offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent in channel direct messages chats and on behalf of a Telegram Business account.","summary":"<p>If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field.</p>","abstract":false,"args":[{"name":"switch_inline_query_current_chat","external_name":"switch_inline_query_current_chat","restriction":"String | Nil"}],"args_string":"(switch_inline_query_current_chat : String | Nil)","args_html":"(switch_inline_query_current_chat : String | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":30,"url":null},"def":{"name":"switch_inline_query_current_chat=","args":[{"name":"switch_inline_query_current_chat","external_name":"switch_inline_query_current_chat","restriction":"String | Nil"}],"visibility":"Public","body":"@switch_inline_query_current_chat = switch_inline_query_current_chat"},"external_var":false},{"html_id":"text:String-instance-method","name":"text","doc":"Label text on the button.","summary":"<p>Label text on the button.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":11,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"Label text on the button.","summary":"<p>Label text on the button.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":11,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"url:String|Nil-instance-method","name":"url","doc":"HTTP or `tg://` URL to be opened when the button is pressed. Links `tg://user?id=<user_id>` can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings.","summary":"<p>HTTP or <code>tg://</code> URL to be opened when the button is pressed.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":14,"url":null},"def":{"name":"url","return_type":"String | Nil","visibility":"Public","body":"@url"},"external_var":false},{"html_id":"url=(url:String|Nil)-instance-method","name":"url=","doc":"HTTP or `tg://` URL to be opened when the button is pressed. Links `tg://user?id=<user_id>` can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings.","summary":"<p>HTTP or <code>tg://</code> URL to be opened when the button is pressed.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String | Nil"}],"args_string":"(url : String | Nil)","args_html":"(url : String | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":14,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String | Nil"}],"visibility":"Public","body":"@url = url"},"external_var":false},{"html_id":"web_app:Hamilton::Types::WebAppInfo|Nil-instance-method","name":"web_app","doc":"Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method `answerWebAppQuery`. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account.","summary":"<p>Description of the Web App that will be launched when the user presses the button.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_button.cr","line_number":20,"url":null},"def":{"name":"web_app","return_type":"Hamilton::Types::WebAppInfo | Nil","visibility":"Public","body":"@web_app"},"external_var":false},{"html_id":"web_app=(web_app:Hamilton::Types::WebAppInfo|Nil)-instance-method","name":"web_app=","doc":"Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method `answerWebAppQuery`. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account.","summary":"<p>Description of the Web App that will be launched when the user presses the button.</p>","abstract":false,"args":[{"name":"web_app","external_name":"web_app","restriction":"Hamilton::Types::WebAppInfo | Nil"}],"args_string":"(web_app : Hamilton::Types::WebAppInfo | Nil)","args_html":"(web_app : <a href=\"../../Hamilton/Types/WebAppInfo.html\">Hamilton::Types::WebAppInfo</a> | Nil)","location":{"filename":"src/types/inline_keyboard_button.cr","line_number":20,"url":null},"def":{"name":"web_app=","args":[{"name":"web_app","external_name":"web_app","restriction":"Hamilton::Types::WebAppInfo | Nil"}],"visibility":"Public","body":"@web_app = web_app"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineKeyboardMarkup","path":"Hamilton/Types/InlineKeyboardMarkup.html","kind":"class","full_name":"Hamilton::Types::InlineKeyboardMarkup","name":"InlineKeyboardMarkup","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_keyboard_markup.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an inline keyboard that appears right next to the message it belongs to.","summary":"<p>This object represents an inline keyboard that appears right next to the message it belongs to.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_keyboard_markup.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_keyboard_markup.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"inline_keyboard:Array(Array(Hamilton::Types::InlineKeyboardButton))-instance-method","name":"inline_keyboard","doc":"Array of button rows, each represented by an Array of InlineKeyboardButton objects.","summary":"<p>Array of button rows, each represented by an Array of InlineKeyboardButton objects.</p>","abstract":false,"location":{"filename":"src/types/inline_keyboard_markup.cr","line_number":11,"url":null},"def":{"name":"inline_keyboard","return_type":"Array(Array(Hamilton::Types::InlineKeyboardButton))","visibility":"Public","body":"@inline_keyboard"},"external_var":false},{"html_id":"inline_keyboard=(inline_keyboard:Array(Array(Hamilton::Types::InlineKeyboardButton)))-instance-method","name":"inline_keyboard=","doc":"Array of button rows, each represented by an Array of InlineKeyboardButton objects.","summary":"<p>Array of button rows, each represented by an Array of InlineKeyboardButton objects.</p>","abstract":false,"args":[{"name":"inline_keyboard","external_name":"inline_keyboard","restriction":"Array(Array(Hamilton::Types::InlineKeyboardButton))"}],"args_string":"(inline_keyboard : Array(Array(Hamilton::Types::InlineKeyboardButton)))","args_html":"(inline_keyboard : Array(Array(<a href=\"../../Hamilton/Types/InlineKeyboardButton.html\">Hamilton::Types::InlineKeyboardButton</a>)))","location":{"filename":"src/types/inline_keyboard_markup.cr","line_number":11,"url":null},"def":{"name":"inline_keyboard=","args":[{"name":"inline_keyboard","external_name":"inline_keyboard","restriction":"Array(Array(Hamilton::Types::InlineKeyboardButton))"}],"visibility":"Public","body":"@inline_keyboard = inline_keyboard"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQuery","path":"Hamilton/Types/InlineQuery.html","kind":"class","full_name":"Hamilton::Types::InlineQuery","name":"InlineQuery","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.","summary":"<p>This object represents an incoming inline query.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat_type:String|Nil-instance-method","name":"chat_type","doc":"Type of the chat from which the inline query was sent. Can be either “sender” for a private chat with the inline query sender, “private”, “group”, “supergroup”, or “channel”. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat.","summary":"<p>Type of the chat from which the inline query was sent.</p>","abstract":false,"location":{"filename":"src/types/inline_query.cr","line_number":23,"url":null},"def":{"name":"chat_type","return_type":"String | Nil","visibility":"Public","body":"@chat_type"},"external_var":false},{"html_id":"chat_type=(chat_type:String|Nil)-instance-method","name":"chat_type=","doc":"Type of the chat from which the inline query was sent. Can be either “sender” for a private chat with the inline query sender, “private”, “group”, “supergroup”, or “channel”. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat.","summary":"<p>Type of the chat from which the inline query was sent.</p>","abstract":false,"args":[{"name":"chat_type","external_name":"chat_type","restriction":"String | Nil"}],"args_string":"(chat_type : String | Nil)","args_html":"(chat_type : String | Nil)","location":{"filename":"src/types/inline_query.cr","line_number":23,"url":null},"def":{"name":"chat_type=","args":[{"name":"chat_type","external_name":"chat_type","restriction":"String | Nil"}],"visibility":"Public","body":"@chat_type = chat_type"},"external_var":false},{"html_id":"from:Hamilton::Types::User-instance-method","name":"from","doc":"Sender.","summary":"<p>Sender.</p>","abstract":false,"location":{"filename":"src/types/inline_query.cr","line_number":14,"url":null},"def":{"name":"from","return_type":"Hamilton::Types::User","visibility":"Public","body":"@from"},"external_var":false},{"html_id":"from=(from:Hamilton::Types::User)-instance-method","name":"from=","doc":"Sender.","summary":"<p>Sender.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"args_string":"(from : Hamilton::Types::User)","args_html":"(from : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/inline_query.cr","line_number":14,"url":null},"def":{"name":"from=","args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@from = from"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this query.","summary":"<p>Unique identifier for this query.</p>","abstract":false,"location":{"filename":"src/types/inline_query.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this query.","summary":"<p>Unique identifier for this query.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"location:Hamilton::Types::Location|Nil-instance-method","name":"location","doc":"Sender location, only for bots that request user location.","summary":"<p>Sender location, only for bots that request user location.</p>","abstract":false,"location":{"filename":"src/types/inline_query.cr","line_number":26,"url":null},"def":{"name":"location","return_type":"Hamilton::Types::Location | Nil","visibility":"Public","body":"@location"},"external_var":false},{"html_id":"location=(location:Hamilton::Types::Location|Nil)-instance-method","name":"location=","doc":"Sender location, only for bots that request user location.","summary":"<p>Sender location, only for bots that request user location.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"args_string":"(location : Hamilton::Types::Location | Nil)","args_html":"(location : <a href=\"../../Hamilton/Types/Location.html\">Hamilton::Types::Location</a> | Nil)","location":{"filename":"src/types/inline_query.cr","line_number":26,"url":null},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"visibility":"Public","body":"@location = location"},"external_var":false},{"html_id":"offset:String-instance-method","name":"offset","doc":"Offset of the results to be returned, can be controlled by the bot.","summary":"<p>Offset of the results to be returned, can be controlled by the bot.</p>","abstract":false,"location":{"filename":"src/types/inline_query.cr","line_number":20,"url":null},"def":{"name":"offset","return_type":"String","visibility":"Public","body":"@offset"},"external_var":false},{"html_id":"offset=(offset:String)-instance-method","name":"offset=","doc":"Offset of the results to be returned, can be controlled by the bot.","summary":"<p>Offset of the results to be returned, can be controlled by the bot.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"String"}],"args_string":"(offset : String)","args_html":"(offset : String)","location":{"filename":"src/types/inline_query.cr","line_number":20,"url":null},"def":{"name":"offset=","args":[{"name":"offset","external_name":"offset","restriction":"String"}],"visibility":"Public","body":"@offset = offset"},"external_var":false},{"html_id":"query:String-instance-method","name":"query","doc":"Text of the query (up to 256 characters).","summary":"<p>Text of the query (up to 256 characters).</p>","abstract":false,"location":{"filename":"src/types/inline_query.cr","line_number":17,"url":null},"def":{"name":"query","return_type":"String","visibility":"Public","body":"@query"},"external_var":false},{"html_id":"query=(query:String)-instance-method","name":"query=","doc":"Text of the query (up to 256 characters).","summary":"<p>Text of the query (up to 256 characters).</p>","abstract":false,"args":[{"name":"query","external_name":"query","restriction":"String"}],"args_string":"(query : String)","args_html":"(query : String)","location":{"filename":"src/types/inline_query.cr","line_number":17,"url":null},"def":{"name":"query=","args":[{"name":"query","external_name":"query","restriction":"String"}],"visibility":"Public","body":"@query = query"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResult","path":"Hamilton/Types/InlineQueryResult.html","kind":"alias","full_name":"Hamilton::Types::InlineQueryResult","name":"InlineQueryResult","abstract":false,"locations":[{"filename":"src/types/inline_query_result.cr","line_number":818,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::InlineQueryResultArticle | Hamilton::Types::InlineQueryResultAudio | Hamilton::Types::InlineQueryResultCachedAudio | Hamilton::Types::InlineQueryResultCachedDocument | Hamilton::Types::InlineQueryResultCachedGif | Hamilton::Types::InlineQueryResultCachedMpeg4Gif | Hamilton::Types::InlineQueryResultCachedPhoto | Hamilton::Types::InlineQueryResultCachedSticker | Hamilton::Types::InlineQueryResultCachedVideo | Hamilton::Types::InlineQueryResultCachedVoice | Hamilton::Types::InlineQueryResultContact | Hamilton::Types::InlineQueryResultDocument | Hamilton::Types::InlineQueryResultGame | Hamilton::Types::InlineQueryResultGif | Hamilton::Types::InlineQueryResultLocation | Hamilton::Types::InlineQueryResultMpeg4Gif | Hamilton::Types::InlineQueryResultPhoto | Hamilton::Types::InlineQueryResultVenue | Hamilton::Types::InlineQueryResultVideo | Hamilton::Types::InlineQueryResultVoice)","aliased_html":"<a href=\"../../Hamilton/Types/InlineQueryResultArticle.html\">Hamilton::Types::InlineQueryResultArticle</a> | <a href=\"../../Hamilton/Types/InlineQueryResultAudio.html\">Hamilton::Types::InlineQueryResultAudio</a> | <a href=\"../../Hamilton/Types/InlineQueryResultCachedAudio.html\">Hamilton::Types::InlineQueryResultCachedAudio</a> | <a href=\"../../Hamilton/Types/InlineQueryResultCachedDocument.html\">Hamilton::Types::InlineQueryResultCachedDocument</a> | <a href=\"../../Hamilton/Types/InlineQueryResultCachedGif.html\">Hamilton::Types::InlineQueryResultCachedGif</a> | <a href=\"../../Hamilton/Types/InlineQueryResultCachedMpeg4Gif.html\">Hamilton::Types::InlineQueryResultCachedMpeg4Gif</a> | <a href=\"../../Hamilton/Types/InlineQueryResultCachedPhoto.html\">Hamilton::Types::InlineQueryResultCachedPhoto</a> | <a href=\"../../Hamilton/Types/InlineQueryResultCachedSticker.html\">Hamilton::Types::InlineQueryResultCachedSticker</a> | <a href=\"../../Hamilton/Types/InlineQueryResultCachedVideo.html\">Hamilton::Types::InlineQueryResultCachedVideo</a> | <a href=\"../../Hamilton/Types/InlineQueryResultCachedVoice.html\">Hamilton::Types::InlineQueryResultCachedVoice</a> | <a href=\"../../Hamilton/Types/InlineQueryResultContact.html\">Hamilton::Types::InlineQueryResultContact</a> | <a href=\"../../Hamilton/Types/InlineQueryResultDocument.html\">Hamilton::Types::InlineQueryResultDocument</a> | <a href=\"../../Hamilton/Types/InlineQueryResultGame.html\">Hamilton::Types::InlineQueryResultGame</a> | <a href=\"../../Hamilton/Types/InlineQueryResultGif.html\">Hamilton::Types::InlineQueryResultGif</a> | <a href=\"../../Hamilton/Types/InlineQueryResultLocation.html\">Hamilton::Types::InlineQueryResultLocation</a> | <a href=\"../../Hamilton/Types/InlineQueryResultMpeg4Gif.html\">Hamilton::Types::InlineQueryResultMpeg4Gif</a> | <a href=\"../../Hamilton/Types/InlineQueryResultPhoto.html\">Hamilton::Types::InlineQueryResultPhoto</a> | <a href=\"../../Hamilton/Types/InlineQueryResultVenue.html\">Hamilton::Types::InlineQueryResultVenue</a> | <a href=\"../../Hamilton/Types/InlineQueryResultVideo.html\">Hamilton::Types::InlineQueryResultVideo</a> | <a href=\"../../Hamilton/Types/InlineQueryResultVoice.html\">Hamilton::Types::InlineQueryResultVoice</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents one result of an inline query.\n\nNOTE: All URLs passed in inline query results will be available to end users and therefore must be assumed to be public.","summary":"<p>This object represents one result of an inline query.</p>"},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultArticle","path":"Hamilton/Types/InlineQueryResultArticle.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultArticle","name":"InlineQueryResultArticle","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to an article or web page.","summary":"<p>Represents a link to an article or web page.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"description:String|Nil-instance-method","name":"description","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":29,"url":null},"def":{"name":"description","return_type":"String | Nil","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String|Nil)-instance-method","name":"description=","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"args_string":"(description : String | Nil)","args_html":"(description : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":29,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":14,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":14,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent-instance-method","name":"input_message_content","doc":"Content of the message to be sent.","summary":"<p>Content of the message to be sent.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":20,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent.","summary":"<p>Content of the message to be sent.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a>)","location":{"filename":"src/types/inline_query_result.cr","line_number":20,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":23,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":23,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"thumbnail_height:Int32|Nil-instance-method","name":"thumbnail_height","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":38,"url":null},"def":{"name":"thumbnail_height","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_height"},"external_var":false},{"html_id":"thumbnail_height=(thumbnail_height:Int32|Nil)-instance-method","name":"thumbnail_height=","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_height : Int32 | Nil)","args_html":"(thumbnail_height : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":38,"url":null},"def":{"name":"thumbnail_height=","args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_height = thumbnail_height"},"external_var":false},{"html_id":"thumbnail_url:String|Nil-instance-method","name":"thumbnail_url","doc":"Url of the thumbnail for the result.","summary":"<p>Url of the thumbnail for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":32,"url":null},"def":{"name":"thumbnail_url","return_type":"String | Nil","visibility":"Public","body":"@thumbnail_url"},"external_var":false},{"html_id":"thumbnail_url=(thumbnail_url:String|Nil)-instance-method","name":"thumbnail_url=","doc":"Url of the thumbnail for the result.","summary":"<p>Url of the thumbnail for the result.</p>","abstract":false,"args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"args_string":"(thumbnail_url : String | Nil)","args_html":"(thumbnail_url : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":32,"url":null},"def":{"name":"thumbnail_url=","args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"visibility":"Public","body":"@thumbnail_url = thumbnail_url"},"external_var":false},{"html_id":"thumbnail_width:Int32|Nil-instance-method","name":"thumbnail_width","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":35,"url":null},"def":{"name":"thumbnail_width","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_width"},"external_var":false},{"html_id":"thumbnail_width=(thumbnail_width:Int32|Nil)-instance-method","name":"thumbnail_width=","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_width : Int32 | Nil)","args_html":"(thumbnail_width : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":35,"url":null},"def":{"name":"thumbnail_width=","args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_width = thumbnail_width"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title of the result.","summary":"<p>Title of the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":17,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title of the result.","summary":"<p>Title of the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":17,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"article\".","summary":"<p>Type of the result, must be &quot;article&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"article\".","summary":"<p>Type of the result, must be &quot;article&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"url:String|Nil-instance-method","name":"url","doc":"URL of the result.","summary":"<p>URL of the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":26,"url":null},"def":{"name":"url","return_type":"String | Nil","visibility":"Public","body":"@url"},"external_var":false},{"html_id":"url=(url:String|Nil)-instance-method","name":"url=","doc":"URL of the result.","summary":"<p>URL of the result.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String | Nil"}],"args_string":"(url : String | Nil)","args_html":"(url : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":26,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String | Nil"}],"visibility":"Public","body":"@url = url"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultAudio","path":"Hamilton/Types/InlineQueryResultAudio.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultAudio","name":"InlineQueryResultAudio","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":253,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the audio.","summary":"<p>Represents a link to an MP3 audio file.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":254,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":254,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"audio_duration:Int32|Nil-instance-method","name":"audio_duration","doc":"Audio duration in seconds.","summary":"<p>Audio duration in seconds.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":282,"url":null},"def":{"name":"audio_duration","return_type":"Int32 | Nil","visibility":"Public","body":"@audio_duration"},"external_var":false},{"html_id":"audio_duration=(audio_duration:Int32|Nil)-instance-method","name":"audio_duration=","doc":"Audio duration in seconds.","summary":"<p>Audio duration in seconds.</p>","abstract":false,"args":[{"name":"audio_duration","external_name":"audio_duration","restriction":"Int32 | Nil"}],"args_string":"(audio_duration : Int32 | Nil)","args_html":"(audio_duration : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":282,"url":null},"def":{"name":"audio_duration=","args":[{"name":"audio_duration","external_name":"audio_duration","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@audio_duration = audio_duration"},"external_var":false},{"html_id":"audio_url:String-instance-method","name":"audio_url","doc":"A valid URL for the audio file.","summary":"<p>A valid URL for the audio file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":264,"url":null},"def":{"name":"audio_url","return_type":"String","visibility":"Public","body":"@audio_url"},"external_var":false},{"html_id":"audio_url=(audio_url:String)-instance-method","name":"audio_url=","doc":"A valid URL for the audio file.","summary":"<p>A valid URL for the audio file.</p>","abstract":false,"args":[{"name":"audio_url","external_name":"audio_url","restriction":"String"}],"args_string":"(audio_url : String)","args_html":"(audio_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":264,"url":null},"def":{"name":"audio_url=","args":[{"name":"audio_url","external_name":"audio_url","restriction":"String"}],"visibility":"Public","body":"@audio_url = audio_url"},"external_var":false},{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption, 0-1024 characters after entities parsing.","summary":"<p>Caption, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":270,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption, 0-1024 characters after entities parsing.","summary":"<p>Caption, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":270,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultAudio.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":276,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultAudio.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":276,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":261,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":261,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the audio.","summary":"<p>Content of the message to be sent instead of the audio.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":288,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the audio.","summary":"<p>Content of the message to be sent instead of the audio.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":288,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the audio caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the audio caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":273,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the audio caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the audio caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":273,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"performer:String|Nil-instance-method","name":"performer","doc":"Performer.","summary":"<p>Performer.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":279,"url":null},"def":{"name":"performer","return_type":"String | Nil","visibility":"Public","body":"@performer"},"external_var":false},{"html_id":"performer=(performer:String|Nil)-instance-method","name":"performer=","doc":"Performer.","summary":"<p>Performer.</p>","abstract":false,"args":[{"name":"performer","external_name":"performer","restriction":"String | Nil"}],"args_string":"(performer : String | Nil)","args_html":"(performer : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":279,"url":null},"def":{"name":"performer=","args":[{"name":"performer","external_name":"performer","restriction":"String | Nil"}],"visibility":"Public","body":"@performer = performer"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":285,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":285,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title.","summary":"<p>Title.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":267,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title.","summary":"<p>Title.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":267,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"audio\".","summary":"<p>Type of the result, must be &quot;audio&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":258,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"audio\".","summary":"<p>Type of the result, must be &quot;audio&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":258,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedAudio","path":"Hamilton/Types/InlineQueryResultCachedAudio.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedAudio","name":"InlineQueryResultCachedAudio","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":786,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the audio.","summary":"<p>Represents a link to an MP3 audio file stored on the Telegram servers.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":787,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":787,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"audio_file_id:String-instance-method","name":"audio_file_id","doc":"A valid file identifier for the audio file.","summary":"<p>A valid file identifier for the audio file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":797,"url":null},"def":{"name":"audio_file_id","return_type":"String","visibility":"Public","body":"@audio_file_id"},"external_var":false},{"html_id":"audio_file_id=(audio_file_id:String)-instance-method","name":"audio_file_id=","doc":"A valid file identifier for the audio file.","summary":"<p>A valid file identifier for the audio file.</p>","abstract":false,"args":[{"name":"audio_file_id","external_name":"audio_file_id","restriction":"String"}],"args_string":"(audio_file_id : String)","args_html":"(audio_file_id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":797,"url":null},"def":{"name":"audio_file_id=","args":[{"name":"audio_file_id","external_name":"audio_file_id","restriction":"String"}],"visibility":"Public","body":"@audio_file_id = audio_file_id"},"external_var":false},{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption, 0-1024 characters after entities parsing.","summary":"<p>Caption, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":800,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption, 0-1024 characters after entities parsing.","summary":"<p>Caption, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":800,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedAudio.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":806,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedAudio.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":806,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":794,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":794,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the audio.","summary":"<p>Content of the message to be sent instead of the audio.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":812,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the audio.","summary":"<p>Content of the message to be sent instead of the audio.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":812,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the audio caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the audio caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":803,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the audio caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the audio caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":803,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":809,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":809,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"audio\".","summary":"<p>Type of the result, must be &quot;audio&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":791,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"audio\".","summary":"<p>Type of the result, must be &quot;audio&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":791,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedDocument","path":"Hamilton/Types/InlineQueryResultCachedDocument.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedDocument","name":"InlineQueryResultCachedDocument","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":675,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the file.","summary":"<p>Represents a link to a file stored on the Telegram servers.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":676,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":676,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the document to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the document to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":695,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the document to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the document to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":695,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedDocument.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":701,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedDocument.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":701,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"description:String|Nil-instance-method","name":"description","doc":"Short description of the result","summary":"<p>Short description of the result</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":692,"url":null},"def":{"name":"description","return_type":"String | Nil","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String|Nil)-instance-method","name":"description=","doc":"Short description of the result","summary":"<p>Short description of the result</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"args_string":"(description : String | Nil)","args_html":"(description : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":692,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"document_file_id:String-instance-method","name":"document_file_id","doc":"A valid file identifier for the file.","summary":"<p>A valid file identifier for the file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":689,"url":null},"def":{"name":"document_file_id","return_type":"String","visibility":"Public","body":"@document_file_id"},"external_var":false},{"html_id":"document_file_id=(document_file_id:String)-instance-method","name":"document_file_id=","doc":"A valid file identifier for the file.","summary":"<p>A valid file identifier for the file.</p>","abstract":false,"args":[{"name":"document_file_id","external_name":"document_file_id","restriction":"String"}],"args_string":"(document_file_id : String)","args_html":"(document_file_id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":689,"url":null},"def":{"name":"document_file_id=","args":[{"name":"document_file_id","external_name":"document_file_id","restriction":"String"}],"visibility":"Public","body":"@document_file_id = document_file_id"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":683,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":683,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the file.","summary":"<p>Content of the message to be sent instead of the file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":707,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the file.","summary":"<p>Content of the message to be sent instead of the file.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":707,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the document caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the document caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":698,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the document caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the document caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":698,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":704,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":704,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":686,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":686,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"document\".","summary":"<p>Type of the result, must be &quot;document&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":680,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"document\".","summary":"<p>Type of the result, must be &quot;document&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":680,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedGif","path":"Hamilton/Types/InlineQueryResultCachedGif.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedGif","name":"InlineQueryResultCachedGif","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":579,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use `input_message_content` to send a message with specified content instead of the animation.","summary":"<p>Represents a link to an animated GIF file stored on the Telegram servers.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":580,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":580,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the GIF file to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the GIF file to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":596,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the GIF file to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the GIF file to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":596,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedGif.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":602,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedGif.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":602,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"gif_file_id:String-instance-method","name":"gif_file_id","doc":"A valid file identifier for the GIF file.","summary":"<p>A valid file identifier for the GIF file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":590,"url":null},"def":{"name":"gif_file_id","return_type":"String","visibility":"Public","body":"@gif_file_id"},"external_var":false},{"html_id":"gif_file_id=(gif_file_id:String)-instance-method","name":"gif_file_id=","doc":"A valid file identifier for the GIF file.","summary":"<p>A valid file identifier for the GIF file.</p>","abstract":false,"args":[{"name":"gif_file_id","external_name":"gif_file_id","restriction":"String"}],"args_string":"(gif_file_id : String)","args_html":"(gif_file_id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":590,"url":null},"def":{"name":"gif_file_id=","args":[{"name":"gif_file_id","external_name":"gif_file_id","restriction":"String"}],"visibility":"Public","body":"@gif_file_id = gif_file_id"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":587,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":587,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the GIF animation.","summary":"<p>Content of the message to be sent instead of the GIF animation.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":611,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the GIF animation.","summary":"<p>Content of the message to be sent instead of the GIF animation.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":611,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":599,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":599,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":608,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":608,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":605,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":605,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":593,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":593,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"gif\".","summary":"<p>Type of the result, must be &quot;gif&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":584,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"gif\".","summary":"<p>Type of the result, must be &quot;gif&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":584,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedMpeg4Gif","path":"Hamilton/Types/InlineQueryResultCachedMpeg4Gif.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedMpeg4Gif","name":"InlineQueryResultCachedMpeg4Gif","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":616,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the animation.","summary":"<p>Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":617,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":617,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":633,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":633,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedMpeg4Gif.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":639,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedMpeg4Gif.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":639,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":624,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":624,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the video animation.","summary":"<p>Content of the message to be sent instead of the video animation.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":648,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the video animation.","summary":"<p>Content of the message to be sent instead of the video animation.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":648,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"mpeg4_file_id:String-instance-method","name":"mpeg4_file_id","doc":"A valid file identifier for the MPEG4 file.","summary":"<p>A valid file identifier for the MPEG4 file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":627,"url":null},"def":{"name":"mpeg4_file_id","return_type":"String","visibility":"Public","body":"@mpeg4_file_id"},"external_var":false},{"html_id":"mpeg4_file_id=(mpeg4_file_id:String)-instance-method","name":"mpeg4_file_id=","doc":"A valid file identifier for the MPEG4 file.","summary":"<p>A valid file identifier for the MPEG4 file.</p>","abstract":false,"args":[{"name":"mpeg4_file_id","external_name":"mpeg4_file_id","restriction":"String"}],"args_string":"(mpeg4_file_id : String)","args_html":"(mpeg4_file_id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":627,"url":null},"def":{"name":"mpeg4_file_id=","args":[{"name":"mpeg4_file_id","external_name":"mpeg4_file_id","restriction":"String"}],"visibility":"Public","body":"@mpeg4_file_id = mpeg4_file_id"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":636,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":636,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":645,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":645,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":642,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":642,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":630,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":630,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"mpeg4_gif\".","summary":"<p>Type of the result, must be &quot;mpeg4_gif&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":621,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"mpeg4_gif\".","summary":"<p>Type of the result, must be &quot;mpeg4_gif&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":621,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedPhoto","path":"Hamilton/Types/InlineQueryResultCachedPhoto.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedPhoto","name":"InlineQueryResultCachedPhoto","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":539,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the photo.","summary":"<p>Represents a link to a photo stored on the Telegram servers.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":540,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":540,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the photo to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the photo to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":559,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the photo to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the photo to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":559,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedPhoto.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":565,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedPhoto.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":565,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"description:String|Nil-instance-method","name":"description","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":556,"url":null},"def":{"name":"description","return_type":"String | Nil","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String|Nil)-instance-method","name":"description=","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"args_string":"(description : String | Nil)","args_html":"(description : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":556,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":547,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":547,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the photo.","summary":"<p>Content of the message to be sent instead of the photo.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":574,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the photo.","summary":"<p>Content of the message to be sent instead of the photo.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":574,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the photo caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the photo caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":562,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the photo caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the photo caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":562,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"photo_file_id:String-instance-method","name":"photo_file_id","doc":"A valid file identifier of the photo.","summary":"<p>A valid file identifier of the photo.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":550,"url":null},"def":{"name":"photo_file_id","return_type":"String","visibility":"Public","body":"@photo_file_id"},"external_var":false},{"html_id":"photo_file_id=(photo_file_id:String)-instance-method","name":"photo_file_id=","doc":"A valid file identifier of the photo.","summary":"<p>A valid file identifier of the photo.</p>","abstract":false,"args":[{"name":"photo_file_id","external_name":"photo_file_id","restriction":"String"}],"args_string":"(photo_file_id : String)","args_html":"(photo_file_id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":550,"url":null},"def":{"name":"photo_file_id=","args":[{"name":"photo_file_id","external_name":"photo_file_id","restriction":"String"}],"visibility":"Public","body":"@photo_file_id = photo_file_id"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":571,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":571,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":568,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":568,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":553,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":553,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"photo\".","summary":"<p>Type of the result, must be &quot;photo&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":544,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"photo\".","summary":"<p>Type of the result, must be &quot;photo&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":544,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedSticker","path":"Hamilton/Types/InlineQueryResultCachedSticker.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedSticker","name":"InlineQueryResultCachedSticker","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":653,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the sticker.","summary":"<p>Represents a link to a sticker stored on the Telegram servers.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":654,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":654,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":661,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":661,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the sticker.","summary":"<p>Content of the message to be sent instead of the sticker.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":670,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the sticker.","summary":"<p>Content of the message to be sent instead of the sticker.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":670,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":667,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":667,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"sticker_file_id:String-instance-method","name":"sticker_file_id","doc":"A valid file identifier of the sticker.","summary":"<p>A valid file identifier of the sticker.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":664,"url":null},"def":{"name":"sticker_file_id","return_type":"String","visibility":"Public","body":"@sticker_file_id"},"external_var":false},{"html_id":"sticker_file_id=(sticker_file_id:String)-instance-method","name":"sticker_file_id=","doc":"A valid file identifier of the sticker.","summary":"<p>A valid file identifier of the sticker.</p>","abstract":false,"args":[{"name":"sticker_file_id","external_name":"sticker_file_id","restriction":"String"}],"args_string":"(sticker_file_id : String)","args_html":"(sticker_file_id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":664,"url":null},"def":{"name":"sticker_file_id=","args":[{"name":"sticker_file_id","external_name":"sticker_file_id","restriction":"String"}],"visibility":"Public","body":"@sticker_file_id = sticker_file_id"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"sticker\".","summary":"<p>Type of the result, must be &quot;sticker&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":658,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"sticker\".","summary":"<p>Type of the result, must be &quot;sticker&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":658,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedVideo","path":"Hamilton/Types/InlineQueryResultCachedVideo.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedVideo","name":"InlineQueryResultCachedVideo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":712,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the video.","summary":"<p>Represents a link to a video file stored on the Telegram servers.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":713,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":713,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the video to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the video to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":732,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the video to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the video to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":732,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedVideo.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":738,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedVideo.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":738,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"description:String|Nil-instance-method","name":"description","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":729,"url":null},"def":{"name":"description","return_type":"String | Nil","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String|Nil)-instance-method","name":"description=","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"args_string":"(description : String | Nil)","args_html":"(description : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":729,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":720,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":720,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the video.","summary":"<p>Content of the message to be sent instead of the video.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":747,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the video.","summary":"<p>Content of the message to be sent instead of the video.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":747,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the video caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the video caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":735,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the video caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the video caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":735,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":744,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":744,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":741,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":741,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":726,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":726,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"video\".","summary":"<p>Type of the result, must be &quot;video&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":717,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"video\".","summary":"<p>Type of the result, must be &quot;video&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":717,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"video_file_id:String-instance-method","name":"video_file_id","doc":"A valid file identifier for the video file.","summary":"<p>A valid file identifier for the video file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":723,"url":null},"def":{"name":"video_file_id","return_type":"String","visibility":"Public","body":"@video_file_id"},"external_var":false},{"html_id":"video_file_id=(video_file_id:String)-instance-method","name":"video_file_id=","doc":"A valid file identifier for the video file.","summary":"<p>A valid file identifier for the video file.</p>","abstract":false,"args":[{"name":"video_file_id","external_name":"video_file_id","restriction":"String"}],"args_string":"(video_file_id : String)","args_html":"(video_file_id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":723,"url":null},"def":{"name":"video_file_id=","args":[{"name":"video_file_id","external_name":"video_file_id","restriction":"String"}],"visibility":"Public","body":"@video_file_id = video_file_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultCachedVoice","path":"Hamilton/Types/InlineQueryResultCachedVoice.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultCachedVoice","name":"InlineQueryResultCachedVoice","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":752,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the voice message.","summary":"<p>Represents a link to a voice message stored on the Telegram servers.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":753,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":753,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption, 0-1024 characters after entities parsing.","summary":"<p>Caption, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":769,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption, 0-1024 characters after entities parsing.","summary":"<p>Caption, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":769,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedVoice.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":775,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultCachedVoice.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":775,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":760,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":760,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the voice message.","summary":"<p>Content of the message to be sent instead of the voice message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":781,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the voice message.","summary":"<p>Content of the message to be sent instead of the voice message.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":781,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the voice message caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the voice message caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":772,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the voice message caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the voice message caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":772,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":778,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":778,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Voice message title.","summary":"<p>Voice message title.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":766,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Voice message title.","summary":"<p>Voice message title.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":766,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"voice\".","summary":"<p>Type of the result, must be &quot;voice&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":757,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"voice\".","summary":"<p>Type of the result, must be &quot;voice&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":757,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"voice_file_id:String-instance-method","name":"voice_file_id","doc":"A valid file identifier for the voice message.","summary":"<p>A valid file identifier for the voice message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":763,"url":null},"def":{"name":"voice_file_id","return_type":"String","visibility":"Public","body":"@voice_file_id"},"external_var":false},{"html_id":"voice_file_id=(voice_file_id:String)-instance-method","name":"voice_file_id=","doc":"A valid file identifier for the voice message.","summary":"<p>A valid file identifier for the voice message.</p>","abstract":false,"args":[{"name":"voice_file_id","external_name":"voice_file_id","restriction":"String"}],"args_string":"(voice_file_id : String)","args_html":"(voice_file_id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":763,"url":null},"def":{"name":"voice_file_id=","args":[{"name":"voice_file_id","external_name":"voice_file_id","restriction":"String"}],"visibility":"Public","body":"@voice_file_id = voice_file_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultContact","path":"Hamilton/Types/InlineQueryResultContact.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultContact","name":"InlineQueryResultContact","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":480,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the contact.","summary":"<p>Represents a contact with a phone number.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":481,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":481,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"first_name:String-instance-method","name":"first_name","doc":"Contact's first name.","summary":"<p>Contact's first name.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":494,"url":null},"def":{"name":"first_name","return_type":"String","visibility":"Public","body":"@first_name"},"external_var":false},{"html_id":"first_name=(first_name:String)-instance-method","name":"first_name=","doc":"Contact's first name.","summary":"<p>Contact's first name.</p>","abstract":false,"args":[{"name":"first_name","external_name":"first_name","restriction":"String"}],"args_string":"(first_name : String)","args_html":"(first_name : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":494,"url":null},"def":{"name":"first_name=","args":[{"name":"first_name","external_name":"first_name","restriction":"String"}],"visibility":"Public","body":"@first_name = first_name"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":488,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":488,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the contact.","summary":"<p>Content of the message to be sent instead of the contact.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":506,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the contact.","summary":"<p>Content of the message to be sent instead of the contact.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":506,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"last_name:String|Nil-instance-method","name":"last_name","doc":"Contact's last name.","summary":"<p>Contact's last name.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":497,"url":null},"def":{"name":"last_name","return_type":"String | Nil","visibility":"Public","body":"@last_name"},"external_var":false},{"html_id":"last_name=(last_name:String|Nil)-instance-method","name":"last_name=","doc":"Contact's last name.","summary":"<p>Contact's last name.</p>","abstract":false,"args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"args_string":"(last_name : String | Nil)","args_html":"(last_name : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":497,"url":null},"def":{"name":"last_name=","args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"visibility":"Public","body":"@last_name = last_name"},"external_var":false},{"html_id":"phone_number:String-instance-method","name":"phone_number","doc":"Contact's phone number.","summary":"<p>Contact's phone number.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":491,"url":null},"def":{"name":"phone_number","return_type":"String","visibility":"Public","body":"@phone_number"},"external_var":false},{"html_id":"phone_number=(phone_number:String)-instance-method","name":"phone_number=","doc":"Contact's phone number.","summary":"<p>Contact's phone number.</p>","abstract":false,"args":[{"name":"phone_number","external_name":"phone_number","restriction":"String"}],"args_string":"(phone_number : String)","args_html":"(phone_number : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":491,"url":null},"def":{"name":"phone_number=","args":[{"name":"phone_number","external_name":"phone_number","restriction":"String"}],"visibility":"Public","body":"@phone_number = phone_number"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":503,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":503,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"thumbnail_height:Int32|Nil-instance-method","name":"thumbnail_height","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":515,"url":null},"def":{"name":"thumbnail_height","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_height"},"external_var":false},{"html_id":"thumbnail_height=(thumbnail_height:Int32|Nil)-instance-method","name":"thumbnail_height=","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_height : Int32 | Nil)","args_html":"(thumbnail_height : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":515,"url":null},"def":{"name":"thumbnail_height=","args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_height = thumbnail_height"},"external_var":false},{"html_id":"thumbnail_url:String|Nil-instance-method","name":"thumbnail_url","doc":"Url of the thumbnail for the result.","summary":"<p>Url of the thumbnail for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":509,"url":null},"def":{"name":"thumbnail_url","return_type":"String | Nil","visibility":"Public","body":"@thumbnail_url"},"external_var":false},{"html_id":"thumbnail_url=(thumbnail_url:String|Nil)-instance-method","name":"thumbnail_url=","doc":"Url of the thumbnail for the result.","summary":"<p>Url of the thumbnail for the result.</p>","abstract":false,"args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"args_string":"(thumbnail_url : String | Nil)","args_html":"(thumbnail_url : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":509,"url":null},"def":{"name":"thumbnail_url=","args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"visibility":"Public","body":"@thumbnail_url = thumbnail_url"},"external_var":false},{"html_id":"thumbnail_width:Int32|Nil-instance-method","name":"thumbnail_width","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":512,"url":null},"def":{"name":"thumbnail_width","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_width"},"external_var":false},{"html_id":"thumbnail_width=(thumbnail_width:Int32|Nil)-instance-method","name":"thumbnail_width=","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_width : Int32 | Nil)","args_html":"(thumbnail_width : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":512,"url":null},"def":{"name":"thumbnail_width=","args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_width = thumbnail_width"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"contact\".","summary":"<p>Type of the result, must be &quot;contact&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":485,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"contact\".","summary":"<p>Type of the result, must be &quot;contact&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":485,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"vcard:String|Nil-instance-method","name":"vcard","doc":"Additional data about the contact in the form of a vCard, 0-2048 bytes.","summary":"<p>Additional data about the contact in the form of a vCard, 0-2048 bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":500,"url":null},"def":{"name":"vcard","return_type":"String | Nil","visibility":"Public","body":"@vcard"},"external_var":false},{"html_id":"vcard=(vcard:String|Nil)-instance-method","name":"vcard=","doc":"Additional data about the contact in the form of a vCard, 0-2048 bytes.","summary":"<p>Additional data about the contact in the form of a vCard, 0-2048 bytes.</p>","abstract":false,"args":[{"name":"vcard","external_name":"vcard","restriction":"String | Nil"}],"args_string":"(vcard : String | Nil)","args_html":"(vcard : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":500,"url":null},"def":{"name":"vcard=","args":[{"name":"vcard","external_name":"vcard","restriction":"String | Nil"}],"visibility":"Public","body":"@vcard = vcard"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultDocument","path":"Hamilton/Types/InlineQueryResultDocument.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultDocument","name":"InlineQueryResultDocument","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":330,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.","summary":"<p>Represents a link to a file.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":331,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":331,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the document to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the document to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":344,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the document to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the document to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":344,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultDocument.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":350,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultDocument.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":350,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"description:String|Nil-instance-method","name":"description","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":359,"url":null},"def":{"name":"description","return_type":"String | Nil","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String|Nil)-instance-method","name":"description=","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"args_string":"(description : String | Nil)","args_html":"(description : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":359,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"document_url:String-instance-method","name":"document_url","doc":"A valid URL for the file.","summary":"<p>A valid URL for the file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":353,"url":null},"def":{"name":"document_url","return_type":"String","visibility":"Public","body":"@document_url"},"external_var":false},{"html_id":"document_url=(document_url:String)-instance-method","name":"document_url=","doc":"A valid URL for the file.","summary":"<p>A valid URL for the file.</p>","abstract":false,"args":[{"name":"document_url","external_name":"document_url","restriction":"String"}],"args_string":"(document_url : String)","args_html":"(document_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":353,"url":null},"def":{"name":"document_url=","args":[{"name":"document_url","external_name":"document_url","restriction":"String"}],"visibility":"Public","body":"@document_url = document_url"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":338,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":338,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the file.","summary":"<p>Content of the message to be sent instead of the file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":365,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the file.","summary":"<p>Content of the message to be sent instead of the file.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":365,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"mime_type:String-instance-method","name":"mime_type","doc":"MIME type of the content of the file, either “application/pdf” or “application/zip”.","summary":"<p>MIME type of the content of the file, either “application/pdf” or “application/zip”.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":356,"url":null},"def":{"name":"mime_type","return_type":"String","visibility":"Public","body":"@mime_type"},"external_var":false},{"html_id":"mime_type=(mime_type:String)-instance-method","name":"mime_type=","doc":"MIME type of the content of the file, either “application/pdf” or “application/zip”.","summary":"<p>MIME type of the content of the file, either “application/pdf” or “application/zip”.</p>","abstract":false,"args":[{"name":"mime_type","external_name":"mime_type","restriction":"String"}],"args_string":"(mime_type : String)","args_html":"(mime_type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":356,"url":null},"def":{"name":"mime_type=","args":[{"name":"mime_type","external_name":"mime_type","restriction":"String"}],"visibility":"Public","body":"@mime_type = mime_type"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the document caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the document caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":347,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the document caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the document caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":347,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":362,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":362,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"thumbnail_height:Int32|Nil-instance-method","name":"thumbnail_height","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":374,"url":null},"def":{"name":"thumbnail_height","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_height"},"external_var":false},{"html_id":"thumbnail_height=(thumbnail_height:Int32|Nil)-instance-method","name":"thumbnail_height=","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_height : Int32 | Nil)","args_html":"(thumbnail_height : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":374,"url":null},"def":{"name":"thumbnail_height=","args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_height = thumbnail_height"},"external_var":false},{"html_id":"thumbnail_url:String|Nil-instance-method","name":"thumbnail_url","doc":"URL of the thumbnail (JPEG only) for the file.","summary":"<p>URL of the thumbnail (JPEG only) for the file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":368,"url":null},"def":{"name":"thumbnail_url","return_type":"String | Nil","visibility":"Public","body":"@thumbnail_url"},"external_var":false},{"html_id":"thumbnail_url=(thumbnail_url:String|Nil)-instance-method","name":"thumbnail_url=","doc":"URL of the thumbnail (JPEG only) for the file.","summary":"<p>URL of the thumbnail (JPEG only) for the file.</p>","abstract":false,"args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"args_string":"(thumbnail_url : String | Nil)","args_html":"(thumbnail_url : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":368,"url":null},"def":{"name":"thumbnail_url=","args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"visibility":"Public","body":"@thumbnail_url = thumbnail_url"},"external_var":false},{"html_id":"thumbnail_width:Int32|Nil-instance-method","name":"thumbnail_width","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":371,"url":null},"def":{"name":"thumbnail_width","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_width"},"external_var":false},{"html_id":"thumbnail_width=(thumbnail_width:Int32|Nil)-instance-method","name":"thumbnail_width=","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_width : Int32 | Nil)","args_html":"(thumbnail_width : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":371,"url":null},"def":{"name":"thumbnail_width=","args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_width = thumbnail_width"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":341,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":341,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"document\".","summary":"<p>Type of the result, must be &quot;document&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":335,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"document\".","summary":"<p>Type of the result, must be &quot;document&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":335,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultGame","path":"Hamilton/Types/InlineQueryResultGame.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultGame","name":"InlineQueryResultGame","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":520,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a Game.","summary":"<p>Represents a Game.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":521,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":521,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"game_short_name:String-instance-method","name":"game_short_name","doc":"Short name of the game.","summary":"<p>Short name of the game.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":531,"url":null},"def":{"name":"game_short_name","return_type":"String","visibility":"Public","body":"@game_short_name"},"external_var":false},{"html_id":"game_short_name=(game_short_name:String)-instance-method","name":"game_short_name=","doc":"Short name of the game.","summary":"<p>Short name of the game.</p>","abstract":false,"args":[{"name":"game_short_name","external_name":"game_short_name","restriction":"String"}],"args_string":"(game_short_name : String)","args_html":"(game_short_name : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":531,"url":null},"def":{"name":"game_short_name=","args":[{"name":"game_short_name","external_name":"game_short_name","restriction":"String"}],"visibility":"Public","body":"@game_short_name = game_short_name"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":528,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":528,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":534,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":534,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"game\".","summary":"<p>Type of the result, must be &quot;game&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":525,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"game\".","summary":"<p>Type of the result, must be &quot;game&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":525,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultGif","path":"Hamilton/Types/InlineQueryResultGif.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultGif","name":"InlineQueryResultGif","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":92,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the animation.","summary":"<p>Represents a link to an animated GIF file.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":93,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":93,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the GIF file to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the GIF file to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":124,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the GIF file to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the GIF file to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":124,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultGif.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":130,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultGif.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":130,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"gif_duration:Int32|Nil-instance-method","name":"gif_duration","doc":"Duration of the GIF in seconds.","summary":"<p>Duration of the GIF in seconds.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":112,"url":null},"def":{"name":"gif_duration","return_type":"Int32 | Nil","visibility":"Public","body":"@gif_duration"},"external_var":false},{"html_id":"gif_duration=(gif_duration:Int32|Nil)-instance-method","name":"gif_duration=","doc":"Duration of the GIF in seconds.","summary":"<p>Duration of the GIF in seconds.</p>","abstract":false,"args":[{"name":"gif_duration","external_name":"gif_duration","restriction":"Int32 | Nil"}],"args_string":"(gif_duration : Int32 | Nil)","args_html":"(gif_duration : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":112,"url":null},"def":{"name":"gif_duration=","args":[{"name":"gif_duration","external_name":"gif_duration","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@gif_duration = gif_duration"},"external_var":false},{"html_id":"gif_height:Int32|Nil-instance-method","name":"gif_height","doc":"Height of the GIF.","summary":"<p>Height of the GIF.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":109,"url":null},"def":{"name":"gif_height","return_type":"Int32 | Nil","visibility":"Public","body":"@gif_height"},"external_var":false},{"html_id":"gif_height=(gif_height:Int32|Nil)-instance-method","name":"gif_height=","doc":"Height of the GIF.","summary":"<p>Height of the GIF.</p>","abstract":false,"args":[{"name":"gif_height","external_name":"gif_height","restriction":"Int32 | Nil"}],"args_string":"(gif_height : Int32 | Nil)","args_html":"(gif_height : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":109,"url":null},"def":{"name":"gif_height=","args":[{"name":"gif_height","external_name":"gif_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@gif_height = gif_height"},"external_var":false},{"html_id":"gif_url:String-instance-method","name":"gif_url","doc":"A valid URL for the GIF file.","summary":"<p>A valid URL for the GIF file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":103,"url":null},"def":{"name":"gif_url","return_type":"String","visibility":"Public","body":"@gif_url"},"external_var":false},{"html_id":"gif_url=(gif_url:String)-instance-method","name":"gif_url=","doc":"A valid URL for the GIF file.","summary":"<p>A valid URL for the GIF file.</p>","abstract":false,"args":[{"name":"gif_url","external_name":"gif_url","restriction":"String"}],"args_string":"(gif_url : String)","args_html":"(gif_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":103,"url":null},"def":{"name":"gif_url=","args":[{"name":"gif_url","external_name":"gif_url","restriction":"String"}],"visibility":"Public","body":"@gif_url = gif_url"},"external_var":false},{"html_id":"gif_width:Int32|Nil-instance-method","name":"gif_width","doc":"Width of the GIF.","summary":"<p>Width of the GIF.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":106,"url":null},"def":{"name":"gif_width","return_type":"Int32 | Nil","visibility":"Public","body":"@gif_width"},"external_var":false},{"html_id":"gif_width=(gif_width:Int32|Nil)-instance-method","name":"gif_width=","doc":"Width of the GIF.","summary":"<p>Width of the GIF.</p>","abstract":false,"args":[{"name":"gif_width","external_name":"gif_width","restriction":"Int32 | Nil"}],"args_string":"(gif_width : Int32 | Nil)","args_html":"(gif_width : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":106,"url":null},"def":{"name":"gif_width=","args":[{"name":"gif_width","external_name":"gif_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@gif_width = gif_width"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":100,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":100,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the GIF animation.","summary":"<p>Content of the message to be sent instead of the GIF animation.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":139,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the GIF animation.","summary":"<p>Content of the message to be sent instead of the GIF animation.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a>)","location":{"filename":"src/types/inline_query_result.cr","line_number":139,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":127,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":127,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":136,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":136,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":133,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":133,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"thumbnail_mime_type:String|Nil-instance-method","name":"thumbnail_mime_type","doc":"MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”.","summary":"<p>MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":118,"url":null},"def":{"name":"thumbnail_mime_type","return_type":"String | Nil","visibility":"Public","body":"@thumbnail_mime_type"},"external_var":false},{"html_id":"thumbnail_mime_type=(thumbnail_mime_type:String|Nil)-instance-method","name":"thumbnail_mime_type=","doc":"MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”.","summary":"<p>MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”.</p>","abstract":false,"args":[{"name":"thumbnail_mime_type","external_name":"thumbnail_mime_type","restriction":"String | Nil"}],"args_string":"(thumbnail_mime_type : String | Nil)","args_html":"(thumbnail_mime_type : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":118,"url":null},"def":{"name":"thumbnail_mime_type=","args":[{"name":"thumbnail_mime_type","external_name":"thumbnail_mime_type","restriction":"String | Nil"}],"visibility":"Public","body":"@thumbnail_mime_type = thumbnail_mime_type"},"external_var":false},{"html_id":"thumbnail_url:String-instance-method","name":"thumbnail_url","doc":"URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.","summary":"<p>URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":115,"url":null},"def":{"name":"thumbnail_url","return_type":"String","visibility":"Public","body":"@thumbnail_url"},"external_var":false},{"html_id":"thumbnail_url=(thumbnail_url:String)-instance-method","name":"thumbnail_url=","doc":"URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.","summary":"<p>URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.</p>","abstract":false,"args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String"}],"args_string":"(thumbnail_url : String)","args_html":"(thumbnail_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":115,"url":null},"def":{"name":"thumbnail_url=","args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String"}],"visibility":"Public","body":"@thumbnail_url = thumbnail_url"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":121,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":121,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"gif\".","summary":"<p>Type of the result, must be &quot;gif&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":97,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"gif\".","summary":"<p>Type of the result, must be &quot;gif&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":97,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultLocation","path":"Hamilton/Types/InlineQueryResultLocation.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultLocation","name":"InlineQueryResultLocation","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":379,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the location.","summary":"<p>Represents a location on a map.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":380,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":380,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"heading:Int32|Nil-instance-method","name":"heading","doc":"For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.","summary":"<p>For live locations, a direction in which the user is moving, in degrees.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":405,"url":null},"def":{"name":"heading","return_type":"Int32 | Nil","visibility":"Public","body":"@heading"},"external_var":false},{"html_id":"heading=(heading:Int32|Nil)-instance-method","name":"heading=","doc":"For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.","summary":"<p>For live locations, a direction in which the user is moving, in degrees.</p>","abstract":false,"args":[{"name":"heading","external_name":"heading","restriction":"Int32 | Nil"}],"args_string":"(heading : Int32 | Nil)","args_html":"(heading : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":405,"url":null},"def":{"name":"heading=","args":[{"name":"heading","external_name":"heading","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@heading = heading"},"external_var":false},{"html_id":"horizontal_accuracy:Float32|Nil-instance-method","name":"horizontal_accuracy","doc":"The radius of uncertainty for the location, measured in meters; 0-1500.","summary":"<p>The radius of uncertainty for the location, measured in meters; 0-1500.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":399,"url":null},"def":{"name":"horizontal_accuracy","return_type":"Float32 | Nil","visibility":"Public","body":"@horizontal_accuracy"},"external_var":false},{"html_id":"horizontal_accuracy=(horizontal_accuracy:Float32|Nil)-instance-method","name":"horizontal_accuracy=","doc":"The radius of uncertainty for the location, measured in meters; 0-1500.","summary":"<p>The radius of uncertainty for the location, measured in meters; 0-1500.</p>","abstract":false,"args":[{"name":"horizontal_accuracy","external_name":"horizontal_accuracy","restriction":"Float32 | Nil"}],"args_string":"(horizontal_accuracy : Float32 | Nil)","args_html":"(horizontal_accuracy : Float32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":399,"url":null},"def":{"name":"horizontal_accuracy=","args":[{"name":"horizontal_accuracy","external_name":"horizontal_accuracy","restriction":"Float32 | Nil"}],"visibility":"Public","body":"@horizontal_accuracy = horizontal_accuracy"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":387,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":387,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the location.","summary":"<p>Content of the message to be sent instead of the location.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":414,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the location.","summary":"<p>Content of the message to be sent instead of the location.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":414,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"latitude:Float32-instance-method","name":"latitude","doc":"Location latitude in degrees.","summary":"<p>Location latitude in degrees.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":390,"url":null},"def":{"name":"latitude","return_type":"Float32","visibility":"Public","body":"@latitude"},"external_var":false},{"html_id":"latitude=(latitude:Float32)-instance-method","name":"latitude=","doc":"Location latitude in degrees.","summary":"<p>Location latitude in degrees.</p>","abstract":false,"args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"args_string":"(latitude : Float32)","args_html":"(latitude : Float32)","location":{"filename":"src/types/inline_query_result.cr","line_number":390,"url":null},"def":{"name":"latitude=","args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"visibility":"Public","body":"@latitude = latitude"},"external_var":false},{"html_id":"live_period:Int32|Nil-instance-method","name":"live_period","doc":"Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.","summary":"<p>Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":402,"url":null},"def":{"name":"live_period","return_type":"Int32 | Nil","visibility":"Public","body":"@live_period"},"external_var":false},{"html_id":"live_period=(live_period:Int32|Nil)-instance-method","name":"live_period=","doc":"Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.","summary":"<p>Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.</p>","abstract":false,"args":[{"name":"live_period","external_name":"live_period","restriction":"Int32 | Nil"}],"args_string":"(live_period : Int32 | Nil)","args_html":"(live_period : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":402,"url":null},"def":{"name":"live_period=","args":[{"name":"live_period","external_name":"live_period","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@live_period = live_period"},"external_var":false},{"html_id":"longitude:Float32-instance-method","name":"longitude","doc":"Location longitude in degrees.","summary":"<p>Location longitude in degrees.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":393,"url":null},"def":{"name":"longitude","return_type":"Float32","visibility":"Public","body":"@longitude"},"external_var":false},{"html_id":"longitude=(longitude:Float32)-instance-method","name":"longitude=","doc":"Location longitude in degrees.","summary":"<p>Location longitude in degrees.</p>","abstract":false,"args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"args_string":"(longitude : Float32)","args_html":"(longitude : Float32)","location":{"filename":"src/types/inline_query_result.cr","line_number":393,"url":null},"def":{"name":"longitude=","args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"visibility":"Public","body":"@longitude = longitude"},"external_var":false},{"html_id":"proximity_alert_radius:Int32|Nil-instance-method","name":"proximity_alert_radius","doc":"For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.","summary":"<p>For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":408,"url":null},"def":{"name":"proximity_alert_radius","return_type":"Int32 | Nil","visibility":"Public","body":"@proximity_alert_radius"},"external_var":false},{"html_id":"proximity_alert_radius=(proximity_alert_radius:Int32|Nil)-instance-method","name":"proximity_alert_radius=","doc":"For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.","summary":"<p>For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters.</p>","abstract":false,"args":[{"name":"proximity_alert_radius","external_name":"proximity_alert_radius","restriction":"Int32 | Nil"}],"args_string":"(proximity_alert_radius : Int32 | Nil)","args_html":"(proximity_alert_radius : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":408,"url":null},"def":{"name":"proximity_alert_radius=","args":[{"name":"proximity_alert_radius","external_name":"proximity_alert_radius","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@proximity_alert_radius = proximity_alert_radius"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":411,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":411,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"thumbnail_height:Int32|Nil-instance-method","name":"thumbnail_height","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":423,"url":null},"def":{"name":"thumbnail_height","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_height"},"external_var":false},{"html_id":"thumbnail_height=(thumbnail_height:Int32|Nil)-instance-method","name":"thumbnail_height=","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_height : Int32 | Nil)","args_html":"(thumbnail_height : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":423,"url":null},"def":{"name":"thumbnail_height=","args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_height = thumbnail_height"},"external_var":false},{"html_id":"thumbnail_url:String|Nil-instance-method","name":"thumbnail_url","doc":"Url of the thumbnail for the result.","summary":"<p>Url of the thumbnail for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":417,"url":null},"def":{"name":"thumbnail_url","return_type":"String | Nil","visibility":"Public","body":"@thumbnail_url"},"external_var":false},{"html_id":"thumbnail_url=(thumbnail_url:String|Nil)-instance-method","name":"thumbnail_url=","doc":"Url of the thumbnail for the result.","summary":"<p>Url of the thumbnail for the result.</p>","abstract":false,"args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"args_string":"(thumbnail_url : String | Nil)","args_html":"(thumbnail_url : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":417,"url":null},"def":{"name":"thumbnail_url=","args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"visibility":"Public","body":"@thumbnail_url = thumbnail_url"},"external_var":false},{"html_id":"thumbnail_width:Int32|Nil-instance-method","name":"thumbnail_width","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":420,"url":null},"def":{"name":"thumbnail_width","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_width"},"external_var":false},{"html_id":"thumbnail_width=(thumbnail_width:Int32|Nil)-instance-method","name":"thumbnail_width=","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_width : Int32 | Nil)","args_html":"(thumbnail_width : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":420,"url":null},"def":{"name":"thumbnail_width=","args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_width = thumbnail_width"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Location title.","summary":"<p>Location title.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":396,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Location title.","summary":"<p>Location title.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":396,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"location\".","summary":"<p>Type of the result, must be &quot;location&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":384,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"location\".","summary":"<p>Type of the result, must be &quot;location&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":384,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultMpeg4Gif","path":"Hamilton/Types/InlineQueryResultMpeg4Gif.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultMpeg4Gif","name":"InlineQueryResultMpeg4Gif","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":144,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the animation.","summary":"<p>Represents a link to a video animation (H.264/MPEG-4 AVC video without sound).</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":145,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":145,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":176,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":176,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultMpeg4Gif.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":182,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultMpeg4Gif.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":182,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":152,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":152,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the video animation.","summary":"<p>Content of the message to be sent instead of the video animation.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":191,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the video animation.","summary":"<p>Content of the message to be sent instead of the video animation.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":191,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"mpeg4_duration:Int32|Nil-instance-method","name":"mpeg4_duration","doc":"Video duration in seconds.","summary":"<p>Video duration in seconds.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":164,"url":null},"def":{"name":"mpeg4_duration","return_type":"Int32 | Nil","visibility":"Public","body":"@mpeg4_duration"},"external_var":false},{"html_id":"mpeg4_duration=(mpeg4_duration:Int32|Nil)-instance-method","name":"mpeg4_duration=","doc":"Video duration in seconds.","summary":"<p>Video duration in seconds.</p>","abstract":false,"args":[{"name":"mpeg4_duration","external_name":"mpeg4_duration","restriction":"Int32 | Nil"}],"args_string":"(mpeg4_duration : Int32 | Nil)","args_html":"(mpeg4_duration : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":164,"url":null},"def":{"name":"mpeg4_duration=","args":[{"name":"mpeg4_duration","external_name":"mpeg4_duration","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@mpeg4_duration = mpeg4_duration"},"external_var":false},{"html_id":"mpeg4_height:Int32|Nil-instance-method","name":"mpeg4_height","doc":"Video height.","summary":"<p>Video height.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":161,"url":null},"def":{"name":"mpeg4_height","return_type":"Int32 | Nil","visibility":"Public","body":"@mpeg4_height"},"external_var":false},{"html_id":"mpeg4_height=(mpeg4_height:Int32|Nil)-instance-method","name":"mpeg4_height=","doc":"Video height.","summary":"<p>Video height.</p>","abstract":false,"args":[{"name":"mpeg4_height","external_name":"mpeg4_height","restriction":"Int32 | Nil"}],"args_string":"(mpeg4_height : Int32 | Nil)","args_html":"(mpeg4_height : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":161,"url":null},"def":{"name":"mpeg4_height=","args":[{"name":"mpeg4_height","external_name":"mpeg4_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@mpeg4_height = mpeg4_height"},"external_var":false},{"html_id":"mpeg4_url:String-instance-method","name":"mpeg4_url","doc":"A valid URL for the MPEG4 file.","summary":"<p>A valid URL for the MPEG4 file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":155,"url":null},"def":{"name":"mpeg4_url","return_type":"String","visibility":"Public","body":"@mpeg4_url"},"external_var":false},{"html_id":"mpeg4_url=(mpeg4_url:String)-instance-method","name":"mpeg4_url=","doc":"A valid URL for the MPEG4 file.","summary":"<p>A valid URL for the MPEG4 file.</p>","abstract":false,"args":[{"name":"mpeg4_url","external_name":"mpeg4_url","restriction":"String"}],"args_string":"(mpeg4_url : String)","args_html":"(mpeg4_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":155,"url":null},"def":{"name":"mpeg4_url=","args":[{"name":"mpeg4_url","external_name":"mpeg4_url","restriction":"String"}],"visibility":"Public","body":"@mpeg4_url = mpeg4_url"},"external_var":false},{"html_id":"mpeg4_width:Int32|Nil-instance-method","name":"mpeg4_width","doc":"Video width.","summary":"<p>Video width.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":158,"url":null},"def":{"name":"mpeg4_width","return_type":"Int32 | Nil","visibility":"Public","body":"@mpeg4_width"},"external_var":false},{"html_id":"mpeg4_width=(mpeg4_width:Int32|Nil)-instance-method","name":"mpeg4_width=","doc":"Video width.","summary":"<p>Video width.</p>","abstract":false,"args":[{"name":"mpeg4_width","external_name":"mpeg4_width","restriction":"Int32 | Nil"}],"args_string":"(mpeg4_width : Int32 | Nil)","args_html":"(mpeg4_width : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":158,"url":null},"def":{"name":"mpeg4_width=","args":[{"name":"mpeg4_width","external_name":"mpeg4_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@mpeg4_width = mpeg4_width"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":179,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":179,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":188,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":188,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":185,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":185,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"thumbnail_mime_type:String|Nil-instance-method","name":"thumbnail_mime_type","doc":"MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”.","summary":"<p>MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":170,"url":null},"def":{"name":"thumbnail_mime_type","return_type":"String | Nil","visibility":"Public","body":"@thumbnail_mime_type"},"external_var":false},{"html_id":"thumbnail_mime_type=(thumbnail_mime_type:String|Nil)-instance-method","name":"thumbnail_mime_type=","doc":"MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”.","summary":"<p>MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”.</p>","abstract":false,"args":[{"name":"thumbnail_mime_type","external_name":"thumbnail_mime_type","restriction":"String | Nil"}],"args_string":"(thumbnail_mime_type : String | Nil)","args_html":"(thumbnail_mime_type : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":170,"url":null},"def":{"name":"thumbnail_mime_type=","args":[{"name":"thumbnail_mime_type","external_name":"thumbnail_mime_type","restriction":"String | Nil"}],"visibility":"Public","body":"@thumbnail_mime_type = thumbnail_mime_type"},"external_var":false},{"html_id":"thumbnail_url:String-instance-method","name":"thumbnail_url","doc":"URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.","summary":"<p>URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":167,"url":null},"def":{"name":"thumbnail_url","return_type":"String","visibility":"Public","body":"@thumbnail_url"},"external_var":false},{"html_id":"thumbnail_url=(thumbnail_url:String)-instance-method","name":"thumbnail_url=","doc":"URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.","summary":"<p>URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.</p>","abstract":false,"args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String"}],"args_string":"(thumbnail_url : String)","args_html":"(thumbnail_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":167,"url":null},"def":{"name":"thumbnail_url=","args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String"}],"visibility":"Public","body":"@thumbnail_url = thumbnail_url"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":173,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":173,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"mpeg4_gif\".","summary":"<p>Type of the result, must be &quot;mpeg4_gif&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":149,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"mpeg4_gif\".","summary":"<p>Type of the result, must be &quot;mpeg4_gif&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":149,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultPhoto","path":"Hamilton/Types/InlineQueryResultPhoto.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultPhoto","name":"InlineQueryResultPhoto","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":43,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the photo.","summary":"<p>Represents a link to a photo.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the photo to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the photo to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":72,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the photo to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the photo to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":72,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultPhoto.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":78,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultPhoto.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":78,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"description:String|Nil-instance-method","name":"description","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":69,"url":null},"def":{"name":"description","return_type":"String | Nil","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String|Nil)-instance-method","name":"description=","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"args_string":"(description : String | Nil)","args_html":"(description : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":69,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":51,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":51,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the photo.","summary":"<p>Content of the message to be sent instead of the photo.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":87,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the photo.","summary":"<p>Content of the message to be sent instead of the photo.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":87,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the photo caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the photo caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":75,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the photo caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the photo caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":75,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"photo_height:Int32|Nil-instance-method","name":"photo_height","doc":"Height of the photo.","summary":"<p>Height of the photo.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":63,"url":null},"def":{"name":"photo_height","return_type":"Int32 | Nil","visibility":"Public","body":"@photo_height"},"external_var":false},{"html_id":"photo_height=(photo_height:Int32|Nil)-instance-method","name":"photo_height=","doc":"Height of the photo.","summary":"<p>Height of the photo.</p>","abstract":false,"args":[{"name":"photo_height","external_name":"photo_height","restriction":"Int32 | Nil"}],"args_string":"(photo_height : Int32 | Nil)","args_html":"(photo_height : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":63,"url":null},"def":{"name":"photo_height=","args":[{"name":"photo_height","external_name":"photo_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@photo_height = photo_height"},"external_var":false},{"html_id":"photo_url:String-instance-method","name":"photo_url","doc":"A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB.","summary":"<p>A valid URL of the photo.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":54,"url":null},"def":{"name":"photo_url","return_type":"String","visibility":"Public","body":"@photo_url"},"external_var":false},{"html_id":"photo_url=(photo_url:String)-instance-method","name":"photo_url=","doc":"A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB.","summary":"<p>A valid URL of the photo.</p>","abstract":false,"args":[{"name":"photo_url","external_name":"photo_url","restriction":"String"}],"args_string":"(photo_url : String)","args_html":"(photo_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":54,"url":null},"def":{"name":"photo_url=","args":[{"name":"photo_url","external_name":"photo_url","restriction":"String"}],"visibility":"Public","body":"@photo_url = photo_url"},"external_var":false},{"html_id":"photo_width:Int32|Nil-instance-method","name":"photo_width","doc":"Width of the photo.","summary":"<p>Width of the photo.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":60,"url":null},"def":{"name":"photo_width","return_type":"Int32 | Nil","visibility":"Public","body":"@photo_width"},"external_var":false},{"html_id":"photo_width=(photo_width:Int32|Nil)-instance-method","name":"photo_width=","doc":"Width of the photo.","summary":"<p>Width of the photo.</p>","abstract":false,"args":[{"name":"photo_width","external_name":"photo_width","restriction":"Int32 | Nil"}],"args_string":"(photo_width : Int32 | Nil)","args_html":"(photo_width : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":60,"url":null},"def":{"name":"photo_width=","args":[{"name":"photo_width","external_name":"photo_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@photo_width = photo_width"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":84,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":84,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":81,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":81,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"thumbnail_url:String-instance-method","name":"thumbnail_url","doc":"URL of the thumbnail for the photo.","summary":"<p>URL of the thumbnail for the photo.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":57,"url":null},"def":{"name":"thumbnail_url","return_type":"String","visibility":"Public","body":"@thumbnail_url"},"external_var":false},{"html_id":"thumbnail_url=(thumbnail_url:String)-instance-method","name":"thumbnail_url=","doc":"URL of the thumbnail for the photo.","summary":"<p>URL of the thumbnail for the photo.</p>","abstract":false,"args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String"}],"args_string":"(thumbnail_url : String)","args_html":"(thumbnail_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":57,"url":null},"def":{"name":"thumbnail_url=","args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String"}],"visibility":"Public","body":"@thumbnail_url = thumbnail_url"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":66,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":66,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"photo\".","summary":"<p>Type of the result, must be &quot;photo&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":48,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"photo\".","summary":"<p>Type of the result, must be &quot;photo&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":48,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultsButton","path":"Hamilton/Types/InlineQueryResultsButton.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultsButton","name":"InlineQueryResultsButton","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_results_button.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a button to be shown above inline query results. You must use exactly one of the optional fields.","summary":"<p>This object represents a button to be shown above inline query results.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_results_button.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_results_button.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"start_parameter:String|Nil-instance-method","name":"start_parameter","doc":"Deep-linking parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.","summary":"<p>Deep-linking parameter for the /start message sent to the bot when a user presses the button.</p>","abstract":false,"location":{"filename":"src/types/inline_query_results_button.cr","line_number":17,"url":null},"def":{"name":"start_parameter","return_type":"String | Nil","visibility":"Public","body":"@start_parameter"},"external_var":false},{"html_id":"start_parameter=(start_parameter:String|Nil)-instance-method","name":"start_parameter=","doc":"Deep-linking parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.","summary":"<p>Deep-linking parameter for the /start message sent to the bot when a user presses the button.</p>","abstract":false,"args":[{"name":"start_parameter","external_name":"start_parameter","restriction":"String | Nil"}],"args_string":"(start_parameter : String | Nil)","args_html":"(start_parameter : String | Nil)","location":{"filename":"src/types/inline_query_results_button.cr","line_number":17,"url":null},"def":{"name":"start_parameter=","args":[{"name":"start_parameter","external_name":"start_parameter","restriction":"String | Nil"}],"visibility":"Public","body":"@start_parameter = start_parameter"},"external_var":false},{"html_id":"text:String-instance-method","name":"text","doc":"Label text on the button.","summary":"<p>Label text on the button.</p>","abstract":false,"location":{"filename":"src/types/inline_query_results_button.cr","line_number":11,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"Label text on the button.","summary":"<p>Label text on the button.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/inline_query_results_button.cr","line_number":11,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"web_app:Hamilton::Types::WebAppInfo|Nil-instance-method","name":"web_app","doc":"Description of the Web App that will be launched when the user presses the button. The Web App will be able to switch back to the inline mode using the method switchInlineQuery inside the Web App.","summary":"<p>Description of the Web App that will be launched when the user presses the button.</p>","abstract":false,"location":{"filename":"src/types/inline_query_results_button.cr","line_number":14,"url":null},"def":{"name":"web_app","return_type":"Hamilton::Types::WebAppInfo | Nil","visibility":"Public","body":"@web_app"},"external_var":false},{"html_id":"web_app=(web_app:Hamilton::Types::WebAppInfo|Nil)-instance-method","name":"web_app=","doc":"Description of the Web App that will be launched when the user presses the button. The Web App will be able to switch back to the inline mode using the method switchInlineQuery inside the Web App.","summary":"<p>Description of the Web App that will be launched when the user presses the button.</p>","abstract":false,"args":[{"name":"web_app","external_name":"web_app","restriction":"Hamilton::Types::WebAppInfo | Nil"}],"args_string":"(web_app : Hamilton::Types::WebAppInfo | Nil)","args_html":"(web_app : <a href=\"../../Hamilton/Types/WebAppInfo.html\">Hamilton::Types::WebAppInfo</a> | Nil)","location":{"filename":"src/types/inline_query_results_button.cr","line_number":14,"url":null},"def":{"name":"web_app=","args":[{"name":"web_app","external_name":"web_app","restriction":"Hamilton::Types::WebAppInfo | Nil"}],"visibility":"Public","body":"@web_app = web_app"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultVenue","path":"Hamilton/Types/InlineQueryResultVenue.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultVenue","name":"InlineQueryResultVenue","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":428,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the venue.","summary":"<p>Represents a venue.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":429,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":429,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"address:String-instance-method","name":"address","doc":"Address of the venue.","summary":"<p>Address of the venue.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":448,"url":null},"def":{"name":"address","return_type":"String","visibility":"Public","body":"@address"},"external_var":false},{"html_id":"address=(address:String)-instance-method","name":"address=","doc":"Address of the venue.","summary":"<p>Address of the venue.</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"String"}],"args_string":"(address : String)","args_html":"(address : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":448,"url":null},"def":{"name":"address=","args":[{"name":"address","external_name":"address","restriction":"String"}],"visibility":"Public","body":"@address = address"},"external_var":false},{"html_id":"foursquare_id:String|Nil-instance-method","name":"foursquare_id","doc":"Foursquare identifier of the venue if known.","summary":"<p>Foursquare identifier of the venue if known.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":451,"url":null},"def":{"name":"foursquare_id","return_type":"String | Nil","visibility":"Public","body":"@foursquare_id"},"external_var":false},{"html_id":"foursquare_id=(foursquare_id:String|Nil)-instance-method","name":"foursquare_id=","doc":"Foursquare identifier of the venue if known.","summary":"<p>Foursquare identifier of the venue if known.</p>","abstract":false,"args":[{"name":"foursquare_id","external_name":"foursquare_id","restriction":"String | Nil"}],"args_string":"(foursquare_id : String | Nil)","args_html":"(foursquare_id : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":451,"url":null},"def":{"name":"foursquare_id=","args":[{"name":"foursquare_id","external_name":"foursquare_id","restriction":"String | Nil"}],"visibility":"Public","body":"@foursquare_id = foursquare_id"},"external_var":false},{"html_id":"foursquare_type:String|Nil-instance-method","name":"foursquare_type","doc":"Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)","summary":"<p>Foursquare type of the venue, if known.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":454,"url":null},"def":{"name":"foursquare_type","return_type":"String | Nil","visibility":"Public","body":"@foursquare_type"},"external_var":false},{"html_id":"foursquare_type=(foursquare_type:String|Nil)-instance-method","name":"foursquare_type=","doc":"Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)","summary":"<p>Foursquare type of the venue, if known.</p>","abstract":false,"args":[{"name":"foursquare_type","external_name":"foursquare_type","restriction":"String | Nil"}],"args_string":"(foursquare_type : String | Nil)","args_html":"(foursquare_type : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":454,"url":null},"def":{"name":"foursquare_type=","args":[{"name":"foursquare_type","external_name":"foursquare_type","restriction":"String | Nil"}],"visibility":"Public","body":"@foursquare_type = foursquare_type"},"external_var":false},{"html_id":"google_place_id:String|Nil-instance-method","name":"google_place_id","doc":"Google Places identifier of the venue.","summary":"<p>Google Places identifier of the venue.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":457,"url":null},"def":{"name":"google_place_id","return_type":"String | Nil","visibility":"Public","body":"@google_place_id"},"external_var":false},{"html_id":"google_place_id=(google_place_id:String|Nil)-instance-method","name":"google_place_id=","doc":"Google Places identifier of the venue.","summary":"<p>Google Places identifier of the venue.</p>","abstract":false,"args":[{"name":"google_place_id","external_name":"google_place_id","restriction":"String | Nil"}],"args_string":"(google_place_id : String | Nil)","args_html":"(google_place_id : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":457,"url":null},"def":{"name":"google_place_id=","args":[{"name":"google_place_id","external_name":"google_place_id","restriction":"String | Nil"}],"visibility":"Public","body":"@google_place_id = google_place_id"},"external_var":false},{"html_id":"google_place_type:String|Nil-instance-method","name":"google_place_type","doc":"Google Places type of the venue.","summary":"<p>Google Places type of the venue.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":460,"url":null},"def":{"name":"google_place_type","return_type":"String | Nil","visibility":"Public","body":"@google_place_type"},"external_var":false},{"html_id":"google_place_type=(google_place_type:String|Nil)-instance-method","name":"google_place_type=","doc":"Google Places type of the venue.","summary":"<p>Google Places type of the venue.</p>","abstract":false,"args":[{"name":"google_place_type","external_name":"google_place_type","restriction":"String | Nil"}],"args_string":"(google_place_type : String | Nil)","args_html":"(google_place_type : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":460,"url":null},"def":{"name":"google_place_type=","args":[{"name":"google_place_type","external_name":"google_place_type","restriction":"String | Nil"}],"visibility":"Public","body":"@google_place_type = google_place_type"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":436,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":436,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the venue.","summary":"<p>Content of the message to be sent instead of the venue.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":466,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the venue.","summary":"<p>Content of the message to be sent instead of the venue.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":466,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"latitude:Float32-instance-method","name":"latitude","doc":"Latitude of the venue location in degrees.","summary":"<p>Latitude of the venue location in degrees.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":439,"url":null},"def":{"name":"latitude","return_type":"Float32","visibility":"Public","body":"@latitude"},"external_var":false},{"html_id":"latitude=(latitude:Float32)-instance-method","name":"latitude=","doc":"Latitude of the venue location in degrees.","summary":"<p>Latitude of the venue location in degrees.</p>","abstract":false,"args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"args_string":"(latitude : Float32)","args_html":"(latitude : Float32)","location":{"filename":"src/types/inline_query_result.cr","line_number":439,"url":null},"def":{"name":"latitude=","args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"visibility":"Public","body":"@latitude = latitude"},"external_var":false},{"html_id":"longitude:Float32-instance-method","name":"longitude","doc":"Longitude of the venue location in degrees.","summary":"<p>Longitude of the venue location in degrees.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":442,"url":null},"def":{"name":"longitude","return_type":"Float32","visibility":"Public","body":"@longitude"},"external_var":false},{"html_id":"longitude=(longitude:Float32)-instance-method","name":"longitude=","doc":"Longitude of the venue location in degrees.","summary":"<p>Longitude of the venue location in degrees.</p>","abstract":false,"args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"args_string":"(longitude : Float32)","args_html":"(longitude : Float32)","location":{"filename":"src/types/inline_query_result.cr","line_number":442,"url":null},"def":{"name":"longitude=","args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"visibility":"Public","body":"@longitude = longitude"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":463,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":463,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"thumbnail_height:Int32|Nil-instance-method","name":"thumbnail_height","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":475,"url":null},"def":{"name":"thumbnail_height","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_height"},"external_var":false},{"html_id":"thumbnail_height=(thumbnail_height:Int32|Nil)-instance-method","name":"thumbnail_height=","doc":"Thumbnail height.","summary":"<p>Thumbnail height.</p>","abstract":false,"args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_height : Int32 | Nil)","args_html":"(thumbnail_height : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":475,"url":null},"def":{"name":"thumbnail_height=","args":[{"name":"thumbnail_height","external_name":"thumbnail_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_height = thumbnail_height"},"external_var":false},{"html_id":"thumbnail_url:String|Nil-instance-method","name":"thumbnail_url","doc":"Url of the thumbnail for the result.","summary":"<p>Url of the thumbnail for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":469,"url":null},"def":{"name":"thumbnail_url","return_type":"String | Nil","visibility":"Public","body":"@thumbnail_url"},"external_var":false},{"html_id":"thumbnail_url=(thumbnail_url:String|Nil)-instance-method","name":"thumbnail_url=","doc":"Url of the thumbnail for the result.","summary":"<p>Url of the thumbnail for the result.</p>","abstract":false,"args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"args_string":"(thumbnail_url : String | Nil)","args_html":"(thumbnail_url : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":469,"url":null},"def":{"name":"thumbnail_url=","args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String | Nil"}],"visibility":"Public","body":"@thumbnail_url = thumbnail_url"},"external_var":false},{"html_id":"thumbnail_width:Int32|Nil-instance-method","name":"thumbnail_width","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":472,"url":null},"def":{"name":"thumbnail_width","return_type":"Int32 | Nil","visibility":"Public","body":"@thumbnail_width"},"external_var":false},{"html_id":"thumbnail_width=(thumbnail_width:Int32|Nil)-instance-method","name":"thumbnail_width=","doc":"Thumbnail width.","summary":"<p>Thumbnail width.</p>","abstract":false,"args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"args_string":"(thumbnail_width : Int32 | Nil)","args_html":"(thumbnail_width : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":472,"url":null},"def":{"name":"thumbnail_width=","args":[{"name":"thumbnail_width","external_name":"thumbnail_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@thumbnail_width = thumbnail_width"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title of the venue.","summary":"<p>Title of the venue.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":445,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title of the venue.","summary":"<p>Title of the venue.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":445,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"venue\".","summary":"<p>Type of the result, must be &quot;venue&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":433,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"venue\".","summary":"<p>Type of the result, must be &quot;venue&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":433,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultVideo","path":"Hamilton/Types/InlineQueryResultVideo.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultVideo","name":"InlineQueryResultVideo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":198,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the video.\n\nNOTE: If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you must replace its content using `input_message_content`.","summary":"<p>Represents a link to a page containing an embedded video player or a video file.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":199,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":199,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String-instance-method","name":"caption","doc":"Caption of the video to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the video to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":221,"url":null},"def":{"name":"caption","return_type":"String","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String)-instance-method","name":"caption=","doc":"Caption of the video to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the video to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String"}],"args_string":"(caption : String)","args_html":"(caption : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":221,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultVideo.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":227,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InlineQueryResultVideo.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":227,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"description:String|Nil-instance-method","name":"description","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":242,"url":null},"def":{"name":"description","return_type":"String | Nil","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String|Nil)-instance-method","name":"description=","doc":"Short description of the result.","summary":"<p>Short description of the result.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"args_string":"(description : String | Nil)","args_html":"(description : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":242,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String | Nil"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":206,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":206,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).","summary":"<p>Content of the message to be sent instead of the video.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":248,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).","summary":"<p>Content of the message to be sent instead of the video.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":248,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"mime_type:String-instance-method","name":"mime_type","doc":"MIME type of the content of the video URL, “text/html” or “video/mp4”.","summary":"<p>MIME type of the content of the video URL, “text/html” or “video/mp4”.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":212,"url":null},"def":{"name":"mime_type","return_type":"String","visibility":"Public","body":"@mime_type"},"external_var":false},{"html_id":"mime_type=(mime_type:String)-instance-method","name":"mime_type=","doc":"MIME type of the content of the video URL, “text/html” or “video/mp4”.","summary":"<p>MIME type of the content of the video URL, “text/html” or “video/mp4”.</p>","abstract":false,"args":[{"name":"mime_type","external_name":"mime_type","restriction":"String"}],"args_string":"(mime_type : String)","args_html":"(mime_type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":212,"url":null},"def":{"name":"mime_type=","args":[{"name":"mime_type","external_name":"mime_type","restriction":"String"}],"visibility":"Public","body":"@mime_type = mime_type"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the video caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the video caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":224,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the video caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the video caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":224,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":245,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":245,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":230,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":230,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"thumbnail_url:String-instance-method","name":"thumbnail_url","doc":"URL of the thumbnail (JPEG only) for the video.","summary":"<p>URL of the thumbnail (JPEG only) for the video.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":215,"url":null},"def":{"name":"thumbnail_url","return_type":"String","visibility":"Public","body":"@thumbnail_url"},"external_var":false},{"html_id":"thumbnail_url=(thumbnail_url:String)-instance-method","name":"thumbnail_url=","doc":"URL of the thumbnail (JPEG only) for the video.","summary":"<p>URL of the thumbnail (JPEG only) for the video.</p>","abstract":false,"args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String"}],"args_string":"(thumbnail_url : String)","args_html":"(thumbnail_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":215,"url":null},"def":{"name":"thumbnail_url=","args":[{"name":"thumbnail_url","external_name":"thumbnail_url","restriction":"String"}],"visibility":"Public","body":"@thumbnail_url = thumbnail_url"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":218,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title for the result.","summary":"<p>Title for the result.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":218,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"video\".","summary":"<p>Type of the result, must be &quot;video&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":203,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"video\".","summary":"<p>Type of the result, must be &quot;video&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":203,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"video_duration:Int32|Nil-instance-method","name":"video_duration","doc":"Video duration in seconds.","summary":"<p>Video duration in seconds.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":239,"url":null},"def":{"name":"video_duration","return_type":"Int32 | Nil","visibility":"Public","body":"@video_duration"},"external_var":false},{"html_id":"video_duration=(video_duration:Int32|Nil)-instance-method","name":"video_duration=","doc":"Video duration in seconds.","summary":"<p>Video duration in seconds.</p>","abstract":false,"args":[{"name":"video_duration","external_name":"video_duration","restriction":"Int32 | Nil"}],"args_string":"(video_duration : Int32 | Nil)","args_html":"(video_duration : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":239,"url":null},"def":{"name":"video_duration=","args":[{"name":"video_duration","external_name":"video_duration","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@video_duration = video_duration"},"external_var":false},{"html_id":"video_height:Int32|Nil-instance-method","name":"video_height","doc":"Video height.","summary":"<p>Video height.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":236,"url":null},"def":{"name":"video_height","return_type":"Int32 | Nil","visibility":"Public","body":"@video_height"},"external_var":false},{"html_id":"video_height=(video_height:Int32|Nil)-instance-method","name":"video_height=","doc":"Video height.","summary":"<p>Video height.</p>","abstract":false,"args":[{"name":"video_height","external_name":"video_height","restriction":"Int32 | Nil"}],"args_string":"(video_height : Int32 | Nil)","args_html":"(video_height : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":236,"url":null},"def":{"name":"video_height=","args":[{"name":"video_height","external_name":"video_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@video_height = video_height"},"external_var":false},{"html_id":"video_url:String-instance-method","name":"video_url","doc":"A valid URL for the embedded video player or video file.","summary":"<p>A valid URL for the embedded video player or video file.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":209,"url":null},"def":{"name":"video_url","return_type":"String","visibility":"Public","body":"@video_url"},"external_var":false},{"html_id":"video_url=(video_url:String)-instance-method","name":"video_url=","doc":"A valid URL for the embedded video player or video file.","summary":"<p>A valid URL for the embedded video player or video file.</p>","abstract":false,"args":[{"name":"video_url","external_name":"video_url","restriction":"String"}],"args_string":"(video_url : String)","args_html":"(video_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":209,"url":null},"def":{"name":"video_url=","args":[{"name":"video_url","external_name":"video_url","restriction":"String"}],"visibility":"Public","body":"@video_url = video_url"},"external_var":false},{"html_id":"video_width:Int32|Nil-instance-method","name":"video_width","doc":"Video width.","summary":"<p>Video width.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":233,"url":null},"def":{"name":"video_width","return_type":"Int32 | Nil","visibility":"Public","body":"@video_width"},"external_var":false},{"html_id":"video_width=(video_width:Int32|Nil)-instance-method","name":"video_width=","doc":"Video width.","summary":"<p>Video width.</p>","abstract":false,"args":[{"name":"video_width","external_name":"video_width","restriction":"Int32 | Nil"}],"args_string":"(video_width : Int32 | Nil)","args_html":"(video_width : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":233,"url":null},"def":{"name":"video_width=","args":[{"name":"video_width","external_name":"video_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@video_width = video_width"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InlineQueryResultVoice","path":"Hamilton/Types/InlineQueryResultVoice.html","kind":"class","full_name":"Hamilton::Types::InlineQueryResultVoice","name":"InlineQueryResultVoice","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/inline_query_result.cr","line_number":293,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use `input_message_content` to send a message with the specified content instead of the the voice message.","summary":"<p>Represents a link to a voice recording in an .OGG container encoded with OPUS.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":294,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/inline_query_result.cr","line_number":294,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption, 0-1024 characters after entities parsing.","summary":"<p>Caption, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":310,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption, 0-1024 characters after entities parsing.","summary":"<p>Caption, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":310,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of parse_mode.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of parse_mode.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":316,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of parse_mode.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of parse_mode.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":316,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":301,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier for this result, 1-64 Bytes.","summary":"<p>Unique identifier for this result, 1-64 Bytes.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":301,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"input_message_content:Hamilton::Types::InputMessageContent|Nil-instance-method","name":"input_message_content","doc":"Content of the message to be sent instead of the voice recording.","summary":"<p>Content of the message to be sent instead of the voice recording.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":325,"url":null},"def":{"name":"input_message_content","return_type":"Hamilton::Types::InputMessageContent | Nil","visibility":"Public","body":"@input_message_content"},"external_var":false},{"html_id":"input_message_content=(input_message_content:Hamilton::Types::InputMessageContent|Nil)-instance-method","name":"input_message_content=","doc":"Content of the message to be sent instead of the voice recording.","summary":"<p>Content of the message to be sent instead of the voice recording.</p>","abstract":false,"args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"args_string":"(input_message_content : Hamilton::Types::InputMessageContent | Nil)","args_html":"(input_message_content : <a href=\"../../Hamilton/Types/InputMessageContent.html\">Hamilton::Types::InputMessageContent</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":325,"url":null},"def":{"name":"input_message_content=","args":[{"name":"input_message_content","external_name":"input_message_content","restriction":"Hamilton::Types::InputMessageContent | Nil"}],"visibility":"Public","body":"@input_message_content = input_message_content"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the voice message caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the voice message caption.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":313,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the voice message caption. See formatting options for more details.","summary":"<p>Mode for parsing entities in the voice message caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":313,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":322,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":322,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Recording title.","summary":"<p>Recording title.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":307,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Recording title.","summary":"<p>Recording title.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":307,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"voice\".","summary":"<p>Type of the result, must be &quot;voice&quot;.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":298,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"voice\".","summary":"<p>Type of the result, must be &quot;voice&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":298,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"voice_duration:Int32|Nil-instance-method","name":"voice_duration","doc":"Recording duration in seconds.","summary":"<p>Recording duration in seconds.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":319,"url":null},"def":{"name":"voice_duration","return_type":"Int32 | Nil","visibility":"Public","body":"@voice_duration"},"external_var":false},{"html_id":"voice_duration=(voice_duration:Int32|Nil)-instance-method","name":"voice_duration=","doc":"Recording duration in seconds.","summary":"<p>Recording duration in seconds.</p>","abstract":false,"args":[{"name":"voice_duration","external_name":"voice_duration","restriction":"Int32 | Nil"}],"args_string":"(voice_duration : Int32 | Nil)","args_html":"(voice_duration : Int32 | Nil)","location":{"filename":"src/types/inline_query_result.cr","line_number":319,"url":null},"def":{"name":"voice_duration=","args":[{"name":"voice_duration","external_name":"voice_duration","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@voice_duration = voice_duration"},"external_var":false},{"html_id":"voice_url:String-instance-method","name":"voice_url","doc":"A valid URL for the voice recording.","summary":"<p>A valid URL for the voice recording.</p>","abstract":false,"location":{"filename":"src/types/inline_query_result.cr","line_number":304,"url":null},"def":{"name":"voice_url","return_type":"String","visibility":"Public","body":"@voice_url"},"external_var":false},{"html_id":"voice_url=(voice_url:String)-instance-method","name":"voice_url=","doc":"A valid URL for the voice recording.","summary":"<p>A valid URL for the voice recording.</p>","abstract":false,"args":[{"name":"voice_url","external_name":"voice_url","restriction":"String"}],"args_string":"(voice_url : String)","args_html":"(voice_url : String)","location":{"filename":"src/types/inline_query_result.cr","line_number":304,"url":null},"def":{"name":"voice_url=","args":[{"name":"voice_url","external_name":"voice_url","restriction":"String"}],"visibility":"Public","body":"@voice_url = voice_url"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputChecklist","path":"Hamilton/Types/InputChecklist.html","kind":"class","full_name":"Hamilton::Types::InputChecklist","name":"InputChecklist","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_checklist.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a checklist to create.","summary":"<p>Describes a checklist to create.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_checklist.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_checklist.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"others_can_add_tasks:Bool|Nil-instance-method","name":"others_can_add_tasks","doc":"Pass True if other users can add tasks to the checklist.","summary":"<p>Pass True if other users can add tasks to the checklist.</p>","abstract":false,"location":{"filename":"src/types/input_checklist.cr","line_number":23,"url":null},"def":{"name":"others_can_add_tasks","return_type":"Bool | Nil","visibility":"Public","body":"@others_can_add_tasks"},"external_var":false},{"html_id":"others_can_add_tasks=(others_can_add_tasks:Bool|Nil)-instance-method","name":"others_can_add_tasks=","doc":"Pass True if other users can add tasks to the checklist.","summary":"<p>Pass True if other users can add tasks to the checklist.</p>","abstract":false,"args":[{"name":"others_can_add_tasks","external_name":"others_can_add_tasks","restriction":"Bool | Nil"}],"args_string":"(others_can_add_tasks : Bool | Nil)","args_html":"(others_can_add_tasks : Bool | Nil)","location":{"filename":"src/types/input_checklist.cr","line_number":23,"url":null},"def":{"name":"others_can_add_tasks=","args":[{"name":"others_can_add_tasks","external_name":"others_can_add_tasks","restriction":"Bool | Nil"}],"visibility":"Public","body":"@others_can_add_tasks = others_can_add_tasks"},"external_var":false},{"html_id":"others_can_mark_tasks_as_done:Bool|Nil-instance-method","name":"others_can_mark_tasks_as_done","doc":"Pass True if other users can mark tasks as done or not done in the checklist.","summary":"<p>Pass True if other users can mark tasks as done or not done in the checklist.</p>","abstract":false,"location":{"filename":"src/types/input_checklist.cr","line_number":26,"url":null},"def":{"name":"others_can_mark_tasks_as_done","return_type":"Bool | Nil","visibility":"Public","body":"@others_can_mark_tasks_as_done"},"external_var":false},{"html_id":"others_can_mark_tasks_as_done=(others_can_mark_tasks_as_done:Bool|Nil)-instance-method","name":"others_can_mark_tasks_as_done=","doc":"Pass True if other users can mark tasks as done or not done in the checklist.","summary":"<p>Pass True if other users can mark tasks as done or not done in the checklist.</p>","abstract":false,"args":[{"name":"others_can_mark_tasks_as_done","external_name":"others_can_mark_tasks_as_done","restriction":"Bool | Nil"}],"args_string":"(others_can_mark_tasks_as_done : Bool | Nil)","args_html":"(others_can_mark_tasks_as_done : Bool | Nil)","location":{"filename":"src/types/input_checklist.cr","line_number":26,"url":null},"def":{"name":"others_can_mark_tasks_as_done=","args":[{"name":"others_can_mark_tasks_as_done","external_name":"others_can_mark_tasks_as_done","restriction":"Bool | Nil"}],"visibility":"Public","body":"@others_can_mark_tasks_as_done = others_can_mark_tasks_as_done"},"external_var":false},{"html_id":"parse_mode:String-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the title.","summary":"<p>Mode for parsing entities in the title.</p>","abstract":false,"location":{"filename":"src/types/input_checklist.cr","line_number":14,"url":null},"def":{"name":"parse_mode","return_type":"String","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the title.","summary":"<p>Mode for parsing entities in the title.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String"}],"args_string":"(parse_mode : String)","args_html":"(parse_mode : String)","location":{"filename":"src/types/input_checklist.cr","line_number":14,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"tasks:Array(Hamilton::Types::InputChecklistTask)-instance-method","name":"tasks","doc":"List of 1-30 tasks in the checklist.","summary":"<p>List of 1-30 tasks in the checklist.</p>","abstract":false,"location":{"filename":"src/types/input_checklist.cr","line_number":20,"url":null},"def":{"name":"tasks","return_type":"Array(Hamilton::Types::InputChecklistTask)","visibility":"Public","body":"@tasks"},"external_var":false},{"html_id":"tasks=(tasks:Array(Hamilton::Types::InputChecklistTask))-instance-method","name":"tasks=","doc":"List of 1-30 tasks in the checklist.","summary":"<p>List of 1-30 tasks in the checklist.</p>","abstract":false,"args":[{"name":"tasks","external_name":"tasks","restriction":"Array(Hamilton::Types::InputChecklistTask)"}],"args_string":"(tasks : Array(Hamilton::Types::InputChecklistTask))","args_html":"(tasks : Array(<a href=\"../../Hamilton/Types/InputChecklistTask.html\">Hamilton::Types::InputChecklistTask</a>))","location":{"filename":"src/types/input_checklist.cr","line_number":20,"url":null},"def":{"name":"tasks=","args":[{"name":"tasks","external_name":"tasks","restriction":"Array(Hamilton::Types::InputChecklistTask)"}],"visibility":"Public","body":"@tasks = tasks"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Title of the checklist; 1-255 characters after entities parsing.","summary":"<p>Title of the checklist; 1-255 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/input_checklist.cr","line_number":11,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Title of the checklist; 1-255 characters after entities parsing.","summary":"<p>Title of the checklist; 1-255 characters after entities parsing.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/input_checklist.cr","line_number":11,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"title_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"title_entities","doc":"List of special entities that appear in the title, which can be specified instead of parse_mode. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are allowed.","summary":"<p>List of special entities that appear in the title, which can be specified instead of parse_mode.</p>","abstract":false,"location":{"filename":"src/types/input_checklist.cr","line_number":17,"url":null},"def":{"name":"title_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@title_entities"},"external_var":false},{"html_id":"title_entities=(title_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"title_entities=","doc":"List of special entities that appear in the title, which can be specified instead of parse_mode. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are allowed.","summary":"<p>List of special entities that appear in the title, which can be specified instead of parse_mode.</p>","abstract":false,"args":[{"name":"title_entities","external_name":"title_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(title_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(title_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/input_checklist.cr","line_number":17,"url":null},"def":{"name":"title_entities=","args":[{"name":"title_entities","external_name":"title_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@title_entities = title_entities"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputChecklistTask","path":"Hamilton/Types/InputChecklistTask.html","kind":"class","full_name":"Hamilton::Types::InputChecklistTask","name":"InputChecklistTask","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_checklist_task.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a task to add to a checklist.","summary":"<p>Describes a task to add to a checklist.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_checklist_task.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_checklist_task.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"id:Int32-instance-method","name":"id","doc":"Unique identifier of the task; must be positive and unique among all task identifiers currently present in the checklist.","summary":"<p>Unique identifier of the task; must be positive and unique among all task identifiers currently present in the checklist.</p>","abstract":false,"location":{"filename":"src/types/input_checklist_task.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"Int32","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:Int32)-instance-method","name":"id=","doc":"Unique identifier of the task; must be positive and unique among all task identifiers currently present in the checklist.","summary":"<p>Unique identifier of the task; must be positive and unique among all task identifiers currently present in the checklist.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int32"}],"args_string":"(id : Int32)","args_html":"(id : Int32)","location":{"filename":"src/types/input_checklist_task.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"Int32"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the text.","summary":"<p>Mode for parsing entities in the text.</p>","abstract":false,"location":{"filename":"src/types/input_checklist_task.cr","line_number":17,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the text.","summary":"<p>Mode for parsing entities in the text.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/input_checklist_task.cr","line_number":17,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"text:String-instance-method","name":"text","doc":"Text of the task; 1-100 characters after entities parsing.","summary":"<p>Text of the task; 1-100 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/input_checklist_task.cr","line_number":14,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"Text of the task; 1-100 characters after entities parsing.","summary":"<p>Text of the task; 1-100 characters after entities parsing.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/input_checklist_task.cr","line_number":14,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"text_entities:Array(Hamilton::Types::MessageEntity)-instance-method","name":"text_entities","doc":"List of special entities that appear in the text, which can be specified instead of parse_mode. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are allowed.","summary":"<p>List of special entities that appear in the text, which can be specified instead of parse_mode.</p>","abstract":false,"location":{"filename":"src/types/input_checklist_task.cr","line_number":20,"url":null},"def":{"name":"text_entities","return_type":"Array(Hamilton::Types::MessageEntity)","visibility":"Public","body":"@text_entities"},"external_var":false},{"html_id":"text_entities=(text_entities:Array(Hamilton::Types::MessageEntity))-instance-method","name":"text_entities=","doc":"List of special entities that appear in the text, which can be specified instead of parse_mode. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are allowed.","summary":"<p>List of special entities that appear in the text, which can be specified instead of parse_mode.</p>","abstract":false,"args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity)"}],"args_string":"(text_entities : Array(Hamilton::Types::MessageEntity))","args_html":"(text_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>))","location":{"filename":"src/types/input_checklist_task.cr","line_number":20,"url":null},"def":{"name":"text_entities=","args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity)"}],"visibility":"Public","body":"@text_entities = text_entities"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputContactMessageContent","path":"Hamilton/Types/InputContactMessageContent.html","kind":"class","full_name":"Hamilton::Types::InputContactMessageContent","name":"InputContactMessageContent","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_message_content.cr","line_number":81,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the content of a contact message to be sent as the result of an inline query.","summary":"<p>Represents the content of a contact message to be sent as the result of an inline query.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":82,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":82,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"first_name:String-instance-method","name":"first_name","doc":"Contact's first name.","summary":"<p>Contact's first name.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":89,"url":null},"def":{"name":"first_name","return_type":"String","visibility":"Public","body":"@first_name"},"external_var":false},{"html_id":"first_name=(first_name:String)-instance-method","name":"first_name=","doc":"Contact's first name.","summary":"<p>Contact's first name.</p>","abstract":false,"args":[{"name":"first_name","external_name":"first_name","restriction":"String"}],"args_string":"(first_name : String)","args_html":"(first_name : String)","location":{"filename":"src/types/input_message_content.cr","line_number":89,"url":null},"def":{"name":"first_name=","args":[{"name":"first_name","external_name":"first_name","restriction":"String"}],"visibility":"Public","body":"@first_name = first_name"},"external_var":false},{"html_id":"last_name:String|Nil-instance-method","name":"last_name","doc":"Contact's last name.","summary":"<p>Contact's last name.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":92,"url":null},"def":{"name":"last_name","return_type":"String | Nil","visibility":"Public","body":"@last_name"},"external_var":false},{"html_id":"last_name=(last_name:String|Nil)-instance-method","name":"last_name=","doc":"Contact's last name.","summary":"<p>Contact's last name.</p>","abstract":false,"args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"args_string":"(last_name : String | Nil)","args_html":"(last_name : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":92,"url":null},"def":{"name":"last_name=","args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"visibility":"Public","body":"@last_name = last_name"},"external_var":false},{"html_id":"phone_number:String-instance-method","name":"phone_number","doc":"Contact's phone number.","summary":"<p>Contact's phone number.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":86,"url":null},"def":{"name":"phone_number","return_type":"String","visibility":"Public","body":"@phone_number"},"external_var":false},{"html_id":"phone_number=(phone_number:String)-instance-method","name":"phone_number=","doc":"Contact's phone number.","summary":"<p>Contact's phone number.</p>","abstract":false,"args":[{"name":"phone_number","external_name":"phone_number","restriction":"String"}],"args_string":"(phone_number : String)","args_html":"(phone_number : String)","location":{"filename":"src/types/input_message_content.cr","line_number":86,"url":null},"def":{"name":"phone_number=","args":[{"name":"phone_number","external_name":"phone_number","restriction":"String"}],"visibility":"Public","body":"@phone_number = phone_number"},"external_var":false},{"html_id":"vcard:String|Nil-instance-method","name":"vcard","doc":"Additional data about the contact in the form of a vCard, 0-2048 bytes.","summary":"<p>Additional data about the contact in the form of a vCard, 0-2048 bytes.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":95,"url":null},"def":{"name":"vcard","return_type":"String | Nil","visibility":"Public","body":"@vcard"},"external_var":false},{"html_id":"vcard=(vcard:String|Nil)-instance-method","name":"vcard=","doc":"Additional data about the contact in the form of a vCard, 0-2048 bytes.","summary":"<p>Additional data about the contact in the form of a vCard, 0-2048 bytes.</p>","abstract":false,"args":[{"name":"vcard","external_name":"vcard","restriction":"String | Nil"}],"args_string":"(vcard : String | Nil)","args_html":"(vcard : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":95,"url":null},"def":{"name":"vcard=","args":[{"name":"vcard","external_name":"vcard","restriction":"String | Nil"}],"visibility":"Public","body":"@vcard = vcard"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputFile","path":"Hamilton/Types/InputFile.html","kind":"class","full_name":"Hamilton::Types::InputFile","name":"InputFile","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_file.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents the contents of a file to be uploaded. Must be posted using `multipart/form-data` in the usual way that files are uploaded via the browser.","summary":"<p>This object represents the contents of a file to be uploaded.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_file.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_file.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file:File-instance-method","name":"file","doc":"File to be sent.","summary":"<p>File to be sent.</p>","abstract":false,"location":{"filename":"src/types/input_file.cr","line_number":12,"url":null},"def":{"name":"file","return_type":"File","visibility":"Public","body":"@file"},"external_var":false},{"html_id":"file=(file:File)-instance-method","name":"file=","doc":"File to be sent.","summary":"<p>File to be sent.</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"File"}],"args_string":"(file : File)","args_html":"(file : <a href=\"../../Hamilton/Types/File.html\">File</a>)","location":{"filename":"src/types/input_file.cr","line_number":12,"url":null},"def":{"name":"file=","args":[{"name":"file","external_name":"file","restriction":"File"}],"visibility":"Public","body":"@file = file"},"external_var":false},{"html_id":"filename:File-instance-method","name":"filename","doc":"Filename.","summary":"<p>Filename.</p>","abstract":false,"location":{"filename":"src/types/input_file.cr","line_number":16,"url":null},"def":{"name":"filename","return_type":"File","visibility":"Public","body":"@filename"},"external_var":false},{"html_id":"filename=(filename:File)-instance-method","name":"filename=","doc":"Filename.","summary":"<p>Filename.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"File"}],"args_string":"(filename : File)","args_html":"(filename : <a href=\"../../Hamilton/Types/File.html\">File</a>)","location":{"filename":"src/types/input_file.cr","line_number":16,"url":null},"def":{"name":"filename=","args":[{"name":"filename","external_name":"filename","restriction":"File"}],"visibility":"Public","body":"@filename = filename"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputInvoiceMessageContent","path":"Hamilton/Types/InputInvoiceMessageContent.html","kind":"class","full_name":"Hamilton::Types::InputInvoiceMessageContent","name":"InputInvoiceMessageContent","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_message_content.cr","line_number":100,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the content of an invoice message to be sent as the result of an inline query.","summary":"<p>Represents the content of an invoice message to be sent as the result of an inline query.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":101,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":101,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"currency:String-instance-method","name":"currency","doc":"Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars.","summary":"<p>Three-letter ISO 4217 currency code, see more on currencies.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":117,"url":null},"def":{"name":"currency","return_type":"String","visibility":"Public","body":"@currency"},"external_var":false},{"html_id":"currency=(currency:String)-instance-method","name":"currency=","doc":"Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars.","summary":"<p>Three-letter ISO 4217 currency code, see more on currencies.</p>","abstract":false,"args":[{"name":"currency","external_name":"currency","restriction":"String"}],"args_string":"(currency : String)","args_html":"(currency : String)","location":{"filename":"src/types/input_message_content.cr","line_number":117,"url":null},"def":{"name":"currency=","args":[{"name":"currency","external_name":"currency","restriction":"String"}],"visibility":"Public","body":"@currency = currency"},"external_var":false},{"html_id":"description:String-instance-method","name":"description","doc":"Product description, 1-255 characters.","summary":"<p>Product description, 1-255 characters.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":108,"url":null},"def":{"name":"description","return_type":"String","visibility":"Public","body":"@description"},"external_var":false},{"html_id":"description=(description:String)-instance-method","name":"description=","doc":"Product description, 1-255 characters.","summary":"<p>Product description, 1-255 characters.</p>","abstract":false,"args":[{"name":"description","external_name":"description","restriction":"String"}],"args_string":"(description : String)","args_html":"(description : String)","location":{"filename":"src/types/input_message_content.cr","line_number":108,"url":null},"def":{"name":"description=","args":[{"name":"description","external_name":"description","restriction":"String"}],"visibility":"Public","body":"@description = description"},"external_var":false},{"html_id":"is_flexible:Bool|Nil-instance-method","name":"is_flexible","doc":"Pass True if the final price depends on the shipping method. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if the final price depends on the shipping method.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":162,"url":null},"def":{"name":"is_flexible","return_type":"Bool | Nil","visibility":"Public","body":"@is_flexible"},"external_var":false},{"html_id":"is_flexible=(is_flexible:Bool|Nil)-instance-method","name":"is_flexible=","doc":"Pass True if the final price depends on the shipping method. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if the final price depends on the shipping method.</p>","abstract":false,"args":[{"name":"is_flexible","external_name":"is_flexible","restriction":"Bool | Nil"}],"args_string":"(is_flexible : Bool | Nil)","args_html":"(is_flexible : Bool | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":162,"url":null},"def":{"name":"is_flexible=","args":[{"name":"is_flexible","external_name":"is_flexible","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_flexible = is_flexible"},"external_var":false},{"html_id":"max_tip_amount:Int32|Nil-instance-method","name":"max_tip_amount","doc":"The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`.","summary":"<p>The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":123,"url":null},"def":{"name":"max_tip_amount","return_type":"Int32 | Nil","visibility":"Public","body":"@max_tip_amount"},"external_var":false},{"html_id":"max_tip_amount=(max_tip_amount:Int32|Nil)-instance-method","name":"max_tip_amount=","doc":"The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`.","summary":"<p>The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"args":[{"name":"max_tip_amount","external_name":"max_tip_amount","restriction":"Int32 | Nil"}],"args_string":"(max_tip_amount : Int32 | Nil)","args_html":"(max_tip_amount : Int32 | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":123,"url":null},"def":{"name":"max_tip_amount=","args":[{"name":"max_tip_amount","external_name":"max_tip_amount","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@max_tip_amount = max_tip_amount"},"external_var":false},{"html_id":"need_email:Bool|Nil-instance-method","name":"need_email","doc":"Pass True if you require the user's email address to complete the order. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if you require the user's email address to complete the order.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":150,"url":null},"def":{"name":"need_email","return_type":"Bool | Nil","visibility":"Public","body":"@need_email"},"external_var":false},{"html_id":"need_email=(need_email:Bool|Nil)-instance-method","name":"need_email=","doc":"Pass True if you require the user's email address to complete the order. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if you require the user's email address to complete the order.</p>","abstract":false,"args":[{"name":"need_email","external_name":"need_email","restriction":"Bool | Nil"}],"args_string":"(need_email : Bool | Nil)","args_html":"(need_email : Bool | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":150,"url":null},"def":{"name":"need_email=","args":[{"name":"need_email","external_name":"need_email","restriction":"Bool | Nil"}],"visibility":"Public","body":"@need_email = need_email"},"external_var":false},{"html_id":"need_name:Bool|Nil-instance-method","name":"need_name","doc":"Pass True if you require the user's full name to complete the order. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if you require the user's full name to complete the order.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":144,"url":null},"def":{"name":"need_name","return_type":"Bool | Nil","visibility":"Public","body":"@need_name"},"external_var":false},{"html_id":"need_name=(need_name:Bool|Nil)-instance-method","name":"need_name=","doc":"Pass True if you require the user's full name to complete the order. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if you require the user's full name to complete the order.</p>","abstract":false,"args":[{"name":"need_name","external_name":"need_name","restriction":"Bool | Nil"}],"args_string":"(need_name : Bool | Nil)","args_html":"(need_name : Bool | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":144,"url":null},"def":{"name":"need_name=","args":[{"name":"need_name","external_name":"need_name","restriction":"Bool | Nil"}],"visibility":"Public","body":"@need_name = need_name"},"external_var":false},{"html_id":"need_phone_number:Bool|Nil-instance-method","name":"need_phone_number","doc":"Pass True if you require the user's phone number to complete the order. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if you require the user's phone number to complete the order.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":147,"url":null},"def":{"name":"need_phone_number","return_type":"Bool | Nil","visibility":"Public","body":"@need_phone_number"},"external_var":false},{"html_id":"need_phone_number=(need_phone_number:Bool|Nil)-instance-method","name":"need_phone_number=","doc":"Pass True if you require the user's phone number to complete the order. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if you require the user's phone number to complete the order.</p>","abstract":false,"args":[{"name":"need_phone_number","external_name":"need_phone_number","restriction":"Bool | Nil"}],"args_string":"(need_phone_number : Bool | Nil)","args_html":"(need_phone_number : Bool | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":147,"url":null},"def":{"name":"need_phone_number=","args":[{"name":"need_phone_number","external_name":"need_phone_number","restriction":"Bool | Nil"}],"visibility":"Public","body":"@need_phone_number = need_phone_number"},"external_var":false},{"html_id":"need_shipping_address:Bool|Nil-instance-method","name":"need_shipping_address","doc":"Pass True if you require the user's shipping address to complete the order. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if you require the user's shipping address to complete the order.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":153,"url":null},"def":{"name":"need_shipping_address","return_type":"Bool | Nil","visibility":"Public","body":"@need_shipping_address"},"external_var":false},{"html_id":"need_shipping_address=(need_shipping_address:Bool|Nil)-instance-method","name":"need_shipping_address=","doc":"Pass True if you require the user's shipping address to complete the order. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if you require the user's shipping address to complete the order.</p>","abstract":false,"args":[{"name":"need_shipping_address","external_name":"need_shipping_address","restriction":"Bool | Nil"}],"args_string":"(need_shipping_address : Bool | Nil)","args_html":"(need_shipping_address : Bool | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":153,"url":null},"def":{"name":"need_shipping_address=","args":[{"name":"need_shipping_address","external_name":"need_shipping_address","restriction":"Bool | Nil"}],"visibility":"Public","body":"@need_shipping_address = need_shipping_address"},"external_var":false},{"html_id":"payload:String-instance-method","name":"payload","doc":"Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.","summary":"<p>Bot-defined invoice payload, 1-128 bytes.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":111,"url":null},"def":{"name":"payload","return_type":"String","visibility":"Public","body":"@payload"},"external_var":false},{"html_id":"payload=(payload:String)-instance-method","name":"payload=","doc":"Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.","summary":"<p>Bot-defined invoice payload, 1-128 bytes.</p>","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"String"}],"args_string":"(payload : String)","args_html":"(payload : String)","location":{"filename":"src/types/input_message_content.cr","line_number":111,"url":null},"def":{"name":"payload=","args":[{"name":"payload","external_name":"payload","restriction":"String"}],"visibility":"Public","body":"@payload = payload"},"external_var":false},{"html_id":"photo_height:Int32|Nil-instance-method","name":"photo_height","doc":"Photo height.","summary":"<p>Photo height.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":141,"url":null},"def":{"name":"photo_height","return_type":"Int32 | Nil","visibility":"Public","body":"@photo_height"},"external_var":false},{"html_id":"photo_height=(photo_height:Int32|Nil)-instance-method","name":"photo_height=","doc":"Photo height.","summary":"<p>Photo height.</p>","abstract":false,"args":[{"name":"photo_height","external_name":"photo_height","restriction":"Int32 | Nil"}],"args_string":"(photo_height : Int32 | Nil)","args_html":"(photo_height : Int32 | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":141,"url":null},"def":{"name":"photo_height=","args":[{"name":"photo_height","external_name":"photo_height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@photo_height = photo_height"},"external_var":false},{"html_id":"photo_size:Int32|Nil-instance-method","name":"photo_size","doc":"Photo size in bytes.","summary":"<p>Photo size in bytes.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":135,"url":null},"def":{"name":"photo_size","return_type":"Int32 | Nil","visibility":"Public","body":"@photo_size"},"external_var":false},{"html_id":"photo_size=(photo_size:Int32|Nil)-instance-method","name":"photo_size=","doc":"Photo size in bytes.","summary":"<p>Photo size in bytes.</p>","abstract":false,"args":[{"name":"photo_size","external_name":"photo_size","restriction":"Int32 | Nil"}],"args_string":"(photo_size : Int32 | Nil)","args_html":"(photo_size : Int32 | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":135,"url":null},"def":{"name":"photo_size=","args":[{"name":"photo_size","external_name":"photo_size","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@photo_size = photo_size"},"external_var":false},{"html_id":"photo_url:String|Nil-instance-method","name":"photo_url","doc":"URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.","summary":"<p>URL of the product photo for the invoice.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":132,"url":null},"def":{"name":"photo_url","return_type":"String | Nil","visibility":"Public","body":"@photo_url"},"external_var":false},{"html_id":"photo_url=(photo_url:String|Nil)-instance-method","name":"photo_url=","doc":"URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.","summary":"<p>URL of the product photo for the invoice.</p>","abstract":false,"args":[{"name":"photo_url","external_name":"photo_url","restriction":"String | Nil"}],"args_string":"(photo_url : String | Nil)","args_html":"(photo_url : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":132,"url":null},"def":{"name":"photo_url=","args":[{"name":"photo_url","external_name":"photo_url","restriction":"String | Nil"}],"visibility":"Public","body":"@photo_url = photo_url"},"external_var":false},{"html_id":"photo_width:Int32|Nil-instance-method","name":"photo_width","doc":"Photo width.","summary":"<p>Photo width.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":138,"url":null},"def":{"name":"photo_width","return_type":"Int32 | Nil","visibility":"Public","body":"@photo_width"},"external_var":false},{"html_id":"photo_width=(photo_width:Int32|Nil)-instance-method","name":"photo_width=","doc":"Photo width.","summary":"<p>Photo width.</p>","abstract":false,"args":[{"name":"photo_width","external_name":"photo_width","restriction":"Int32 | Nil"}],"args_string":"(photo_width : Int32 | Nil)","args_html":"(photo_width : Int32 | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":138,"url":null},"def":{"name":"photo_width=","args":[{"name":"photo_width","external_name":"photo_width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@photo_width = photo_width"},"external_var":false},{"html_id":"prices:Array(Hamilton::Types::LabeledPrice)-instance-method","name":"prices","doc":"Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in Telegram Stars.","summary":"<p>Price breakdown, a JSON-serialized list of components (e.g.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":120,"url":null},"def":{"name":"prices","return_type":"Array(Hamilton::Types::LabeledPrice)","visibility":"Public","body":"@prices"},"external_var":false},{"html_id":"prices=(prices:Array(Hamilton::Types::LabeledPrice))-instance-method","name":"prices=","doc":"Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in Telegram Stars.","summary":"<p>Price breakdown, a JSON-serialized list of components (e.g.</p>","abstract":false,"args":[{"name":"prices","external_name":"prices","restriction":"Array(Hamilton::Types::LabeledPrice)"}],"args_string":"(prices : Array(Hamilton::Types::LabeledPrice))","args_html":"(prices : Array(<a href=\"../../Hamilton/Types/LabeledPrice.html\">Hamilton::Types::LabeledPrice</a>))","location":{"filename":"src/types/input_message_content.cr","line_number":120,"url":null},"def":{"name":"prices=","args":[{"name":"prices","external_name":"prices","restriction":"Array(Hamilton::Types::LabeledPrice)"}],"visibility":"Public","body":"@prices = prices"},"external_var":false},{"html_id":"provider_data:String|Nil-instance-method","name":"provider_data","doc":"A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider.","summary":"<p>A JSON-serialized object for data about the invoice, which will be shared with the payment provider.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":129,"url":null},"def":{"name":"provider_data","return_type":"String | Nil","visibility":"Public","body":"@provider_data"},"external_var":false},{"html_id":"provider_data=(provider_data:String|Nil)-instance-method","name":"provider_data=","doc":"A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider.","summary":"<p>A JSON-serialized object for data about the invoice, which will be shared with the payment provider.</p>","abstract":false,"args":[{"name":"provider_data","external_name":"provider_data","restriction":"String | Nil"}],"args_string":"(provider_data : String | Nil)","args_html":"(provider_data : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":129,"url":null},"def":{"name":"provider_data=","args":[{"name":"provider_data","external_name":"provider_data","restriction":"String | Nil"}],"visibility":"Public","body":"@provider_data = provider_data"},"external_var":false},{"html_id":"provider_token:String|Nil-instance-method","name":"provider_token","doc":"Payment provider token, obtained via @BotFather. Pass an empty string for payments in Telegram Stars.","summary":"<p>Payment provider token, obtained via @BotFather.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":114,"url":null},"def":{"name":"provider_token","return_type":"String | Nil","visibility":"Public","body":"@provider_token"},"external_var":false},{"html_id":"provider_token=(provider_token:String|Nil)-instance-method","name":"provider_token=","doc":"Payment provider token, obtained via @BotFather. Pass an empty string for payments in Telegram Stars.","summary":"<p>Payment provider token, obtained via @BotFather.</p>","abstract":false,"args":[{"name":"provider_token","external_name":"provider_token","restriction":"String | Nil"}],"args_string":"(provider_token : String | Nil)","args_html":"(provider_token : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":114,"url":null},"def":{"name":"provider_token=","args":[{"name":"provider_token","external_name":"provider_token","restriction":"String | Nil"}],"visibility":"Public","body":"@provider_token = provider_token"},"external_var":false},{"html_id":"send_email_to_provider:Bool|Nil-instance-method","name":"send_email_to_provider","doc":"Pass True if the user's email address should be sent to the provider. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if the user's email address should be sent to the provider.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":159,"url":null},"def":{"name":"send_email_to_provider","return_type":"Bool | Nil","visibility":"Public","body":"@send_email_to_provider"},"external_var":false},{"html_id":"send_email_to_provider=(send_email_to_provider:Bool|Nil)-instance-method","name":"send_email_to_provider=","doc":"Pass True if the user's email address should be sent to the provider. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if the user's email address should be sent to the provider.</p>","abstract":false,"args":[{"name":"send_email_to_provider","external_name":"send_email_to_provider","restriction":"Bool | Nil"}],"args_string":"(send_email_to_provider : Bool | Nil)","args_html":"(send_email_to_provider : Bool | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":159,"url":null},"def":{"name":"send_email_to_provider=","args":[{"name":"send_email_to_provider","external_name":"send_email_to_provider","restriction":"Bool | Nil"}],"visibility":"Public","body":"@send_email_to_provider = send_email_to_provider"},"external_var":false},{"html_id":"send_phone_number_to_provider:Bool|Nil-instance-method","name":"send_phone_number_to_provider","doc":"Pass True if the user's phone number should be sent to the provider. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if the user's phone number should be sent to the provider.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":156,"url":null},"def":{"name":"send_phone_number_to_provider","return_type":"Bool | Nil","visibility":"Public","body":"@send_phone_number_to_provider"},"external_var":false},{"html_id":"send_phone_number_to_provider=(send_phone_number_to_provider:Bool|Nil)-instance-method","name":"send_phone_number_to_provider=","doc":"Pass True if the user's phone number should be sent to the provider. Ignored for payments in Telegram Stars.","summary":"<p>Pass True if the user's phone number should be sent to the provider.</p>","abstract":false,"args":[{"name":"send_phone_number_to_provider","external_name":"send_phone_number_to_provider","restriction":"Bool | Nil"}],"args_string":"(send_phone_number_to_provider : Bool | Nil)","args_html":"(send_phone_number_to_provider : Bool | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":156,"url":null},"def":{"name":"send_phone_number_to_provider=","args":[{"name":"send_phone_number_to_provider","external_name":"send_phone_number_to_provider","restriction":"Bool | Nil"}],"visibility":"Public","body":"@send_phone_number_to_provider = send_phone_number_to_provider"},"external_var":false},{"html_id":"suggested_tip_amounts:Array(Int32)|Nil-instance-method","name":"suggested_tip_amounts","doc":"A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.","summary":"<p>A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":126,"url":null},"def":{"name":"suggested_tip_amounts","return_type":"Array(Int32) | Nil","visibility":"Public","body":"@suggested_tip_amounts"},"external_var":false},{"html_id":"suggested_tip_amounts=(suggested_tip_amounts:Array(Int32)|Nil)-instance-method","name":"suggested_tip_amounts=","doc":"A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.","summary":"<p>A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"args":[{"name":"suggested_tip_amounts","external_name":"suggested_tip_amounts","restriction":"Array(Int32) | Nil"}],"args_string":"(suggested_tip_amounts : Array(Int32) | Nil)","args_html":"(suggested_tip_amounts : Array(Int32) | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":126,"url":null},"def":{"name":"suggested_tip_amounts=","args":[{"name":"suggested_tip_amounts","external_name":"suggested_tip_amounts","restriction":"Array(Int32) | Nil"}],"visibility":"Public","body":"@suggested_tip_amounts = suggested_tip_amounts"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Product name, 1-32 characters.","summary":"<p>Product name, 1-32 characters.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":105,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Product name, 1-32 characters.","summary":"<p>Product name, 1-32 characters.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/input_message_content.cr","line_number":105,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputLocationMessageContent","path":"Hamilton/Types/InputLocationMessageContent.html","kind":"class","full_name":"Hamilton::Types::InputLocationMessageContent","name":"InputLocationMessageContent","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_message_content.cr","line_number":25,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the content of a location message to be sent as the result of an inline query.","summary":"<p>Represents the content of a location message to be sent as the result of an inline query.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"heading:Int32|Nil-instance-method","name":"heading","doc":"For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.","summary":"<p>For live locations, a direction in which the user is moving, in degrees.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":42,"url":null},"def":{"name":"heading","return_type":"Int32 | Nil","visibility":"Public","body":"@heading"},"external_var":false},{"html_id":"heading=(heading:Int32|Nil)-instance-method","name":"heading=","doc":"For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.","summary":"<p>For live locations, a direction in which the user is moving, in degrees.</p>","abstract":false,"args":[{"name":"heading","external_name":"heading","restriction":"Int32 | Nil"}],"args_string":"(heading : Int32 | Nil)","args_html":"(heading : Int32 | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":42,"url":null},"def":{"name":"heading=","args":[{"name":"heading","external_name":"heading","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@heading = heading"},"external_var":false},{"html_id":"horizontal_accuracy:Float32|Nil-instance-method","name":"horizontal_accuracy","doc":"The radius of uncertainty for the location, measured in meters; 0-1500.","summary":"<p>The radius of uncertainty for the location, measured in meters; 0-1500.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":36,"url":null},"def":{"name":"horizontal_accuracy","return_type":"Float32 | Nil","visibility":"Public","body":"@horizontal_accuracy"},"external_var":false},{"html_id":"horizontal_accuracy=(horizontal_accuracy:Float32|Nil)-instance-method","name":"horizontal_accuracy=","doc":"The radius of uncertainty for the location, measured in meters; 0-1500.","summary":"<p>The radius of uncertainty for the location, measured in meters; 0-1500.</p>","abstract":false,"args":[{"name":"horizontal_accuracy","external_name":"horizontal_accuracy","restriction":"Float32 | Nil"}],"args_string":"(horizontal_accuracy : Float32 | Nil)","args_html":"(horizontal_accuracy : Float32 | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":36,"url":null},"def":{"name":"horizontal_accuracy=","args":[{"name":"horizontal_accuracy","external_name":"horizontal_accuracy","restriction":"Float32 | Nil"}],"visibility":"Public","body":"@horizontal_accuracy = horizontal_accuracy"},"external_var":false},{"html_id":"latitude:Float32-instance-method","name":"latitude","doc":"Latitude of the location in degrees.","summary":"<p>Latitude of the location in degrees.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":30,"url":null},"def":{"name":"latitude","return_type":"Float32","visibility":"Public","body":"@latitude"},"external_var":false},{"html_id":"latitude=(latitude:Float32)-instance-method","name":"latitude=","doc":"Latitude of the location in degrees.","summary":"<p>Latitude of the location in degrees.</p>","abstract":false,"args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"args_string":"(latitude : Float32)","args_html":"(latitude : Float32)","location":{"filename":"src/types/input_message_content.cr","line_number":30,"url":null},"def":{"name":"latitude=","args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"visibility":"Public","body":"@latitude = latitude"},"external_var":false},{"html_id":"live_period:Int32|Nil-instance-method","name":"live_period","doc":"Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.","summary":"<p>Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":39,"url":null},"def":{"name":"live_period","return_type":"Int32 | Nil","visibility":"Public","body":"@live_period"},"external_var":false},{"html_id":"live_period=(live_period:Int32|Nil)-instance-method","name":"live_period=","doc":"Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.","summary":"<p>Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.</p>","abstract":false,"args":[{"name":"live_period","external_name":"live_period","restriction":"Int32 | Nil"}],"args_string":"(live_period : Int32 | Nil)","args_html":"(live_period : Int32 | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":39,"url":null},"def":{"name":"live_period=","args":[{"name":"live_period","external_name":"live_period","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@live_period = live_period"},"external_var":false},{"html_id":"longitude:Float32-instance-method","name":"longitude","doc":"Longitude of the location in degrees.","summary":"<p>Longitude of the location in degrees.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":33,"url":null},"def":{"name":"longitude","return_type":"Float32","visibility":"Public","body":"@longitude"},"external_var":false},{"html_id":"longitude=(longitude:Float32)-instance-method","name":"longitude=","doc":"Longitude of the location in degrees.","summary":"<p>Longitude of the location in degrees.</p>","abstract":false,"args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"args_string":"(longitude : Float32)","args_html":"(longitude : Float32)","location":{"filename":"src/types/input_message_content.cr","line_number":33,"url":null},"def":{"name":"longitude=","args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"visibility":"Public","body":"@longitude = longitude"},"external_var":false},{"html_id":"proximity_alert_radius:Int32|Nil-instance-method","name":"proximity_alert_radius","doc":"For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.","summary":"<p>For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":45,"url":null},"def":{"name":"proximity_alert_radius","return_type":"Int32 | Nil","visibility":"Public","body":"@proximity_alert_radius"},"external_var":false},{"html_id":"proximity_alert_radius=(proximity_alert_radius:Int32|Nil)-instance-method","name":"proximity_alert_radius=","doc":"For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.","summary":"<p>For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters.</p>","abstract":false,"args":[{"name":"proximity_alert_radius","external_name":"proximity_alert_radius","restriction":"Int32 | Nil"}],"args_string":"(proximity_alert_radius : Int32 | Nil)","args_html":"(proximity_alert_radius : Int32 | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":45,"url":null},"def":{"name":"proximity_alert_radius=","args":[{"name":"proximity_alert_radius","external_name":"proximity_alert_radius","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@proximity_alert_radius = proximity_alert_radius"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputMedia","path":"Hamilton/Types/InputMedia.html","kind":"alias","full_name":"Hamilton::Types::InputMedia","name":"InputMedia","abstract":false,"locations":[{"filename":"src/types/input_media.cr","line_number":184,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::InputMediaAnimation | Hamilton::Types::InputMediaAudio | Hamilton::Types::InputMediaDocument | Hamilton::Types::InputMediaPhoto | Hamilton::Types::InputMediaVideo)","aliased_html":"<a href=\"../../Hamilton/Types/InputMediaAnimation.html\">Hamilton::Types::InputMediaAnimation</a> | <a href=\"../../Hamilton/Types/InputMediaAudio.html\">Hamilton::Types::InputMediaAudio</a> | <a href=\"../../Hamilton/Types/InputMediaDocument.html\">Hamilton::Types::InputMediaDocument</a> | <a href=\"../../Hamilton/Types/InputMediaPhoto.html\">Hamilton::Types::InputMediaPhoto</a> | <a href=\"../../Hamilton/Types/InputMediaVideo.html\">Hamilton::Types::InputMediaVideo</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents the content of a media message to be sent.","summary":"<p>This object represents the content of a media message to be sent.</p>"},{"html_id":"hamilton/Hamilton/Types/InputMediaAnimation","path":"Hamilton/Types/InputMediaAnimation.html","kind":"class","full_name":"Hamilton::Types::InputMediaAnimation","name":"InputMediaAnimation","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_media.cr","line_number":83,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.","summary":"<p>Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":84,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":84,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the animation to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the animation to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":97,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the animation to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the animation to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":97,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaAnimation.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":103,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaAnimation.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/input_media.cr","line_number":103,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"duration:Int32-instance-method","name":"duration","doc":"Animation duration in seconds.","summary":"<p>Animation duration in seconds.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":115,"url":null},"def":{"name":"duration","return_type":"Int32","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32)-instance-method","name":"duration=","doc":"Animation duration in seconds.","summary":"<p>Animation duration in seconds.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"args_string":"(duration : Int32)","args_html":"(duration : Int32)","location":{"filename":"src/types/input_media.cr","line_number":115,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"has_spoiler:Bool|Nil-instance-method","name":"has_spoiler","doc":"Pass True if the photo needs to be covered with a spoiler animation.","summary":"<p>Pass True if the photo needs to be covered with a spoiler animation.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":118,"url":null},"def":{"name":"has_spoiler","return_type":"Bool | Nil","visibility":"Public","body":"@has_spoiler"},"external_var":false},{"html_id":"has_spoiler=(has_spoiler:Bool|Nil)-instance-method","name":"has_spoiler=","doc":"Pass True if the photo needs to be covered with a spoiler animation.","summary":"<p>Pass True if the photo needs to be covered with a spoiler animation.</p>","abstract":false,"args":[{"name":"has_spoiler","external_name":"has_spoiler","restriction":"Bool | Nil"}],"args_string":"(has_spoiler : Bool | Nil)","args_html":"(has_spoiler : Bool | Nil)","location":{"filename":"src/types/input_media.cr","line_number":118,"url":null},"def":{"name":"has_spoiler=","args":[{"name":"has_spoiler","external_name":"has_spoiler","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_spoiler = has_spoiler"},"external_var":false},{"html_id":"height:Int32-instance-method","name":"height","doc":"Animation height.","summary":"<p>Animation height.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":112,"url":null},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int32)-instance-method","name":"height=","doc":"Animation height.","summary":"<p>Animation height.</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(height : Int32)","args_html":"(height : Int32)","location":{"filename":"src/types/input_media.cr","line_number":112,"url":null},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"media:Hamilton::Types::InputFile|String-instance-method","name":"media","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":91,"url":null},"def":{"name":"media","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@media"},"external_var":false},{"html_id":"media=(media:Hamilton::Types::InputFile|String)-instance-method","name":"media=","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(media : Hamilton::Types::InputFile | String)","args_html":"(media : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_media.cr","line_number":91,"url":null},"def":{"name":"media=","args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@media = media"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the animation caption.","summary":"<p>Mode for parsing entities in the animation caption.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":100,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the animation caption.","summary":"<p>Mode for parsing entities in the animation caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":100,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":106,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/input_media.cr","line_number":106,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::InputFile|String|Nil-instance-method","name":"thumbnail","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":94,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::InputFile | String | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::InputFile|String|Nil)-instance-method","name":"thumbnail=","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"args_string":"(thumbnail : Hamilton::Types::InputFile | String | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":94,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"animation\".","summary":"<p>Type of the result, must be &quot;animation&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":88,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"animation\".","summary":"<p>Type of the result, must be &quot;animation&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_media.cr","line_number":88,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"width:Int32-instance-method","name":"width","doc":"Animation width.","summary":"<p>Animation width.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":109,"url":null},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int32)-instance-method","name":"width=","doc":"Animation width.","summary":"<p>Animation width.</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/types/input_media.cr","line_number":109,"url":null},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@width = width"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputMediaAudio","path":"Hamilton/Types/InputMediaAudio.html","kind":"class","full_name":"Hamilton::Types::InputMediaAudio","name":"InputMediaAudio","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_media.cr","line_number":123,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an audio file to be treated as music to be sent.","summary":"<p>Represents an audio file to be treated as music to be sent.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":124,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":124,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the audio to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the audio to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":137,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the audio to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the audio to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":137,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaAudio.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":143,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaAudio.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/input_media.cr","line_number":143,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"duration:Int32|Nil-instance-method","name":"duration","doc":"Duration of the audio in seconds.","summary":"<p>Duration of the audio in seconds.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":146,"url":null},"def":{"name":"duration","return_type":"Int32 | Nil","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32|Nil)-instance-method","name":"duration=","doc":"Duration of the audio in seconds.","summary":"<p>Duration of the audio in seconds.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32 | Nil"}],"args_string":"(duration : Int32 | Nil)","args_html":"(duration : Int32 | Nil)","location":{"filename":"src/types/input_media.cr","line_number":146,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"media:Hamilton::Types::InputFile|String-instance-method","name":"media","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":131,"url":null},"def":{"name":"media","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@media"},"external_var":false},{"html_id":"media=(media:Hamilton::Types::InputFile|String)-instance-method","name":"media=","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(media : Hamilton::Types::InputFile | String)","args_html":"(media : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_media.cr","line_number":131,"url":null},"def":{"name":"media=","args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@media = media"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the audio caption.","summary":"<p>Mode for parsing entities in the audio caption.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":140,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the audio caption.","summary":"<p>Mode for parsing entities in the audio caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":140,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"performer:String|Nil-instance-method","name":"performer","doc":"Performer of the audio.","summary":"<p>Performer of the audio.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":149,"url":null},"def":{"name":"performer","return_type":"String | Nil","visibility":"Public","body":"@performer"},"external_var":false},{"html_id":"performer=(performer:String|Nil)-instance-method","name":"performer=","doc":"Performer of the audio.","summary":"<p>Performer of the audio.</p>","abstract":false,"args":[{"name":"performer","external_name":"performer","restriction":"String | Nil"}],"args_string":"(performer : String | Nil)","args_html":"(performer : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":149,"url":null},"def":{"name":"performer=","args":[{"name":"performer","external_name":"performer","restriction":"String | Nil"}],"visibility":"Public","body":"@performer = performer"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::InputFile|String|Nil-instance-method","name":"thumbnail","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":134,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::InputFile | String | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::InputFile|String|Nil)-instance-method","name":"thumbnail=","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"args_string":"(thumbnail : Hamilton::Types::InputFile | String | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":134,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"title:String|Nil-instance-method","name":"title","doc":"Title of the audio.","summary":"<p>Title of the audio.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":152,"url":null},"def":{"name":"title","return_type":"String | Nil","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String|Nil)-instance-method","name":"title=","doc":"Title of the audio.","summary":"<p>Title of the audio.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"args_string":"(title : String | Nil)","args_html":"(title : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":152,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String | Nil"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"audio\".","summary":"<p>Type of the result, must be &quot;audio&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":128,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"audio\".","summary":"<p>Type of the result, must be &quot;audio&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_media.cr","line_number":128,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputMediaDocument","path":"Hamilton/Types/InputMediaDocument.html","kind":"class","full_name":"Hamilton::Types::InputMediaDocument","name":"InputMediaDocument","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_media.cr","line_number":157,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a general file to be sent.","summary":"<p>Represents a general file to be sent.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":158,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":158,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the document to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the document to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":171,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the document to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the document to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":171,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaDocument.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":177,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaDocument.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/input_media.cr","line_number":177,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"disable_content_type_detection:Bool|Nil-instance-method","name":"disable_content_type_detection","doc":"Disables automatic server-side content type detection for files uploaded using `multipart/form-data`. Always True, if the document is sent as part of an album.","summary":"<p>Disables automatic server-side content type detection for files uploaded using <code>multipart/form-data</code>.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":180,"url":null},"def":{"name":"disable_content_type_detection","return_type":"Bool | Nil","visibility":"Public","body":"@disable_content_type_detection"},"external_var":false},{"html_id":"disable_content_type_detection=(disable_content_type_detection:Bool|Nil)-instance-method","name":"disable_content_type_detection=","doc":"Disables automatic server-side content type detection for files uploaded using `multipart/form-data`. Always True, if the document is sent as part of an album.","summary":"<p>Disables automatic server-side content type detection for files uploaded using <code>multipart/form-data</code>.</p>","abstract":false,"args":[{"name":"disable_content_type_detection","external_name":"disable_content_type_detection","restriction":"Bool | Nil"}],"args_string":"(disable_content_type_detection : Bool | Nil)","args_html":"(disable_content_type_detection : Bool | Nil)","location":{"filename":"src/types/input_media.cr","line_number":180,"url":null},"def":{"name":"disable_content_type_detection=","args":[{"name":"disable_content_type_detection","external_name":"disable_content_type_detection","restriction":"Bool | Nil"}],"visibility":"Public","body":"@disable_content_type_detection = disable_content_type_detection"},"external_var":false},{"html_id":"media:Hamilton::Types::InputFile|String-instance-method","name":"media","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":165,"url":null},"def":{"name":"media","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@media"},"external_var":false},{"html_id":"media=(media:Hamilton::Types::InputFile|String)-instance-method","name":"media=","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(media : Hamilton::Types::InputFile | String)","args_html":"(media : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_media.cr","line_number":165,"url":null},"def":{"name":"media=","args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@media = media"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the document caption.","summary":"<p>Mode for parsing entities in the document caption.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":174,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the document caption.","summary":"<p>Mode for parsing entities in the document caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":174,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::InputFile|String|Nil-instance-method","name":"thumbnail","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":168,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::InputFile | String | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::InputFile|String|Nil)-instance-method","name":"thumbnail=","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"args_string":"(thumbnail : Hamilton::Types::InputFile | String | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":168,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"document\".","summary":"<p>Type of the result, must be &quot;document&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":162,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"document\".","summary":"<p>Type of the result, must be &quot;document&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_media.cr","line_number":162,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputMediaPhoto","path":"Hamilton/Types/InputMediaPhoto.html","kind":"class","full_name":"Hamilton::Types::InputMediaPhoto","name":"InputMediaPhoto","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_media.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a photo to be sent.","summary":"<p>Represents a photo to be sent.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the photo to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the photo to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":17,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the photo to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the photo to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":17,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaPhoto.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":23,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaPhoto.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/input_media.cr","line_number":23,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"has_spoiler:Bool|Nil-instance-method","name":"has_spoiler","doc":"Pass True if the photo needs to be covered with a spoiler animation.","summary":"<p>Pass True if the photo needs to be covered with a spoiler animation.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":29,"url":null},"def":{"name":"has_spoiler","return_type":"Bool | Nil","visibility":"Public","body":"@has_spoiler"},"external_var":false},{"html_id":"has_spoiler=(has_spoiler:Bool|Nil)-instance-method","name":"has_spoiler=","doc":"Pass True if the photo needs to be covered with a spoiler animation.","summary":"<p>Pass True if the photo needs to be covered with a spoiler animation.</p>","abstract":false,"args":[{"name":"has_spoiler","external_name":"has_spoiler","restriction":"Bool | Nil"}],"args_string":"(has_spoiler : Bool | Nil)","args_html":"(has_spoiler : Bool | Nil)","location":{"filename":"src/types/input_media.cr","line_number":29,"url":null},"def":{"name":"has_spoiler=","args":[{"name":"has_spoiler","external_name":"has_spoiler","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_spoiler = has_spoiler"},"external_var":false},{"html_id":"media:Hamilton::Types::InputFile|String-instance-method","name":"media","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":14,"url":null},"def":{"name":"media","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@media"},"external_var":false},{"html_id":"media=(media:Hamilton::Types::InputFile|String)-instance-method","name":"media=","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(media : Hamilton::Types::InputFile | String)","args_html":"(media : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_media.cr","line_number":14,"url":null},"def":{"name":"media=","args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@media = media"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the photo caption.","summary":"<p>Mode for parsing entities in the photo caption.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":20,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the photo caption.","summary":"<p>Mode for parsing entities in the photo caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":20,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":26,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/input_media.cr","line_number":26,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"photo\".","summary":"<p>Type of the result, must be &quot;photo&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"photo\".","summary":"<p>Type of the result, must be &quot;photo&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_media.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputMediaVideo","path":"Hamilton/Types/InputMediaVideo.html","kind":"class","full_name":"Hamilton::Types::InputMediaVideo","name":"InputMediaVideo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_media.cr","line_number":34,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a video to be sent.","summary":"<p>Represents a video to be sent.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":35,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_media.cr","line_number":35,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption of the video to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the video to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":54,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption of the video to be sent, 0-1024 characters after entities parsing.","summary":"<p>Caption of the video to be sent, 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":54,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaVideo.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":60,"url":null},"def":{"name":"caption_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"List of special entities that appear in the caption, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in the caption, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputMediaVideo.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/input_media.cr","line_number":60,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"cover:Hamilton::Types::InputFile|String|Nil-instance-method","name":"cover","doc":"Cover for the video in the message. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under `<file_attach_name>` name.","summary":"<p>Cover for the video in the message.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":48,"url":null},"def":{"name":"cover","return_type":"Hamilton::Types::InputFile | String | Nil","visibility":"Public","body":"@cover"},"external_var":false},{"html_id":"cover=(cover:Hamilton::Types::InputFile|String|Nil)-instance-method","name":"cover=","doc":"Cover for the video in the message. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under `<file_attach_name>` name.","summary":"<p>Cover for the video in the message.</p>","abstract":false,"args":[{"name":"cover","external_name":"cover","restriction":"Hamilton::Types::InputFile | String | Nil"}],"args_string":"(cover : Hamilton::Types::InputFile | String | Nil)","args_html":"(cover : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":48,"url":null},"def":{"name":"cover=","args":[{"name":"cover","external_name":"cover","restriction":"Hamilton::Types::InputFile | String | Nil"}],"visibility":"Public","body":"@cover = cover"},"external_var":false},{"html_id":"duration:Int32-instance-method","name":"duration","doc":"Video duration in seconds.","summary":"<p>Video duration in seconds.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":72,"url":null},"def":{"name":"duration","return_type":"Int32","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32)-instance-method","name":"duration=","doc":"Video duration in seconds.","summary":"<p>Video duration in seconds.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"args_string":"(duration : Int32)","args_html":"(duration : Int32)","location":{"filename":"src/types/input_media.cr","line_number":72,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"has_spoiler:Bool|Nil-instance-method","name":"has_spoiler","doc":"Pass True if the photo needs to be covered with a spoiler animation.","summary":"<p>Pass True if the photo needs to be covered with a spoiler animation.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":78,"url":null},"def":{"name":"has_spoiler","return_type":"Bool | Nil","visibility":"Public","body":"@has_spoiler"},"external_var":false},{"html_id":"has_spoiler=(has_spoiler:Bool|Nil)-instance-method","name":"has_spoiler=","doc":"Pass True if the photo needs to be covered with a spoiler animation.","summary":"<p>Pass True if the photo needs to be covered with a spoiler animation.</p>","abstract":false,"args":[{"name":"has_spoiler","external_name":"has_spoiler","restriction":"Bool | Nil"}],"args_string":"(has_spoiler : Bool | Nil)","args_html":"(has_spoiler : Bool | Nil)","location":{"filename":"src/types/input_media.cr","line_number":78,"url":null},"def":{"name":"has_spoiler=","args":[{"name":"has_spoiler","external_name":"has_spoiler","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_spoiler = has_spoiler"},"external_var":false},{"html_id":"height:Int32-instance-method","name":"height","doc":"Video height.","summary":"<p>Video height.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":69,"url":null},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int32)-instance-method","name":"height=","doc":"Video height.","summary":"<p>Video height.</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(height : Int32)","args_html":"(height : Int32)","location":{"filename":"src/types/input_media.cr","line_number":69,"url":null},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"media:Hamilton::Types::InputFile|String-instance-method","name":"media","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":42,"url":null},"def":{"name":"media","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@media"},"external_var":false},{"html_id":"media=(media:Hamilton::Types::InputFile|String)-instance-method","name":"media=","doc":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(media : Hamilton::Types::InputFile | String)","args_html":"(media : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_media.cr","line_number":42,"url":null},"def":{"name":"media=","args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@media = media"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the video caption.","summary":"<p>Mode for parsing entities in the video caption.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":57,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the video caption.","summary":"<p>Mode for parsing entities in the video caption.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":57,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":63,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"Pass True, if the caption must be shown above the message media.","summary":"<p>Pass True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/input_media.cr","line_number":63,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"start_timestamp:Int32|Nil-instance-method","name":"start_timestamp","doc":"Start timestamp for the video in the message.","summary":"<p>Start timestamp for the video in the message.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":51,"url":null},"def":{"name":"start_timestamp","return_type":"Int32 | Nil","visibility":"Public","body":"@start_timestamp"},"external_var":false},{"html_id":"start_timestamp=(start_timestamp:Int32|Nil)-instance-method","name":"start_timestamp=","doc":"Start timestamp for the video in the message.","summary":"<p>Start timestamp for the video in the message.</p>","abstract":false,"args":[{"name":"start_timestamp","external_name":"start_timestamp","restriction":"Int32 | Nil"}],"args_string":"(start_timestamp : Int32 | Nil)","args_html":"(start_timestamp : Int32 | Nil)","location":{"filename":"src/types/input_media.cr","line_number":51,"url":null},"def":{"name":"start_timestamp=","args":[{"name":"start_timestamp","external_name":"start_timestamp","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@start_timestamp = start_timestamp"},"external_var":false},{"html_id":"supports_streaming:Bool|Nil-instance-method","name":"supports_streaming","doc":"Pass True if the uploaded video is suitable for streaming.","summary":"<p>Pass True if the uploaded video is suitable for streaming.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":75,"url":null},"def":{"name":"supports_streaming","return_type":"Bool | Nil","visibility":"Public","body":"@supports_streaming"},"external_var":false},{"html_id":"supports_streaming=(supports_streaming:Bool|Nil)-instance-method","name":"supports_streaming=","doc":"Pass True if the uploaded video is suitable for streaming.","summary":"<p>Pass True if the uploaded video is suitable for streaming.</p>","abstract":false,"args":[{"name":"supports_streaming","external_name":"supports_streaming","restriction":"Bool | Nil"}],"args_string":"(supports_streaming : Bool | Nil)","args_html":"(supports_streaming : Bool | Nil)","location":{"filename":"src/types/input_media.cr","line_number":75,"url":null},"def":{"name":"supports_streaming=","args":[{"name":"supports_streaming","external_name":"supports_streaming","restriction":"Bool | Nil"}],"visibility":"Public","body":"@supports_streaming = supports_streaming"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::InputFile|String|Nil-instance-method","name":"thumbnail","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":45,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::InputFile | String | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::InputFile|String|Nil)-instance-method","name":"thumbnail=","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"args_string":"(thumbnail : Hamilton::Types::InputFile | String | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String | Nil)","location":{"filename":"src/types/input_media.cr","line_number":45,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the result, must be \"video\".","summary":"<p>Type of the result, must be &quot;video&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":39,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the result, must be \"video\".","summary":"<p>Type of the result, must be &quot;video&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_media.cr","line_number":39,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"width:Int32-instance-method","name":"width","doc":"Video width.","summary":"<p>Video width.</p>","abstract":false,"location":{"filename":"src/types/input_media.cr","line_number":66,"url":null},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int32)-instance-method","name":"width=","doc":"Video width.","summary":"<p>Video width.</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/types/input_media.cr","line_number":66,"url":null},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@width = width"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputMessageContent","path":"Hamilton/Types/InputMessageContent.html","kind":"alias","full_name":"Hamilton::Types::InputMessageContent","name":"InputMessageContent","abstract":false,"locations":[{"filename":"src/types/input_message_content.cr","line_number":166,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::InputContactMessageContent | Hamilton::Types::InputInvoiceMessageContent | Hamilton::Types::InputLocationMessageContent | Hamilton::Types::InputTextMessageContent | Hamilton::Types::InputVenueMessageContent)","aliased_html":"<a href=\"../../Hamilton/Types/InputContactMessageContent.html\">Hamilton::Types::InputContactMessageContent</a> | <a href=\"../../Hamilton/Types/InputInvoiceMessageContent.html\">Hamilton::Types::InputInvoiceMessageContent</a> | <a href=\"../../Hamilton/Types/InputLocationMessageContent.html\">Hamilton::Types::InputLocationMessageContent</a> | <a href=\"../../Hamilton/Types/InputTextMessageContent.html\">Hamilton::Types::InputTextMessageContent</a> | <a href=\"../../Hamilton/Types/InputVenueMessageContent.html\">Hamilton::Types::InputVenueMessageContent</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents the content of a message to be sent as a result of an inline query.","summary":"<p>This object represents the content of a message to be sent as a result of an inline query.</p>"},{"html_id":"hamilton/Hamilton/Types/InputPaidMedia","path":"Hamilton/Types/InputPaidMedia.html","kind":"alias","full_name":"Hamilton::Types::InputPaidMedia","name":"InputPaidMedia","abstract":false,"locations":[{"filename":"src/types/input_paid_media.cr","line_number":52,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::InputPaidMediaPhoto | Hamilton::Types::InputPaidMediaVideo)","aliased_html":"<a href=\"../../Hamilton/Types/InputPaidMediaPhoto.html\">Hamilton::Types::InputPaidMediaPhoto</a> | <a href=\"../../Hamilton/Types/InputPaidMediaVideo.html\">Hamilton::Types::InputPaidMediaVideo</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the paid media to be sent.","summary":"<p>This object describes the paid media to be sent.</p>"},{"html_id":"hamilton/Hamilton/Types/InputPaidMediaPhoto","path":"Hamilton/Types/InputPaidMediaPhoto.html","kind":"class","full_name":"Hamilton::Types::InputPaidMediaPhoto","name":"InputPaidMediaPhoto","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_paid_media.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The paid media to send is a photo.","summary":"<p>The paid media to send is a photo.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_paid_media.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_paid_media.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"media:Hamilton::Types::InputFile|String-instance-method","name":"media","doc":"File to send. Pass a `file_id` to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":14,"url":null},"def":{"name":"media","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@media"},"external_var":false},{"html_id":"media=(media:Hamilton::Types::InputFile|String)-instance-method","name":"media=","doc":"File to send. Pass a `file_id` to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(media : Hamilton::Types::InputFile | String)","args_html":"(media : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_paid_media.cr","line_number":14,"url":null},"def":{"name":"media=","args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@media = media"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the media, must be \"photo\".","summary":"<p>Type of the media, must be &quot;photo&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the media, must be \"photo\".","summary":"<p>Type of the media, must be &quot;photo&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_paid_media.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputPaidMediaVideo","path":"Hamilton/Types/InputPaidMediaVideo.html","kind":"class","full_name":"Hamilton::Types::InputPaidMediaVideo","name":"InputPaidMediaVideo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_paid_media.cr","line_number":19,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The paid media to send is a video.","summary":"<p>The paid media to send is a video.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_paid_media.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_paid_media.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"cover:Hamilton::Types::InputFile|String|Nil-instance-method","name":"cover","doc":"Cover for the video in the message. Pass a `file_id` to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>Cover for the video in the message.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":33,"url":null},"def":{"name":"cover","return_type":"Hamilton::Types::InputFile | String | Nil","visibility":"Public","body":"@cover"},"external_var":false},{"html_id":"cover=(cover:Hamilton::Types::InputFile|String|Nil)-instance-method","name":"cover=","doc":"Cover for the video in the message. Pass a `file_id` to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using `multipart/form-data` under `<file_attach_name>` name.","summary":"<p>Cover for the video in the message.</p>","abstract":false,"args":[{"name":"cover","external_name":"cover","restriction":"Hamilton::Types::InputFile | String | Nil"}],"args_string":"(cover : Hamilton::Types::InputFile | String | Nil)","args_html":"(cover : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String | Nil)","location":{"filename":"src/types/input_paid_media.cr","line_number":33,"url":null},"def":{"name":"cover=","args":[{"name":"cover","external_name":"cover","restriction":"Hamilton::Types::InputFile | String | Nil"}],"visibility":"Public","body":"@cover = cover"},"external_var":false},{"html_id":"duration:Int32|Nil-instance-method","name":"duration","doc":"Video duration in seconds.","summary":"<p>Video duration in seconds.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":45,"url":null},"def":{"name":"duration","return_type":"Int32 | Nil","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32|Nil)-instance-method","name":"duration=","doc":"Video duration in seconds.","summary":"<p>Video duration in seconds.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32 | Nil"}],"args_string":"(duration : Int32 | Nil)","args_html":"(duration : Int32 | Nil)","location":{"filename":"src/types/input_paid_media.cr","line_number":45,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"height:Int32|Nil-instance-method","name":"height","doc":"Video height.","summary":"<p>Video height.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":42,"url":null},"def":{"name":"height","return_type":"Int32 | Nil","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int32|Nil)-instance-method","name":"height=","doc":"Video height.","summary":"<p>Video height.</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32 | Nil"}],"args_string":"(height : Int32 | Nil)","args_html":"(height : Int32 | Nil)","location":{"filename":"src/types/input_paid_media.cr","line_number":42,"url":null},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"media:Hamilton::Types::InputFile|String-instance-method","name":"media","doc":"File to send. Pass a `file_id` to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":27,"url":null},"def":{"name":"media","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@media"},"external_var":false},{"html_id":"media=(media:Hamilton::Types::InputFile|String)-instance-method","name":"media=","doc":"File to send. Pass a `file_id` to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under `<file_attach_name>` name.","summary":"<p>File to send.</p>","abstract":false,"args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(media : Hamilton::Types::InputFile | String)","args_html":"(media : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_paid_media.cr","line_number":27,"url":null},"def":{"name":"media=","args":[{"name":"media","external_name":"media","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@media = media"},"external_var":false},{"html_id":"start_timestamp:Int32|Nil-instance-method","name":"start_timestamp","doc":"Start timestamp for the video in the message.","summary":"<p>Start timestamp for the video in the message.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":36,"url":null},"def":{"name":"start_timestamp","return_type":"Int32 | Nil","visibility":"Public","body":"@start_timestamp"},"external_var":false},{"html_id":"start_timestamp=(start_timestamp:Int32|Nil)-instance-method","name":"start_timestamp=","doc":"Start timestamp for the video in the message.","summary":"<p>Start timestamp for the video in the message.</p>","abstract":false,"args":[{"name":"start_timestamp","external_name":"start_timestamp","restriction":"Int32 | Nil"}],"args_string":"(start_timestamp : Int32 | Nil)","args_html":"(start_timestamp : Int32 | Nil)","location":{"filename":"src/types/input_paid_media.cr","line_number":36,"url":null},"def":{"name":"start_timestamp=","args":[{"name":"start_timestamp","external_name":"start_timestamp","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@start_timestamp = start_timestamp"},"external_var":false},{"html_id":"supports_streaming:Bool|Nil-instance-method","name":"supports_streaming","doc":"Pass True if the uploaded video is suitable for streaming.","summary":"<p>Pass True if the uploaded video is suitable for streaming.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":48,"url":null},"def":{"name":"supports_streaming","return_type":"Bool | Nil","visibility":"Public","body":"@supports_streaming"},"external_var":false},{"html_id":"supports_streaming=(supports_streaming:Bool|Nil)-instance-method","name":"supports_streaming=","doc":"Pass True if the uploaded video is suitable for streaming.","summary":"<p>Pass True if the uploaded video is suitable for streaming.</p>","abstract":false,"args":[{"name":"supports_streaming","external_name":"supports_streaming","restriction":"Bool | Nil"}],"args_string":"(supports_streaming : Bool | Nil)","args_html":"(supports_streaming : Bool | Nil)","location":{"filename":"src/types/input_paid_media.cr","line_number":48,"url":null},"def":{"name":"supports_streaming=","args":[{"name":"supports_streaming","external_name":"supports_streaming","restriction":"Bool | Nil"}],"visibility":"Public","body":"@supports_streaming = supports_streaming"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::InputFile|String|Nil-instance-method","name":"thumbnail","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":30,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::InputFile | String | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::InputFile|String|Nil)-instance-method","name":"thumbnail=","doc":"Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using `multipart/form-data`. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under `<file_attach_name>`.","summary":"<p>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"args_string":"(thumbnail : Hamilton::Types::InputFile | String | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String | Nil)","location":{"filename":"src/types/input_paid_media.cr","line_number":30,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::InputFile | String | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the media, must be \"video\".","summary":"<p>Type of the media, must be &quot;video&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":24,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the media, must be \"video\".","summary":"<p>Type of the media, must be &quot;video&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_paid_media.cr","line_number":24,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"width:Int32|Nil-instance-method","name":"width","doc":"Video width.","summary":"<p>Video width.</p>","abstract":false,"location":{"filename":"src/types/input_paid_media.cr","line_number":39,"url":null},"def":{"name":"width","return_type":"Int32 | Nil","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int32|Nil)-instance-method","name":"width=","doc":"Video width.","summary":"<p>Video width.</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32 | Nil"}],"args_string":"(width : Int32 | Nil)","args_html":"(width : Int32 | Nil)","location":{"filename":"src/types/input_paid_media.cr","line_number":39,"url":null},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@width = width"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputPollOption","path":"Hamilton/Types/InputPollOption.html","kind":"class","full_name":"Hamilton::Types::InputPollOption","name":"InputPollOption","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_poll_option.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about one answer option in a poll to be sent.","summary":"<p>This object contains information about one answer option in a poll to be sent.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_poll_option.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_poll_option.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"text:String-instance-method","name":"text","doc":"Option text, 1-100 characters.","summary":"<p>Option text, 1-100 characters.</p>","abstract":false,"location":{"filename":"src/types/input_poll_option.cr","line_number":11,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"Option text, 1-100 characters.","summary":"<p>Option text, 1-100 characters.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/input_poll_option.cr","line_number":11,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"text_entities:Array(Hamilton::Types::MessageEntity)-instance-method","name":"text_entities","doc":"A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of text_parse_mode.","summary":"<p>A JSON-serialized list of special entities that appear in the poll option text.</p>","abstract":false,"location":{"filename":"src/types/input_poll_option.cr","line_number":17,"url":null},"def":{"name":"text_entities","return_type":"Array(Hamilton::Types::MessageEntity)","visibility":"Public","body":"@text_entities"},"external_var":false},{"html_id":"text_entities=(text_entities:Array(Hamilton::Types::MessageEntity))-instance-method","name":"text_entities=","doc":"A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of text_parse_mode.","summary":"<p>A JSON-serialized list of special entities that appear in the poll option text.</p>","abstract":false,"args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity)"}],"args_string":"(text_entities : Array(Hamilton::Types::MessageEntity))","args_html":"(text_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>))","location":{"filename":"src/types/input_poll_option.cr","line_number":17,"url":null},"def":{"name":"text_entities=","args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity)"}],"visibility":"Public","body":"@text_entities = text_entities"},"external_var":false},{"html_id":"text_parse_mode:String|Nil-instance-method","name":"text_parse_mode","doc":"Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed.","summary":"<p>Mode for parsing entities in the text.</p>","abstract":false,"location":{"filename":"src/types/input_poll_option.cr","line_number":14,"url":null},"def":{"name":"text_parse_mode","return_type":"String | Nil","visibility":"Public","body":"@text_parse_mode"},"external_var":false},{"html_id":"text_parse_mode=(text_parse_mode:String|Nil)-instance-method","name":"text_parse_mode=","doc":"Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed.","summary":"<p>Mode for parsing entities in the text.</p>","abstract":false,"args":[{"name":"text_parse_mode","external_name":"text_parse_mode","restriction":"String | Nil"}],"args_string":"(text_parse_mode : String | Nil)","args_html":"(text_parse_mode : String | Nil)","location":{"filename":"src/types/input_poll_option.cr","line_number":14,"url":null},"def":{"name":"text_parse_mode=","args":[{"name":"text_parse_mode","external_name":"text_parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@text_parse_mode = text_parse_mode"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputProfilePhoto","path":"Hamilton/Types/InputProfilePhoto.html","kind":"alias","full_name":"Hamilton::Types::InputProfilePhoto","name":"InputProfilePhoto","abstract":false,"locations":[{"filename":"src/types/input_profile_photo.cr","line_number":34,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::InputProfilePhotoAnimated | Hamilton::Types::InputProfilePhotoStatic)","aliased_html":"<a href=\"../../Hamilton/Types/InputProfilePhotoAnimated.html\">Hamilton::Types::InputProfilePhotoAnimated</a> | <a href=\"../../Hamilton/Types/InputProfilePhotoStatic.html\">Hamilton::Types::InputProfilePhotoStatic</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes a profile photo to set.","summary":"<p>This object describes a profile photo to set.</p>"},{"html_id":"hamilton/Hamilton/Types/InputProfilePhotoAnimated","path":"Hamilton/Types/InputProfilePhotoAnimated.html","kind":"class","full_name":"Hamilton::Types::InputProfilePhotoAnimated","name":"InputProfilePhotoAnimated","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_profile_photo.cr","line_number":19,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"An animated profile photo in the MPEG4 format.","summary":"<p>An animated profile photo in the MPEG4 format.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_profile_photo.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_profile_photo.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"animation:String-instance-method","name":"animation","doc":"The animated profile photo. Profile photos can't be reused and can only be uploaded as a new file, so you can pass `attach://<file_attach_name>` if the photo was uploaded using `multipart/form-data` under `<file_attach_name>`.","summary":"<p>The animated profile photo.</p>","abstract":false,"location":{"filename":"src/types/input_profile_photo.cr","line_number":27,"url":null},"def":{"name":"animation","return_type":"String","visibility":"Public","body":"@animation"},"external_var":false},{"html_id":"animation=(animation:String)-instance-method","name":"animation=","doc":"The animated profile photo. Profile photos can't be reused and can only be uploaded as a new file, so you can pass `attach://<file_attach_name>` if the photo was uploaded using `multipart/form-data` under `<file_attach_name>`.","summary":"<p>The animated profile photo.</p>","abstract":false,"args":[{"name":"animation","external_name":"animation","restriction":"String"}],"args_string":"(animation : String)","args_html":"(animation : String)","location":{"filename":"src/types/input_profile_photo.cr","line_number":27,"url":null},"def":{"name":"animation=","args":[{"name":"animation","external_name":"animation","restriction":"String"}],"visibility":"Public","body":"@animation = animation"},"external_var":false},{"html_id":"main_frame_timestamp:Float32|Nil-instance-method","name":"main_frame_timestamp","doc":"Timestamp in seconds of the frame that will be used as the static profile photo. Defaults to 0.0.","summary":"<p>Timestamp in seconds of the frame that will be used as the static profile photo.</p>","abstract":false,"location":{"filename":"src/types/input_profile_photo.cr","line_number":30,"url":null},"def":{"name":"main_frame_timestamp","return_type":"Float32 | Nil","visibility":"Public","body":"@main_frame_timestamp"},"external_var":false},{"html_id":"main_frame_timestamp=(main_frame_timestamp:Float32|Nil)-instance-method","name":"main_frame_timestamp=","doc":"Timestamp in seconds of the frame that will be used as the static profile photo. Defaults to 0.0.","summary":"<p>Timestamp in seconds of the frame that will be used as the static profile photo.</p>","abstract":false,"args":[{"name":"main_frame_timestamp","external_name":"main_frame_timestamp","restriction":"Float32 | Nil"}],"args_string":"(main_frame_timestamp : Float32 | Nil)","args_html":"(main_frame_timestamp : Float32 | Nil)","location":{"filename":"src/types/input_profile_photo.cr","line_number":30,"url":null},"def":{"name":"main_frame_timestamp=","args":[{"name":"main_frame_timestamp","external_name":"main_frame_timestamp","restriction":"Float32 | Nil"}],"visibility":"Public","body":"@main_frame_timestamp = main_frame_timestamp"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the profile photo, must be \"animated\".","summary":"<p>Type of the profile photo, must be &quot;animated&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_profile_photo.cr","line_number":24,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the profile photo, must be \"animated\".","summary":"<p>Type of the profile photo, must be &quot;animated&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_profile_photo.cr","line_number":24,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputProfilePhotoStatic","path":"Hamilton/Types/InputProfilePhotoStatic.html","kind":"class","full_name":"Hamilton::Types::InputProfilePhotoStatic","name":"InputProfilePhotoStatic","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_profile_photo.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"A static profile photo in the .JPG format.","summary":"<p>A static profile photo in the .JPG format.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_profile_photo.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_profile_photo.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"photo:String-instance-method","name":"photo","doc":"The static profile photo. Profile photos can't be reused and can only be uploaded as a new file, so you can pass `attach://<file_attach_name>` if the photo was uploaded using `multipart/form-data` under `<file_attach_name>`.","summary":"<p>The static profile photo.</p>","abstract":false,"location":{"filename":"src/types/input_profile_photo.cr","line_number":14,"url":null},"def":{"name":"photo","return_type":"String","visibility":"Public","body":"@photo"},"external_var":false},{"html_id":"photo=(photo:String)-instance-method","name":"photo=","doc":"The static profile photo. Profile photos can't be reused and can only be uploaded as a new file, so you can pass `attach://<file_attach_name>` if the photo was uploaded using `multipart/form-data` under `<file_attach_name>`.","summary":"<p>The static profile photo.</p>","abstract":false,"args":[{"name":"photo","external_name":"photo","restriction":"String"}],"args_string":"(photo : String)","args_html":"(photo : String)","location":{"filename":"src/types/input_profile_photo.cr","line_number":14,"url":null},"def":{"name":"photo=","args":[{"name":"photo","external_name":"photo","restriction":"String"}],"visibility":"Public","body":"@photo = photo"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the profile photo, must be \"static\".","summary":"<p>Type of the profile photo, must be &quot;static&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_profile_photo.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the profile photo, must be \"static\".","summary":"<p>Type of the profile photo, must be &quot;static&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_profile_photo.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputSticker","path":"Hamilton/Types/InputSticker.html","kind":"class","full_name":"Hamilton::Types::InputSticker","name":"InputSticker","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_sticker.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes a sticker to be added to a sticker set.","summary":"<p>This object describes a sticker to be added to a sticker set.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_sticker.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_sticker.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"emoji_list:Array(String)-instance-method","name":"emoji_list","doc":"List of 1-20 emoji associated with the sticker.","summary":"<p>List of 1-20 emoji associated with the sticker.</p>","abstract":false,"location":{"filename":"src/types/input_sticker.cr","line_number":17,"url":null},"def":{"name":"emoji_list","return_type":"Array(String)","visibility":"Public","body":"@emoji_list"},"external_var":false},{"html_id":"emoji_list=(emoji_list:Array(String))-instance-method","name":"emoji_list=","doc":"List of 1-20 emoji associated with the sticker.","summary":"<p>List of 1-20 emoji associated with the sticker.</p>","abstract":false,"args":[{"name":"emoji_list","external_name":"emoji_list","restriction":"Array(String)"}],"args_string":"(emoji_list : Array(String))","args_html":"(emoji_list : Array(String))","location":{"filename":"src/types/input_sticker.cr","line_number":17,"url":null},"def":{"name":"emoji_list=","args":[{"name":"emoji_list","external_name":"emoji_list","restriction":"Array(String)"}],"visibility":"Public","body":"@emoji_list = emoji_list"},"external_var":false},{"html_id":"format:String-instance-method","name":"format","doc":"Format of the added sticker, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, “video” for a .WEBM video.","summary":"<p>Format of the added sticker, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, “video” for a .WEBM video.</p>","abstract":false,"location":{"filename":"src/types/input_sticker.cr","line_number":14,"url":null},"def":{"name":"format","return_type":"String","visibility":"Public","body":"@format"},"external_var":false},{"html_id":"format=(format:String)-instance-method","name":"format=","doc":"Format of the added sticker, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, “video” for a .WEBM video.","summary":"<p>Format of the added sticker, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, “video” for a .WEBM video.</p>","abstract":false,"args":[{"name":"format","external_name":"format","restriction":"String"}],"args_string":"(format : String)","args_html":"(format : String)","location":{"filename":"src/types/input_sticker.cr","line_number":14,"url":null},"def":{"name":"format=","args":[{"name":"format","external_name":"format","restriction":"String"}],"visibility":"Public","body":"@format = format"},"external_var":false},{"html_id":"keywords:Array(String)|Nil-instance-method","name":"keywords","doc":"List of 0-20 search keywords for the sticker with total length of up to 64 characters. For “regular” and “custom_emoji” stickers only.","summary":"<p>List of 0-20 search keywords for the sticker with total length of up to 64 characters.</p>","abstract":false,"location":{"filename":"src/types/input_sticker.cr","line_number":23,"url":null},"def":{"name":"keywords","return_type":"Array(String) | Nil","visibility":"Public","body":"@keywords"},"external_var":false},{"html_id":"keywords=(keywords:Array(String)|Nil)-instance-method","name":"keywords=","doc":"List of 0-20 search keywords for the sticker with total length of up to 64 characters. For “regular” and “custom_emoji” stickers only.","summary":"<p>List of 0-20 search keywords for the sticker with total length of up to 64 characters.</p>","abstract":false,"args":[{"name":"keywords","external_name":"keywords","restriction":"Array(String) | Nil"}],"args_string":"(keywords : Array(String) | Nil)","args_html":"(keywords : Array(String) | Nil)","location":{"filename":"src/types/input_sticker.cr","line_number":23,"url":null},"def":{"name":"keywords=","args":[{"name":"keywords","external_name":"keywords","restriction":"Array(String) | Nil"}],"visibility":"Public","body":"@keywords = keywords"},"external_var":false},{"html_id":"mask_position:Hamilton::Types::MaskPosition|Nil-instance-method","name":"mask_position","doc":"Position where the mask should be placed on faces. For “mask” stickers only.","summary":"<p>Position where the mask should be placed on faces.</p>","abstract":false,"location":{"filename":"src/types/input_sticker.cr","line_number":20,"url":null},"def":{"name":"mask_position","return_type":"Hamilton::Types::MaskPosition | Nil","visibility":"Public","body":"@mask_position"},"external_var":false},{"html_id":"mask_position=(mask_position:Hamilton::Types::MaskPosition|Nil)-instance-method","name":"mask_position=","doc":"Position where the mask should be placed on faces. For “mask” stickers only.","summary":"<p>Position where the mask should be placed on faces.</p>","abstract":false,"args":[{"name":"mask_position","external_name":"mask_position","restriction":"Hamilton::Types::MaskPosition | Nil"}],"args_string":"(mask_position : Hamilton::Types::MaskPosition | Nil)","args_html":"(mask_position : <a href=\"../../Hamilton/Types/MaskPosition.html\">Hamilton::Types::MaskPosition</a> | Nil)","location":{"filename":"src/types/input_sticker.cr","line_number":20,"url":null},"def":{"name":"mask_position=","args":[{"name":"mask_position","external_name":"mask_position","restriction":"Hamilton::Types::MaskPosition | Nil"}],"visibility":"Public","body":"@mask_position = mask_position"},"external_var":false},{"html_id":"sticker:Hamilton::Types::InputFile|String-instance-method","name":"sticker","doc":"The added sticker. Pass a `file_id` as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new file using `multipart/form-data` under `<file_attach_name>` name. Animated and video stickers can't be uploaded via HTTP URL.","summary":"<p>The added sticker.</p>","abstract":false,"location":{"filename":"src/types/input_sticker.cr","line_number":11,"url":null},"def":{"name":"sticker","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@sticker"},"external_var":false},{"html_id":"sticker=(sticker:Hamilton::Types::InputFile|String)-instance-method","name":"sticker=","doc":"The added sticker. Pass a `file_id` as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new file using `multipart/form-data` under `<file_attach_name>` name. Animated and video stickers can't be uploaded via HTTP URL.","summary":"<p>The added sticker.</p>","abstract":false,"args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(sticker : Hamilton::Types::InputFile | String)","args_html":"(sticker : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_sticker.cr","line_number":11,"url":null},"def":{"name":"sticker=","args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@sticker = sticker"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputStoryContent","path":"Hamilton/Types/InputStoryContent.html","kind":"alias","full_name":"Hamilton::Types::InputStoryContent","name":"InputStoryContent","abstract":false,"locations":[{"filename":"src/types/input_story_content.cr","line_number":40,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::InputStoryContentPhoto | Hamilton::Types::InputStoryContentVideo)","aliased_html":"<a href=\"../../Hamilton/Types/InputStoryContentPhoto.html\">Hamilton::Types::InputStoryContentPhoto</a> | <a href=\"../../Hamilton/Types/InputStoryContentVideo.html\">Hamilton::Types::InputStoryContentVideo</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the content of a story to post.","summary":"<p>This object describes the content of a story to post.</p>"},{"html_id":"hamilton/Hamilton/Types/InputStoryContentPhoto","path":"Hamilton/Types/InputStoryContentPhoto.html","kind":"class","full_name":"Hamilton::Types::InputStoryContentPhoto","name":"InputStoryContentPhoto","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_story_content.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a photo to post as a story.","summary":"<p>Describes a photo to post as a story.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_story_content.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_story_content.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"photo:Hamilton::Types::InputFile|String-instance-method","name":"photo","doc":"The photo to post as a story. The photo must be of the size 1080x1920 and must not exceed 10 MB. The photo can't be reused and can only be uploaded as a new file, so you can pass `attach://<file_attach_name>` if the photo was uploaded using `multipart/form-data` under `<file_attach_name>`.","summary":"<p>The photo to post as a story.</p>","abstract":false,"location":{"filename":"src/types/input_story_content.cr","line_number":14,"url":null},"def":{"name":"photo","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@photo"},"external_var":false},{"html_id":"photo=(photo:Hamilton::Types::InputFile|String)-instance-method","name":"photo=","doc":"The photo to post as a story. The photo must be of the size 1080x1920 and must not exceed 10 MB. The photo can't be reused and can only be uploaded as a new file, so you can pass `attach://<file_attach_name>` if the photo was uploaded using `multipart/form-data` under `<file_attach_name>`.","summary":"<p>The photo to post as a story.</p>","abstract":false,"args":[{"name":"photo","external_name":"photo","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(photo : Hamilton::Types::InputFile | String)","args_html":"(photo : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_story_content.cr","line_number":14,"url":null},"def":{"name":"photo=","args":[{"name":"photo","external_name":"photo","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@photo = photo"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the content, must be \"photo\".","summary":"<p>Type of the content, must be &quot;photo&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_story_content.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the content, must be \"photo\".","summary":"<p>Type of the content, must be &quot;photo&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_story_content.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputStoryContentVideo","path":"Hamilton/Types/InputStoryContentVideo.html","kind":"class","full_name":"Hamilton::Types::InputStoryContentVideo","name":"InputStoryContentVideo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_story_content.cr","line_number":19,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a video to post as a story.","summary":"<p>Describes a video to post as a story.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_story_content.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_story_content.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"cover_frame_timestamp:Float32|Nil-instance-method","name":"cover_frame_timestamp","doc":"Timestamp in seconds of the frame that will be used as the static cover for the story. Defaults to 0.0.","summary":"<p>Timestamp in seconds of the frame that will be used as the static cover for the story.</p>","abstract":false,"location":{"filename":"src/types/input_story_content.cr","line_number":33,"url":null},"def":{"name":"cover_frame_timestamp","return_type":"Float32 | Nil","visibility":"Public","body":"@cover_frame_timestamp"},"external_var":false},{"html_id":"cover_frame_timestamp=(cover_frame_timestamp:Float32|Nil)-instance-method","name":"cover_frame_timestamp=","doc":"Timestamp in seconds of the frame that will be used as the static cover for the story. Defaults to 0.0.","summary":"<p>Timestamp in seconds of the frame that will be used as the static cover for the story.</p>","abstract":false,"args":[{"name":"cover_frame_timestamp","external_name":"cover_frame_timestamp","restriction":"Float32 | Nil"}],"args_string":"(cover_frame_timestamp : Float32 | Nil)","args_html":"(cover_frame_timestamp : Float32 | Nil)","location":{"filename":"src/types/input_story_content.cr","line_number":33,"url":null},"def":{"name":"cover_frame_timestamp=","args":[{"name":"cover_frame_timestamp","external_name":"cover_frame_timestamp","restriction":"Float32 | Nil"}],"visibility":"Public","body":"@cover_frame_timestamp = cover_frame_timestamp"},"external_var":false},{"html_id":"duration:Float32|Nil-instance-method","name":"duration","doc":"Precise duration of the video in seconds; 0-60.","summary":"<p>Precise duration of the video in seconds; 0-60.</p>","abstract":false,"location":{"filename":"src/types/input_story_content.cr","line_number":30,"url":null},"def":{"name":"duration","return_type":"Float32 | Nil","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Float32|Nil)-instance-method","name":"duration=","doc":"Precise duration of the video in seconds; 0-60.","summary":"<p>Precise duration of the video in seconds; 0-60.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Float32 | Nil"}],"args_string":"(duration : Float32 | Nil)","args_html":"(duration : Float32 | Nil)","location":{"filename":"src/types/input_story_content.cr","line_number":30,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Float32 | Nil"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"is_animation:Bool|Nil-instance-method","name":"is_animation","doc":"Pass True if the video has no sound.","summary":"<p>Pass True if the video has no sound.</p>","abstract":false,"location":{"filename":"src/types/input_story_content.cr","line_number":36,"url":null},"def":{"name":"is_animation","return_type":"Bool | Nil","visibility":"Public","body":"@is_animation"},"external_var":false},{"html_id":"is_animation=(is_animation:Bool|Nil)-instance-method","name":"is_animation=","doc":"Pass True if the video has no sound.","summary":"<p>Pass True if the video has no sound.</p>","abstract":false,"args":[{"name":"is_animation","external_name":"is_animation","restriction":"Bool | Nil"}],"args_string":"(is_animation : Bool | Nil)","args_html":"(is_animation : Bool | Nil)","location":{"filename":"src/types/input_story_content.cr","line_number":36,"url":null},"def":{"name":"is_animation=","args":[{"name":"is_animation","external_name":"is_animation","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_animation = is_animation"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the content, must be \"video\".","summary":"<p>Type of the content, must be &quot;video&quot;.</p>","abstract":false,"location":{"filename":"src/types/input_story_content.cr","line_number":24,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the content, must be \"video\".","summary":"<p>Type of the content, must be &quot;video&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/input_story_content.cr","line_number":24,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"video:Hamilton::Types::InputFile|String-instance-method","name":"video","doc":"The video to post as a story. The video must be of the size 720x1280, streamable, encoded with H.265 codec, with key frames added each second in the MPEG4 format, and must not exceed 30 MB. The video can't be reused and can only be uploaded as a new file, so you can pass `attach://<file_attach_name>` if the video was uploaded using `multipart/form-data` under `<file_attach_name>`.","summary":"<p>The video to post as a story.</p>","abstract":false,"location":{"filename":"src/types/input_story_content.cr","line_number":27,"url":null},"def":{"name":"video","return_type":"Hamilton::Types::InputFile | String","visibility":"Public","body":"@video"},"external_var":false},{"html_id":"video=(video:Hamilton::Types::InputFile|String)-instance-method","name":"video=","doc":"The video to post as a story. The video must be of the size 720x1280, streamable, encoded with H.265 codec, with key frames added each second in the MPEG4 format, and must not exceed 30 MB. The video can't be reused and can only be uploaded as a new file, so you can pass `attach://<file_attach_name>` if the video was uploaded using `multipart/form-data` under `<file_attach_name>`.","summary":"<p>The video to post as a story.</p>","abstract":false,"args":[{"name":"video","external_name":"video","restriction":"Hamilton::Types::InputFile | String"}],"args_string":"(video : Hamilton::Types::InputFile | String)","args_html":"(video : <a href=\"../../Hamilton/Types/InputFile.html\">Hamilton::Types::InputFile</a> | String)","location":{"filename":"src/types/input_story_content.cr","line_number":27,"url":null},"def":{"name":"video=","args":[{"name":"video","external_name":"video","restriction":"Hamilton::Types::InputFile | String"}],"visibility":"Public","body":"@video = video"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputTextMessageContent","path":"Hamilton/Types/InputTextMessageContent.html","kind":"class","full_name":"Hamilton::Types::InputTextMessageContent","name":"InputTextMessageContent","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_message_content.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the content of a text message to be sent as the result of an inline query.","summary":"<p>Represents the content of a text message to be sent as the result of an inline query.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"entities","doc":"List of special entities that appear in message text, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in message text, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputTextMessageContent.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":17,"url":null},"def":{"name":"entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@entities"},"external_var":false},{"html_id":"entities=(entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"entities=","doc":"List of special entities that appear in message text, which can be specified instead of `parse_mode`.","summary":"<p>List of special entities that appear in message text, which can be specified instead of <code><a href=\"../../Hamilton/Types/InputTextMessageContent.html#parse_mode%3AString%7CNil-instance-method\">#parse_mode</a></code>.</p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":17,"url":null},"def":{"name":"entities=","args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@entities = entities"},"external_var":false},{"html_id":"link_preview_options:Hamilton::Types::LinkPreviewOptions|Nil-instance-method","name":"link_preview_options","doc":"Link preview generation options for the message.","summary":"<p>Link preview generation options for the message.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":20,"url":null},"def":{"name":"link_preview_options","return_type":"Hamilton::Types::LinkPreviewOptions | Nil","visibility":"Public","body":"@link_preview_options"},"external_var":false},{"html_id":"link_preview_options=(link_preview_options:Hamilton::Types::LinkPreviewOptions|Nil)-instance-method","name":"link_preview_options=","doc":"Link preview generation options for the message.","summary":"<p>Link preview generation options for the message.</p>","abstract":false,"args":[{"name":"link_preview_options","external_name":"link_preview_options","restriction":"Hamilton::Types::LinkPreviewOptions | Nil"}],"args_string":"(link_preview_options : Hamilton::Types::LinkPreviewOptions | Nil)","args_html":"(link_preview_options : <a href=\"../../Hamilton/Types/LinkPreviewOptions.html\">Hamilton::Types::LinkPreviewOptions</a> | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":20,"url":null},"def":{"name":"link_preview_options=","args":[{"name":"link_preview_options","external_name":"link_preview_options","restriction":"Hamilton::Types::LinkPreviewOptions | Nil"}],"visibility":"Public","body":"@link_preview_options = link_preview_options"},"external_var":false},{"html_id":"message_text:String-instance-method","name":"message_text","doc":"Text of the message to be sent, 1-4096 characters.","summary":"<p>Text of the message to be sent, 1-4096 characters.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":11,"url":null},"def":{"name":"message_text","return_type":"String","visibility":"Public","body":"@message_text"},"external_var":false},{"html_id":"message_text=(message_text:String)-instance-method","name":"message_text=","doc":"Text of the message to be sent, 1-4096 characters.","summary":"<p>Text of the message to be sent, 1-4096 characters.</p>","abstract":false,"args":[{"name":"message_text","external_name":"message_text","restriction":"String"}],"args_string":"(message_text : String)","args_html":"(message_text : String)","location":{"filename":"src/types/input_message_content.cr","line_number":11,"url":null},"def":{"name":"message_text=","args":[{"name":"message_text","external_name":"message_text","restriction":"String"}],"visibility":"Public","body":"@message_text = message_text"},"external_var":false},{"html_id":"parse_mode:String|Nil-instance-method","name":"parse_mode","doc":"Mode for parsing entities in the message text.","summary":"<p>Mode for parsing entities in the message text.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":14,"url":null},"def":{"name":"parse_mode","return_type":"String | Nil","visibility":"Public","body":"@parse_mode"},"external_var":false},{"html_id":"parse_mode=(parse_mode:String|Nil)-instance-method","name":"parse_mode=","doc":"Mode for parsing entities in the message text.","summary":"<p>Mode for parsing entities in the message text.</p>","abstract":false,"args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"args_string":"(parse_mode : String | Nil)","args_html":"(parse_mode : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":14,"url":null},"def":{"name":"parse_mode=","args":[{"name":"parse_mode","external_name":"parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@parse_mode = parse_mode"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/InputVenueMessageContent","path":"Hamilton/Types/InputVenueMessageContent.html","kind":"class","full_name":"Hamilton::Types::InputVenueMessageContent","name":"InputVenueMessageContent","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/input_message_content.cr","line_number":50,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents the content of a venue message to be sent as the result of an inline query.","summary":"<p>Represents the content of a venue message to be sent as the result of an inline query.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":51,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/input_message_content.cr","line_number":51,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"address:String-instance-method","name":"address","doc":"Address of the venue.","summary":"<p>Address of the venue.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":64,"url":null},"def":{"name":"address","return_type":"String","visibility":"Public","body":"@address"},"external_var":false},{"html_id":"address=(address:String)-instance-method","name":"address=","doc":"Address of the venue.","summary":"<p>Address of the venue.</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"String"}],"args_string":"(address : String)","args_html":"(address : String)","location":{"filename":"src/types/input_message_content.cr","line_number":64,"url":null},"def":{"name":"address=","args":[{"name":"address","external_name":"address","restriction":"String"}],"visibility":"Public","body":"@address = address"},"external_var":false},{"html_id":"foursquare_id:String|Nil-instance-method","name":"foursquare_id","doc":"Foursquare identifier of the venue, if known.","summary":"<p>Foursquare identifier of the venue, if known.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":67,"url":null},"def":{"name":"foursquare_id","return_type":"String | Nil","visibility":"Public","body":"@foursquare_id"},"external_var":false},{"html_id":"foursquare_id=(foursquare_id:String|Nil)-instance-method","name":"foursquare_id=","doc":"Foursquare identifier of the venue, if known.","summary":"<p>Foursquare identifier of the venue, if known.</p>","abstract":false,"args":[{"name":"foursquare_id","external_name":"foursquare_id","restriction":"String | Nil"}],"args_string":"(foursquare_id : String | Nil)","args_html":"(foursquare_id : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":67,"url":null},"def":{"name":"foursquare_id=","args":[{"name":"foursquare_id","external_name":"foursquare_id","restriction":"String | Nil"}],"visibility":"Public","body":"@foursquare_id = foursquare_id"},"external_var":false},{"html_id":"foursquare_type:String|Nil-instance-method","name":"foursquare_type","doc":"Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)","summary":"<p>Foursquare type of the venue, if known.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":70,"url":null},"def":{"name":"foursquare_type","return_type":"String | Nil","visibility":"Public","body":"@foursquare_type"},"external_var":false},{"html_id":"foursquare_type=(foursquare_type:String|Nil)-instance-method","name":"foursquare_type=","doc":"Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)","summary":"<p>Foursquare type of the venue, if known.</p>","abstract":false,"args":[{"name":"foursquare_type","external_name":"foursquare_type","restriction":"String | Nil"}],"args_string":"(foursquare_type : String | Nil)","args_html":"(foursquare_type : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":70,"url":null},"def":{"name":"foursquare_type=","args":[{"name":"foursquare_type","external_name":"foursquare_type","restriction":"String | Nil"}],"visibility":"Public","body":"@foursquare_type = foursquare_type"},"external_var":false},{"html_id":"google_place_id:String|Nil-instance-method","name":"google_place_id","doc":"Google Places identifier of the venue.","summary":"<p>Google Places identifier of the venue.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":73,"url":null},"def":{"name":"google_place_id","return_type":"String | Nil","visibility":"Public","body":"@google_place_id"},"external_var":false},{"html_id":"google_place_id=(google_place_id:String|Nil)-instance-method","name":"google_place_id=","doc":"Google Places identifier of the venue.","summary":"<p>Google Places identifier of the venue.</p>","abstract":false,"args":[{"name":"google_place_id","external_name":"google_place_id","restriction":"String | Nil"}],"args_string":"(google_place_id : String | Nil)","args_html":"(google_place_id : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":73,"url":null},"def":{"name":"google_place_id=","args":[{"name":"google_place_id","external_name":"google_place_id","restriction":"String | Nil"}],"visibility":"Public","body":"@google_place_id = google_place_id"},"external_var":false},{"html_id":"google_place_type:String|Nil-instance-method","name":"google_place_type","doc":"Google Places type of the venue.","summary":"<p>Google Places type of the venue.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":76,"url":null},"def":{"name":"google_place_type","return_type":"String | Nil","visibility":"Public","body":"@google_place_type"},"external_var":false},{"html_id":"google_place_type=(google_place_type:String|Nil)-instance-method","name":"google_place_type=","doc":"Google Places type of the venue.","summary":"<p>Google Places type of the venue.</p>","abstract":false,"args":[{"name":"google_place_type","external_name":"google_place_type","restriction":"String | Nil"}],"args_string":"(google_place_type : String | Nil)","args_html":"(google_place_type : String | Nil)","location":{"filename":"src/types/input_message_content.cr","line_number":76,"url":null},"def":{"name":"google_place_type=","args":[{"name":"google_place_type","external_name":"google_place_type","restriction":"String | Nil"}],"visibility":"Public","body":"@google_place_type = google_place_type"},"external_var":false},{"html_id":"latitude:Float32-instance-method","name":"latitude","doc":"Latitude of the venue in degrees.","summary":"<p>Latitude of the venue in degrees.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":55,"url":null},"def":{"name":"latitude","return_type":"Float32","visibility":"Public","body":"@latitude"},"external_var":false},{"html_id":"latitude=(latitude:Float32)-instance-method","name":"latitude=","doc":"Latitude of the venue in degrees.","summary":"<p>Latitude of the venue in degrees.</p>","abstract":false,"args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"args_string":"(latitude : Float32)","args_html":"(latitude : Float32)","location":{"filename":"src/types/input_message_content.cr","line_number":55,"url":null},"def":{"name":"latitude=","args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"visibility":"Public","body":"@latitude = latitude"},"external_var":false},{"html_id":"longitude:Float32-instance-method","name":"longitude","doc":"Longitude of the venue in degrees.","summary":"<p>Longitude of the venue in degrees.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":58,"url":null},"def":{"name":"longitude","return_type":"Float32","visibility":"Public","body":"@longitude"},"external_var":false},{"html_id":"longitude=(longitude:Float32)-instance-method","name":"longitude=","doc":"Longitude of the venue in degrees.","summary":"<p>Longitude of the venue in degrees.</p>","abstract":false,"args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"args_string":"(longitude : Float32)","args_html":"(longitude : Float32)","location":{"filename":"src/types/input_message_content.cr","line_number":58,"url":null},"def":{"name":"longitude=","args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"visibility":"Public","body":"@longitude = longitude"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Name of the venue.","summary":"<p>Name of the venue.</p>","abstract":false,"location":{"filename":"src/types/input_message_content.cr","line_number":61,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Name of the venue.","summary":"<p>Name of the venue.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/input_message_content.cr","line_number":61,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Invoice","path":"Hamilton/Types/Invoice.html","kind":"class","full_name":"Hamilton::Types::Invoice","name":"Invoice","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/invoice.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains basic information about an invoice.","summary":"<p>This object contains basic information about an invoice.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/invoice.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/invoice.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"currency:String-instance-method","name":"currency","doc":"Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.","summary":"<p>Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.</p>","abstract":false,"location":{"filename":"src/types/invoice.cr","line_number":20,"url":null},"def":{"name":"currency","return_type":"String","visibility":"Public","body":"@currency"},"external_var":false},{"html_id":"currency=(currency:String)-instance-method","name":"currency=","doc":"Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.","summary":"<p>Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.</p>","abstract":false,"args":[{"name":"currency","external_name":"currency","restriction":"String"}],"args_string":"(currency : String)","args_html":"(currency : String)","location":{"filename":"src/types/invoice.cr","line_number":20,"url":null},"def":{"name":"currency=","args":[{"name":"currency","external_name":"currency","restriction":"String"}],"visibility":"Public","body":"@currency = currency"},"external_var":false},{"html_id":"decription:String-instance-method","name":"decription","doc":"Product description.","summary":"<p>Product description.</p>","abstract":false,"location":{"filename":"src/types/invoice.cr","line_number":14,"url":null},"def":{"name":"decription","return_type":"String","visibility":"Public","body":"@decription"},"external_var":false},{"html_id":"decription=(decription:String)-instance-method","name":"decription=","doc":"Product description.","summary":"<p>Product description.</p>","abstract":false,"args":[{"name":"decription","external_name":"decription","restriction":"String"}],"args_string":"(decription : String)","args_html":"(decription : String)","location":{"filename":"src/types/invoice.cr","line_number":14,"url":null},"def":{"name":"decription=","args":[{"name":"decription","external_name":"decription","restriction":"String"}],"visibility":"Public","body":"@decription = decription"},"external_var":false},{"html_id":"start_parameter:String-instance-method","name":"start_parameter","doc":"Unique bot deep-linking parameter that can be used to generate this invoice.","summary":"<p>Unique bot deep-linking parameter that can be used to generate this invoice.</p>","abstract":false,"location":{"filename":"src/types/invoice.cr","line_number":17,"url":null},"def":{"name":"start_parameter","return_type":"String","visibility":"Public","body":"@start_parameter"},"external_var":false},{"html_id":"start_parameter=(start_parameter:String)-instance-method","name":"start_parameter=","doc":"Unique bot deep-linking parameter that can be used to generate this invoice.","summary":"<p>Unique bot deep-linking parameter that can be used to generate this invoice.</p>","abstract":false,"args":[{"name":"start_parameter","external_name":"start_parameter","restriction":"String"}],"args_string":"(start_parameter : String)","args_html":"(start_parameter : String)","location":{"filename":"src/types/invoice.cr","line_number":17,"url":null},"def":{"name":"start_parameter=","args":[{"name":"start_parameter","external_name":"start_parameter","restriction":"String"}],"visibility":"Public","body":"@start_parameter = start_parameter"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Product name.","summary":"<p>Product name.</p>","abstract":false,"location":{"filename":"src/types/invoice.cr","line_number":11,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Product name.","summary":"<p>Product name.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/invoice.cr","line_number":11,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false},{"html_id":"total_amount:Int32-instance-method","name":"total_amount","doc":"Total price in the smallest units of the currency (integer, not float/double).","summary":"<p>Total price in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"location":{"filename":"src/types/invoice.cr","line_number":23,"url":null},"def":{"name":"total_amount","return_type":"Int32","visibility":"Public","body":"@total_amount"},"external_var":false},{"html_id":"total_amount=(total_amount:Int32)-instance-method","name":"total_amount=","doc":"Total price in the smallest units of the currency (integer, not float/double).","summary":"<p>Total price in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"args":[{"name":"total_amount","external_name":"total_amount","restriction":"Int32"}],"args_string":"(total_amount : Int32)","args_html":"(total_amount : Int32)","location":{"filename":"src/types/invoice.cr","line_number":23,"url":null},"def":{"name":"total_amount=","args":[{"name":"total_amount","external_name":"total_amount","restriction":"Int32"}],"visibility":"Public","body":"@total_amount = total_amount"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/KeyboardButton","path":"Hamilton/Types/KeyboardButton.html","kind":"class","full_name":"Hamilton::Types::KeyboardButton","name":"KeyboardButton","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/keyboard_button.cr","line_number":8,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents one button of the reply keyboard. At most one of the optional fields must be used to specify type of the button. For simple text buttons, String can be used instead of this object to specify the button text.\n\nNOTE: `request_users` and `request_chat` options will only work in Telegram versions released after 3 February, 2023. Older clients will display unsupported message.","summary":"<p>This object represents one button of the reply keyboard.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/keyboard_button.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/keyboard_button.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"request_chat:Hamilton::Types::KeyboardButtonRequestChat|Nil-instance-method","name":"request_chat","doc":"If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a “chat_shared” service message. Available in private chats only.","summary":"<p>If specified, pressing the button will open a list of suitable chats.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button.cr","line_number":19,"url":null},"def":{"name":"request_chat","return_type":"Hamilton::Types::KeyboardButtonRequestChat | Nil","visibility":"Public","body":"@request_chat"},"external_var":false},{"html_id":"request_chat=(request_chat:Hamilton::Types::KeyboardButtonRequestChat|Nil)-instance-method","name":"request_chat=","doc":"If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a “chat_shared” service message. Available in private chats only.","summary":"<p>If specified, pressing the button will open a list of suitable chats.</p>","abstract":false,"args":[{"name":"request_chat","external_name":"request_chat","restriction":"Hamilton::Types::KeyboardButtonRequestChat | Nil"}],"args_string":"(request_chat : Hamilton::Types::KeyboardButtonRequestChat | Nil)","args_html":"(request_chat : <a href=\"../../Hamilton/Types/KeyboardButtonRequestChat.html\">Hamilton::Types::KeyboardButtonRequestChat</a> | Nil)","location":{"filename":"src/types/keyboard_button.cr","line_number":19,"url":null},"def":{"name":"request_chat=","args":[{"name":"request_chat","external_name":"request_chat","restriction":"Hamilton::Types::KeyboardButtonRequestChat | Nil"}],"visibility":"Public","body":"@request_chat = request_chat"},"external_var":false},{"html_id":"request_contact:Bool|Nil-instance-method","name":"request_contact","doc":"If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only.","summary":"<p>If True, the user's phone number will be sent as a contact when the button is pressed.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button.cr","line_number":22,"url":null},"def":{"name":"request_contact","return_type":"Bool | Nil","visibility":"Public","body":"@request_contact"},"external_var":false},{"html_id":"request_contact=(request_contact:Bool|Nil)-instance-method","name":"request_contact=","doc":"If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only.","summary":"<p>If True, the user's phone number will be sent as a contact when the button is pressed.</p>","abstract":false,"args":[{"name":"request_contact","external_name":"request_contact","restriction":"Bool | Nil"}],"args_string":"(request_contact : Bool | Nil)","args_html":"(request_contact : Bool | Nil)","location":{"filename":"src/types/keyboard_button.cr","line_number":22,"url":null},"def":{"name":"request_contact=","args":[{"name":"request_contact","external_name":"request_contact","restriction":"Bool | Nil"}],"visibility":"Public","body":"@request_contact = request_contact"},"external_var":false},{"html_id":"request_location:Bool|Nil-instance-method","name":"request_location","doc":"If True, the user's current location will be sent when the button is pressed. Available in private chats only.","summary":"<p>If True, the user's current location will be sent when the button is pressed.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button.cr","line_number":25,"url":null},"def":{"name":"request_location","return_type":"Bool | Nil","visibility":"Public","body":"@request_location"},"external_var":false},{"html_id":"request_location=(request_location:Bool|Nil)-instance-method","name":"request_location=","doc":"If True, the user's current location will be sent when the button is pressed. Available in private chats only.","summary":"<p>If True, the user's current location will be sent when the button is pressed.</p>","abstract":false,"args":[{"name":"request_location","external_name":"request_location","restriction":"Bool | Nil"}],"args_string":"(request_location : Bool | Nil)","args_html":"(request_location : Bool | Nil)","location":{"filename":"src/types/keyboard_button.cr","line_number":25,"url":null},"def":{"name":"request_location=","args":[{"name":"request_location","external_name":"request_location","restriction":"Bool | Nil"}],"visibility":"Public","body":"@request_location = request_location"},"external_var":false},{"html_id":"request_poll:Hamilton::Types::KeyboardButtonPollType|Nil-instance-method","name":"request_poll","doc":"If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only.","summary":"<p>If specified, the user will be asked to create a poll and send it to the bot when the button is pressed.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button.cr","line_number":28,"url":null},"def":{"name":"request_poll","return_type":"Hamilton::Types::KeyboardButtonPollType | Nil","visibility":"Public","body":"@request_poll"},"external_var":false},{"html_id":"request_poll=(request_poll:Hamilton::Types::KeyboardButtonPollType|Nil)-instance-method","name":"request_poll=","doc":"If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only.","summary":"<p>If specified, the user will be asked to create a poll and send it to the bot when the button is pressed.</p>","abstract":false,"args":[{"name":"request_poll","external_name":"request_poll","restriction":"Hamilton::Types::KeyboardButtonPollType | Nil"}],"args_string":"(request_poll : Hamilton::Types::KeyboardButtonPollType | Nil)","args_html":"(request_poll : <a href=\"../../Hamilton/Types/KeyboardButtonPollType.html\">Hamilton::Types::KeyboardButtonPollType</a> | Nil)","location":{"filename":"src/types/keyboard_button.cr","line_number":28,"url":null},"def":{"name":"request_poll=","args":[{"name":"request_poll","external_name":"request_poll","restriction":"Hamilton::Types::KeyboardButtonPollType | Nil"}],"visibility":"Public","body":"@request_poll = request_poll"},"external_var":false},{"html_id":"request_users:Hamilton::Types::KeyboardButtonRequestUsers|Nil-instance-method","name":"request_users","doc":"If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a “users_shared” service message. Available in private chats only.","summary":"<p>If specified, pressing the button will open a list of suitable users.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button.cr","line_number":16,"url":null},"def":{"name":"request_users","return_type":"Hamilton::Types::KeyboardButtonRequestUsers | Nil","visibility":"Public","body":"@request_users"},"external_var":false},{"html_id":"request_users=(request_users:Hamilton::Types::KeyboardButtonRequestUsers|Nil)-instance-method","name":"request_users=","doc":"If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a “users_shared” service message. Available in private chats only.","summary":"<p>If specified, pressing the button will open a list of suitable users.</p>","abstract":false,"args":[{"name":"request_users","external_name":"request_users","restriction":"Hamilton::Types::KeyboardButtonRequestUsers | Nil"}],"args_string":"(request_users : Hamilton::Types::KeyboardButtonRequestUsers | Nil)","args_html":"(request_users : <a href=\"../../Hamilton/Types/KeyboardButtonRequestUsers.html\">Hamilton::Types::KeyboardButtonRequestUsers</a> | Nil)","location":{"filename":"src/types/keyboard_button.cr","line_number":16,"url":null},"def":{"name":"request_users=","args":[{"name":"request_users","external_name":"request_users","restriction":"Hamilton::Types::KeyboardButtonRequestUsers | Nil"}],"visibility":"Public","body":"@request_users = request_users"},"external_var":false},{"html_id":"text:String-instance-method","name":"text","doc":"Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed.","summary":"<p>Text of the button.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button.cr","line_number":13,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed.","summary":"<p>Text of the button.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/keyboard_button.cr","line_number":13,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"web_app:Hamilton::Types::WebAppInfo|Nil-instance-method","name":"web_app","doc":"If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a “web_app_data” service message. Available in private chats only.","summary":"<p>If specified, the described Web App will be launched when the button is pressed.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button.cr","line_number":31,"url":null},"def":{"name":"web_app","return_type":"Hamilton::Types::WebAppInfo | Nil","visibility":"Public","body":"@web_app"},"external_var":false},{"html_id":"web_app=(web_app:Hamilton::Types::WebAppInfo|Nil)-instance-method","name":"web_app=","doc":"If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a “web_app_data” service message. Available in private chats only.","summary":"<p>If specified, the described Web App will be launched when the button is pressed.</p>","abstract":false,"args":[{"name":"web_app","external_name":"web_app","restriction":"Hamilton::Types::WebAppInfo | Nil"}],"args_string":"(web_app : Hamilton::Types::WebAppInfo | Nil)","args_html":"(web_app : <a href=\"../../Hamilton/Types/WebAppInfo.html\">Hamilton::Types::WebAppInfo</a> | Nil)","location":{"filename":"src/types/keyboard_button.cr","line_number":31,"url":null},"def":{"name":"web_app=","args":[{"name":"web_app","external_name":"web_app","restriction":"Hamilton::Types::WebAppInfo | Nil"}],"visibility":"Public","body":"@web_app = web_app"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/KeyboardButtonPollType","path":"Hamilton/Types/KeyboardButtonPollType.html","kind":"class","full_name":"Hamilton::Types::KeyboardButtonPollType","name":"KeyboardButtonPollType","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/keyboard_button_poll_type.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.","summary":"<p>This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/keyboard_button_poll_type.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/keyboard_button_poll_type.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String|Nil-instance-method","name":"type","doc":"If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.","summary":"<p>If quiz is passed, the user will be allowed to create only polls in the quiz mode.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_poll_type.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String | Nil","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String|Nil)-instance-method","name":"type=","doc":"If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.","summary":"<p>If quiz is passed, the user will be allowed to create only polls in the quiz mode.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String | Nil"}],"args_string":"(type : String | Nil)","args_html":"(type : String | Nil)","location":{"filename":"src/types/keyboard_button_poll_type.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String | Nil"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/KeyboardButtonRequestChat","path":"Hamilton/Types/KeyboardButtonRequestChat.html","kind":"class","full_name":"Hamilton::Types::KeyboardButtonRequestChat","name":"KeyboardButtonRequestChat","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/keyboard_button_request_chat.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object defines the criteria used to request a suitable chat. Information about the selected chat will be shared with the bot when the corresponding button is pressed. The bot will be granted requested rights in the chat if appropriate.","summary":"<p>This object defines the criteria used to request a suitable chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"bot_administrator_rights:Hamilton::Types::ChatAdministratorRights|Nil-instance-method","name":"bot_administrator_rights","doc":"A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of `user_administrator_rights`. If not specified, no additional restrictions are applied.","summary":"<p>A JSON-serialized object listing the required administrator rights of the bot in the chat.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":29,"url":null},"def":{"name":"bot_administrator_rights","return_type":"Hamilton::Types::ChatAdministratorRights | Nil","visibility":"Public","body":"@bot_administrator_rights"},"external_var":false},{"html_id":"bot_administrator_rights=(bot_administrator_rights:Hamilton::Types::ChatAdministratorRights|Nil)-instance-method","name":"bot_administrator_rights=","doc":"A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of `user_administrator_rights`. If not specified, no additional restrictions are applied.","summary":"<p>A JSON-serialized object listing the required administrator rights of the bot in the chat.</p>","abstract":false,"args":[{"name":"bot_administrator_rights","external_name":"bot_administrator_rights","restriction":"Hamilton::Types::ChatAdministratorRights | Nil"}],"args_string":"(bot_administrator_rights : Hamilton::Types::ChatAdministratorRights | Nil)","args_html":"(bot_administrator_rights : <a href=\"../../Hamilton/Types/ChatAdministratorRights.html\">Hamilton::Types::ChatAdministratorRights</a> | Nil)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":29,"url":null},"def":{"name":"bot_administrator_rights=","args":[{"name":"bot_administrator_rights","external_name":"bot_administrator_rights","restriction":"Hamilton::Types::ChatAdministratorRights | Nil"}],"visibility":"Public","body":"@bot_administrator_rights = bot_administrator_rights"},"external_var":false},{"html_id":"bot_is_member:Bool|Nil-instance-method","name":"bot_is_member","doc":"Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied.","summary":"<p>Pass True to request a chat with the bot as a member.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":32,"url":null},"def":{"name":"bot_is_member","return_type":"Bool | Nil","visibility":"Public","body":"@bot_is_member"},"external_var":false},{"html_id":"bot_is_member=(bot_is_member:Bool|Nil)-instance-method","name":"bot_is_member=","doc":"Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied.","summary":"<p>Pass True to request a chat with the bot as a member.</p>","abstract":false,"args":[{"name":"bot_is_member","external_name":"bot_is_member","restriction":"Bool | Nil"}],"args_string":"(bot_is_member : Bool | Nil)","args_html":"(bot_is_member : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":32,"url":null},"def":{"name":"bot_is_member=","args":[{"name":"bot_is_member","external_name":"bot_is_member","restriction":"Bool | Nil"}],"visibility":"Public","body":"@bot_is_member = bot_is_member"},"external_var":false},{"html_id":"chat_created:Bool|Nil-instance-method","name":"chat_created","doc":"Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied.","summary":"<p>Pass True to request a chat owned by the user.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":23,"url":null},"def":{"name":"chat_created","return_type":"Bool | Nil","visibility":"Public","body":"@chat_created"},"external_var":false},{"html_id":"chat_created=(chat_created:Bool|Nil)-instance-method","name":"chat_created=","doc":"Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied.","summary":"<p>Pass True to request a chat owned by the user.</p>","abstract":false,"args":[{"name":"chat_created","external_name":"chat_created","restriction":"Bool | Nil"}],"args_string":"(chat_created : Bool | Nil)","args_html":"(chat_created : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":23,"url":null},"def":{"name":"chat_created=","args":[{"name":"chat_created","external_name":"chat_created","restriction":"Bool | Nil"}],"visibility":"Public","body":"@chat_created = chat_created"},"external_var":false},{"html_id":"chat_has_username:Bool|Nil-instance-method","name":"chat_has_username","doc":"Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied.","summary":"<p>Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":20,"url":null},"def":{"name":"chat_has_username","return_type":"Bool | Nil","visibility":"Public","body":"@chat_has_username"},"external_var":false},{"html_id":"chat_has_username=(chat_has_username:Bool|Nil)-instance-method","name":"chat_has_username=","doc":"Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied.","summary":"<p>Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username.</p>","abstract":false,"args":[{"name":"chat_has_username","external_name":"chat_has_username","restriction":"Bool | Nil"}],"args_string":"(chat_has_username : Bool | Nil)","args_html":"(chat_has_username : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":20,"url":null},"def":{"name":"chat_has_username=","args":[{"name":"chat_has_username","external_name":"chat_has_username","restriction":"Bool | Nil"}],"visibility":"Public","body":"@chat_has_username = chat_has_username"},"external_var":false},{"html_id":"chat_is_channel:Bool-instance-method","name":"chat_is_channel","doc":"Pass True to request a channel chat, pass False to request a group or a supergroup chat.","summary":"<p>Pass True to request a channel chat, pass False to request a group or a supergroup chat.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":14,"url":null},"def":{"name":"chat_is_channel","return_type":"Bool","visibility":"Public","body":"@chat_is_channel"},"external_var":false},{"html_id":"chat_is_channel=(chat_is_channel:Bool)-instance-method","name":"chat_is_channel=","doc":"Pass True to request a channel chat, pass False to request a group or a supergroup chat.","summary":"<p>Pass True to request a channel chat, pass False to request a group or a supergroup chat.</p>","abstract":false,"args":[{"name":"chat_is_channel","external_name":"chat_is_channel","restriction":"Bool"}],"args_string":"(chat_is_channel : Bool)","args_html":"(chat_is_channel : Bool)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":14,"url":null},"def":{"name":"chat_is_channel=","args":[{"name":"chat_is_channel","external_name":"chat_is_channel","restriction":"Bool"}],"visibility":"Public","body":"@chat_is_channel = chat_is_channel"},"external_var":false},{"html_id":"chat_is_forum:Bool|Nil-instance-method","name":"chat_is_forum","doc":"Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied.","summary":"<p>Pass True to request a forum supergroup, pass False to request a non-forum chat.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":17,"url":null},"def":{"name":"chat_is_forum","return_type":"Bool | Nil","visibility":"Public","body":"@chat_is_forum"},"external_var":false},{"html_id":"chat_is_forum=(chat_is_forum:Bool|Nil)-instance-method","name":"chat_is_forum=","doc":"Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied.","summary":"<p>Pass True to request a forum supergroup, pass False to request a non-forum chat.</p>","abstract":false,"args":[{"name":"chat_is_forum","external_name":"chat_is_forum","restriction":"Bool | Nil"}],"args_string":"(chat_is_forum : Bool | Nil)","args_html":"(chat_is_forum : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":17,"url":null},"def":{"name":"chat_is_forum=","args":[{"name":"chat_is_forum","external_name":"chat_is_forum","restriction":"Bool | Nil"}],"visibility":"Public","body":"@chat_is_forum = chat_is_forum"},"external_var":false},{"html_id":"request_id:Int32-instance-method","name":"request_id","doc":"Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message.","summary":"<p>Signed 32-bit identifier of the request, which will be received back in the ChatShared object.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":11,"url":null},"def":{"name":"request_id","return_type":"Int32","visibility":"Public","body":"@request_id"},"external_var":false},{"html_id":"request_id=(request_id:Int32)-instance-method","name":"request_id=","doc":"Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message.","summary":"<p>Signed 32-bit identifier of the request, which will be received back in the ChatShared object.</p>","abstract":false,"args":[{"name":"request_id","external_name":"request_id","restriction":"Int32"}],"args_string":"(request_id : Int32)","args_html":"(request_id : Int32)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":11,"url":null},"def":{"name":"request_id=","args":[{"name":"request_id","external_name":"request_id","restriction":"Int32"}],"visibility":"Public","body":"@request_id = request_id"},"external_var":false},{"html_id":"request_photo:Bool|Nil-instance-method","name":"request_photo","doc":"Pass True to request the chat's photo.","summary":"<p>Pass True to request the chat's photo.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":41,"url":null},"def":{"name":"request_photo","return_type":"Bool | Nil","visibility":"Public","body":"@request_photo"},"external_var":false},{"html_id":"request_photo=(request_photo:Bool|Nil)-instance-method","name":"request_photo=","doc":"Pass True to request the chat's photo.","summary":"<p>Pass True to request the chat's photo.</p>","abstract":false,"args":[{"name":"request_photo","external_name":"request_photo","restriction":"Bool | Nil"}],"args_string":"(request_photo : Bool | Nil)","args_html":"(request_photo : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":41,"url":null},"def":{"name":"request_photo=","args":[{"name":"request_photo","external_name":"request_photo","restriction":"Bool | Nil"}],"visibility":"Public","body":"@request_photo = request_photo"},"external_var":false},{"html_id":"request_title:Bool|Nil-instance-method","name":"request_title","doc":"Pass True to request the chat's title.","summary":"<p>Pass True to request the chat's title.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":35,"url":null},"def":{"name":"request_title","return_type":"Bool | Nil","visibility":"Public","body":"@request_title"},"external_var":false},{"html_id":"request_title=(request_title:Bool|Nil)-instance-method","name":"request_title=","doc":"Pass True to request the chat's title.","summary":"<p>Pass True to request the chat's title.</p>","abstract":false,"args":[{"name":"request_title","external_name":"request_title","restriction":"Bool | Nil"}],"args_string":"(request_title : Bool | Nil)","args_html":"(request_title : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":35,"url":null},"def":{"name":"request_title=","args":[{"name":"request_title","external_name":"request_title","restriction":"Bool | Nil"}],"visibility":"Public","body":"@request_title = request_title"},"external_var":false},{"html_id":"request_username:Bool|Nil-instance-method","name":"request_username","doc":"Pass True to request the chat's username.","summary":"<p>Pass True to request the chat's username.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":38,"url":null},"def":{"name":"request_username","return_type":"Bool | Nil","visibility":"Public","body":"@request_username"},"external_var":false},{"html_id":"request_username=(request_username:Bool|Nil)-instance-method","name":"request_username=","doc":"Pass True to request the chat's username.","summary":"<p>Pass True to request the chat's username.</p>","abstract":false,"args":[{"name":"request_username","external_name":"request_username","restriction":"Bool | Nil"}],"args_string":"(request_username : Bool | Nil)","args_html":"(request_username : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":38,"url":null},"def":{"name":"request_username=","args":[{"name":"request_username","external_name":"request_username","restriction":"Bool | Nil"}],"visibility":"Public","body":"@request_username = request_username"},"external_var":false},{"html_id":"user_administrator_rights:Hamilton::Types::ChatAdministratorRights|Nil-instance-method","name":"user_administrator_rights","doc":"A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of `bot_administrator_rights`. If not specified, no additional restrictions are applied.","summary":"<p>A JSON-serialized object listing the required administrator rights of the user in the chat.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":26,"url":null},"def":{"name":"user_administrator_rights","return_type":"Hamilton::Types::ChatAdministratorRights | Nil","visibility":"Public","body":"@user_administrator_rights"},"external_var":false},{"html_id":"user_administrator_rights=(user_administrator_rights:Hamilton::Types::ChatAdministratorRights|Nil)-instance-method","name":"user_administrator_rights=","doc":"A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of `bot_administrator_rights`. If not specified, no additional restrictions are applied.","summary":"<p>A JSON-serialized object listing the required administrator rights of the user in the chat.</p>","abstract":false,"args":[{"name":"user_administrator_rights","external_name":"user_administrator_rights","restriction":"Hamilton::Types::ChatAdministratorRights | Nil"}],"args_string":"(user_administrator_rights : Hamilton::Types::ChatAdministratorRights | Nil)","args_html":"(user_administrator_rights : <a href=\"../../Hamilton/Types/ChatAdministratorRights.html\">Hamilton::Types::ChatAdministratorRights</a> | Nil)","location":{"filename":"src/types/keyboard_button_request_chat.cr","line_number":26,"url":null},"def":{"name":"user_administrator_rights=","args":[{"name":"user_administrator_rights","external_name":"user_administrator_rights","restriction":"Hamilton::Types::ChatAdministratorRights | Nil"}],"visibility":"Public","body":"@user_administrator_rights = user_administrator_rights"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/KeyboardButtonRequestUsers","path":"Hamilton/Types/KeyboardButtonRequestUsers.html","kind":"class","full_name":"Hamilton::Types::KeyboardButtonRequestUsers","name":"KeyboardButtonRequestUsers","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/keyboard_button_request_user.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object defines the criteria used to request suitable users. Information about the selected users will be shared with the bot when the corresponding button is pressed.","summary":"<p>This object defines the criteria used to request suitable users.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"max_quantity:Int32|Nil-instance-method","name":"max_quantity","doc":"The maximum number of users to be selected; 1-10. Defaults to 1.","summary":"<p>The maximum number of users to be selected; 1-10.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":20,"url":null},"def":{"name":"max_quantity","return_type":"Int32 | Nil","visibility":"Public","body":"@max_quantity"},"external_var":false},{"html_id":"max_quantity=(max_quantity:Int32|Nil)-instance-method","name":"max_quantity=","doc":"The maximum number of users to be selected; 1-10. Defaults to 1.","summary":"<p>The maximum number of users to be selected; 1-10.</p>","abstract":false,"args":[{"name":"max_quantity","external_name":"max_quantity","restriction":"Int32 | Nil"}],"args_string":"(max_quantity : Int32 | Nil)","args_html":"(max_quantity : Int32 | Nil)","location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":20,"url":null},"def":{"name":"max_quantity=","args":[{"name":"max_quantity","external_name":"max_quantity","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@max_quantity = max_quantity"},"external_var":false},{"html_id":"request_id:Int32-instance-method","name":"request_id","doc":"Signed 32-bit identifier of the request that will be received back in the UsersShared object. Must be unique within the message.","summary":"<p>Signed 32-bit identifier of the request that will be received back in the UsersShared object.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":11,"url":null},"def":{"name":"request_id","return_type":"Int32","visibility":"Public","body":"@request_id"},"external_var":false},{"html_id":"request_id=(request_id:Int32)-instance-method","name":"request_id=","doc":"Signed 32-bit identifier of the request that will be received back in the UsersShared object. Must be unique within the message.","summary":"<p>Signed 32-bit identifier of the request that will be received back in the UsersShared object.</p>","abstract":false,"args":[{"name":"request_id","external_name":"request_id","restriction":"Int32"}],"args_string":"(request_id : Int32)","args_html":"(request_id : Int32)","location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":11,"url":null},"def":{"name":"request_id=","args":[{"name":"request_id","external_name":"request_id","restriction":"Int32"}],"visibility":"Public","body":"@request_id = request_id"},"external_var":false},{"html_id":"request_name:Bool|Nil-instance-method","name":"request_name","doc":"Pass True to request the users' first and last names.","summary":"<p>Pass True to request the users' first and last names.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":23,"url":null},"def":{"name":"request_name","return_type":"Bool | Nil","visibility":"Public","body":"@request_name"},"external_var":false},{"html_id":"request_name=(request_name:Bool|Nil)-instance-method","name":"request_name=","doc":"Pass True to request the users' first and last names.","summary":"<p>Pass True to request the users' first and last names.</p>","abstract":false,"args":[{"name":"request_name","external_name":"request_name","restriction":"Bool | Nil"}],"args_string":"(request_name : Bool | Nil)","args_html":"(request_name : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":23,"url":null},"def":{"name":"request_name=","args":[{"name":"request_name","external_name":"request_name","restriction":"Bool | Nil"}],"visibility":"Public","body":"@request_name = request_name"},"external_var":false},{"html_id":"request_photo:Bool|Nil-instance-method","name":"request_photo","doc":"Pass True to request the users' photos.","summary":"<p>Pass True to request the users' photos.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":29,"url":null},"def":{"name":"request_photo","return_type":"Bool | Nil","visibility":"Public","body":"@request_photo"},"external_var":false},{"html_id":"request_photo=(request_photo:Bool|Nil)-instance-method","name":"request_photo=","doc":"Pass True to request the users' photos.","summary":"<p>Pass True to request the users' photos.</p>","abstract":false,"args":[{"name":"request_photo","external_name":"request_photo","restriction":"Bool | Nil"}],"args_string":"(request_photo : Bool | Nil)","args_html":"(request_photo : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":29,"url":null},"def":{"name":"request_photo=","args":[{"name":"request_photo","external_name":"request_photo","restriction":"Bool | Nil"}],"visibility":"Public","body":"@request_photo = request_photo"},"external_var":false},{"html_id":"request_username:Bool|Nil-instance-method","name":"request_username","doc":"Pass True to request the users' usernames.","summary":"<p>Pass True to request the users' usernames.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":26,"url":null},"def":{"name":"request_username","return_type":"Bool | Nil","visibility":"Public","body":"@request_username"},"external_var":false},{"html_id":"request_username=(request_username:Bool|Nil)-instance-method","name":"request_username=","doc":"Pass True to request the users' usernames.","summary":"<p>Pass True to request the users' usernames.</p>","abstract":false,"args":[{"name":"request_username","external_name":"request_username","restriction":"Bool | Nil"}],"args_string":"(request_username : Bool | Nil)","args_html":"(request_username : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":26,"url":null},"def":{"name":"request_username=","args":[{"name":"request_username","external_name":"request_username","restriction":"Bool | Nil"}],"visibility":"Public","body":"@request_username = request_username"},"external_var":false},{"html_id":"user_is_bot:Bool|Nil-instance-method","name":"user_is_bot","doc":"Pass True to request bots, pass False to request regular users. If not specified, no additional restrictions are applied.","summary":"<p>Pass True to request bots, pass False to request regular users.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":14,"url":null},"def":{"name":"user_is_bot","return_type":"Bool | Nil","visibility":"Public","body":"@user_is_bot"},"external_var":false},{"html_id":"user_is_bot=(user_is_bot:Bool|Nil)-instance-method","name":"user_is_bot=","doc":"Pass True to request bots, pass False to request regular users. If not specified, no additional restrictions are applied.","summary":"<p>Pass True to request bots, pass False to request regular users.</p>","abstract":false,"args":[{"name":"user_is_bot","external_name":"user_is_bot","restriction":"Bool | Nil"}],"args_string":"(user_is_bot : Bool | Nil)","args_html":"(user_is_bot : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":14,"url":null},"def":{"name":"user_is_bot=","args":[{"name":"user_is_bot","external_name":"user_is_bot","restriction":"Bool | Nil"}],"visibility":"Public","body":"@user_is_bot = user_is_bot"},"external_var":false},{"html_id":"user_is_premium:Bool|Nil-instance-method","name":"user_is_premium","doc":"Pass True to request premium users, pass False to request non-premium users. If not specified, no additional restrictions are applied.","summary":"<p>Pass True to request premium users, pass False to request non-premium users.</p>","abstract":false,"location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":17,"url":null},"def":{"name":"user_is_premium","return_type":"Bool | Nil","visibility":"Public","body":"@user_is_premium"},"external_var":false},{"html_id":"user_is_premium=(user_is_premium:Bool|Nil)-instance-method","name":"user_is_premium=","doc":"Pass True to request premium users, pass False to request non-premium users. If not specified, no additional restrictions are applied.","summary":"<p>Pass True to request premium users, pass False to request non-premium users.</p>","abstract":false,"args":[{"name":"user_is_premium","external_name":"user_is_premium","restriction":"Bool | Nil"}],"args_string":"(user_is_premium : Bool | Nil)","args_html":"(user_is_premium : Bool | Nil)","location":{"filename":"src/types/keyboard_button_request_user.cr","line_number":17,"url":null},"def":{"name":"user_is_premium=","args":[{"name":"user_is_premium","external_name":"user_is_premium","restriction":"Bool | Nil"}],"visibility":"Public","body":"@user_is_premium = user_is_premium"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/LabeledPrice","path":"Hamilton/Types/LabeledPrice.html","kind":"class","full_name":"Hamilton::Types::LabeledPrice","name":"LabeledPrice","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/labeled_price.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a portion of the price for goods or services.","summary":"<p>This object represents a portion of the price for goods or services.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/labeled_price.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/labeled_price.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"amount:Int32-instance-method","name":"amount","doc":"Price of the product in the smallest units of the currency (integer, not float/double).","summary":"<p>Price of the product in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"location":{"filename":"src/types/labeled_price.cr","line_number":14,"url":null},"def":{"name":"amount","return_type":"Int32","visibility":"Public","body":"@amount"},"external_var":false},{"html_id":"amount=(amount:Int32)-instance-method","name":"amount=","doc":"Price of the product in the smallest units of the currency (integer, not float/double).","summary":"<p>Price of the product in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"args_string":"(amount : Int32)","args_html":"(amount : Int32)","location":{"filename":"src/types/labeled_price.cr","line_number":14,"url":null},"def":{"name":"amount=","args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"visibility":"Public","body":"@amount = amount"},"external_var":false},{"html_id":"label:String-instance-method","name":"label","doc":"Portion label.","summary":"<p>Portion label.</p>","abstract":false,"location":{"filename":"src/types/labeled_price.cr","line_number":11,"url":null},"def":{"name":"label","return_type":"String","visibility":"Public","body":"@label"},"external_var":false},{"html_id":"label=(label:String)-instance-method","name":"label=","doc":"Portion label.","summary":"<p>Portion label.</p>","abstract":false,"args":[{"name":"label","external_name":"label","restriction":"String"}],"args_string":"(label : String)","args_html":"(label : String)","location":{"filename":"src/types/labeled_price.cr","line_number":11,"url":null},"def":{"name":"label=","args":[{"name":"label","external_name":"label","restriction":"String"}],"visibility":"Public","body":"@label = label"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/LinkPreviewOptions","path":"Hamilton/Types/LinkPreviewOptions.html","kind":"class","full_name":"Hamilton::Types::LinkPreviewOptions","name":"LinkPreviewOptions","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/link_preview_options.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the options used for link preview generation.","summary":"<p>Describes the options used for link preview generation.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/link_preview_options.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/link_preview_options.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"is_disabled:Bool|Nil-instance-method","name":"is_disabled","doc":"True, if the link preview is disabled.","summary":"<p>True, if the link preview is disabled.</p>","abstract":false,"location":{"filename":"src/types/link_preview_options.cr","line_number":11,"url":null},"def":{"name":"is_disabled","return_type":"Bool | Nil","visibility":"Public","body":"@is_disabled"},"external_var":false},{"html_id":"is_disabled=(is_disabled:Bool|Nil)-instance-method","name":"is_disabled=","doc":"True, if the link preview is disabled.","summary":"<p>True, if the link preview is disabled.</p>","abstract":false,"args":[{"name":"is_disabled","external_name":"is_disabled","restriction":"Bool | Nil"}],"args_string":"(is_disabled : Bool | Nil)","args_html":"(is_disabled : Bool | Nil)","location":{"filename":"src/types/link_preview_options.cr","line_number":11,"url":null},"def":{"name":"is_disabled=","args":[{"name":"is_disabled","external_name":"is_disabled","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_disabled = is_disabled"},"external_var":false},{"html_id":"prefer_large_media:Bool|Nil-instance-method","name":"prefer_large_media","doc":"True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview.","summary":"<p>True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview.</p>","abstract":false,"location":{"filename":"src/types/link_preview_options.cr","line_number":20,"url":null},"def":{"name":"prefer_large_media","return_type":"Bool | Nil","visibility":"Public","body":"@prefer_large_media"},"external_var":false},{"html_id":"prefer_large_media=(prefer_large_media:Bool|Nil)-instance-method","name":"prefer_large_media=","doc":"True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview.","summary":"<p>True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview.</p>","abstract":false,"args":[{"name":"prefer_large_media","external_name":"prefer_large_media","restriction":"Bool | Nil"}],"args_string":"(prefer_large_media : Bool | Nil)","args_html":"(prefer_large_media : Bool | Nil)","location":{"filename":"src/types/link_preview_options.cr","line_number":20,"url":null},"def":{"name":"prefer_large_media=","args":[{"name":"prefer_large_media","external_name":"prefer_large_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@prefer_large_media = prefer_large_media"},"external_var":false},{"html_id":"prefer_small_media:Bool|Nil-instance-method","name":"prefer_small_media","doc":"True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview.","summary":"<p>True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview.</p>","abstract":false,"location":{"filename":"src/types/link_preview_options.cr","line_number":17,"url":null},"def":{"name":"prefer_small_media","return_type":"Bool | Nil","visibility":"Public","body":"@prefer_small_media"},"external_var":false},{"html_id":"prefer_small_media=(prefer_small_media:Bool|Nil)-instance-method","name":"prefer_small_media=","doc":"True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview.","summary":"<p>True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview.</p>","abstract":false,"args":[{"name":"prefer_small_media","external_name":"prefer_small_media","restriction":"Bool | Nil"}],"args_string":"(prefer_small_media : Bool | Nil)","args_html":"(prefer_small_media : Bool | Nil)","location":{"filename":"src/types/link_preview_options.cr","line_number":17,"url":null},"def":{"name":"prefer_small_media=","args":[{"name":"prefer_small_media","external_name":"prefer_small_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@prefer_small_media = prefer_small_media"},"external_var":false},{"html_id":"show_above_text:Bool|Nil-instance-method","name":"show_above_text","doc":"True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text.","summary":"<p>True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text.</p>","abstract":false,"location":{"filename":"src/types/link_preview_options.cr","line_number":23,"url":null},"def":{"name":"show_above_text","return_type":"Bool | Nil","visibility":"Public","body":"@show_above_text"},"external_var":false},{"html_id":"show_above_text=(show_above_text:Bool|Nil)-instance-method","name":"show_above_text=","doc":"True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text.","summary":"<p>True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text.</p>","abstract":false,"args":[{"name":"show_above_text","external_name":"show_above_text","restriction":"Bool | Nil"}],"args_string":"(show_above_text : Bool | Nil)","args_html":"(show_above_text : Bool | Nil)","location":{"filename":"src/types/link_preview_options.cr","line_number":23,"url":null},"def":{"name":"show_above_text=","args":[{"name":"show_above_text","external_name":"show_above_text","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_above_text = show_above_text"},"external_var":false},{"html_id":"url:String|Nil-instance-method","name":"url","doc":"URL to use for the link preview. If empty, then the first URL found in the message text will be used.","summary":"<p>URL to use for the link preview.</p>","abstract":false,"location":{"filename":"src/types/link_preview_options.cr","line_number":14,"url":null},"def":{"name":"url","return_type":"String | Nil","visibility":"Public","body":"@url"},"external_var":false},{"html_id":"url=(url:String|Nil)-instance-method","name":"url=","doc":"URL to use for the link preview. If empty, then the first URL found in the message text will be used.","summary":"<p>URL to use for the link preview.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String | Nil"}],"args_string":"(url : String | Nil)","args_html":"(url : String | Nil)","location":{"filename":"src/types/link_preview_options.cr","line_number":14,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String | Nil"}],"visibility":"Public","body":"@url = url"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Location","path":"Hamilton/Types/Location.html","kind":"class","full_name":"Hamilton::Types::Location","name":"Location","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/location.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a point on the map.","summary":"<p>This object represents a point on the map.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/location.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/location.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"heading:Int32|Nil-instance-method","name":"heading","doc":"The direction in which user is moving, in degrees; 1-360. For active live locations only.","summary":"<p>The direction in which user is moving, in degrees; 1-360.</p>","abstract":false,"location":{"filename":"src/types/location.cr","line_number":23,"url":null},"def":{"name":"heading","return_type":"Int32 | Nil","visibility":"Public","body":"@heading"},"external_var":false},{"html_id":"heading=(heading:Int32|Nil)-instance-method","name":"heading=","doc":"The direction in which user is moving, in degrees; 1-360. For active live locations only.","summary":"<p>The direction in which user is moving, in degrees; 1-360.</p>","abstract":false,"args":[{"name":"heading","external_name":"heading","restriction":"Int32 | Nil"}],"args_string":"(heading : Int32 | Nil)","args_html":"(heading : Int32 | Nil)","location":{"filename":"src/types/location.cr","line_number":23,"url":null},"def":{"name":"heading=","args":[{"name":"heading","external_name":"heading","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@heading = heading"},"external_var":false},{"html_id":"horizontal_accuracy:Float32|Nil-instance-method","name":"horizontal_accuracy","doc":"The radius of uncertainty for the location, measured in meters; 0-1500.","summary":"<p>The radius of uncertainty for the location, measured in meters; 0-1500.</p>","abstract":false,"location":{"filename":"src/types/location.cr","line_number":17,"url":null},"def":{"name":"horizontal_accuracy","return_type":"Float32 | Nil","visibility":"Public","body":"@horizontal_accuracy"},"external_var":false},{"html_id":"horizontal_accuracy=(horizontal_accuracy:Float32|Nil)-instance-method","name":"horizontal_accuracy=","doc":"The radius of uncertainty for the location, measured in meters; 0-1500.","summary":"<p>The radius of uncertainty for the location, measured in meters; 0-1500.</p>","abstract":false,"args":[{"name":"horizontal_accuracy","external_name":"horizontal_accuracy","restriction":"Float32 | Nil"}],"args_string":"(horizontal_accuracy : Float32 | Nil)","args_html":"(horizontal_accuracy : Float32 | Nil)","location":{"filename":"src/types/location.cr","line_number":17,"url":null},"def":{"name":"horizontal_accuracy=","args":[{"name":"horizontal_accuracy","external_name":"horizontal_accuracy","restriction":"Float32 | Nil"}],"visibility":"Public","body":"@horizontal_accuracy = horizontal_accuracy"},"external_var":false},{"html_id":"latitude:Float32-instance-method","name":"latitude","doc":"Latitude as defined by the sender.","summary":"<p>Latitude as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/location.cr","line_number":11,"url":null},"def":{"name":"latitude","return_type":"Float32","visibility":"Public","body":"@latitude"},"external_var":false},{"html_id":"latitude=(latitude:Float32)-instance-method","name":"latitude=","doc":"Latitude as defined by the sender.","summary":"<p>Latitude as defined by the sender.</p>","abstract":false,"args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"args_string":"(latitude : Float32)","args_html":"(latitude : Float32)","location":{"filename":"src/types/location.cr","line_number":11,"url":null},"def":{"name":"latitude=","args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"visibility":"Public","body":"@latitude = latitude"},"external_var":false},{"html_id":"live_period:Int32|Nil-instance-method","name":"live_period","doc":"Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only.","summary":"<p>Time relative to the message sending date, during which the location can be updated; in seconds.</p>","abstract":false,"location":{"filename":"src/types/location.cr","line_number":20,"url":null},"def":{"name":"live_period","return_type":"Int32 | Nil","visibility":"Public","body":"@live_period"},"external_var":false},{"html_id":"live_period=(live_period:Int32|Nil)-instance-method","name":"live_period=","doc":"Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only.","summary":"<p>Time relative to the message sending date, during which the location can be updated; in seconds.</p>","abstract":false,"args":[{"name":"live_period","external_name":"live_period","restriction":"Int32 | Nil"}],"args_string":"(live_period : Int32 | Nil)","args_html":"(live_period : Int32 | Nil)","location":{"filename":"src/types/location.cr","line_number":20,"url":null},"def":{"name":"live_period=","args":[{"name":"live_period","external_name":"live_period","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@live_period = live_period"},"external_var":false},{"html_id":"longitude:Float32-instance-method","name":"longitude","doc":"Longitude as defined by the sender.","summary":"<p>Longitude as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/location.cr","line_number":14,"url":null},"def":{"name":"longitude","return_type":"Float32","visibility":"Public","body":"@longitude"},"external_var":false},{"html_id":"longitude=(longitude:Float32)-instance-method","name":"longitude=","doc":"Longitude as defined by the sender.","summary":"<p>Longitude as defined by the sender.</p>","abstract":false,"args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"args_string":"(longitude : Float32)","args_html":"(longitude : Float32)","location":{"filename":"src/types/location.cr","line_number":14,"url":null},"def":{"name":"longitude=","args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"visibility":"Public","body":"@longitude = longitude"},"external_var":false},{"html_id":"proximity_alert_radius:Int32|Nil-instance-method","name":"proximity_alert_radius","doc":"The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.","summary":"<p>The maximum distance for proximity alerts about approaching another chat member, in meters.</p>","abstract":false,"location":{"filename":"src/types/location.cr","line_number":26,"url":null},"def":{"name":"proximity_alert_radius","return_type":"Int32 | Nil","visibility":"Public","body":"@proximity_alert_radius"},"external_var":false},{"html_id":"proximity_alert_radius=(proximity_alert_radius:Int32|Nil)-instance-method","name":"proximity_alert_radius=","doc":"The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.","summary":"<p>The maximum distance for proximity alerts about approaching another chat member, in meters.</p>","abstract":false,"args":[{"name":"proximity_alert_radius","external_name":"proximity_alert_radius","restriction":"Int32 | Nil"}],"args_string":"(proximity_alert_radius : Int32 | Nil)","args_html":"(proximity_alert_radius : Int32 | Nil)","location":{"filename":"src/types/location.cr","line_number":26,"url":null},"def":{"name":"proximity_alert_radius=","args":[{"name":"proximity_alert_radius","external_name":"proximity_alert_radius","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@proximity_alert_radius = proximity_alert_radius"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/LocationAddress","path":"Hamilton/Types/LocationAddress.html","kind":"class","full_name":"Hamilton::Types::LocationAddress","name":"LocationAddress","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/location_address.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the physical address of a location.","summary":"<p>Describes the physical address of a location.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/location_address.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/location_address.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"city:String|Nil-instance-method","name":"city","doc":"City of the location.","summary":"<p>City of the location.</p>","abstract":false,"location":{"filename":"src/types/location_address.cr","line_number":17,"url":null},"def":{"name":"city","return_type":"String | Nil","visibility":"Public","body":"@city"},"external_var":false},{"html_id":"city=(city:String|Nil)-instance-method","name":"city=","doc":"City of the location.","summary":"<p>City of the location.</p>","abstract":false,"args":[{"name":"city","external_name":"city","restriction":"String | Nil"}],"args_string":"(city : String | Nil)","args_html":"(city : String | Nil)","location":{"filename":"src/types/location_address.cr","line_number":17,"url":null},"def":{"name":"city=","args":[{"name":"city","external_name":"city","restriction":"String | Nil"}],"visibility":"Public","body":"@city = city"},"external_var":false},{"html_id":"country_code:String-instance-method","name":"country_code","doc":"The two-letter ISO 3166-1 alpha-2 country code of the country where the location is located.","summary":"<p>The two-letter ISO 3166-1 alpha-2 country code of the country where the location is located.</p>","abstract":false,"location":{"filename":"src/types/location_address.cr","line_number":11,"url":null},"def":{"name":"country_code","return_type":"String","visibility":"Public","body":"@country_code"},"external_var":false},{"html_id":"country_code=(country_code:String)-instance-method","name":"country_code=","doc":"The two-letter ISO 3166-1 alpha-2 country code of the country where the location is located.","summary":"<p>The two-letter ISO 3166-1 alpha-2 country code of the country where the location is located.</p>","abstract":false,"args":[{"name":"country_code","external_name":"country_code","restriction":"String"}],"args_string":"(country_code : String)","args_html":"(country_code : String)","location":{"filename":"src/types/location_address.cr","line_number":11,"url":null},"def":{"name":"country_code=","args":[{"name":"country_code","external_name":"country_code","restriction":"String"}],"visibility":"Public","body":"@country_code = country_code"},"external_var":false},{"html_id":"state:String|Nil-instance-method","name":"state","doc":"State of the location.","summary":"<p>State of the location.</p>","abstract":false,"location":{"filename":"src/types/location_address.cr","line_number":14,"url":null},"def":{"name":"state","return_type":"String | Nil","visibility":"Public","body":"@state"},"external_var":false},{"html_id":"state=(state:String|Nil)-instance-method","name":"state=","doc":"State of the location.","summary":"<p>State of the location.</p>","abstract":false,"args":[{"name":"state","external_name":"state","restriction":"String | Nil"}],"args_string":"(state : String | Nil)","args_html":"(state : String | Nil)","location":{"filename":"src/types/location_address.cr","line_number":14,"url":null},"def":{"name":"state=","args":[{"name":"state","external_name":"state","restriction":"String | Nil"}],"visibility":"Public","body":"@state = state"},"external_var":false},{"html_id":"street:String|Nil-instance-method","name":"street","doc":"Street address of the location.","summary":"<p>Street address of the location.</p>","abstract":false,"location":{"filename":"src/types/location_address.cr","line_number":20,"url":null},"def":{"name":"street","return_type":"String | Nil","visibility":"Public","body":"@street"},"external_var":false},{"html_id":"street=(street:String|Nil)-instance-method","name":"street=","doc":"Street address of the location.","summary":"<p>Street address of the location.</p>","abstract":false,"args":[{"name":"street","external_name":"street","restriction":"String | Nil"}],"args_string":"(street : String | Nil)","args_html":"(street : String | Nil)","location":{"filename":"src/types/location_address.cr","line_number":20,"url":null},"def":{"name":"street=","args":[{"name":"street","external_name":"street","restriction":"String | Nil"}],"visibility":"Public","body":"@street = street"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/LoginUrl","path":"Hamilton/Types/LoginUrl.html","kind":"class","full_name":"Hamilton::Types::LoginUrl","name":"LoginUrl","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/login_url.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in. Telegram apps support these buttons as of version 5.7.","summary":"<p>This object represents a parameter of the inline keyboard button used to automatically authorize a user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/login_url.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/login_url.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"bot_username:String|Nil-instance-method","name":"bot_username","doc":"Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.","summary":"<p>Username of a bot, which will be used for user authorization.</p>","abstract":false,"location":{"filename":"src/types/login_url.cr","line_number":19,"url":null},"def":{"name":"bot_username","return_type":"String | Nil","visibility":"Public","body":"@bot_username"},"external_var":false},{"html_id":"bot_username=(bot_username:String|Nil)-instance-method","name":"bot_username=","doc":"Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.","summary":"<p>Username of a bot, which will be used for user authorization.</p>","abstract":false,"args":[{"name":"bot_username","external_name":"bot_username","restriction":"String | Nil"}],"args_string":"(bot_username : String | Nil)","args_html":"(bot_username : String | Nil)","location":{"filename":"src/types/login_url.cr","line_number":19,"url":null},"def":{"name":"bot_username=","args":[{"name":"bot_username","external_name":"bot_username","restriction":"String | Nil"}],"visibility":"Public","body":"@bot_username = bot_username"},"external_var":false},{"html_id":"forward_text:String|Nil-instance-method","name":"forward_text","doc":"New text of the button in forwarded messages.","summary":"<p>New text of the button in forwarded messages.</p>","abstract":false,"location":{"filename":"src/types/login_url.cr","line_number":16,"url":null},"def":{"name":"forward_text","return_type":"String | Nil","visibility":"Public","body":"@forward_text"},"external_var":false},{"html_id":"forward_text=(forward_text:String|Nil)-instance-method","name":"forward_text=","doc":"New text of the button in forwarded messages.","summary":"<p>New text of the button in forwarded messages.</p>","abstract":false,"args":[{"name":"forward_text","external_name":"forward_text","restriction":"String | Nil"}],"args_string":"(forward_text : String | Nil)","args_html":"(forward_text : String | Nil)","location":{"filename":"src/types/login_url.cr","line_number":16,"url":null},"def":{"name":"forward_text=","args":[{"name":"forward_text","external_name":"forward_text","restriction":"String | Nil"}],"visibility":"Public","body":"@forward_text = forward_text"},"external_var":false},{"html_id":"request_write_access:Bool|Nil-instance-method","name":"request_write_access","doc":"Pass True to request the permission for your bot to send messages to the user.","summary":"<p>Pass True to request the permission for your bot to send messages to the user.</p>","abstract":false,"location":{"filename":"src/types/login_url.cr","line_number":22,"url":null},"def":{"name":"request_write_access","return_type":"Bool | Nil","visibility":"Public","body":"@request_write_access"},"external_var":false},{"html_id":"request_write_access=(request_write_access:Bool|Nil)-instance-method","name":"request_write_access=","doc":"Pass True to request the permission for your bot to send messages to the user.","summary":"<p>Pass True to request the permission for your bot to send messages to the user.</p>","abstract":false,"args":[{"name":"request_write_access","external_name":"request_write_access","restriction":"Bool | Nil"}],"args_string":"(request_write_access : Bool | Nil)","args_html":"(request_write_access : Bool | Nil)","location":{"filename":"src/types/login_url.cr","line_number":22,"url":null},"def":{"name":"request_write_access=","args":[{"name":"request_write_access","external_name":"request_write_access","restriction":"Bool | Nil"}],"visibility":"Public","body":"@request_write_access = request_write_access"},"external_var":false},{"html_id":"url:String-instance-method","name":"url","doc":"An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.\n\nNOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization.","summary":"<p>An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed.</p>","abstract":false,"location":{"filename":"src/types/login_url.cr","line_number":13,"url":null},"def":{"name":"url","return_type":"String","visibility":"Public","body":"@url"},"external_var":false},{"html_id":"url=(url:String)-instance-method","name":"url=","doc":"An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.\n\nNOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization.","summary":"<p>An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String"}],"args_string":"(url : String)","args_html":"(url : String)","location":{"filename":"src/types/login_url.cr","line_number":13,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String"}],"visibility":"Public","body":"@url = url"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MaskPosition","path":"Hamilton/Types/MaskPosition.html","kind":"class","full_name":"Hamilton::Types::MaskPosition","name":"MaskPosition","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/mask_position.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the position on faces where a mask should be placed by default.","summary":"<p>This object describes the position on faces where a mask should be placed by default.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/mask_position.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/mask_position.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"point:String-instance-method","name":"point","doc":"The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.","summary":"<p>The part of the face relative to which the mask should be placed.</p>","abstract":false,"location":{"filename":"src/types/mask_position.cr","line_number":11,"url":null},"def":{"name":"point","return_type":"String","visibility":"Public","body":"@point"},"external_var":false},{"html_id":"point=(point:String)-instance-method","name":"point=","doc":"The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.","summary":"<p>The part of the face relative to which the mask should be placed.</p>","abstract":false,"args":[{"name":"point","external_name":"point","restriction":"String"}],"args_string":"(point : String)","args_html":"(point : String)","location":{"filename":"src/types/mask_position.cr","line_number":11,"url":null},"def":{"name":"point=","args":[{"name":"point","external_name":"point","restriction":"String"}],"visibility":"Public","body":"@point = point"},"external_var":false},{"html_id":"scale:Float32-instance-method","name":"scale","doc":"Mask scaling coefficient. For example, 2.0 means double size.","summary":"<p>Mask scaling coefficient.</p>","abstract":false,"location":{"filename":"src/types/mask_position.cr","line_number":20,"url":null},"def":{"name":"scale","return_type":"Float32","visibility":"Public","body":"@scale"},"external_var":false},{"html_id":"scale=(scale:Float32)-instance-method","name":"scale=","doc":"Mask scaling coefficient. For example, 2.0 means double size.","summary":"<p>Mask scaling coefficient.</p>","abstract":false,"args":[{"name":"scale","external_name":"scale","restriction":"Float32"}],"args_string":"(scale : Float32)","args_html":"(scale : Float32)","location":{"filename":"src/types/mask_position.cr","line_number":20,"url":null},"def":{"name":"scale=","args":[{"name":"scale","external_name":"scale","restriction":"Float32"}],"visibility":"Public","body":"@scale = scale"},"external_var":false},{"html_id":"x_shift:Float32-instance-method","name":"x_shift","doc":"Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.","summary":"<p>Shift by X-axis measured in widths of the mask scaled to the face size, from left to right.</p>","abstract":false,"location":{"filename":"src/types/mask_position.cr","line_number":14,"url":null},"def":{"name":"x_shift","return_type":"Float32","visibility":"Public","body":"@x_shift"},"external_var":false},{"html_id":"x_shift=(x_shift:Float32)-instance-method","name":"x_shift=","doc":"Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.","summary":"<p>Shift by X-axis measured in widths of the mask scaled to the face size, from left to right.</p>","abstract":false,"args":[{"name":"x_shift","external_name":"x_shift","restriction":"Float32"}],"args_string":"(x_shift : Float32)","args_html":"(x_shift : Float32)","location":{"filename":"src/types/mask_position.cr","line_number":14,"url":null},"def":{"name":"x_shift=","args":[{"name":"x_shift","external_name":"x_shift","restriction":"Float32"}],"visibility":"Public","body":"@x_shift = x_shift"},"external_var":false},{"html_id":"y_shift:Float32-instance-method","name":"y_shift","doc":"Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.","summary":"<p>Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom.</p>","abstract":false,"location":{"filename":"src/types/mask_position.cr","line_number":17,"url":null},"def":{"name":"y_shift","return_type":"Float32","visibility":"Public","body":"@y_shift"},"external_var":false},{"html_id":"y_shift=(y_shift:Float32)-instance-method","name":"y_shift=","doc":"Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.","summary":"<p>Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom.</p>","abstract":false,"args":[{"name":"y_shift","external_name":"y_shift","restriction":"Float32"}],"args_string":"(y_shift : Float32)","args_html":"(y_shift : Float32)","location":{"filename":"src/types/mask_position.cr","line_number":17,"url":null},"def":{"name":"y_shift=","args":[{"name":"y_shift","external_name":"y_shift","restriction":"Float32"}],"visibility":"Public","body":"@y_shift = y_shift"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MaybeInaccessibleMessage","path":"Hamilton/Types/MaybeInaccessibleMessage.html","kind":"alias","full_name":"Hamilton::Types::MaybeInaccessibleMessage","name":"MaybeInaccessibleMessage","abstract":false,"locations":[{"filename":"src/types/inaccessible_message.cr","line_number":21,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::InaccessibleMessage | Hamilton::Types::Message)","aliased_html":"<a href=\"../../Hamilton/Types/InaccessibleMessage.html\">Hamilton::Types::InaccessibleMessage</a> | <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes a message that can be inaccessible to the bot.","summary":"<p>This object describes a message that can be inaccessible to the bot.</p>"},{"html_id":"hamilton/Hamilton/Types/MenuButton","path":"Hamilton/Types/MenuButton.html","kind":"alias","full_name":"Hamilton::Types::MenuButton","name":"MenuButton","abstract":false,"locations":[{"filename":"src/types/menu_button.cr","line_number":43,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::MenuButtonCommands | Hamilton::Types::MenuButtonDefault | Hamilton::Types::MenuButtonWebApp)","aliased_html":"<a href=\"../../Hamilton/Types/MenuButtonCommands.html\">Hamilton::Types::MenuButtonCommands</a> | <a href=\"../../Hamilton/Types/MenuButtonDefault.html\">Hamilton::Types::MenuButtonDefault</a> | <a href=\"../../Hamilton/Types/MenuButtonWebApp.html\">Hamilton::Types::MenuButtonWebApp</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the bot's menu button in a private chat.\n\nIf a menu button other than MenuButtonDefault is set for a private chat, then it is applied in the chat. Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands.","summary":"<p>This object describes the bot's menu button in a private chat.</p>"},{"html_id":"hamilton/Hamilton/Types/MenuButtonCommands","path":"Hamilton/Types/MenuButtonCommands.html","kind":"class","full_name":"Hamilton::Types::MenuButtonCommands","name":"MenuButtonCommands","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/menu_button.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a menu button, which opens the bot's list of commands.","summary":"<p>Represents a menu button, which opens the bot's list of commands.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/menu_button.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/menu_button.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the button, must be \"commands\".","summary":"<p>Type of the button, must be &quot;commands&quot;.</p>","abstract":false,"location":{"filename":"src/types/menu_button.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the button, must be \"commands\".","summary":"<p>Type of the button, must be &quot;commands&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/menu_button.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MenuButtonDefault","path":"Hamilton/Types/MenuButtonDefault.html","kind":"class","full_name":"Hamilton::Types::MenuButtonDefault","name":"MenuButtonDefault","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/menu_button.cr","line_number":32,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes that no specific value for the menu button was set.","summary":"<p>Describes that no specific value for the menu button was set.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/menu_button.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/menu_button.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the button, must be \"default\".","summary":"<p>Type of the button, must be &quot;default&quot;.</p>","abstract":false,"location":{"filename":"src/types/menu_button.cr","line_number":37,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the button, must be \"default\".","summary":"<p>Type of the button, must be &quot;default&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/menu_button.cr","line_number":37,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MenuButtonWebApp","path":"Hamilton/Types/MenuButtonWebApp.html","kind":"class","full_name":"Hamilton::Types::MenuButtonWebApp","name":"MenuButtonWebApp","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/menu_button.cr","line_number":16,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a menu button, which launches a Web App.","summary":"<p>Represents a menu button, which launches a Web App.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/menu_button.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/menu_button.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"text:String-instance-method","name":"text","doc":"Text on the button.","summary":"<p>Text on the button.</p>","abstract":false,"location":{"filename":"src/types/menu_button.cr","line_number":24,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"Text on the button.","summary":"<p>Text on the button.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/menu_button.cr","line_number":24,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the button, must be \"web_app\".","summary":"<p>Type of the button, must be &quot;web_app&quot;.</p>","abstract":false,"location":{"filename":"src/types/menu_button.cr","line_number":21,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the button, must be \"web_app\".","summary":"<p>Type of the button, must be &quot;web_app&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/menu_button.cr","line_number":21,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"web_app:Hamilton::Types::WebAppInfo-instance-method","name":"web_app","doc":"Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Alternatively, a `t.me` link to a Web App of the bot can be specified in the object instead of the Web App's URL, in which case the Web App will be opened as if the user pressed the link.","summary":"<p>Description of the Web App that will be launched when the user presses the button.</p>","abstract":false,"location":{"filename":"src/types/menu_button.cr","line_number":27,"url":null},"def":{"name":"web_app","return_type":"Hamilton::Types::WebAppInfo","visibility":"Public","body":"@web_app"},"external_var":false},{"html_id":"web_app=(web_app:Hamilton::Types::WebAppInfo)-instance-method","name":"web_app=","doc":"Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Alternatively, a `t.me` link to a Web App of the bot can be specified in the object instead of the Web App's URL, in which case the Web App will be opened as if the user pressed the link.","summary":"<p>Description of the Web App that will be launched when the user presses the button.</p>","abstract":false,"args":[{"name":"web_app","external_name":"web_app","restriction":"Hamilton::Types::WebAppInfo"}],"args_string":"(web_app : Hamilton::Types::WebAppInfo)","args_html":"(web_app : <a href=\"../../Hamilton/Types/WebAppInfo.html\">Hamilton::Types::WebAppInfo</a>)","location":{"filename":"src/types/menu_button.cr","line_number":27,"url":null},"def":{"name":"web_app=","args":[{"name":"web_app","external_name":"web_app","restriction":"Hamilton::Types::WebAppInfo"}],"visibility":"Public","body":"@web_app = web_app"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Message","path":"Hamilton/Types/Message.html","kind":"class","full_name":"Hamilton::Types::Message","name":"Message","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/message.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a message.","summary":"<p>This object represents a message.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/message.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/message.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"animation:Hamilton::Types::Animation|Nil-instance-method","name":"animation","doc":"Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set.","summary":"<p>Message is an animation, information about the animation.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":104,"url":null},"def":{"name":"animation","return_type":"Hamilton::Types::Animation | Nil","visibility":"Public","body":"@animation"},"external_var":false},{"html_id":"animation=(animation:Hamilton::Types::Animation|Nil)-instance-method","name":"animation=","doc":"Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set.","summary":"<p>Message is an animation, information about the animation.</p>","abstract":false,"args":[{"name":"animation","external_name":"animation","restriction":"Hamilton::Types::Animation | Nil"}],"args_string":"(animation : Hamilton::Types::Animation | Nil)","args_html":"(animation : <a href=\"../../Hamilton/Types/Animation.html\">Hamilton::Types::Animation</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":104,"url":null},"def":{"name":"animation=","args":[{"name":"animation","external_name":"animation","restriction":"Hamilton::Types::Animation | Nil"}],"visibility":"Public","body":"@animation = animation"},"external_var":false},{"html_id":"audio:Hamilton::Types::Audio|Nil-instance-method","name":"audio","doc":"Message is an audio file, information about the file.","summary":"<p>Message is an audio file, information about the file.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":107,"url":null},"def":{"name":"audio","return_type":"Hamilton::Types::Audio | Nil","visibility":"Public","body":"@audio"},"external_var":false},{"html_id":"audio=(audio:Hamilton::Types::Audio|Nil)-instance-method","name":"audio=","doc":"Message is an audio file, information about the file.","summary":"<p>Message is an audio file, information about the file.</p>","abstract":false,"args":[{"name":"audio","external_name":"audio","restriction":"Hamilton::Types::Audio | Nil"}],"args_string":"(audio : Hamilton::Types::Audio | Nil)","args_html":"(audio : <a href=\"../../Hamilton/Types/Audio.html\">Hamilton::Types::Audio</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":107,"url":null},"def":{"name":"audio=","args":[{"name":"audio","external_name":"audio","restriction":"Hamilton::Types::Audio | Nil"}],"visibility":"Public","body":"@audio = audio"},"external_var":false},{"html_id":"author_signature:String|Nil-instance-method","name":"author_signature","doc":"Signature of the post author for messages in channels, or the custom title of an anonymous group administrator.","summary":"<p>Signature of the post author for messages in channels, or the custom title of an anonymous group administrator.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":83,"url":null},"def":{"name":"author_signature","return_type":"String | Nil","visibility":"Public","body":"@author_signature"},"external_var":false},{"html_id":"author_signature=(author_signature:String|Nil)-instance-method","name":"author_signature=","doc":"Signature of the post author for messages in channels, or the custom title of an anonymous group administrator.","summary":"<p>Signature of the post author for messages in channels, or the custom title of an anonymous group administrator.</p>","abstract":false,"args":[{"name":"author_signature","external_name":"author_signature","restriction":"String | Nil"}],"args_string":"(author_signature : String | Nil)","args_html":"(author_signature : String | Nil)","location":{"filename":"src/types/message.cr","line_number":83,"url":null},"def":{"name":"author_signature=","args":[{"name":"author_signature","external_name":"author_signature","restriction":"String | Nil"}],"visibility":"Public","body":"@author_signature = author_signature"},"external_var":false},{"html_id":"boost_added:Hamilton::Types::ChatBoostAdded|Nil-instance-method","name":"boost_added","doc":"Service message: user boosted the chat.","summary":"<p>Service message: user boosted the chat.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":233,"url":null},"def":{"name":"boost_added","return_type":"Hamilton::Types::ChatBoostAdded | Nil","visibility":"Public","body":"@boost_added"},"external_var":false},{"html_id":"boost_added=(boost_added:Hamilton::Types::ChatBoostAdded|Nil)-instance-method","name":"boost_added=","doc":"Service message: user boosted the chat.","summary":"<p>Service message: user boosted the chat.</p>","abstract":false,"args":[{"name":"boost_added","external_name":"boost_added","restriction":"Hamilton::Types::ChatBoostAdded | Nil"}],"args_string":"(boost_added : Hamilton::Types::ChatBoostAdded | Nil)","args_html":"(boost_added : <a href=\"../../Hamilton/Types/ChatBoostAdded.html\">Hamilton::Types::ChatBoostAdded</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":233,"url":null},"def":{"name":"boost_added=","args":[{"name":"boost_added","external_name":"boost_added","restriction":"Hamilton::Types::ChatBoostAdded | Nil"}],"visibility":"Public","body":"@boost_added = boost_added"},"external_var":false},{"html_id":"business_connection_id:String|Nil-instance-method","name":"business_connection_id","doc":"Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.","summary":"<p>Unique identifier of the business connection from which the message was received.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":35,"url":null},"def":{"name":"business_connection_id","return_type":"String | Nil","visibility":"Public","body":"@business_connection_id"},"external_var":false},{"html_id":"business_connection_id=(business_connection_id:String|Nil)-instance-method","name":"business_connection_id=","doc":"Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.","summary":"<p>Unique identifier of the business connection from which the message was received.</p>","abstract":false,"args":[{"name":"business_connection_id","external_name":"business_connection_id","restriction":"String | Nil"}],"args_string":"(business_connection_id : String | Nil)","args_html":"(business_connection_id : String | Nil)","location":{"filename":"src/types/message.cr","line_number":35,"url":null},"def":{"name":"business_connection_id=","args":[{"name":"business_connection_id","external_name":"business_connection_id","restriction":"String | Nil"}],"visibility":"Public","body":"@business_connection_id = business_connection_id"},"external_var":false},{"html_id":"caption:String|Nil-instance-method","name":"caption","doc":"Caption for the animation, audio, document, paid media, photo, video or voice.","summary":"<p>Caption for the animation, audio, document, paid media, photo, video or voice.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":134,"url":null},"def":{"name":"caption","return_type":"String | Nil","visibility":"Public","body":"@caption"},"external_var":false},{"html_id":"caption=(caption:String|Nil)-instance-method","name":"caption=","doc":"Caption for the animation, audio, document, paid media, photo, video or voice.","summary":"<p>Caption for the animation, audio, document, paid media, photo, video or voice.</p>","abstract":false,"args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"args_string":"(caption : String | Nil)","args_html":"(caption : String | Nil)","location":{"filename":"src/types/message.cr","line_number":134,"url":null},"def":{"name":"caption=","args":[{"name":"caption","external_name":"caption","restriction":"String | Nil"}],"visibility":"Public","body":"@caption = caption"},"external_var":false},{"html_id":"caption_entities:Array(MessageEntity)|Nil-instance-method","name":"caption_entities","doc":"For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption.","summary":"<p>For messages with a caption, special entities like usernames, URLs, bot commands, etc.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":137,"url":null},"def":{"name":"caption_entities","return_type":"Array(MessageEntity) | Nil","visibility":"Public","body":"@caption_entities"},"external_var":false},{"html_id":"caption_entities=(caption_entities:Array(MessageEntity)|Nil)-instance-method","name":"caption_entities=","doc":"For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption.","summary":"<p>For messages with a caption, special entities like usernames, URLs, bot commands, etc.</p>","abstract":false,"args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(MessageEntity) | Nil"}],"args_string":"(caption_entities : Array(MessageEntity) | Nil)","args_html":"(caption_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">MessageEntity</a>) | Nil)","location":{"filename":"src/types/message.cr","line_number":137,"url":null},"def":{"name":"caption_entities=","args":[{"name":"caption_entities","external_name":"caption_entities","restriction":"Array(MessageEntity) | Nil"}],"visibility":"Public","body":"@caption_entities = caption_entities"},"external_var":false},{"html_id":"channel_chat_created:Bool|Nil-instance-method","name":"channel_chat_created","doc":"Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.","summary":"<p>Service message: the channel has been created.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":188,"url":null},"def":{"name":"channel_chat_created","return_type":"Bool | Nil","visibility":"Public","body":"@channel_chat_created"},"external_var":false},{"html_id":"channel_chat_created=(channel_chat_created:Bool|Nil)-instance-method","name":"channel_chat_created=","doc":"Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.","summary":"<p>Service message: the channel has been created.</p>","abstract":false,"args":[{"name":"channel_chat_created","external_name":"channel_chat_created","restriction":"Bool | Nil"}],"args_string":"(channel_chat_created : Bool | Nil)","args_html":"(channel_chat_created : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":188,"url":null},"def":{"name":"channel_chat_created=","args":[{"name":"channel_chat_created","external_name":"channel_chat_created","restriction":"Bool | Nil"}],"visibility":"Public","body":"@channel_chat_created = channel_chat_created"},"external_var":false},{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Chat the message belongs to.","summary":"<p>Chat the message belongs to.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":38,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Chat the message belongs to.","summary":"<p>Chat the message belongs to.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/message.cr","line_number":38,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"chat_background_set:Hamilton::Types::ChatBackground|Nil-instance-method","name":"chat_background_set","doc":"Service message: chat background set.","summary":"<p>Service message: chat background set.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":236,"url":null},"def":{"name":"chat_background_set","return_type":"Hamilton::Types::ChatBackground | Nil","visibility":"Public","body":"@chat_background_set"},"external_var":false},{"html_id":"chat_background_set=(chat_background_set:Hamilton::Types::ChatBackground|Nil)-instance-method","name":"chat_background_set=","doc":"Service message: chat background set.","summary":"<p>Service message: chat background set.</p>","abstract":false,"args":[{"name":"chat_background_set","external_name":"chat_background_set","restriction":"Hamilton::Types::ChatBackground | Nil"}],"args_string":"(chat_background_set : Hamilton::Types::ChatBackground | Nil)","args_html":"(chat_background_set : <a href=\"../../Hamilton/Types/ChatBackground.html\">Hamilton::Types::ChatBackground</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":236,"url":null},"def":{"name":"chat_background_set=","args":[{"name":"chat_background_set","external_name":"chat_background_set","restriction":"Hamilton::Types::ChatBackground | Nil"}],"visibility":"Public","body":"@chat_background_set = chat_background_set"},"external_var":false},{"html_id":"chat_shared:Hamilton::Types::ChatShared|Nil-instance-method","name":"chat_shared","doc":"Service message: a chat was shared with the bot.","summary":"<p>Service message: a chat was shared with the bot.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":215,"url":null},"def":{"name":"chat_shared","return_type":"Hamilton::Types::ChatShared | Nil","visibility":"Public","body":"@chat_shared"},"external_var":false},{"html_id":"chat_shared=(chat_shared:Hamilton::Types::ChatShared|Nil)-instance-method","name":"chat_shared=","doc":"Service message: a chat was shared with the bot.","summary":"<p>Service message: a chat was shared with the bot.</p>","abstract":false,"args":[{"name":"chat_shared","external_name":"chat_shared","restriction":"Hamilton::Types::ChatShared | Nil"}],"args_string":"(chat_shared : Hamilton::Types::ChatShared | Nil)","args_html":"(chat_shared : <a href=\"../../Hamilton/Types/ChatShared.html\">Hamilton::Types::ChatShared</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":215,"url":null},"def":{"name":"chat_shared=","args":[{"name":"chat_shared","external_name":"chat_shared","restriction":"Hamilton::Types::ChatShared | Nil"}],"visibility":"Public","body":"@chat_shared = chat_shared"},"external_var":false},{"html_id":"checklist:Hamilton::Types::Checklist|Nil-instance-method","name":"checklist","doc":"Message is a checklist.","summary":"<p>Message is a checklist.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":146,"url":null},"def":{"name":"checklist","return_type":"Hamilton::Types::Checklist | Nil","visibility":"Public","body":"@checklist"},"external_var":false},{"html_id":"checklist=(checklist:Hamilton::Types::Checklist|Nil)-instance-method","name":"checklist=","doc":"Message is a checklist.","summary":"<p>Message is a checklist.</p>","abstract":false,"args":[{"name":"checklist","external_name":"checklist","restriction":"Hamilton::Types::Checklist | Nil"}],"args_string":"(checklist : Hamilton::Types::Checklist | Nil)","args_html":"(checklist : <a href=\"../../Hamilton/Types/Checklist.html\">Hamilton::Types::Checklist</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":146,"url":null},"def":{"name":"checklist=","args":[{"name":"checklist","external_name":"checklist","restriction":"Hamilton::Types::Checklist | Nil"}],"visibility":"Public","body":"@checklist = checklist"},"external_var":false},{"html_id":"checklist_tasks_added:Hamilton::Types::ChecklistTasksAdded|Nil-instance-method","name":"checklist_tasks_added","doc":"Service message: tasks were added to a checklist.","summary":"<p>Service message: tasks were added to a checklist.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":242,"url":null},"def":{"name":"checklist_tasks_added","return_type":"Hamilton::Types::ChecklistTasksAdded | Nil","visibility":"Public","body":"@checklist_tasks_added"},"external_var":false},{"html_id":"checklist_tasks_added=(checklist_tasks_added:Hamilton::Types::ChecklistTasksAdded|Nil)-instance-method","name":"checklist_tasks_added=","doc":"Service message: tasks were added to a checklist.","summary":"<p>Service message: tasks were added to a checklist.</p>","abstract":false,"args":[{"name":"checklist_tasks_added","external_name":"checklist_tasks_added","restriction":"Hamilton::Types::ChecklistTasksAdded | Nil"}],"args_string":"(checklist_tasks_added : Hamilton::Types::ChecklistTasksAdded | Nil)","args_html":"(checklist_tasks_added : <a href=\"../../Hamilton/Types/ChecklistTasksAdded.html\">Hamilton::Types::ChecklistTasksAdded</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":242,"url":null},"def":{"name":"checklist_tasks_added=","args":[{"name":"checklist_tasks_added","external_name":"checklist_tasks_added","restriction":"Hamilton::Types::ChecklistTasksAdded | Nil"}],"visibility":"Public","body":"@checklist_tasks_added = checklist_tasks_added"},"external_var":false},{"html_id":"checklist_tasks_done:Hamilton::Types::ChecklistTasksDone|Nil-instance-method","name":"checklist_tasks_done","doc":"Service message: some tasks in a checklist were marked as done or not done.","summary":"<p>Service message: some tasks in a checklist were marked as done or not done.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":239,"url":null},"def":{"name":"checklist_tasks_done","return_type":"Hamilton::Types::ChecklistTasksDone | Nil","visibility":"Public","body":"@checklist_tasks_done"},"external_var":false},{"html_id":"checklist_tasks_done=(checklist_tasks_done:Hamilton::Types::ChecklistTasksDone|Nil)-instance-method","name":"checklist_tasks_done=","doc":"Service message: some tasks in a checklist were marked as done or not done.","summary":"<p>Service message: some tasks in a checklist were marked as done or not done.</p>","abstract":false,"args":[{"name":"checklist_tasks_done","external_name":"checklist_tasks_done","restriction":"Hamilton::Types::ChecklistTasksDone | Nil"}],"args_string":"(checklist_tasks_done : Hamilton::Types::ChecklistTasksDone | Nil)","args_html":"(checklist_tasks_done : <a href=\"../../Hamilton/Types/ChecklistTasksDone.html\">Hamilton::Types::ChecklistTasksDone</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":239,"url":null},"def":{"name":"checklist_tasks_done=","args":[{"name":"checklist_tasks_done","external_name":"checklist_tasks_done","restriction":"Hamilton::Types::ChecklistTasksDone | Nil"}],"visibility":"Public","body":"@checklist_tasks_done = checklist_tasks_done"},"external_var":false},{"html_id":"contact:Hamilton::Types::Contact|Nil-instance-method","name":"contact","doc":"Message is a shared contact, information about the contact.","summary":"<p>Message is a shared contact, information about the contact.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":149,"url":null},"def":{"name":"contact","return_type":"Hamilton::Types::Contact | Nil","visibility":"Public","body":"@contact"},"external_var":false},{"html_id":"contact=(contact:Hamilton::Types::Contact|Nil)-instance-method","name":"contact=","doc":"Message is a shared contact, information about the contact.","summary":"<p>Message is a shared contact, information about the contact.</p>","abstract":false,"args":[{"name":"contact","external_name":"contact","restriction":"Hamilton::Types::Contact | Nil"}],"args_string":"(contact : Hamilton::Types::Contact | Nil)","args_html":"(contact : <a href=\"../../Hamilton/Types/Contact.html\">Hamilton::Types::Contact</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":149,"url":null},"def":{"name":"contact=","args":[{"name":"contact","external_name":"contact","restriction":"Hamilton::Types::Contact | Nil"}],"visibility":"Public","body":"@contact = contact"},"external_var":false},{"html_id":"date:Int32-instance-method","name":"date","doc":"Date the message was sent in Unix time. It is always a positive number, representing a valid date.","summary":"<p>Date the message was sent in Unix time.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":32,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date the message was sent in Unix time. It is always a positive number, representing a valid date.","summary":"<p>Date the message was sent in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/message.cr","line_number":32,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"delete_chat_photo:Bool|Nil-instance-method","name":"delete_chat_photo","doc":"Service message: the chat photo was deleted.","summary":"<p>Service message: the chat photo was deleted.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":179,"url":null},"def":{"name":"delete_chat_photo","return_type":"Bool | Nil","visibility":"Public","body":"@delete_chat_photo"},"external_var":false},{"html_id":"delete_chat_photo=(delete_chat_photo:Bool|Nil)-instance-method","name":"delete_chat_photo=","doc":"Service message: the chat photo was deleted.","summary":"<p>Service message: the chat photo was deleted.</p>","abstract":false,"args":[{"name":"delete_chat_photo","external_name":"delete_chat_photo","restriction":"Bool | Nil"}],"args_string":"(delete_chat_photo : Bool | Nil)","args_html":"(delete_chat_photo : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":179,"url":null},"def":{"name":"delete_chat_photo=","args":[{"name":"delete_chat_photo","external_name":"delete_chat_photo","restriction":"Bool | Nil"}],"visibility":"Public","body":"@delete_chat_photo = delete_chat_photo"},"external_var":false},{"html_id":"dice:Hamilton::Types::Dice|Nil-instance-method","name":"dice","doc":"Message is a dice with random value.","summary":"<p>Message is a dice with random value.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":152,"url":null},"def":{"name":"dice","return_type":"Hamilton::Types::Dice | Nil","visibility":"Public","body":"@dice"},"external_var":false},{"html_id":"dice=(dice:Hamilton::Types::Dice|Nil)-instance-method","name":"dice=","doc":"Message is a dice with random value.","summary":"<p>Message is a dice with random value.</p>","abstract":false,"args":[{"name":"dice","external_name":"dice","restriction":"Hamilton::Types::Dice | Nil"}],"args_string":"(dice : Hamilton::Types::Dice | Nil)","args_html":"(dice : <a href=\"../../Hamilton/Types/Dice.html\">Hamilton::Types::Dice</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":152,"url":null},"def":{"name":"dice=","args":[{"name":"dice","external_name":"dice","restriction":"Hamilton::Types::Dice | Nil"}],"visibility":"Public","body":"@dice = dice"},"external_var":false},{"html_id":"direct_message_price_changed:Hamilton::Types::DirectMessagePriceChanged|Nil-instance-method","name":"direct_message_price_changed","doc":"Service message: the price for paid messages in the corresponding direct messages chat of a channel has changed.","summary":"<p>Service message: the price for paid messages in the corresponding direct messages chat of a channel has changed.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":245,"url":null},"def":{"name":"direct_message_price_changed","return_type":"Hamilton::Types::DirectMessagePriceChanged | Nil","visibility":"Public","body":"@direct_message_price_changed"},"external_var":false},{"html_id":"direct_message_price_changed=(direct_message_price_changed:Hamilton::Types::DirectMessagePriceChanged|Nil)-instance-method","name":"direct_message_price_changed=","doc":"Service message: the price for paid messages in the corresponding direct messages chat of a channel has changed.","summary":"<p>Service message: the price for paid messages in the corresponding direct messages chat of a channel has changed.</p>","abstract":false,"args":[{"name":"direct_message_price_changed","external_name":"direct_message_price_changed","restriction":"Hamilton::Types::DirectMessagePriceChanged | Nil"}],"args_string":"(direct_message_price_changed : Hamilton::Types::DirectMessagePriceChanged | Nil)","args_html":"(direct_message_price_changed : <a href=\"../../Hamilton/Types/DirectMessagePriceChanged.html\">Hamilton::Types::DirectMessagePriceChanged</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":245,"url":null},"def":{"name":"direct_message_price_changed=","args":[{"name":"direct_message_price_changed","external_name":"direct_message_price_changed","restriction":"Hamilton::Types::DirectMessagePriceChanged | Nil"}],"visibility":"Public","body":"@direct_message_price_changed = direct_message_price_changed"},"external_var":false},{"html_id":"direct_messages_topic:Hamilton::Types::DirectMessagesTopic|Nil-instance-method","name":"direct_messages_topic","doc":"Information about the direct messages chat topic that contains the message.","summary":"<p>Information about the direct messages chat topic that contains the message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":17,"url":null},"def":{"name":"direct_messages_topic","return_type":"Hamilton::Types::DirectMessagesTopic | Nil","visibility":"Public","body":"@direct_messages_topic"},"external_var":false},{"html_id":"direct_messages_topic=(direct_messages_topic:Hamilton::Types::DirectMessagesTopic|Nil)-instance-method","name":"direct_messages_topic=","doc":"Information about the direct messages chat topic that contains the message.","summary":"<p>Information about the direct messages chat topic that contains the message.</p>","abstract":false,"args":[{"name":"direct_messages_topic","external_name":"direct_messages_topic","restriction":"Hamilton::Types::DirectMessagesTopic | Nil"}],"args_string":"(direct_messages_topic : Hamilton::Types::DirectMessagesTopic | Nil)","args_html":"(direct_messages_topic : <a href=\"../../Hamilton/Types/DirectMessagesTopic.html\">Hamilton::Types::DirectMessagesTopic</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":17,"url":null},"def":{"name":"direct_messages_topic=","args":[{"name":"direct_messages_topic","external_name":"direct_messages_topic","restriction":"Hamilton::Types::DirectMessagesTopic | Nil"}],"visibility":"Public","body":"@direct_messages_topic = direct_messages_topic"},"external_var":false},{"html_id":"document:Hamilton::Types::Document|Nil-instance-method","name":"document","doc":"Message is a general file, information about the file.","summary":"<p>Message is a general file, information about the file.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":110,"url":null},"def":{"name":"document","return_type":"Hamilton::Types::Document | Nil","visibility":"Public","body":"@document"},"external_var":false},{"html_id":"document=(document:Hamilton::Types::Document|Nil)-instance-method","name":"document=","doc":"Message is a general file, information about the file.","summary":"<p>Message is a general file, information about the file.</p>","abstract":false,"args":[{"name":"document","external_name":"document","restriction":"Hamilton::Types::Document | Nil"}],"args_string":"(document : Hamilton::Types::Document | Nil)","args_html":"(document : <a href=\"../../Hamilton/Types/Document.html\">Hamilton::Types::Document</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":110,"url":null},"def":{"name":"document=","args":[{"name":"document","external_name":"document","restriction":"Hamilton::Types::Document | Nil"}],"visibility":"Public","body":"@document = document"},"external_var":false},{"html_id":"edit_date:Int32|Nil-instance-method","name":"edit_date","doc":"Date the message was last edited in Unix time.","summary":"<p>Date the message was last edited in Unix time.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":68,"url":null},"def":{"name":"edit_date","return_type":"Int32 | Nil","visibility":"Public","body":"@edit_date"},"external_var":false},{"html_id":"edit_date=(edit_date:Int32|Nil)-instance-method","name":"edit_date=","doc":"Date the message was last edited in Unix time.","summary":"<p>Date the message was last edited in Unix time.</p>","abstract":false,"args":[{"name":"edit_date","external_name":"edit_date","restriction":"Int32 | Nil"}],"args_string":"(edit_date : Int32 | Nil)","args_html":"(edit_date : Int32 | Nil)","location":{"filename":"src/types/message.cr","line_number":68,"url":null},"def":{"name":"edit_date=","args":[{"name":"edit_date","external_name":"edit_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@edit_date = edit_date"},"external_var":false},{"html_id":"effect_id:String|Nil-instance-method","name":"effect_id","doc":"Unique identifier of the message effect added to the message.","summary":"<p>Unique identifier of the message effect added to the message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":101,"url":null},"def":{"name":"effect_id","return_type":"String | Nil","visibility":"Public","body":"@effect_id"},"external_var":false},{"html_id":"effect_id=(effect_id:String|Nil)-instance-method","name":"effect_id=","doc":"Unique identifier of the message effect added to the message.","summary":"<p>Unique identifier of the message effect added to the message.</p>","abstract":false,"args":[{"name":"effect_id","external_name":"effect_id","restriction":"String | Nil"}],"args_string":"(effect_id : String | Nil)","args_html":"(effect_id : String | Nil)","location":{"filename":"src/types/message.cr","line_number":101,"url":null},"def":{"name":"effect_id=","args":[{"name":"effect_id","external_name":"effect_id","restriction":"String | Nil"}],"visibility":"Public","body":"@effect_id = effect_id"},"external_var":false},{"html_id":"entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"entities","doc":"For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text.","summary":"<p>For text messages, special entities like usernames, URLs, bot commands, etc.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":92,"url":null},"def":{"name":"entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@entities"},"external_var":false},{"html_id":"entities=(entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"entities=","doc":"For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text.","summary":"<p>For text messages, special entities like usernames, URLs, bot commands, etc.</p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/message.cr","line_number":92,"url":null},"def":{"name":"entities=","args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@entities = entities"},"external_var":false},{"html_id":"external_reply:Hamilton::Types::ExternalReplyInfo|Nil-instance-method","name":"external_reply","doc":"Information about the message that is being replied to, which may come from another chat or forum topic.","summary":"<p>Information about the message that is being replied to, which may come from another chat or forum topic.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":53,"url":null},"def":{"name":"external_reply","return_type":"Hamilton::Types::ExternalReplyInfo | Nil","visibility":"Public","body":"@external_reply"},"external_var":false},{"html_id":"external_reply=(external_reply:Hamilton::Types::ExternalReplyInfo|Nil)-instance-method","name":"external_reply=","doc":"Information about the message that is being replied to, which may come from another chat or forum topic.","summary":"<p>Information about the message that is being replied to, which may come from another chat or forum topic.</p>","abstract":false,"args":[{"name":"external_reply","external_name":"external_reply","restriction":"Hamilton::Types::ExternalReplyInfo | Nil"}],"args_string":"(external_reply : Hamilton::Types::ExternalReplyInfo | Nil)","args_html":"(external_reply : <a href=\"../../Hamilton/Types/ExternalReplyInfo.html\">Hamilton::Types::ExternalReplyInfo</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":53,"url":null},"def":{"name":"external_reply=","args":[{"name":"external_reply","external_name":"external_reply","restriction":"Hamilton::Types::ExternalReplyInfo | Nil"}],"visibility":"Public","body":"@external_reply = external_reply"},"external_var":false},{"html_id":"forum_topic_closed:Hamilton::Types::ForumTopicClosed|Nil-instance-method","name":"forum_topic_closed","doc":"Service message: forum topic closed.","summary":"<p>Service message: forum topic closed.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":254,"url":null},"def":{"name":"forum_topic_closed","return_type":"Hamilton::Types::ForumTopicClosed | Nil","visibility":"Public","body":"@forum_topic_closed"},"external_var":false},{"html_id":"forum_topic_closed=(forum_topic_closed:Hamilton::Types::ForumTopicClosed|Nil)-instance-method","name":"forum_topic_closed=","doc":"Service message: forum topic closed.","summary":"<p>Service message: forum topic closed.</p>","abstract":false,"args":[{"name":"forum_topic_closed","external_name":"forum_topic_closed","restriction":"Hamilton::Types::ForumTopicClosed | Nil"}],"args_string":"(forum_topic_closed : Hamilton::Types::ForumTopicClosed | Nil)","args_html":"(forum_topic_closed : <a href=\"../../Hamilton/Types/ForumTopicClosed.html\">Hamilton::Types::ForumTopicClosed</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":254,"url":null},"def":{"name":"forum_topic_closed=","args":[{"name":"forum_topic_closed","external_name":"forum_topic_closed","restriction":"Hamilton::Types::ForumTopicClosed | Nil"}],"visibility":"Public","body":"@forum_topic_closed = forum_topic_closed"},"external_var":false},{"html_id":"forum_topic_created:Hamilton::Types::ForumTopicCreated|Nil-instance-method","name":"forum_topic_created","doc":"Service message: forum topic created.","summary":"<p>Service message: forum topic created.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":248,"url":null},"def":{"name":"forum_topic_created","return_type":"Hamilton::Types::ForumTopicCreated | Nil","visibility":"Public","body":"@forum_topic_created"},"external_var":false},{"html_id":"forum_topic_created=(forum_topic_created:Hamilton::Types::ForumTopicCreated|Nil)-instance-method","name":"forum_topic_created=","doc":"Service message: forum topic created.","summary":"<p>Service message: forum topic created.</p>","abstract":false,"args":[{"name":"forum_topic_created","external_name":"forum_topic_created","restriction":"Hamilton::Types::ForumTopicCreated | Nil"}],"args_string":"(forum_topic_created : Hamilton::Types::ForumTopicCreated | Nil)","args_html":"(forum_topic_created : <a href=\"../../Hamilton/Types/ForumTopicCreated.html\">Hamilton::Types::ForumTopicCreated</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":248,"url":null},"def":{"name":"forum_topic_created=","args":[{"name":"forum_topic_created","external_name":"forum_topic_created","restriction":"Hamilton::Types::ForumTopicCreated | Nil"}],"visibility":"Public","body":"@forum_topic_created = forum_topic_created"},"external_var":false},{"html_id":"forum_topic_edited:Hamilton::Types::ForumTopicEdited|Nil-instance-method","name":"forum_topic_edited","doc":"Service message: forum topic edited.","summary":"<p>Service message: forum topic edited.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":251,"url":null},"def":{"name":"forum_topic_edited","return_type":"Hamilton::Types::ForumTopicEdited | Nil","visibility":"Public","body":"@forum_topic_edited"},"external_var":false},{"html_id":"forum_topic_edited=(forum_topic_edited:Hamilton::Types::ForumTopicEdited|Nil)-instance-method","name":"forum_topic_edited=","doc":"Service message: forum topic edited.","summary":"<p>Service message: forum topic edited.</p>","abstract":false,"args":[{"name":"forum_topic_edited","external_name":"forum_topic_edited","restriction":"Hamilton::Types::ForumTopicEdited | Nil"}],"args_string":"(forum_topic_edited : Hamilton::Types::ForumTopicEdited | Nil)","args_html":"(forum_topic_edited : <a href=\"../../Hamilton/Types/ForumTopicEdited.html\">Hamilton::Types::ForumTopicEdited</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":251,"url":null},"def":{"name":"forum_topic_edited=","args":[{"name":"forum_topic_edited","external_name":"forum_topic_edited","restriction":"Hamilton::Types::ForumTopicEdited | Nil"}],"visibility":"Public","body":"@forum_topic_edited = forum_topic_edited"},"external_var":false},{"html_id":"forum_topic_reopened:Hamilton::Types::ForumTopicReopened|Nil-instance-method","name":"forum_topic_reopened","doc":"Service message: forum topic reopened.","summary":"<p>Service message: forum topic reopened.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":257,"url":null},"def":{"name":"forum_topic_reopened","return_type":"Hamilton::Types::ForumTopicReopened | Nil","visibility":"Public","body":"@forum_topic_reopened"},"external_var":false},{"html_id":"forum_topic_reopened=(forum_topic_reopened:Hamilton::Types::ForumTopicReopened|Nil)-instance-method","name":"forum_topic_reopened=","doc":"Service message: forum topic reopened.","summary":"<p>Service message: forum topic reopened.</p>","abstract":false,"args":[{"name":"forum_topic_reopened","external_name":"forum_topic_reopened","restriction":"Hamilton::Types::ForumTopicReopened | Nil"}],"args_string":"(forum_topic_reopened : Hamilton::Types::ForumTopicReopened | Nil)","args_html":"(forum_topic_reopened : <a href=\"../../Hamilton/Types/ForumTopicReopened.html\">Hamilton::Types::ForumTopicReopened</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":257,"url":null},"def":{"name":"forum_topic_reopened=","args":[{"name":"forum_topic_reopened","external_name":"forum_topic_reopened","restriction":"Hamilton::Types::ForumTopicReopened | Nil"}],"visibility":"Public","body":"@forum_topic_reopened = forum_topic_reopened"},"external_var":false},{"html_id":"forward_origin:Hamilton::Types::MessageOrigin|Nil-instance-method","name":"forward_origin","doc":"Information about the original message for forwarded messages.","summary":"<p>Information about the original message for forwarded messages.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":41,"url":null},"def":{"name":"forward_origin","return_type":"Hamilton::Types::MessageOrigin | Nil","visibility":"Public","body":"@forward_origin"},"external_var":false},{"html_id":"forward_origin=(forward_origin:Hamilton::Types::MessageOrigin|Nil)-instance-method","name":"forward_origin=","doc":"Information about the original message for forwarded messages.","summary":"<p>Information about the original message for forwarded messages.</p>","abstract":false,"args":[{"name":"forward_origin","external_name":"forward_origin","restriction":"Hamilton::Types::MessageOrigin | Nil"}],"args_string":"(forward_origin : Hamilton::Types::MessageOrigin | Nil)","args_html":"(forward_origin : <a href=\"../../Hamilton/Types/MessageOrigin.html\">Hamilton::Types::MessageOrigin</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":41,"url":null},"def":{"name":"forward_origin=","args":[{"name":"forward_origin","external_name":"forward_origin","restriction":"Hamilton::Types::MessageOrigin | Nil"}],"visibility":"Public","body":"@forward_origin = forward_origin"},"external_var":false},{"html_id":"from:Hamilton::Types::User|Nil-instance-method","name":"from","doc":"Sender of the message; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats.","summary":"<p>Sender of the message; may be empty for messages sent to channels.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":20,"url":null},"def":{"name":"from","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@from"},"external_var":false},{"html_id":"from=(from:Hamilton::Types::User|Nil)-instance-method","name":"from=","doc":"Sender of the message; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats.","summary":"<p>Sender of the message; may be empty for messages sent to channels.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(from : Hamilton::Types::User | Nil)","args_html":"(from : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":20,"url":null},"def":{"name":"from=","args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@from = from"},"external_var":false},{"html_id":"game:Hamilton::Types::Game|Nil-instance-method","name":"game","doc":"Message is a game, information about the game.","summary":"<p>Message is a game, information about the game.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":155,"url":null},"def":{"name":"game","return_type":"Hamilton::Types::Game | Nil","visibility":"Public","body":"@game"},"external_var":false},{"html_id":"game=(game:Hamilton::Types::Game|Nil)-instance-method","name":"game=","doc":"Message is a game, information about the game.","summary":"<p>Message is a game, information about the game.</p>","abstract":false,"args":[{"name":"game","external_name":"game","restriction":"Hamilton::Types::Game | Nil"}],"args_string":"(game : Hamilton::Types::Game | Nil)","args_html":"(game : <a href=\"../../Hamilton/Types/Game.html\">Hamilton::Types::Game</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":155,"url":null},"def":{"name":"game=","args":[{"name":"game","external_name":"game","restriction":"Hamilton::Types::Game | Nil"}],"visibility":"Public","body":"@game = game"},"external_var":false},{"html_id":"general_forum_topic_hidden:Hamilton::Types::GeneralForumTopicHidden|Nil-instance-method","name":"general_forum_topic_hidden","doc":"Service message: the 'General' forum topic hidden.","summary":"<p>Service message: the 'General' forum topic hidden.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":260,"url":null},"def":{"name":"general_forum_topic_hidden","return_type":"Hamilton::Types::GeneralForumTopicHidden | Nil","visibility":"Public","body":"@general_forum_topic_hidden"},"external_var":false},{"html_id":"general_forum_topic_hidden=(general_forum_topic_hidden:Hamilton::Types::GeneralForumTopicHidden|Nil)-instance-method","name":"general_forum_topic_hidden=","doc":"Service message: the 'General' forum topic hidden.","summary":"<p>Service message: the 'General' forum topic hidden.</p>","abstract":false,"args":[{"name":"general_forum_topic_hidden","external_name":"general_forum_topic_hidden","restriction":"Hamilton::Types::GeneralForumTopicHidden | Nil"}],"args_string":"(general_forum_topic_hidden : Hamilton::Types::GeneralForumTopicHidden | Nil)","args_html":"(general_forum_topic_hidden : <a href=\"../../Hamilton/Types/GeneralForumTopicHidden.html\">Hamilton::Types::GeneralForumTopicHidden</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":260,"url":null},"def":{"name":"general_forum_topic_hidden=","args":[{"name":"general_forum_topic_hidden","external_name":"general_forum_topic_hidden","restriction":"Hamilton::Types::GeneralForumTopicHidden | Nil"}],"visibility":"Public","body":"@general_forum_topic_hidden = general_forum_topic_hidden"},"external_var":false},{"html_id":"general_forum_topic_unhidden:Hamilton::Types::GeneralForumTopicUnhidden|Nil-instance-method","name":"general_forum_topic_unhidden","doc":"Service message: the 'General' forum topic unhidden.","summary":"<p>Service message: the 'General' forum topic unhidden.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":263,"url":null},"def":{"name":"general_forum_topic_unhidden","return_type":"Hamilton::Types::GeneralForumTopicUnhidden | Nil","visibility":"Public","body":"@general_forum_topic_unhidden"},"external_var":false},{"html_id":"general_forum_topic_unhidden=(general_forum_topic_unhidden:Hamilton::Types::GeneralForumTopicUnhidden|Nil)-instance-method","name":"general_forum_topic_unhidden=","doc":"Service message: the 'General' forum topic unhidden.","summary":"<p>Service message: the 'General' forum topic unhidden.</p>","abstract":false,"args":[{"name":"general_forum_topic_unhidden","external_name":"general_forum_topic_unhidden","restriction":"Hamilton::Types::GeneralForumTopicUnhidden | Nil"}],"args_string":"(general_forum_topic_unhidden : Hamilton::Types::GeneralForumTopicUnhidden | Nil)","args_html":"(general_forum_topic_unhidden : <a href=\"../../Hamilton/Types/GeneralForumTopicUnhidden.html\">Hamilton::Types::GeneralForumTopicUnhidden</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":263,"url":null},"def":{"name":"general_forum_topic_unhidden=","args":[{"name":"general_forum_topic_unhidden","external_name":"general_forum_topic_unhidden","restriction":"Hamilton::Types::GeneralForumTopicUnhidden | Nil"}],"visibility":"Public","body":"@general_forum_topic_unhidden = general_forum_topic_unhidden"},"external_var":false},{"html_id":"gift:Hamilton::Types::GiftInfo|Nil-instance-method","name":"gift","doc":"Service message: a regular gift was sent or received.","summary":"<p>Service message: a regular gift was sent or received.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":218,"url":null},"def":{"name":"gift","return_type":"Hamilton::Types::GiftInfo | Nil","visibility":"Public","body":"@gift"},"external_var":false},{"html_id":"gift=(gift:Hamilton::Types::GiftInfo|Nil)-instance-method","name":"gift=","doc":"Service message: a regular gift was sent or received.","summary":"<p>Service message: a regular gift was sent or received.</p>","abstract":false,"args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::GiftInfo | Nil"}],"args_string":"(gift : Hamilton::Types::GiftInfo | Nil)","args_html":"(gift : <a href=\"../../Hamilton/Types/GiftInfo.html\">Hamilton::Types::GiftInfo</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":218,"url":null},"def":{"name":"gift=","args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::GiftInfo | Nil"}],"visibility":"Public","body":"@gift = gift"},"external_var":false},{"html_id":"giveaway:Hamilton::Types::Giveaway|Nil-instance-method","name":"giveaway","doc":"The message is a scheduled giveaway message.","summary":"<p>The message is a scheduled giveaway message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":269,"url":null},"def":{"name":"giveaway","return_type":"Hamilton::Types::Giveaway | Nil","visibility":"Public","body":"@giveaway"},"external_var":false},{"html_id":"giveaway=(giveaway:Hamilton::Types::Giveaway|Nil)-instance-method","name":"giveaway=","doc":"The message is a scheduled giveaway message.","summary":"<p>The message is a scheduled giveaway message.</p>","abstract":false,"args":[{"name":"giveaway","external_name":"giveaway","restriction":"Hamilton::Types::Giveaway | Nil"}],"args_string":"(giveaway : Hamilton::Types::Giveaway | Nil)","args_html":"(giveaway : <a href=\"../../Hamilton/Types/Giveaway.html\">Hamilton::Types::Giveaway</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":269,"url":null},"def":{"name":"giveaway=","args":[{"name":"giveaway","external_name":"giveaway","restriction":"Hamilton::Types::Giveaway | Nil"}],"visibility":"Public","body":"@giveaway = giveaway"},"external_var":false},{"html_id":"giveaway_completed:Hamilton::Types::GiveawayCompleted|Nil-instance-method","name":"giveaway_completed","doc":"Service message: a giveaway without public winners was completed.","summary":"<p>Service message: a giveaway without public winners was completed.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":275,"url":null},"def":{"name":"giveaway_completed","return_type":"Hamilton::Types::GiveawayCompleted | Nil","visibility":"Public","body":"@giveaway_completed"},"external_var":false},{"html_id":"giveaway_completed=(giveaway_completed:Hamilton::Types::GiveawayCompleted|Nil)-instance-method","name":"giveaway_completed=","doc":"Service message: a giveaway without public winners was completed.","summary":"<p>Service message: a giveaway without public winners was completed.</p>","abstract":false,"args":[{"name":"giveaway_completed","external_name":"giveaway_completed","restriction":"Hamilton::Types::GiveawayCompleted | Nil"}],"args_string":"(giveaway_completed : Hamilton::Types::GiveawayCompleted | Nil)","args_html":"(giveaway_completed : <a href=\"../../Hamilton/Types/GiveawayCompleted.html\">Hamilton::Types::GiveawayCompleted</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":275,"url":null},"def":{"name":"giveaway_completed=","args":[{"name":"giveaway_completed","external_name":"giveaway_completed","restriction":"Hamilton::Types::GiveawayCompleted | Nil"}],"visibility":"Public","body":"@giveaway_completed = giveaway_completed"},"external_var":false},{"html_id":"giveaway_created:Hamilton::Types::GiveawayCreated|Nil-instance-method","name":"giveaway_created","doc":"Service message: a scheduled giveaway was created.","summary":"<p>Service message: a scheduled giveaway was created.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":266,"url":null},"def":{"name":"giveaway_created","return_type":"Hamilton::Types::GiveawayCreated | Nil","visibility":"Public","body":"@giveaway_created"},"external_var":false},{"html_id":"giveaway_created=(giveaway_created:Hamilton::Types::GiveawayCreated|Nil)-instance-method","name":"giveaway_created=","doc":"Service message: a scheduled giveaway was created.","summary":"<p>Service message: a scheduled giveaway was created.</p>","abstract":false,"args":[{"name":"giveaway_created","external_name":"giveaway_created","restriction":"Hamilton::Types::GiveawayCreated | Nil"}],"args_string":"(giveaway_created : Hamilton::Types::GiveawayCreated | Nil)","args_html":"(giveaway_created : <a href=\"../../Hamilton/Types/GiveawayCreated.html\">Hamilton::Types::GiveawayCreated</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":266,"url":null},"def":{"name":"giveaway_created=","args":[{"name":"giveaway_created","external_name":"giveaway_created","restriction":"Hamilton::Types::GiveawayCreated | Nil"}],"visibility":"Public","body":"@giveaway_created = giveaway_created"},"external_var":false},{"html_id":"giveaway_winners:Hamilton::Types::GiveawayWinners|Nil-instance-method","name":"giveaway_winners","doc":"A giveaway with public winners was completed.","summary":"<p>A giveaway with public winners was completed.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":272,"url":null},"def":{"name":"giveaway_winners","return_type":"Hamilton::Types::GiveawayWinners | Nil","visibility":"Public","body":"@giveaway_winners"},"external_var":false},{"html_id":"giveaway_winners=(giveaway_winners:Hamilton::Types::GiveawayWinners|Nil)-instance-method","name":"giveaway_winners=","doc":"A giveaway with public winners was completed.","summary":"<p>A giveaway with public winners was completed.</p>","abstract":false,"args":[{"name":"giveaway_winners","external_name":"giveaway_winners","restriction":"Hamilton::Types::GiveawayWinners | Nil"}],"args_string":"(giveaway_winners : Hamilton::Types::GiveawayWinners | Nil)","args_html":"(giveaway_winners : <a href=\"../../Hamilton/Types/GiveawayWinners.html\">Hamilton::Types::GiveawayWinners</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":272,"url":null},"def":{"name":"giveaway_winners=","args":[{"name":"giveaway_winners","external_name":"giveaway_winners","restriction":"Hamilton::Types::GiveawayWinners | Nil"}],"visibility":"Public","body":"@giveaway_winners = giveaway_winners"},"external_var":false},{"html_id":"group_chat_created:Bool|Nil-instance-method","name":"group_chat_created","doc":"Service message: the group has been created.","summary":"<p>Service message: the group has been created.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":182,"url":null},"def":{"name":"group_chat_created","return_type":"Bool | Nil","visibility":"Public","body":"@group_chat_created"},"external_var":false},{"html_id":"group_chat_created=(group_chat_created:Bool|Nil)-instance-method","name":"group_chat_created=","doc":"Service message: the group has been created.","summary":"<p>Service message: the group has been created.</p>","abstract":false,"args":[{"name":"group_chat_created","external_name":"group_chat_created","restriction":"Bool | Nil"}],"args_string":"(group_chat_created : Bool | Nil)","args_html":"(group_chat_created : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":182,"url":null},"def":{"name":"group_chat_created=","args":[{"name":"group_chat_created","external_name":"group_chat_created","restriction":"Bool | Nil"}],"visibility":"Public","body":"@group_chat_created = group_chat_created"},"external_var":false},{"html_id":"has_media_spoiler:Bool|Nil-instance-method","name":"has_media_spoiler","doc":"True, if the message media is covered by a spoiler animation.","summary":"<p>True, if the message media is covered by a spoiler animation.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":143,"url":null},"def":{"name":"has_media_spoiler","return_type":"Bool | Nil","visibility":"Public","body":"@has_media_spoiler"},"external_var":false},{"html_id":"has_media_spoiler=(has_media_spoiler:Bool|Nil)-instance-method","name":"has_media_spoiler=","doc":"True, if the message media is covered by a spoiler animation.","summary":"<p>True, if the message media is covered by a spoiler animation.</p>","abstract":false,"args":[{"name":"has_media_spoiler","external_name":"has_media_spoiler","restriction":"Bool | Nil"}],"args_string":"(has_media_spoiler : Bool | Nil)","args_html":"(has_media_spoiler : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":143,"url":null},"def":{"name":"has_media_spoiler=","args":[{"name":"has_media_spoiler","external_name":"has_media_spoiler","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_media_spoiler = has_media_spoiler"},"external_var":false},{"html_id":"has_protected_content:Bool|Nil-instance-method","name":"has_protected_content","doc":"True, if the message can't be forwarded.","summary":"<p>True, if the message can't be forwarded.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":71,"url":null},"def":{"name":"has_protected_content","return_type":"Bool | Nil","visibility":"Public","body":"@has_protected_content"},"external_var":false},{"html_id":"has_protected_content=(has_protected_content:Bool|Nil)-instance-method","name":"has_protected_content=","doc":"True, if the message can't be forwarded.","summary":"<p>True, if the message can't be forwarded.</p>","abstract":false,"args":[{"name":"has_protected_content","external_name":"has_protected_content","restriction":"Bool | Nil"}],"args_string":"(has_protected_content : Bool | Nil)","args_html":"(has_protected_content : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":71,"url":null},"def":{"name":"has_protected_content=","args":[{"name":"has_protected_content","external_name":"has_protected_content","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_protected_content = has_protected_content"},"external_var":false},{"html_id":"invoice:Hamilton::Types::Invoice|Nil-instance-method","name":"invoice","doc":"Message is an invoice for a payment, information about the invoice.","summary":"<p>Message is an invoice for a payment, information about the invoice.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":203,"url":null},"def":{"name":"invoice","return_type":"Hamilton::Types::Invoice | Nil","visibility":"Public","body":"@invoice"},"external_var":false},{"html_id":"invoice=(invoice:Hamilton::Types::Invoice|Nil)-instance-method","name":"invoice=","doc":"Message is an invoice for a payment, information about the invoice.","summary":"<p>Message is an invoice for a payment, information about the invoice.</p>","abstract":false,"args":[{"name":"invoice","external_name":"invoice","restriction":"Hamilton::Types::Invoice | Nil"}],"args_string":"(invoice : Hamilton::Types::Invoice | Nil)","args_html":"(invoice : <a href=\"../../Hamilton/Types/Invoice.html\">Hamilton::Types::Invoice</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":203,"url":null},"def":{"name":"invoice=","args":[{"name":"invoice","external_name":"invoice","restriction":"Hamilton::Types::Invoice | Nil"}],"visibility":"Public","body":"@invoice = invoice"},"external_var":false},{"html_id":"is_automatic_forward:Bool|Nil-instance-method","name":"is_automatic_forward","doc":"True, if the message is a channel post that was automatically forwarded to the connected discussion group.","summary":"<p>True, if the message is a channel post that was automatically forwarded to the connected discussion group.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":47,"url":null},"def":{"name":"is_automatic_forward","return_type":"Bool | Nil","visibility":"Public","body":"@is_automatic_forward"},"external_var":false},{"html_id":"is_automatic_forward=(is_automatic_forward:Bool|Nil)-instance-method","name":"is_automatic_forward=","doc":"True, if the message is a channel post that was automatically forwarded to the connected discussion group.","summary":"<p>True, if the message is a channel post that was automatically forwarded to the connected discussion group.</p>","abstract":false,"args":[{"name":"is_automatic_forward","external_name":"is_automatic_forward","restriction":"Bool | Nil"}],"args_string":"(is_automatic_forward : Bool | Nil)","args_html":"(is_automatic_forward : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":47,"url":null},"def":{"name":"is_automatic_forward=","args":[{"name":"is_automatic_forward","external_name":"is_automatic_forward","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_automatic_forward = is_automatic_forward"},"external_var":false},{"html_id":"is_from_offline:Bool|Nil-instance-method","name":"is_from_offline","doc":"True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message.","summary":"<p>True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":74,"url":null},"def":{"name":"is_from_offline","return_type":"Bool | Nil","visibility":"Public","body":"@is_from_offline"},"external_var":false},{"html_id":"is_from_offline=(is_from_offline:Bool|Nil)-instance-method","name":"is_from_offline=","doc":"True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message.","summary":"<p>True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message.</p>","abstract":false,"args":[{"name":"is_from_offline","external_name":"is_from_offline","restriction":"Bool | Nil"}],"args_string":"(is_from_offline : Bool | Nil)","args_html":"(is_from_offline : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":74,"url":null},"def":{"name":"is_from_offline=","args":[{"name":"is_from_offline","external_name":"is_from_offline","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_from_offline = is_from_offline"},"external_var":false},{"html_id":"is_paid_post:Bool|Nil-instance-method","name":"is_paid_post","doc":"True, if the message is a paid post. Note that such posts must not be deleted for 24 hours to receive the payment and can't be edited.","summary":"<p>True, if the message is a paid post.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":77,"url":null},"def":{"name":"is_paid_post","return_type":"Bool | Nil","visibility":"Public","body":"@is_paid_post"},"external_var":false},{"html_id":"is_paid_post=(is_paid_post:Bool|Nil)-instance-method","name":"is_paid_post=","doc":"True, if the message is a paid post. Note that such posts must not be deleted for 24 hours to receive the payment and can't be edited.","summary":"<p>True, if the message is a paid post.</p>","abstract":false,"args":[{"name":"is_paid_post","external_name":"is_paid_post","restriction":"Bool | Nil"}],"args_string":"(is_paid_post : Bool | Nil)","args_html":"(is_paid_post : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":77,"url":null},"def":{"name":"is_paid_post=","args":[{"name":"is_paid_post","external_name":"is_paid_post","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_paid_post = is_paid_post"},"external_var":false},{"html_id":"is_topic_message:Bool|Nil-instance-method","name":"is_topic_message","doc":"True, if the message is sent to a forum topic.","summary":"<p>True, if the message is sent to a forum topic.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":44,"url":null},"def":{"name":"is_topic_message","return_type":"Bool | Nil","visibility":"Public","body":"@is_topic_message"},"external_var":false},{"html_id":"is_topic_message=(is_topic_message:Bool|Nil)-instance-method","name":"is_topic_message=","doc":"True, if the message is sent to a forum topic.","summary":"<p>True, if the message is sent to a forum topic.</p>","abstract":false,"args":[{"name":"is_topic_message","external_name":"is_topic_message","restriction":"Bool | Nil"}],"args_string":"(is_topic_message : Bool | Nil)","args_html":"(is_topic_message : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":44,"url":null},"def":{"name":"is_topic_message=","args":[{"name":"is_topic_message","external_name":"is_topic_message","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_topic_message = is_topic_message"},"external_var":false},{"html_id":"left_chat_member:Hamilton::Types::User|Nil-instance-method","name":"left_chat_member","doc":"A member was removed from the group, information about them (this member may be the bot itself).","summary":"<p>A member was removed from the group, information about them (this member may be the bot itself).</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":170,"url":null},"def":{"name":"left_chat_member","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@left_chat_member"},"external_var":false},{"html_id":"left_chat_member=(left_chat_member:Hamilton::Types::User|Nil)-instance-method","name":"left_chat_member=","doc":"A member was removed from the group, information about them (this member may be the bot itself).","summary":"<p>A member was removed from the group, information about them (this member may be the bot itself).</p>","abstract":false,"args":[{"name":"left_chat_member","external_name":"left_chat_member","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(left_chat_member : Hamilton::Types::User | Nil)","args_html":"(left_chat_member : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":170,"url":null},"def":{"name":"left_chat_member=","args":[{"name":"left_chat_member","external_name":"left_chat_member","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@left_chat_member = left_chat_member"},"external_var":false},{"html_id":"link_preview_options:Hamilton::Types::LinkPreviewOptions|Nil-instance-method","name":"link_preview_options","doc":"Options used for link preview generation for the message, if it is a text message and link preview options were changed.","summary":"<p>Options used for link preview generation for the message, if it is a text message and link preview options were changed.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":95,"url":null},"def":{"name":"link_preview_options","return_type":"Hamilton::Types::LinkPreviewOptions | Nil","visibility":"Public","body":"@link_preview_options"},"external_var":false},{"html_id":"link_preview_options=(link_preview_options:Hamilton::Types::LinkPreviewOptions|Nil)-instance-method","name":"link_preview_options=","doc":"Options used for link preview generation for the message, if it is a text message and link preview options were changed.","summary":"<p>Options used for link preview generation for the message, if it is a text message and link preview options were changed.</p>","abstract":false,"args":[{"name":"link_preview_options","external_name":"link_preview_options","restriction":"Hamilton::Types::LinkPreviewOptions | Nil"}],"args_string":"(link_preview_options : Hamilton::Types::LinkPreviewOptions | Nil)","args_html":"(link_preview_options : <a href=\"../../Hamilton/Types/LinkPreviewOptions.html\">Hamilton::Types::LinkPreviewOptions</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":95,"url":null},"def":{"name":"link_preview_options=","args":[{"name":"link_preview_options","external_name":"link_preview_options","restriction":"Hamilton::Types::LinkPreviewOptions | Nil"}],"visibility":"Public","body":"@link_preview_options = link_preview_options"},"external_var":false},{"html_id":"location:Hamilton::Types::Location|Nil-instance-method","name":"location","doc":"Message is a shared location, information about the location.","summary":"<p>Message is a shared location, information about the location.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":164,"url":null},"def":{"name":"location","return_type":"Hamilton::Types::Location | Nil","visibility":"Public","body":"@location"},"external_var":false},{"html_id":"location=(location:Hamilton::Types::Location|Nil)-instance-method","name":"location=","doc":"Message is a shared location, information about the location.","summary":"<p>Message is a shared location, information about the location.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"args_string":"(location : Hamilton::Types::Location | Nil)","args_html":"(location : <a href=\"../../Hamilton/Types/Location.html\">Hamilton::Types::Location</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":164,"url":null},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location | Nil"}],"visibility":"Public","body":"@location = location"},"external_var":false},{"html_id":"media_group_id:String|Nil-instance-method","name":"media_group_id","doc":"The unique identifier of a media message group this message belongs to.","summary":"<p>The unique identifier of a media message group this message belongs to.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":80,"url":null},"def":{"name":"media_group_id","return_type":"String | Nil","visibility":"Public","body":"@media_group_id"},"external_var":false},{"html_id":"media_group_id=(media_group_id:String|Nil)-instance-method","name":"media_group_id=","doc":"The unique identifier of a media message group this message belongs to.","summary":"<p>The unique identifier of a media message group this message belongs to.</p>","abstract":false,"args":[{"name":"media_group_id","external_name":"media_group_id","restriction":"String | Nil"}],"args_string":"(media_group_id : String | Nil)","args_html":"(media_group_id : String | Nil)","location":{"filename":"src/types/message.cr","line_number":80,"url":null},"def":{"name":"media_group_id=","args":[{"name":"media_group_id","external_name":"media_group_id","restriction":"String | Nil"}],"visibility":"Public","body":"@media_group_id = media_group_id"},"external_var":false},{"html_id":"message_auto_delete_timer_changed:Hamilton::Types::MessageAutoDeleteTimerChanged|Nil-instance-method","name":"message_auto_delete_timer_changed","doc":"Service message: auto-delete timer settings changed in the chat.","summary":"<p>Service message: auto-delete timer settings changed in the chat.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":191,"url":null},"def":{"name":"message_auto_delete_timer_changed","return_type":"Hamilton::Types::MessageAutoDeleteTimerChanged | Nil","visibility":"Public","body":"@message_auto_delete_timer_changed"},"external_var":false},{"html_id":"message_auto_delete_timer_changed=(message_auto_delete_timer_changed:Hamilton::Types::MessageAutoDeleteTimerChanged|Nil)-instance-method","name":"message_auto_delete_timer_changed=","doc":"Service message: auto-delete timer settings changed in the chat.","summary":"<p>Service message: auto-delete timer settings changed in the chat.</p>","abstract":false,"args":[{"name":"message_auto_delete_timer_changed","external_name":"message_auto_delete_timer_changed","restriction":"Hamilton::Types::MessageAutoDeleteTimerChanged | Nil"}],"args_string":"(message_auto_delete_timer_changed : Hamilton::Types::MessageAutoDeleteTimerChanged | Nil)","args_html":"(message_auto_delete_timer_changed : <a href=\"../../Hamilton/Types/MessageAutoDeleteTimerChanged.html\">Hamilton::Types::MessageAutoDeleteTimerChanged</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":191,"url":null},"def":{"name":"message_auto_delete_timer_changed=","args":[{"name":"message_auto_delete_timer_changed","external_name":"message_auto_delete_timer_changed","restriction":"Hamilton::Types::MessageAutoDeleteTimerChanged | Nil"}],"visibility":"Public","body":"@message_auto_delete_timer_changed = message_auto_delete_timer_changed"},"external_var":false},{"html_id":"message_id:Int32-instance-method","name":"message_id","doc":"Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent.","summary":"<p>Unique message identifier inside this chat.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":11,"url":null},"def":{"name":"message_id","return_type":"Int32","visibility":"Public","body":"@message_id"},"external_var":false},{"html_id":"message_id=(message_id:Int32)-instance-method","name":"message_id=","doc":"Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent.","summary":"<p>Unique message identifier inside this chat.</p>","abstract":false,"args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"args_string":"(message_id : Int32)","args_html":"(message_id : Int32)","location":{"filename":"src/types/message.cr","line_number":11,"url":null},"def":{"name":"message_id=","args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"visibility":"Public","body":"@message_id = message_id"},"external_var":false},{"html_id":"message_thread_id:Int32|Nil-instance-method","name":"message_thread_id","doc":"Unique identifier of a message thread to which the message belongs; for supergroups only.","summary":"<p>Unique identifier of a message thread to which the message belongs; for supergroups only.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":14,"url":null},"def":{"name":"message_thread_id","return_type":"Int32 | Nil","visibility":"Public","body":"@message_thread_id"},"external_var":false},{"html_id":"message_thread_id=(message_thread_id:Int32|Nil)-instance-method","name":"message_thread_id=","doc":"Unique identifier of a message thread to which the message belongs; for supergroups only.","summary":"<p>Unique identifier of a message thread to which the message belongs; for supergroups only.</p>","abstract":false,"args":[{"name":"message_thread_id","external_name":"message_thread_id","restriction":"Int32 | Nil"}],"args_string":"(message_thread_id : Int32 | Nil)","args_html":"(message_thread_id : Int32 | Nil)","location":{"filename":"src/types/message.cr","line_number":14,"url":null},"def":{"name":"message_thread_id=","args":[{"name":"message_thread_id","external_name":"message_thread_id","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@message_thread_id = message_thread_id"},"external_var":false},{"html_id":"migrate_from_chat_id:Int64|Nil-instance-method","name":"migrate_from_chat_id","doc":"The supergroup has been migrated from a group with the specified identifier.","summary":"<p>The supergroup has been migrated from a group with the specified identifier.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":197,"url":null},"def":{"name":"migrate_from_chat_id","return_type":"Int64 | Nil","visibility":"Public","body":"@migrate_from_chat_id"},"external_var":false},{"html_id":"migrate_from_chat_id=(migrate_from_chat_id:Int64|Nil)-instance-method","name":"migrate_from_chat_id=","doc":"The supergroup has been migrated from a group with the specified identifier.","summary":"<p>The supergroup has been migrated from a group with the specified identifier.</p>","abstract":false,"args":[{"name":"migrate_from_chat_id","external_name":"migrate_from_chat_id","restriction":"Int64 | Nil"}],"args_string":"(migrate_from_chat_id : Int64 | Nil)","args_html":"(migrate_from_chat_id : Int64 | Nil)","location":{"filename":"src/types/message.cr","line_number":197,"url":null},"def":{"name":"migrate_from_chat_id=","args":[{"name":"migrate_from_chat_id","external_name":"migrate_from_chat_id","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@migrate_from_chat_id = migrate_from_chat_id"},"external_var":false},{"html_id":"migrate_to_chat_id:Int64|Nil-instance-method","name":"migrate_to_chat_id","doc":"The group has been migrated to a supergroup with the specified identifier.","summary":"<p>The group has been migrated to a supergroup with the specified identifier.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":194,"url":null},"def":{"name":"migrate_to_chat_id","return_type":"Int64 | Nil","visibility":"Public","body":"@migrate_to_chat_id"},"external_var":false},{"html_id":"migrate_to_chat_id=(migrate_to_chat_id:Int64|Nil)-instance-method","name":"migrate_to_chat_id=","doc":"The group has been migrated to a supergroup with the specified identifier.","summary":"<p>The group has been migrated to a supergroup with the specified identifier.</p>","abstract":false,"args":[{"name":"migrate_to_chat_id","external_name":"migrate_to_chat_id","restriction":"Int64 | Nil"}],"args_string":"(migrate_to_chat_id : Int64 | Nil)","args_html":"(migrate_to_chat_id : Int64 | Nil)","location":{"filename":"src/types/message.cr","line_number":194,"url":null},"def":{"name":"migrate_to_chat_id=","args":[{"name":"migrate_to_chat_id","external_name":"migrate_to_chat_id","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@migrate_to_chat_id = migrate_to_chat_id"},"external_var":false},{"html_id":"new_chat_members:Array(Hamilton::Types::User)|Nil-instance-method","name":"new_chat_members","doc":"New members that were added to the group or supergroup and information about them (the bot itself may be one of these members).","summary":"<p>New members that were added to the group or supergroup and information about them (the bot itself may be one of these members).</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":167,"url":null},"def":{"name":"new_chat_members","return_type":"Array(Hamilton::Types::User) | Nil","visibility":"Public","body":"@new_chat_members"},"external_var":false},{"html_id":"new_chat_members=(new_chat_members:Array(Hamilton::Types::User)|Nil)-instance-method","name":"new_chat_members=","doc":"New members that were added to the group or supergroup and information about them (the bot itself may be one of these members).","summary":"<p>New members that were added to the group or supergroup and information about them (the bot itself may be one of these members).</p>","abstract":false,"args":[{"name":"new_chat_members","external_name":"new_chat_members","restriction":"Array(Hamilton::Types::User) | Nil"}],"args_string":"(new_chat_members : Array(Hamilton::Types::User) | Nil)","args_html":"(new_chat_members : Array(<a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>) | Nil)","location":{"filename":"src/types/message.cr","line_number":167,"url":null},"def":{"name":"new_chat_members=","args":[{"name":"new_chat_members","external_name":"new_chat_members","restriction":"Array(Hamilton::Types::User) | Nil"}],"visibility":"Public","body":"@new_chat_members = new_chat_members"},"external_var":false},{"html_id":"new_chat_photo:Array(Hamilton::Types::PhotoSize)|Nil-instance-method","name":"new_chat_photo","doc":"A chat photo was change to this value.","summary":"<p>A chat photo was change to this value.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":176,"url":null},"def":{"name":"new_chat_photo","return_type":"Array(Hamilton::Types::PhotoSize) | Nil","visibility":"Public","body":"@new_chat_photo"},"external_var":false},{"html_id":"new_chat_photo=(new_chat_photo:Array(Hamilton::Types::PhotoSize)|Nil)-instance-method","name":"new_chat_photo=","doc":"A chat photo was change to this value.","summary":"<p>A chat photo was change to this value.</p>","abstract":false,"args":[{"name":"new_chat_photo","external_name":"new_chat_photo","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"args_string":"(new_chat_photo : Array(Hamilton::Types::PhotoSize) | Nil)","args_html":"(new_chat_photo : Array(<a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a>) | Nil)","location":{"filename":"src/types/message.cr","line_number":176,"url":null},"def":{"name":"new_chat_photo=","args":[{"name":"new_chat_photo","external_name":"new_chat_photo","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"visibility":"Public","body":"@new_chat_photo = new_chat_photo"},"external_var":false},{"html_id":"new_chat_title:String|Nil-instance-method","name":"new_chat_title","doc":"A chat title was changed to this value.","summary":"<p>A chat title was changed to this value.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":173,"url":null},"def":{"name":"new_chat_title","return_type":"String | Nil","visibility":"Public","body":"@new_chat_title"},"external_var":false},{"html_id":"new_chat_title=(new_chat_title:String|Nil)-instance-method","name":"new_chat_title=","doc":"A chat title was changed to this value.","summary":"<p>A chat title was changed to this value.</p>","abstract":false,"args":[{"name":"new_chat_title","external_name":"new_chat_title","restriction":"String | Nil"}],"args_string":"(new_chat_title : String | Nil)","args_html":"(new_chat_title : String | Nil)","location":{"filename":"src/types/message.cr","line_number":173,"url":null},"def":{"name":"new_chat_title=","args":[{"name":"new_chat_title","external_name":"new_chat_title","restriction":"String | Nil"}],"visibility":"Public","body":"@new_chat_title = new_chat_title"},"external_var":false},{"html_id":"paid_media:Hamilton::Types::PaidMediaInfo|Nil-instance-method","name":"paid_media","doc":"Message contains paid media; information about the paid media.","summary":"<p>Message contains paid media; information about the paid media.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":113,"url":null},"def":{"name":"paid_media","return_type":"Hamilton::Types::PaidMediaInfo | Nil","visibility":"Public","body":"@paid_media"},"external_var":false},{"html_id":"paid_media=(paid_media:Hamilton::Types::PaidMediaInfo|Nil)-instance-method","name":"paid_media=","doc":"Message contains paid media; information about the paid media.","summary":"<p>Message contains paid media; information about the paid media.</p>","abstract":false,"args":[{"name":"paid_media","external_name":"paid_media","restriction":"Hamilton::Types::PaidMediaInfo | Nil"}],"args_string":"(paid_media : Hamilton::Types::PaidMediaInfo | Nil)","args_html":"(paid_media : <a href=\"../../Hamilton/Types/PaidMediaInfo.html\">Hamilton::Types::PaidMediaInfo</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":113,"url":null},"def":{"name":"paid_media=","args":[{"name":"paid_media","external_name":"paid_media","restriction":"Hamilton::Types::PaidMediaInfo | Nil"}],"visibility":"Public","body":"@paid_media = paid_media"},"external_var":false},{"html_id":"paid_message_price_changed:Hamilton::Types::PaidMessagePriceChanged|Nil-instance-method","name":"paid_message_price_changed","doc":"Service message: the price for paid messages has changed in the chat.","summary":"<p>Service message: the price for paid messages has changed in the chat.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":278,"url":null},"def":{"name":"paid_message_price_changed","return_type":"Hamilton::Types::PaidMessagePriceChanged | Nil","visibility":"Public","body":"@paid_message_price_changed"},"external_var":false},{"html_id":"paid_message_price_changed=(paid_message_price_changed:Hamilton::Types::PaidMessagePriceChanged|Nil)-instance-method","name":"paid_message_price_changed=","doc":"Service message: the price for paid messages has changed in the chat.","summary":"<p>Service message: the price for paid messages has changed in the chat.</p>","abstract":false,"args":[{"name":"paid_message_price_changed","external_name":"paid_message_price_changed","restriction":"Hamilton::Types::PaidMessagePriceChanged | Nil"}],"args_string":"(paid_message_price_changed : Hamilton::Types::PaidMessagePriceChanged | Nil)","args_html":"(paid_message_price_changed : <a href=\"../../Hamilton/Types/PaidMessagePriceChanged.html\">Hamilton::Types::PaidMessagePriceChanged</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":278,"url":null},"def":{"name":"paid_message_price_changed=","args":[{"name":"paid_message_price_changed","external_name":"paid_message_price_changed","restriction":"Hamilton::Types::PaidMessagePriceChanged | Nil"}],"visibility":"Public","body":"@paid_message_price_changed = paid_message_price_changed"},"external_var":false},{"html_id":"paid_star_count:Int32|Nil-instance-method","name":"paid_star_count","doc":"The number of Telegram Stars that were paid by the sender of the message to send it.","summary":"<p>The number of Telegram Stars that were paid by the sender of the message to send it.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":86,"url":null},"def":{"name":"paid_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@paid_star_count"},"external_var":false},{"html_id":"paid_star_count=(paid_star_count:Int32|Nil)-instance-method","name":"paid_star_count=","doc":"The number of Telegram Stars that were paid by the sender of the message to send it.","summary":"<p>The number of Telegram Stars that were paid by the sender of the message to send it.</p>","abstract":false,"args":[{"name":"paid_star_count","external_name":"paid_star_count","restriction":"Int32 | Nil"}],"args_string":"(paid_star_count : Int32 | Nil)","args_html":"(paid_star_count : Int32 | Nil)","location":{"filename":"src/types/message.cr","line_number":86,"url":null},"def":{"name":"paid_star_count=","args":[{"name":"paid_star_count","external_name":"paid_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@paid_star_count = paid_star_count"},"external_var":false},{"html_id":"passport_data:Hamilton::Types::PassportData|Nil-instance-method","name":"passport_data","doc":"Telegram Passport data.","summary":"<p>Telegram Passport data.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":227,"url":null},"def":{"name":"passport_data","return_type":"Hamilton::Types::PassportData | Nil","visibility":"Public","body":"@passport_data"},"external_var":false},{"html_id":"passport_data=(passport_data:Hamilton::Types::PassportData|Nil)-instance-method","name":"passport_data=","doc":"Telegram Passport data.","summary":"<p>Telegram Passport data.</p>","abstract":false,"args":[{"name":"passport_data","external_name":"passport_data","restriction":"Hamilton::Types::PassportData | Nil"}],"args_string":"(passport_data : Hamilton::Types::PassportData | Nil)","args_html":"(passport_data : <a href=\"../../Hamilton/Types/PassportData.html\">Hamilton::Types::PassportData</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":227,"url":null},"def":{"name":"passport_data=","args":[{"name":"passport_data","external_name":"passport_data","restriction":"Hamilton::Types::PassportData | Nil"}],"visibility":"Public","body":"@passport_data = passport_data"},"external_var":false},{"html_id":"photo:Array(Hamilton::Types::PhotoSize)|Nil-instance-method","name":"photo","doc":"Message is a photo, available sizes of the photo.","summary":"<p>Message is a photo, available sizes of the photo.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":116,"url":null},"def":{"name":"photo","return_type":"Array(Hamilton::Types::PhotoSize) | Nil","visibility":"Public","body":"@photo"},"external_var":false},{"html_id":"photo=(photo:Array(Hamilton::Types::PhotoSize)|Nil)-instance-method","name":"photo=","doc":"Message is a photo, available sizes of the photo.","summary":"<p>Message is a photo, available sizes of the photo.</p>","abstract":false,"args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"args_string":"(photo : Array(Hamilton::Types::PhotoSize) | Nil)","args_html":"(photo : Array(<a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a>) | Nil)","location":{"filename":"src/types/message.cr","line_number":116,"url":null},"def":{"name":"photo=","args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"visibility":"Public","body":"@photo = photo"},"external_var":false},{"html_id":"pinned_message:Hamilton::Types::MaybeInaccessibleMessage|Nil-instance-method","name":"pinned_message","doc":"Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.","summary":"<p>Specified message was pinned.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":200,"url":null},"def":{"name":"pinned_message","return_type":"Hamilton::Types::MaybeInaccessibleMessage | Nil","visibility":"Public","body":"@pinned_message"},"external_var":false},{"html_id":"pinned_message=(pinned_message:Hamilton::Types::MaybeInaccessibleMessage|Nil)-instance-method","name":"pinned_message=","doc":"Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.","summary":"<p>Specified message was pinned.</p>","abstract":false,"args":[{"name":"pinned_message","external_name":"pinned_message","restriction":"Hamilton::Types::MaybeInaccessibleMessage | Nil"}],"args_string":"(pinned_message : Hamilton::Types::MaybeInaccessibleMessage | Nil)","args_html":"(pinned_message : <a href=\"../../Hamilton/Types/MaybeInaccessibleMessage.html\">Hamilton::Types::MaybeInaccessibleMessage</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":200,"url":null},"def":{"name":"pinned_message=","args":[{"name":"pinned_message","external_name":"pinned_message","restriction":"Hamilton::Types::MaybeInaccessibleMessage | Nil"}],"visibility":"Public","body":"@pinned_message = pinned_message"},"external_var":false},{"html_id":"poll:Hamilton::Types::Poll|Nil-instance-method","name":"poll","doc":"Message is a native poll, information about the poll.","summary":"<p>Message is a native poll, information about the poll.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":158,"url":null},"def":{"name":"poll","return_type":"Hamilton::Types::Poll | Nil","visibility":"Public","body":"@poll"},"external_var":false},{"html_id":"poll=(poll:Hamilton::Types::Poll|Nil)-instance-method","name":"poll=","doc":"Message is a native poll, information about the poll.","summary":"<p>Message is a native poll, information about the poll.</p>","abstract":false,"args":[{"name":"poll","external_name":"poll","restriction":"Hamilton::Types::Poll | Nil"}],"args_string":"(poll : Hamilton::Types::Poll | Nil)","args_html":"(poll : <a href=\"../../Hamilton/Types/Poll.html\">Hamilton::Types::Poll</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":158,"url":null},"def":{"name":"poll=","args":[{"name":"poll","external_name":"poll","restriction":"Hamilton::Types::Poll | Nil"}],"visibility":"Public","body":"@poll = poll"},"external_var":false},{"html_id":"proximity_alert_triggered:Hamilton::Types::ProximityAlertTriggered|Nil-instance-method","name":"proximity_alert_triggered","doc":"Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.","summary":"<p>Service message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":230,"url":null},"def":{"name":"proximity_alert_triggered","return_type":"Hamilton::Types::ProximityAlertTriggered | Nil","visibility":"Public","body":"@proximity_alert_triggered"},"external_var":false},{"html_id":"proximity_alert_triggered=(proximity_alert_triggered:Hamilton::Types::ProximityAlertTriggered|Nil)-instance-method","name":"proximity_alert_triggered=","doc":"Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.","summary":"<p>Service message.</p>","abstract":false,"args":[{"name":"proximity_alert_triggered","external_name":"proximity_alert_triggered","restriction":"Hamilton::Types::ProximityAlertTriggered | Nil"}],"args_string":"(proximity_alert_triggered : Hamilton::Types::ProximityAlertTriggered | Nil)","args_html":"(proximity_alert_triggered : <a href=\"../../Hamilton/Types/ProximityAlertTriggered.html\">Hamilton::Types::ProximityAlertTriggered</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":230,"url":null},"def":{"name":"proximity_alert_triggered=","args":[{"name":"proximity_alert_triggered","external_name":"proximity_alert_triggered","restriction":"Hamilton::Types::ProximityAlertTriggered | Nil"}],"visibility":"Public","body":"@proximity_alert_triggered = proximity_alert_triggered"},"external_var":false},{"html_id":"quote:Hamilton::Types::TextQuote|Nil-instance-method","name":"quote","doc":"For replies that quote part of the original message, the quoted part of the message.","summary":"<p>For replies that quote part of the original message, the quoted part of the message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":56,"url":null},"def":{"name":"quote","return_type":"Hamilton::Types::TextQuote | Nil","visibility":"Public","body":"@quote"},"external_var":false},{"html_id":"quote=(quote:Hamilton::Types::TextQuote|Nil)-instance-method","name":"quote=","doc":"For replies that quote part of the original message, the quoted part of the message.","summary":"<p>For replies that quote part of the original message, the quoted part of the message.</p>","abstract":false,"args":[{"name":"quote","external_name":"quote","restriction":"Hamilton::Types::TextQuote | Nil"}],"args_string":"(quote : Hamilton::Types::TextQuote | Nil)","args_html":"(quote : <a href=\"../../Hamilton/Types/TextQuote.html\">Hamilton::Types::TextQuote</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":56,"url":null},"def":{"name":"quote=","args":[{"name":"quote","external_name":"quote","restriction":"Hamilton::Types::TextQuote | Nil"}],"visibility":"Public","body":"@quote = quote"},"external_var":false},{"html_id":"refunded_payment:Hamilton::Types::RefundedPayment|Nil-instance-method","name":"refunded_payment","doc":"Message is a service message about a refunded payment, information about the payment.","summary":"<p>Message is a service message about a refunded payment, information about the payment.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":209,"url":null},"def":{"name":"refunded_payment","return_type":"Hamilton::Types::RefundedPayment | Nil","visibility":"Public","body":"@refunded_payment"},"external_var":false},{"html_id":"refunded_payment=(refunded_payment:Hamilton::Types::RefundedPayment|Nil)-instance-method","name":"refunded_payment=","doc":"Message is a service message about a refunded payment, information about the payment.","summary":"<p>Message is a service message about a refunded payment, information about the payment.</p>","abstract":false,"args":[{"name":"refunded_payment","external_name":"refunded_payment","restriction":"Hamilton::Types::RefundedPayment | Nil"}],"args_string":"(refunded_payment : Hamilton::Types::RefundedPayment | Nil)","args_html":"(refunded_payment : <a href=\"../../Hamilton/Types/RefundedPayment.html\">Hamilton::Types::RefundedPayment</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":209,"url":null},"def":{"name":"refunded_payment=","args":[{"name":"refunded_payment","external_name":"refunded_payment","restriction":"Hamilton::Types::RefundedPayment | Nil"}],"visibility":"Public","body":"@refunded_payment = refunded_payment"},"external_var":false},{"html_id":"reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil-instance-method","name":"reply_markup","doc":"Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":311,"url":null},"def":{"name":"reply_markup","return_type":"Hamilton::Types::InlineKeyboardMarkup | Nil","visibility":"Public","body":"@reply_markup"},"external_var":false},{"html_id":"reply_markup=(reply_markup:Hamilton::Types::InlineKeyboardMarkup|Nil)-instance-method","name":"reply_markup=","doc":"Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.","summary":"<p>Inline keyboard attached to the message.</p>","abstract":false,"args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"args_string":"(reply_markup : Hamilton::Types::InlineKeyboardMarkup | Nil)","args_html":"(reply_markup : <a href=\"../../Hamilton/Types/InlineKeyboardMarkup.html\">Hamilton::Types::InlineKeyboardMarkup</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":311,"url":null},"def":{"name":"reply_markup=","args":[{"name":"reply_markup","external_name":"reply_markup","restriction":"Hamilton::Types::InlineKeyboardMarkup | Nil"}],"visibility":"Public","body":"@reply_markup = reply_markup"},"external_var":false},{"html_id":"reply_to_checklist_task_id:Int32|Nil-instance-method","name":"reply_to_checklist_task_id","doc":"Identifier of the specific checklist task that is being replied to.","summary":"<p>Identifier of the specific checklist task that is being replied to.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":62,"url":null},"def":{"name":"reply_to_checklist_task_id","return_type":"Int32 | Nil","visibility":"Public","body":"@reply_to_checklist_task_id"},"external_var":false},{"html_id":"reply_to_checklist_task_id=(reply_to_checklist_task_id:Int32|Nil)-instance-method","name":"reply_to_checklist_task_id=","doc":"Identifier of the specific checklist task that is being replied to.","summary":"<p>Identifier of the specific checklist task that is being replied to.</p>","abstract":false,"args":[{"name":"reply_to_checklist_task_id","external_name":"reply_to_checklist_task_id","restriction":"Int32 | Nil"}],"args_string":"(reply_to_checklist_task_id : Int32 | Nil)","args_html":"(reply_to_checklist_task_id : Int32 | Nil)","location":{"filename":"src/types/message.cr","line_number":62,"url":null},"def":{"name":"reply_to_checklist_task_id=","args":[{"name":"reply_to_checklist_task_id","external_name":"reply_to_checklist_task_id","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@reply_to_checklist_task_id = reply_to_checklist_task_id"},"external_var":false},{"html_id":"reply_to_message:Hamilton::Types::Message|Nil-instance-method","name":"reply_to_message","doc":"For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.","summary":"<p>For replies in the same chat and message thread, the original message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":50,"url":null},"def":{"name":"reply_to_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@reply_to_message"},"external_var":false},{"html_id":"reply_to_message=(reply_to_message:Hamilton::Types::Message|Nil)-instance-method","name":"reply_to_message=","doc":"For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.","summary":"<p>For replies in the same chat and message thread, the original message.</p>","abstract":false,"args":[{"name":"reply_to_message","external_name":"reply_to_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(reply_to_message : Hamilton::Types::Message | Nil)","args_html":"(reply_to_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":50,"url":null},"def":{"name":"reply_to_message=","args":[{"name":"reply_to_message","external_name":"reply_to_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@reply_to_message = reply_to_message"},"external_var":false},{"html_id":"reply_to_story:Hamilton::Types::Story|Nil-instance-method","name":"reply_to_story","doc":"For replies to a story, the original story.","summary":"<p>For replies to a story, the original story.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":59,"url":null},"def":{"name":"reply_to_story","return_type":"Hamilton::Types::Story | Nil","visibility":"Public","body":"@reply_to_story"},"external_var":false},{"html_id":"reply_to_story=(reply_to_story:Hamilton::Types::Story|Nil)-instance-method","name":"reply_to_story=","doc":"For replies to a story, the original story.","summary":"<p>For replies to a story, the original story.</p>","abstract":false,"args":[{"name":"reply_to_story","external_name":"reply_to_story","restriction":"Hamilton::Types::Story | Nil"}],"args_string":"(reply_to_story : Hamilton::Types::Story | Nil)","args_html":"(reply_to_story : <a href=\"../../Hamilton/Types/Story.html\">Hamilton::Types::Story</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":59,"url":null},"def":{"name":"reply_to_story=","args":[{"name":"reply_to_story","external_name":"reply_to_story","restriction":"Hamilton::Types::Story | Nil"}],"visibility":"Public","body":"@reply_to_story = reply_to_story"},"external_var":false},{"html_id":"sender_boost_count:Int32|Nil-instance-method","name":"sender_boost_count","doc":"If the sender of the message boosted the chat, the number of boosts added by the user.","summary":"<p>If the sender of the message boosted the chat, the number of boosts added by the user.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":26,"url":null},"def":{"name":"sender_boost_count","return_type":"Int32 | Nil","visibility":"Public","body":"@sender_boost_count"},"external_var":false},{"html_id":"sender_boost_count=(sender_boost_count:Int32|Nil)-instance-method","name":"sender_boost_count=","doc":"If the sender of the message boosted the chat, the number of boosts added by the user.","summary":"<p>If the sender of the message boosted the chat, the number of boosts added by the user.</p>","abstract":false,"args":[{"name":"sender_boost_count","external_name":"sender_boost_count","restriction":"Int32 | Nil"}],"args_string":"(sender_boost_count : Int32 | Nil)","args_html":"(sender_boost_count : Int32 | Nil)","location":{"filename":"src/types/message.cr","line_number":26,"url":null},"def":{"name":"sender_boost_count=","args":[{"name":"sender_boost_count","external_name":"sender_boost_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@sender_boost_count = sender_boost_count"},"external_var":false},{"html_id":"sender_business_bot:Hamilton::Types::User|Nil-instance-method","name":"sender_business_bot","doc":"The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account.","summary":"<p>The bot that actually sent the message on behalf of the business account.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":29,"url":null},"def":{"name":"sender_business_bot","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@sender_business_bot"},"external_var":false},{"html_id":"sender_business_bot=(sender_business_bot:Hamilton::Types::User|Nil)-instance-method","name":"sender_business_bot=","doc":"The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account.","summary":"<p>The bot that actually sent the message on behalf of the business account.</p>","abstract":false,"args":[{"name":"sender_business_bot","external_name":"sender_business_bot","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(sender_business_bot : Hamilton::Types::User | Nil)","args_html":"(sender_business_bot : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":29,"url":null},"def":{"name":"sender_business_bot=","args":[{"name":"sender_business_bot","external_name":"sender_business_bot","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@sender_business_bot = sender_business_bot"},"external_var":false},{"html_id":"sender_chat:Hamilton::Types::Chat|Nil-instance-method","name":"sender_chat","doc":"Sender of the message when sent on behalf of a chat. For example, the supergroup itself for messages sent by its anonymous administrators or a linked channel for messages automatically forwarded to the channel's discussion group. For backward compatibility, if the message was sent on behalf of a chat, the field from contains a fake sender user in non-channel chats.","summary":"<p>Sender of the message when sent on behalf of a chat.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":23,"url":null},"def":{"name":"sender_chat","return_type":"Hamilton::Types::Chat | Nil","visibility":"Public","body":"@sender_chat"},"external_var":false},{"html_id":"sender_chat=(sender_chat:Hamilton::Types::Chat|Nil)-instance-method","name":"sender_chat=","doc":"Sender of the message when sent on behalf of a chat. For example, the supergroup itself for messages sent by its anonymous administrators or a linked channel for messages automatically forwarded to the channel's discussion group. For backward compatibility, if the message was sent on behalf of a chat, the field from contains a fake sender user in non-channel chats.","summary":"<p>Sender of the message when sent on behalf of a chat.</p>","abstract":false,"args":[{"name":"sender_chat","external_name":"sender_chat","restriction":"Hamilton::Types::Chat | Nil"}],"args_string":"(sender_chat : Hamilton::Types::Chat | Nil)","args_html":"(sender_chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":23,"url":null},"def":{"name":"sender_chat=","args":[{"name":"sender_chat","external_name":"sender_chat","restriction":"Hamilton::Types::Chat | Nil"}],"visibility":"Public","body":"@sender_chat = sender_chat"},"external_var":false},{"html_id":"show_caption_above_media:Bool|Nil-instance-method","name":"show_caption_above_media","doc":"True, if the caption must be shown above the message media.","summary":"<p>True, if the caption must be shown above the message media.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":140,"url":null},"def":{"name":"show_caption_above_media","return_type":"Bool | Nil","visibility":"Public","body":"@show_caption_above_media"},"external_var":false},{"html_id":"show_caption_above_media=(show_caption_above_media:Bool|Nil)-instance-method","name":"show_caption_above_media=","doc":"True, if the caption must be shown above the message media.","summary":"<p>True, if the caption must be shown above the message media.</p>","abstract":false,"args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"args_string":"(show_caption_above_media : Bool | Nil)","args_html":"(show_caption_above_media : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":140,"url":null},"def":{"name":"show_caption_above_media=","args":[{"name":"show_caption_above_media","external_name":"show_caption_above_media","restriction":"Bool | Nil"}],"visibility":"Public","body":"@show_caption_above_media = show_caption_above_media"},"external_var":false},{"html_id":"sticker:Hamilton::Types::Sticker|Nil-instance-method","name":"sticker","doc":"Message is a sticker, information about the sticker.","summary":"<p>Message is a sticker, information about the sticker.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":119,"url":null},"def":{"name":"sticker","return_type":"Hamilton::Types::Sticker | Nil","visibility":"Public","body":"@sticker"},"external_var":false},{"html_id":"sticker=(sticker:Hamilton::Types::Sticker|Nil)-instance-method","name":"sticker=","doc":"Message is a sticker, information about the sticker.","summary":"<p>Message is a sticker, information about the sticker.</p>","abstract":false,"args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker | Nil"}],"args_string":"(sticker : Hamilton::Types::Sticker | Nil)","args_html":"(sticker : <a href=\"../../Hamilton/Types/Sticker.html\">Hamilton::Types::Sticker</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":119,"url":null},"def":{"name":"sticker=","args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker | Nil"}],"visibility":"Public","body":"@sticker = sticker"},"external_var":false},{"html_id":"story:Hamilton::Types::Story|Nil-instance-method","name":"story","doc":"Message is a forwarded story.","summary":"<p>Message is a forwarded story.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":122,"url":null},"def":{"name":"story","return_type":"Hamilton::Types::Story | Nil","visibility":"Public","body":"@story"},"external_var":false},{"html_id":"story=(story:Hamilton::Types::Story|Nil)-instance-method","name":"story=","doc":"Message is a forwarded story.","summary":"<p>Message is a forwarded story.</p>","abstract":false,"args":[{"name":"story","external_name":"story","restriction":"Hamilton::Types::Story | Nil"}],"args_string":"(story : Hamilton::Types::Story | Nil)","args_html":"(story : <a href=\"../../Hamilton/Types/Story.html\">Hamilton::Types::Story</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":122,"url":null},"def":{"name":"story=","args":[{"name":"story","external_name":"story","restriction":"Hamilton::Types::Story | Nil"}],"visibility":"Public","body":"@story = story"},"external_var":false},{"html_id":"successful_payment:Hamilton::Types::SuccessfulPayment|Nil-instance-method","name":"successful_payment","doc":"Message is a service message about a successful payment, information about the payment.","summary":"<p>Message is a service message about a successful payment, information about the payment.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":206,"url":null},"def":{"name":"successful_payment","return_type":"Hamilton::Types::SuccessfulPayment | Nil","visibility":"Public","body":"@successful_payment"},"external_var":false},{"html_id":"successful_payment=(successful_payment:Hamilton::Types::SuccessfulPayment|Nil)-instance-method","name":"successful_payment=","doc":"Message is a service message about a successful payment, information about the payment.","summary":"<p>Message is a service message about a successful payment, information about the payment.</p>","abstract":false,"args":[{"name":"successful_payment","external_name":"successful_payment","restriction":"Hamilton::Types::SuccessfulPayment | Nil"}],"args_string":"(successful_payment : Hamilton::Types::SuccessfulPayment | Nil)","args_html":"(successful_payment : <a href=\"../../Hamilton/Types/SuccessfulPayment.html\">Hamilton::Types::SuccessfulPayment</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":206,"url":null},"def":{"name":"successful_payment=","args":[{"name":"successful_payment","external_name":"successful_payment","restriction":"Hamilton::Types::SuccessfulPayment | Nil"}],"visibility":"Public","body":"@successful_payment = successful_payment"},"external_var":false},{"html_id":"suggested_post_approval_failed:Hamilton::Types::SuggestedPostApprovalFailed|Nil-instance-method","name":"suggested_post_approval_failed","doc":"Service message: approval of a suggested post has failed.","summary":"<p>Service message: approval of a suggested post has failed.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":284,"url":null},"def":{"name":"suggested_post_approval_failed","return_type":"Hamilton::Types::SuggestedPostApprovalFailed | Nil","visibility":"Public","body":"@suggested_post_approval_failed"},"external_var":false},{"html_id":"suggested_post_approval_failed=(suggested_post_approval_failed:Hamilton::Types::SuggestedPostApprovalFailed|Nil)-instance-method","name":"suggested_post_approval_failed=","doc":"Service message: approval of a suggested post has failed.","summary":"<p>Service message: approval of a suggested post has failed.</p>","abstract":false,"args":[{"name":"suggested_post_approval_failed","external_name":"suggested_post_approval_failed","restriction":"Hamilton::Types::SuggestedPostApprovalFailed | Nil"}],"args_string":"(suggested_post_approval_failed : Hamilton::Types::SuggestedPostApprovalFailed | Nil)","args_html":"(suggested_post_approval_failed : <a href=\"../../Hamilton/Types/SuggestedPostApprovalFailed.html\">Hamilton::Types::SuggestedPostApprovalFailed</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":284,"url":null},"def":{"name":"suggested_post_approval_failed=","args":[{"name":"suggested_post_approval_failed","external_name":"suggested_post_approval_failed","restriction":"Hamilton::Types::SuggestedPostApprovalFailed | Nil"}],"visibility":"Public","body":"@suggested_post_approval_failed = suggested_post_approval_failed"},"external_var":false},{"html_id":"suggested_post_approved:Hamilton::Types::SuggestedPostApproved|Nil-instance-method","name":"suggested_post_approved","doc":"Service message: a suggested post was approved.","summary":"<p>Service message: a suggested post was approved.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":281,"url":null},"def":{"name":"suggested_post_approved","return_type":"Hamilton::Types::SuggestedPostApproved | Nil","visibility":"Public","body":"@suggested_post_approved"},"external_var":false},{"html_id":"suggested_post_approved=(suggested_post_approved:Hamilton::Types::SuggestedPostApproved|Nil)-instance-method","name":"suggested_post_approved=","doc":"Service message: a suggested post was approved.","summary":"<p>Service message: a suggested post was approved.</p>","abstract":false,"args":[{"name":"suggested_post_approved","external_name":"suggested_post_approved","restriction":"Hamilton::Types::SuggestedPostApproved | Nil"}],"args_string":"(suggested_post_approved : Hamilton::Types::SuggestedPostApproved | Nil)","args_html":"(suggested_post_approved : <a href=\"../../Hamilton/Types/SuggestedPostApproved.html\">Hamilton::Types::SuggestedPostApproved</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":281,"url":null},"def":{"name":"suggested_post_approved=","args":[{"name":"suggested_post_approved","external_name":"suggested_post_approved","restriction":"Hamilton::Types::SuggestedPostApproved | Nil"}],"visibility":"Public","body":"@suggested_post_approved = suggested_post_approved"},"external_var":false},{"html_id":"suggested_post_declined:Hamilton::Types::SuggestedPostDeclined|Nil-instance-method","name":"suggested_post_declined","doc":"Service message: a suggested post was declined.","summary":"<p>Service message: a suggested post was declined.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":287,"url":null},"def":{"name":"suggested_post_declined","return_type":"Hamilton::Types::SuggestedPostDeclined | Nil","visibility":"Public","body":"@suggested_post_declined"},"external_var":false},{"html_id":"suggested_post_declined=(suggested_post_declined:Hamilton::Types::SuggestedPostDeclined|Nil)-instance-method","name":"suggested_post_declined=","doc":"Service message: a suggested post was declined.","summary":"<p>Service message: a suggested post was declined.</p>","abstract":false,"args":[{"name":"suggested_post_declined","external_name":"suggested_post_declined","restriction":"Hamilton::Types::SuggestedPostDeclined | Nil"}],"args_string":"(suggested_post_declined : Hamilton::Types::SuggestedPostDeclined | Nil)","args_html":"(suggested_post_declined : <a href=\"../../Hamilton/Types/SuggestedPostDeclined.html\">Hamilton::Types::SuggestedPostDeclined</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":287,"url":null},"def":{"name":"suggested_post_declined=","args":[{"name":"suggested_post_declined","external_name":"suggested_post_declined","restriction":"Hamilton::Types::SuggestedPostDeclined | Nil"}],"visibility":"Public","body":"@suggested_post_declined = suggested_post_declined"},"external_var":false},{"html_id":"suggested_post_info:Hamilton::Types::SuggestedPostInfo|Nil-instance-method","name":"suggested_post_info","doc":"Information about suggested post parameters if the message is a suggested post in a channel direct messages chat. If the message is an approved or declined suggested post, then it can't be edited.","summary":"<p>Information about suggested post parameters if the message is a suggested post in a channel direct messages chat.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":98,"url":null},"def":{"name":"suggested_post_info","return_type":"Hamilton::Types::SuggestedPostInfo | Nil","visibility":"Public","body":"@suggested_post_info"},"external_var":false},{"html_id":"suggested_post_info=(suggested_post_info:Hamilton::Types::SuggestedPostInfo|Nil)-instance-method","name":"suggested_post_info=","doc":"Information about suggested post parameters if the message is a suggested post in a channel direct messages chat. If the message is an approved or declined suggested post, then it can't be edited.","summary":"<p>Information about suggested post parameters if the message is a suggested post in a channel direct messages chat.</p>","abstract":false,"args":[{"name":"suggested_post_info","external_name":"suggested_post_info","restriction":"Hamilton::Types::SuggestedPostInfo | Nil"}],"args_string":"(suggested_post_info : Hamilton::Types::SuggestedPostInfo | Nil)","args_html":"(suggested_post_info : <a href=\"../../Hamilton/Types/SuggestedPostInfo.html\">Hamilton::Types::SuggestedPostInfo</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":98,"url":null},"def":{"name":"suggested_post_info=","args":[{"name":"suggested_post_info","external_name":"suggested_post_info","restriction":"Hamilton::Types::SuggestedPostInfo | Nil"}],"visibility":"Public","body":"@suggested_post_info = suggested_post_info"},"external_var":false},{"html_id":"suggested_post_paid:Hamilton::Types::SuggestedPostPaid|Nil-instance-method","name":"suggested_post_paid","doc":"Service message: payment for a suggested post was received.","summary":"<p>Service message: payment for a suggested post was received.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":290,"url":null},"def":{"name":"suggested_post_paid","return_type":"Hamilton::Types::SuggestedPostPaid | Nil","visibility":"Public","body":"@suggested_post_paid"},"external_var":false},{"html_id":"suggested_post_paid=(suggested_post_paid:Hamilton::Types::SuggestedPostPaid|Nil)-instance-method","name":"suggested_post_paid=","doc":"Service message: payment for a suggested post was received.","summary":"<p>Service message: payment for a suggested post was received.</p>","abstract":false,"args":[{"name":"suggested_post_paid","external_name":"suggested_post_paid","restriction":"Hamilton::Types::SuggestedPostPaid | Nil"}],"args_string":"(suggested_post_paid : Hamilton::Types::SuggestedPostPaid | Nil)","args_html":"(suggested_post_paid : <a href=\"../../Hamilton/Types/SuggestedPostPaid.html\">Hamilton::Types::SuggestedPostPaid</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":290,"url":null},"def":{"name":"suggested_post_paid=","args":[{"name":"suggested_post_paid","external_name":"suggested_post_paid","restriction":"Hamilton::Types::SuggestedPostPaid | Nil"}],"visibility":"Public","body":"@suggested_post_paid = suggested_post_paid"},"external_var":false},{"html_id":"suggested_post_refunded:Hamilton::Types::SuggestedPostRefunded|Nil-instance-method","name":"suggested_post_refunded","doc":"Service message: payment for a suggested post was refunded.","summary":"<p>Service message: payment for a suggested post was refunded.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":293,"url":null},"def":{"name":"suggested_post_refunded","return_type":"Hamilton::Types::SuggestedPostRefunded | Nil","visibility":"Public","body":"@suggested_post_refunded"},"external_var":false},{"html_id":"suggested_post_refunded=(suggested_post_refunded:Hamilton::Types::SuggestedPostRefunded|Nil)-instance-method","name":"suggested_post_refunded=","doc":"Service message: payment for a suggested post was refunded.","summary":"<p>Service message: payment for a suggested post was refunded.</p>","abstract":false,"args":[{"name":"suggested_post_refunded","external_name":"suggested_post_refunded","restriction":"Hamilton::Types::SuggestedPostRefunded | Nil"}],"args_string":"(suggested_post_refunded : Hamilton::Types::SuggestedPostRefunded | Nil)","args_html":"(suggested_post_refunded : <a href=\"../../Hamilton/Types/SuggestedPostRefunded.html\">Hamilton::Types::SuggestedPostRefunded</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":293,"url":null},"def":{"name":"suggested_post_refunded=","args":[{"name":"suggested_post_refunded","external_name":"suggested_post_refunded","restriction":"Hamilton::Types::SuggestedPostRefunded | Nil"}],"visibility":"Public","body":"@suggested_post_refunded = suggested_post_refunded"},"external_var":false},{"html_id":"supergroup_chat_created:Bool|Nil-instance-method","name":"supergroup_chat_created","doc":"Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.","summary":"<p>Service message: the supergroup has been created.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":185,"url":null},"def":{"name":"supergroup_chat_created","return_type":"Bool | Nil","visibility":"Public","body":"@supergroup_chat_created"},"external_var":false},{"html_id":"supergroup_chat_created=(supergroup_chat_created:Bool|Nil)-instance-method","name":"supergroup_chat_created=","doc":"Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.","summary":"<p>Service message: the supergroup has been created.</p>","abstract":false,"args":[{"name":"supergroup_chat_created","external_name":"supergroup_chat_created","restriction":"Bool | Nil"}],"args_string":"(supergroup_chat_created : Bool | Nil)","args_html":"(supergroup_chat_created : Bool | Nil)","location":{"filename":"src/types/message.cr","line_number":185,"url":null},"def":{"name":"supergroup_chat_created=","args":[{"name":"supergroup_chat_created","external_name":"supergroup_chat_created","restriction":"Bool | Nil"}],"visibility":"Public","body":"@supergroup_chat_created = supergroup_chat_created"},"external_var":false},{"html_id":"text:String|Nil-instance-method","name":"text","doc":"For text messages, the actual UTF-8 text of the message.","summary":"<p>For text messages, the actual UTF-8 text of the message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":89,"url":null},"def":{"name":"text","return_type":"String | Nil","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String|Nil)-instance-method","name":"text=","doc":"For text messages, the actual UTF-8 text of the message.","summary":"<p>For text messages, the actual UTF-8 text of the message.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | Nil"}],"args_string":"(text : String | Nil)","args_html":"(text : String | Nil)","location":{"filename":"src/types/message.cr","line_number":89,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String | Nil"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"unique_gift:Hamilton::Types::UniqueGiftInfo|Nil-instance-method","name":"unique_gift","doc":"Service message: a unique gift was sent or received.","summary":"<p>Service message: a unique gift was sent or received.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":221,"url":null},"def":{"name":"unique_gift","return_type":"Hamilton::Types::UniqueGiftInfo | Nil","visibility":"Public","body":"@unique_gift"},"external_var":false},{"html_id":"unique_gift=(unique_gift:Hamilton::Types::UniqueGiftInfo|Nil)-instance-method","name":"unique_gift=","doc":"Service message: a unique gift was sent or received.","summary":"<p>Service message: a unique gift was sent or received.</p>","abstract":false,"args":[{"name":"unique_gift","external_name":"unique_gift","restriction":"Hamilton::Types::UniqueGiftInfo | Nil"}],"args_string":"(unique_gift : Hamilton::Types::UniqueGiftInfo | Nil)","args_html":"(unique_gift : <a href=\"../../Hamilton/Types/UniqueGiftInfo.html\">Hamilton::Types::UniqueGiftInfo</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":221,"url":null},"def":{"name":"unique_gift=","args":[{"name":"unique_gift","external_name":"unique_gift","restriction":"Hamilton::Types::UniqueGiftInfo | Nil"}],"visibility":"Public","body":"@unique_gift = unique_gift"},"external_var":false},{"html_id":"users_shared:Hamilton::Types::UsersShared|Nil-instance-method","name":"users_shared","doc":"Service message: users were shared with the bot.","summary":"<p>Service message: users were shared with the bot.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":212,"url":null},"def":{"name":"users_shared","return_type":"Hamilton::Types::UsersShared | Nil","visibility":"Public","body":"@users_shared"},"external_var":false},{"html_id":"users_shared=(users_shared:Hamilton::Types::UsersShared|Nil)-instance-method","name":"users_shared=","doc":"Service message: users were shared with the bot.","summary":"<p>Service message: users were shared with the bot.</p>","abstract":false,"args":[{"name":"users_shared","external_name":"users_shared","restriction":"Hamilton::Types::UsersShared | Nil"}],"args_string":"(users_shared : Hamilton::Types::UsersShared | Nil)","args_html":"(users_shared : <a href=\"../../Hamilton/Types/UsersShared.html\">Hamilton::Types::UsersShared</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":212,"url":null},"def":{"name":"users_shared=","args":[{"name":"users_shared","external_name":"users_shared","restriction":"Hamilton::Types::UsersShared | Nil"}],"visibility":"Public","body":"@users_shared = users_shared"},"external_var":false},{"html_id":"venue:Hamilton::Types::Venue|Nil-instance-method","name":"venue","doc":"Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set.","summary":"<p>Message is a venue, information about the venue.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":161,"url":null},"def":{"name":"venue","return_type":"Hamilton::Types::Venue | Nil","visibility":"Public","body":"@venue"},"external_var":false},{"html_id":"venue=(venue:Hamilton::Types::Venue|Nil)-instance-method","name":"venue=","doc":"Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set.","summary":"<p>Message is a venue, information about the venue.</p>","abstract":false,"args":[{"name":"venue","external_name":"venue","restriction":"Hamilton::Types::Venue | Nil"}],"args_string":"(venue : Hamilton::Types::Venue | Nil)","args_html":"(venue : <a href=\"../../Hamilton/Types/Venue.html\">Hamilton::Types::Venue</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":161,"url":null},"def":{"name":"venue=","args":[{"name":"venue","external_name":"venue","restriction":"Hamilton::Types::Venue | Nil"}],"visibility":"Public","body":"@venue = venue"},"external_var":false},{"html_id":"via_bot:Hamilton::Types::User|Nil-instance-method","name":"via_bot","doc":"Bot through which the message was sent.","summary":"<p>Bot through which the message was sent.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":65,"url":null},"def":{"name":"via_bot","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@via_bot"},"external_var":false},{"html_id":"via_bot=(via_bot:Hamilton::Types::User|Nil)-instance-method","name":"via_bot=","doc":"Bot through which the message was sent.","summary":"<p>Bot through which the message was sent.</p>","abstract":false,"args":[{"name":"via_bot","external_name":"via_bot","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(via_bot : Hamilton::Types::User | Nil)","args_html":"(via_bot : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":65,"url":null},"def":{"name":"via_bot=","args":[{"name":"via_bot","external_name":"via_bot","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@via_bot = via_bot"},"external_var":false},{"html_id":"video:Hamilton::Types::Video|Nil-instance-method","name":"video","doc":"Message is a video, information about the video.","summary":"<p>Message is a video, information about the video.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":125,"url":null},"def":{"name":"video","return_type":"Hamilton::Types::Video | Nil","visibility":"Public","body":"@video"},"external_var":false},{"html_id":"video=(video:Hamilton::Types::Video|Nil)-instance-method","name":"video=","doc":"Message is a video, information about the video.","summary":"<p>Message is a video, information about the video.</p>","abstract":false,"args":[{"name":"video","external_name":"video","restriction":"Hamilton::Types::Video | Nil"}],"args_string":"(video : Hamilton::Types::Video | Nil)","args_html":"(video : <a href=\"../../Hamilton/Types/Video.html\">Hamilton::Types::Video</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":125,"url":null},"def":{"name":"video=","args":[{"name":"video","external_name":"video","restriction":"Hamilton::Types::Video | Nil"}],"visibility":"Public","body":"@video = video"},"external_var":false},{"html_id":"video_chat_ended:Hamilton::Types::VideoChatEnded|Nil-instance-method","name":"video_chat_ended","doc":"Service message: video chat ended.","summary":"<p>Service message: video chat ended.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":302,"url":null},"def":{"name":"video_chat_ended","return_type":"Hamilton::Types::VideoChatEnded | Nil","visibility":"Public","body":"@video_chat_ended"},"external_var":false},{"html_id":"video_chat_ended=(video_chat_ended:Hamilton::Types::VideoChatEnded|Nil)-instance-method","name":"video_chat_ended=","doc":"Service message: video chat ended.","summary":"<p>Service message: video chat ended.</p>","abstract":false,"args":[{"name":"video_chat_ended","external_name":"video_chat_ended","restriction":"Hamilton::Types::VideoChatEnded | Nil"}],"args_string":"(video_chat_ended : Hamilton::Types::VideoChatEnded | Nil)","args_html":"(video_chat_ended : <a href=\"../../Hamilton/Types/VideoChatEnded.html\">Hamilton::Types::VideoChatEnded</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":302,"url":null},"def":{"name":"video_chat_ended=","args":[{"name":"video_chat_ended","external_name":"video_chat_ended","restriction":"Hamilton::Types::VideoChatEnded | Nil"}],"visibility":"Public","body":"@video_chat_ended = video_chat_ended"},"external_var":false},{"html_id":"video_chat_participants_invited:Hamilton::Types::VideoChatParticipantsInvited|Nil-instance-method","name":"video_chat_participants_invited","doc":"Service message: new participants invited to a video chat.","summary":"<p>Service message: new participants invited to a video chat.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":305,"url":null},"def":{"name":"video_chat_participants_invited","return_type":"Hamilton::Types::VideoChatParticipantsInvited | Nil","visibility":"Public","body":"@video_chat_participants_invited"},"external_var":false},{"html_id":"video_chat_participants_invited=(video_chat_participants_invited:Hamilton::Types::VideoChatParticipantsInvited|Nil)-instance-method","name":"video_chat_participants_invited=","doc":"Service message: new participants invited to a video chat.","summary":"<p>Service message: new participants invited to a video chat.</p>","abstract":false,"args":[{"name":"video_chat_participants_invited","external_name":"video_chat_participants_invited","restriction":"Hamilton::Types::VideoChatParticipantsInvited | Nil"}],"args_string":"(video_chat_participants_invited : Hamilton::Types::VideoChatParticipantsInvited | Nil)","args_html":"(video_chat_participants_invited : <a href=\"../../Hamilton/Types/VideoChatParticipantsInvited.html\">Hamilton::Types::VideoChatParticipantsInvited</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":305,"url":null},"def":{"name":"video_chat_participants_invited=","args":[{"name":"video_chat_participants_invited","external_name":"video_chat_participants_invited","restriction":"Hamilton::Types::VideoChatParticipantsInvited | Nil"}],"visibility":"Public","body":"@video_chat_participants_invited = video_chat_participants_invited"},"external_var":false},{"html_id":"video_chat_scheduled:Hamilton::Types::VideoChatScheduled|Nil-instance-method","name":"video_chat_scheduled","doc":"Service message: video chat scheduled.","summary":"<p>Service message: video chat scheduled.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":296,"url":null},"def":{"name":"video_chat_scheduled","return_type":"Hamilton::Types::VideoChatScheduled | Nil","visibility":"Public","body":"@video_chat_scheduled"},"external_var":false},{"html_id":"video_chat_scheduled=(video_chat_scheduled:Hamilton::Types::VideoChatScheduled|Nil)-instance-method","name":"video_chat_scheduled=","doc":"Service message: video chat scheduled.","summary":"<p>Service message: video chat scheduled.</p>","abstract":false,"args":[{"name":"video_chat_scheduled","external_name":"video_chat_scheduled","restriction":"Hamilton::Types::VideoChatScheduled | Nil"}],"args_string":"(video_chat_scheduled : Hamilton::Types::VideoChatScheduled | Nil)","args_html":"(video_chat_scheduled : <a href=\"../../Hamilton/Types/VideoChatScheduled.html\">Hamilton::Types::VideoChatScheduled</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":296,"url":null},"def":{"name":"video_chat_scheduled=","args":[{"name":"video_chat_scheduled","external_name":"video_chat_scheduled","restriction":"Hamilton::Types::VideoChatScheduled | Nil"}],"visibility":"Public","body":"@video_chat_scheduled = video_chat_scheduled"},"external_var":false},{"html_id":"video_chat_started:Hamilton::Types::VideoChatStarted|Nil-instance-method","name":"video_chat_started","doc":"Service message: video chat started.","summary":"<p>Service message: video chat started.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":299,"url":null},"def":{"name":"video_chat_started","return_type":"Hamilton::Types::VideoChatStarted | Nil","visibility":"Public","body":"@video_chat_started"},"external_var":false},{"html_id":"video_chat_started=(video_chat_started:Hamilton::Types::VideoChatStarted|Nil)-instance-method","name":"video_chat_started=","doc":"Service message: video chat started.","summary":"<p>Service message: video chat started.</p>","abstract":false,"args":[{"name":"video_chat_started","external_name":"video_chat_started","restriction":"Hamilton::Types::VideoChatStarted | Nil"}],"args_string":"(video_chat_started : Hamilton::Types::VideoChatStarted | Nil)","args_html":"(video_chat_started : <a href=\"../../Hamilton/Types/VideoChatStarted.html\">Hamilton::Types::VideoChatStarted</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":299,"url":null},"def":{"name":"video_chat_started=","args":[{"name":"video_chat_started","external_name":"video_chat_started","restriction":"Hamilton::Types::VideoChatStarted | Nil"}],"visibility":"Public","body":"@video_chat_started = video_chat_started"},"external_var":false},{"html_id":"video_note:Hamilton::Types::VideoNote|Nil-instance-method","name":"video_note","doc":"Message is a video note, information about the video message.","summary":"<p>Message is a video note, information about the video message.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":128,"url":null},"def":{"name":"video_note","return_type":"Hamilton::Types::VideoNote | Nil","visibility":"Public","body":"@video_note"},"external_var":false},{"html_id":"video_note=(video_note:Hamilton::Types::VideoNote|Nil)-instance-method","name":"video_note=","doc":"Message is a video note, information about the video message.","summary":"<p>Message is a video note, information about the video message.</p>","abstract":false,"args":[{"name":"video_note","external_name":"video_note","restriction":"Hamilton::Types::VideoNote | Nil"}],"args_string":"(video_note : Hamilton::Types::VideoNote | Nil)","args_html":"(video_note : <a href=\"../../Hamilton/Types/VideoNote.html\">Hamilton::Types::VideoNote</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":128,"url":null},"def":{"name":"video_note=","args":[{"name":"video_note","external_name":"video_note","restriction":"Hamilton::Types::VideoNote | Nil"}],"visibility":"Public","body":"@video_note = video_note"},"external_var":false},{"html_id":"voice:Hamilton::Types::Voice|Nil-instance-method","name":"voice","doc":"Message is a voice message, information about the file.","summary":"<p>Message is a voice message, information about the file.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":131,"url":null},"def":{"name":"voice","return_type":"Hamilton::Types::Voice | Nil","visibility":"Public","body":"@voice"},"external_var":false},{"html_id":"voice=(voice:Hamilton::Types::Voice|Nil)-instance-method","name":"voice=","doc":"Message is a voice message, information about the file.","summary":"<p>Message is a voice message, information about the file.</p>","abstract":false,"args":[{"name":"voice","external_name":"voice","restriction":"Hamilton::Types::Voice | Nil"}],"args_string":"(voice : Hamilton::Types::Voice | Nil)","args_html":"(voice : <a href=\"../../Hamilton/Types/Voice.html\">Hamilton::Types::Voice</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":131,"url":null},"def":{"name":"voice=","args":[{"name":"voice","external_name":"voice","restriction":"Hamilton::Types::Voice | Nil"}],"visibility":"Public","body":"@voice = voice"},"external_var":false},{"html_id":"web_app_data:Hamilton::Types::WebAppData|Nil-instance-method","name":"web_app_data","doc":"Service message: data sent by a Web App.","summary":"<p>Service message: data sent by a Web App.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":308,"url":null},"def":{"name":"web_app_data","return_type":"Hamilton::Types::WebAppData | Nil","visibility":"Public","body":"@web_app_data"},"external_var":false},{"html_id":"web_app_data=(web_app_data:Hamilton::Types::WebAppData|Nil)-instance-method","name":"web_app_data=","doc":"Service message: data sent by a Web App.","summary":"<p>Service message: data sent by a Web App.</p>","abstract":false,"args":[{"name":"web_app_data","external_name":"web_app_data","restriction":"Hamilton::Types::WebAppData | Nil"}],"args_string":"(web_app_data : Hamilton::Types::WebAppData | Nil)","args_html":"(web_app_data : <a href=\"../../Hamilton/Types/WebAppData.html\">Hamilton::Types::WebAppData</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":308,"url":null},"def":{"name":"web_app_data=","args":[{"name":"web_app_data","external_name":"web_app_data","restriction":"Hamilton::Types::WebAppData | Nil"}],"visibility":"Public","body":"@web_app_data = web_app_data"},"external_var":false},{"html_id":"write_access_allowed:Hamilton::Types::WriteAccessAllowed|Nil-instance-method","name":"write_access_allowed","doc":"Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.","summary":"<p>Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.</p>","abstract":false,"location":{"filename":"src/types/message.cr","line_number":224,"url":null},"def":{"name":"write_access_allowed","return_type":"Hamilton::Types::WriteAccessAllowed | Nil","visibility":"Public","body":"@write_access_allowed"},"external_var":false},{"html_id":"write_access_allowed=(write_access_allowed:Hamilton::Types::WriteAccessAllowed|Nil)-instance-method","name":"write_access_allowed=","doc":"Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.","summary":"<p>Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.</p>","abstract":false,"args":[{"name":"write_access_allowed","external_name":"write_access_allowed","restriction":"Hamilton::Types::WriteAccessAllowed | Nil"}],"args_string":"(write_access_allowed : Hamilton::Types::WriteAccessAllowed | Nil)","args_html":"(write_access_allowed : <a href=\"../../Hamilton/Types/WriteAccessAllowed.html\">Hamilton::Types::WriteAccessAllowed</a> | Nil)","location":{"filename":"src/types/message.cr","line_number":224,"url":null},"def":{"name":"write_access_allowed=","args":[{"name":"write_access_allowed","external_name":"write_access_allowed","restriction":"Hamilton::Types::WriteAccessAllowed | Nil"}],"visibility":"Public","body":"@write_access_allowed = write_access_allowed"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MessageAutoDeleteTimerChanged","path":"Hamilton/Types/MessageAutoDeleteTimerChanged.html","kind":"class","full_name":"Hamilton::Types::MessageAutoDeleteTimerChanged","name":"MessageAutoDeleteTimerChanged","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/message_auto_delete_timer_changed.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about a change in auto-delete timer settings.","summary":"<p>This object represents a service message about a change in auto-delete timer settings.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/message_auto_delete_timer_changed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/message_auto_delete_timer_changed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"message_auto_delete_time:Int32-instance-method","name":"message_auto_delete_time","doc":"New auto-delete time for messages in the chat; in seconds.","summary":"<p>New auto-delete time for messages in the chat; in seconds.</p>","abstract":false,"location":{"filename":"src/types/message_auto_delete_timer_changed.cr","line_number":11,"url":null},"def":{"name":"message_auto_delete_time","return_type":"Int32","visibility":"Public","body":"@message_auto_delete_time"},"external_var":false},{"html_id":"message_auto_delete_time=(message_auto_delete_time:Int32)-instance-method","name":"message_auto_delete_time=","doc":"New auto-delete time for messages in the chat; in seconds.","summary":"<p>New auto-delete time for messages in the chat; in seconds.</p>","abstract":false,"args":[{"name":"message_auto_delete_time","external_name":"message_auto_delete_time","restriction":"Int32"}],"args_string":"(message_auto_delete_time : Int32)","args_html":"(message_auto_delete_time : Int32)","location":{"filename":"src/types/message_auto_delete_timer_changed.cr","line_number":11,"url":null},"def":{"name":"message_auto_delete_time=","args":[{"name":"message_auto_delete_time","external_name":"message_auto_delete_time","restriction":"Int32"}],"visibility":"Public","body":"@message_auto_delete_time = message_auto_delete_time"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MessageEntity","path":"Hamilton/Types/MessageEntity.html","kind":"class","full_name":"Hamilton::Types::MessageEntity","name":"MessageEntity","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/message_entity.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.","summary":"<p>This object represents one special entity in a text message.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/message_entity.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/message_entity.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"custom_emoji_id:String|Nil-instance-method","name":"custom_emoji_id","doc":"For “custom_emoji” only, unique identifier of the custom emoji.","summary":"<p>For “custom_emoji” only, unique identifier of the custom emoji.</p>","abstract":false,"location":{"filename":"src/types/message_entity.cr","line_number":29,"url":null},"def":{"name":"custom_emoji_id","return_type":"String | Nil","visibility":"Public","body":"@custom_emoji_id"},"external_var":false},{"html_id":"custom_emoji_id=(custom_emoji_id:String|Nil)-instance-method","name":"custom_emoji_id=","doc":"For “custom_emoji” only, unique identifier of the custom emoji.","summary":"<p>For “custom_emoji” only, unique identifier of the custom emoji.</p>","abstract":false,"args":[{"name":"custom_emoji_id","external_name":"custom_emoji_id","restriction":"String | Nil"}],"args_string":"(custom_emoji_id : String | Nil)","args_html":"(custom_emoji_id : String | Nil)","location":{"filename":"src/types/message_entity.cr","line_number":29,"url":null},"def":{"name":"custom_emoji_id=","args":[{"name":"custom_emoji_id","external_name":"custom_emoji_id","restriction":"String | Nil"}],"visibility":"Public","body":"@custom_emoji_id = custom_emoji_id"},"external_var":false},{"html_id":"language:String|Nil-instance-method","name":"language","doc":"For “pre” only, the programming language of the entity text.","summary":"<p>For “pre” only, the programming language of the entity text.</p>","abstract":false,"location":{"filename":"src/types/message_entity.cr","line_number":26,"url":null},"def":{"name":"language","return_type":"String | Nil","visibility":"Public","body":"@language"},"external_var":false},{"html_id":"language=(language:String|Nil)-instance-method","name":"language=","doc":"For “pre” only, the programming language of the entity text.","summary":"<p>For “pre” only, the programming language of the entity text.</p>","abstract":false,"args":[{"name":"language","external_name":"language","restriction":"String | Nil"}],"args_string":"(language : String | Nil)","args_html":"(language : String | Nil)","location":{"filename":"src/types/message_entity.cr","line_number":26,"url":null},"def":{"name":"language=","args":[{"name":"language","external_name":"language","restriction":"String | Nil"}],"visibility":"Public","body":"@language = language"},"external_var":false},{"html_id":"length:Int32-instance-method","name":"length","doc":"Length of the entity in UTF-16 code units.","summary":"<p>Length of the entity in UTF-16 code units.</p>","abstract":false,"location":{"filename":"src/types/message_entity.cr","line_number":17,"url":null},"def":{"name":"length","return_type":"Int32","visibility":"Public","body":"@length"},"external_var":false},{"html_id":"length=(length:Int32)-instance-method","name":"length=","doc":"Length of the entity in UTF-16 code units.","summary":"<p>Length of the entity in UTF-16 code units.</p>","abstract":false,"args":[{"name":"length","external_name":"length","restriction":"Int32"}],"args_string":"(length : Int32)","args_html":"(length : Int32)","location":{"filename":"src/types/message_entity.cr","line_number":17,"url":null},"def":{"name":"length=","args":[{"name":"length","external_name":"length","restriction":"Int32"}],"visibility":"Public","body":"@length = length"},"external_var":false},{"html_id":"offset:Int32-instance-method","name":"offset","doc":"Offset in UTF-16 code units to the start of the entity.","summary":"<p>Offset in UTF-16 code units to the start of the entity.</p>","abstract":false,"location":{"filename":"src/types/message_entity.cr","line_number":14,"url":null},"def":{"name":"offset","return_type":"Int32","visibility":"Public","body":"@offset"},"external_var":false},{"html_id":"offset=(offset:Int32)-instance-method","name":"offset=","doc":"Offset in UTF-16 code units to the start of the entity.","summary":"<p>Offset in UTF-16 code units to the start of the entity.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Int32"}],"args_string":"(offset : Int32)","args_html":"(offset : Int32)","location":{"filename":"src/types/message_entity.cr","line_number":14,"url":null},"def":{"name":"offset=","args":[{"name":"offset","external_name":"offset","restriction":"Int32"}],"visibility":"Public","body":"@offset = offset"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the entity. Currently, can be “mention” (`@username`), “hashtag” (`#hashtag` or `#hashtag@chatusername`), “cashtag” (`$USD` or `$USD@chatusername`), “bot_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler” (spoiler message), “blockquote” (block quotation), “expandable_blockquote” (collapsed-by-default block quotation), “code” (monowidth string), “pre” (monowidth block), “text_link” (for clickable text URLs), “text_mention” (for users without usernames), “custom_emoji” (for inline custom emoji stickers)","summary":"<p>Type of the entity.</p>","abstract":false,"location":{"filename":"src/types/message_entity.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the entity. Currently, can be “mention” (`@username`), “hashtag” (`#hashtag` or `#hashtag@chatusername`), “cashtag” (`$USD` or `$USD@chatusername`), “bot_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler” (spoiler message), “blockquote” (block quotation), “expandable_blockquote” (collapsed-by-default block quotation), “code” (monowidth string), “pre” (monowidth block), “text_link” (for clickable text URLs), “text_mention” (for users without usernames), “custom_emoji” (for inline custom emoji stickers)","summary":"<p>Type of the entity.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/message_entity.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"url:String|Nil-instance-method","name":"url","doc":"For “text_link” only, URL that will be opened after user taps on the text.","summary":"<p>For “text_link” only, URL that will be opened after user taps on the text.</p>","abstract":false,"location":{"filename":"src/types/message_entity.cr","line_number":20,"url":null},"def":{"name":"url","return_type":"String | Nil","visibility":"Public","body":"@url"},"external_var":false},{"html_id":"url=(url:String|Nil)-instance-method","name":"url=","doc":"For “text_link” only, URL that will be opened after user taps on the text.","summary":"<p>For “text_link” only, URL that will be opened after user taps on the text.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String | Nil"}],"args_string":"(url : String | Nil)","args_html":"(url : String | Nil)","location":{"filename":"src/types/message_entity.cr","line_number":20,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String | Nil"}],"visibility":"Public","body":"@url = url"},"external_var":false},{"html_id":"user:Hamilton::Types::User|Nil-instance-method","name":"user","doc":"For “text_mention” only, the mentioned user.","summary":"<p>For “text_mention” only, the mentioned user.</p>","abstract":false,"location":{"filename":"src/types/message_entity.cr","line_number":23,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User|Nil)-instance-method","name":"user=","doc":"For “text_mention” only, the mentioned user.","summary":"<p>For “text_mention” only, the mentioned user.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(user : Hamilton::Types::User | Nil)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/message_entity.cr","line_number":23,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MessageId","path":"Hamilton/Types/MessageId.html","kind":"class","full_name":"Hamilton::Types::MessageId","name":"MessageId","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/message_id.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a unique message identifier.","summary":"<p>This object represents a unique message identifier.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/message_id.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/message_id.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"message_id:Int32-instance-method","name":"message_id","doc":"Unique message identifier. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent.","summary":"<p>Unique message identifier.</p>","abstract":false,"location":{"filename":"src/types/message_id.cr","line_number":11,"url":null},"def":{"name":"message_id","return_type":"Int32","visibility":"Public","body":"@message_id"},"external_var":false},{"html_id":"message_id=(message_id:Int32)-instance-method","name":"message_id=","doc":"Unique message identifier. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent.","summary":"<p>Unique message identifier.</p>","abstract":false,"args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"args_string":"(message_id : Int32)","args_html":"(message_id : Int32)","location":{"filename":"src/types/message_id.cr","line_number":11,"url":null},"def":{"name":"message_id=","args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"visibility":"Public","body":"@message_id = message_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MessageOrigin","path":"Hamilton/Types/MessageOrigin.html","kind":"alias","full_name":"Hamilton::Types::MessageOrigin","name":"MessageOrigin","abstract":false,"locations":[{"filename":"src/types/message_origin.cr","line_number":78,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::MessageOriginChannel | Hamilton::Types::MessageOriginHiddenUser | Hamilton::Types::MessageOriginUser)","aliased_html":"<a href=\"../../Hamilton/Types/MessageOriginChannel.html\">Hamilton::Types::MessageOriginChannel</a> | <a href=\"../../Hamilton/Types/MessageOriginHiddenUser.html\">Hamilton::Types::MessageOriginHiddenUser</a> | <a href=\"../../Hamilton/Types/MessageOriginUser.html\">Hamilton::Types::MessageOriginUser</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the origin of a message.","summary":"<p>This object describes the origin of a message.</p>"},{"html_id":"hamilton/Hamilton/Types/MessageOriginChannel","path":"Hamilton/Types/MessageOriginChannel.html","kind":"class","full_name":"Hamilton::Types::MessageOriginChannel","name":"MessageOriginChannel","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/message_origin.cr","line_number":38,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The message was originally sent on behalf of a chat to a group chat.","summary":"<p>The message was originally sent on behalf of a chat to a group chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/message_origin.cr","line_number":39,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/message_origin.cr","line_number":39,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"author_signature:String|Nil-instance-method","name":"author_signature","doc":"For messages originally sent by an anonymous chat administrator, original message author signature.","summary":"<p>For messages originally sent by an anonymous chat administrator, original message author signature.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":52,"url":null},"def":{"name":"author_signature","return_type":"String | Nil","visibility":"Public","body":"@author_signature"},"external_var":false},{"html_id":"author_signature=(author_signature:String|Nil)-instance-method","name":"author_signature=","doc":"For messages originally sent by an anonymous chat administrator, original message author signature.","summary":"<p>For messages originally sent by an anonymous chat administrator, original message author signature.</p>","abstract":false,"args":[{"name":"author_signature","external_name":"author_signature","restriction":"String | Nil"}],"args_string":"(author_signature : String | Nil)","args_html":"(author_signature : String | Nil)","location":{"filename":"src/types/message_origin.cr","line_number":52,"url":null},"def":{"name":"author_signature=","args":[{"name":"author_signature","external_name":"author_signature","restriction":"String | Nil"}],"visibility":"Public","body":"@author_signature = author_signature"},"external_var":false},{"html_id":"date:Int32-instance-method","name":"date","doc":"Date the message was sent originally in Unix time.","summary":"<p>Date the message was sent originally in Unix time.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":46,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date the message was sent originally in Unix time.","summary":"<p>Date the message was sent originally in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/message_origin.cr","line_number":46,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"sender_chat:Hamilton::Types::Chat-instance-method","name":"sender_chat","doc":"Chat that sent the message originally.","summary":"<p>Chat that sent the message originally.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":49,"url":null},"def":{"name":"sender_chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@sender_chat"},"external_var":false},{"html_id":"sender_chat=(sender_chat:Hamilton::Types::Chat)-instance-method","name":"sender_chat=","doc":"Chat that sent the message originally.","summary":"<p>Chat that sent the message originally.</p>","abstract":false,"args":[{"name":"sender_chat","external_name":"sender_chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(sender_chat : Hamilton::Types::Chat)","args_html":"(sender_chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/message_origin.cr","line_number":49,"url":null},"def":{"name":"sender_chat=","args":[{"name":"sender_chat","external_name":"sender_chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@sender_chat = sender_chat"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the message origin, always \"chat\".","summary":"<p>Type of the message origin, always &quot;chat&quot;.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":43,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the message origin, always \"chat\".","summary":"<p>Type of the message origin, always &quot;chat&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/message_origin.cr","line_number":43,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MessageOriginHiddenUser","path":"Hamilton/Types/MessageOriginHiddenUser.html","kind":"class","full_name":"Hamilton::Types::MessageOriginHiddenUser","name":"MessageOriginHiddenUser","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/message_origin.cr","line_number":22,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The message was originally sent by an unknown user.","summary":"<p>The message was originally sent by an unknown user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/message_origin.cr","line_number":23,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/message_origin.cr","line_number":23,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"date:Int32-instance-method","name":"date","doc":"Date the message was sent originally in Unix time.","summary":"<p>Date the message was sent originally in Unix time.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":30,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date the message was sent originally in Unix time.","summary":"<p>Date the message was sent originally in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/message_origin.cr","line_number":30,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"sender_user_name:String-instance-method","name":"sender_user_name","doc":"Name of the user that sent the message originally.","summary":"<p>Name of the user that sent the message originally.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":33,"url":null},"def":{"name":"sender_user_name","return_type":"String","visibility":"Public","body":"@sender_user_name"},"external_var":false},{"html_id":"sender_user_name=(sender_user_name:String)-instance-method","name":"sender_user_name=","doc":"Name of the user that sent the message originally.","summary":"<p>Name of the user that sent the message originally.</p>","abstract":false,"args":[{"name":"sender_user_name","external_name":"sender_user_name","restriction":"String"}],"args_string":"(sender_user_name : String)","args_html":"(sender_user_name : String)","location":{"filename":"src/types/message_origin.cr","line_number":33,"url":null},"def":{"name":"sender_user_name=","args":[{"name":"sender_user_name","external_name":"sender_user_name","restriction":"String"}],"visibility":"Public","body":"@sender_user_name = sender_user_name"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the message origin, always \"hidden_user\".","summary":"<p>Type of the message origin, always &quot;hidden_user&quot;.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":27,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the message origin, always \"hidden_user\".","summary":"<p>Type of the message origin, always &quot;hidden_user&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/message_origin.cr","line_number":27,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MessageOriginUser","path":"Hamilton/Types/MessageOriginUser.html","kind":"class","full_name":"Hamilton::Types::MessageOriginUser","name":"MessageOriginUser","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/message_origin.cr","line_number":6,"url":null},{"filename":"src/types/message_origin.cr","line_number":57,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The message was originally sent by a known user.","summary":"<p>The message was originally sent by a known user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/message_origin.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/message_origin.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"author_signature:String|Nil-instance-method","name":"author_signature","doc":"Signature of the original post author.","summary":"<p>Signature of the original post author.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":74,"url":null},"def":{"name":"author_signature","return_type":"String | Nil","visibility":"Public","body":"@author_signature"},"external_var":false},{"html_id":"author_signature=(author_signature:String|Nil)-instance-method","name":"author_signature=","doc":"Signature of the original post author.","summary":"<p>Signature of the original post author.</p>","abstract":false,"args":[{"name":"author_signature","external_name":"author_signature","restriction":"String | Nil"}],"args_string":"(author_signature : String | Nil)","args_html":"(author_signature : String | Nil)","location":{"filename":"src/types/message_origin.cr","line_number":74,"url":null},"def":{"name":"author_signature=","args":[{"name":"author_signature","external_name":"author_signature","restriction":"String | Nil"}],"visibility":"Public","body":"@author_signature = author_signature"},"external_var":false},{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Channel chat to which the message was originally sent.","summary":"<p>Channel chat to which the message was originally sent.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":68,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Channel chat to which the message was originally sent.","summary":"<p>Channel chat to which the message was originally sent.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/message_origin.cr","line_number":68,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"date:Int32-instance-method","name":"date","doc":"Date the message was sent originally in Unix time.","summary":"<p>Date the message was sent originally in Unix time.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":65,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date the message was sent originally in Unix time.","summary":"<p>Date the message was sent originally in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/message_origin.cr","line_number":65,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"message_id:Int32-instance-method","name":"message_id","doc":"Unique message identifier inside the chat.","summary":"<p>Unique message identifier inside the chat.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":71,"url":null},"def":{"name":"message_id","return_type":"Int32","visibility":"Public","body":"@message_id"},"external_var":false},{"html_id":"message_id=(message_id:Int32)-instance-method","name":"message_id=","doc":"Unique message identifier inside the chat.","summary":"<p>Unique message identifier inside the chat.</p>","abstract":false,"args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"args_string":"(message_id : Int32)","args_html":"(message_id : Int32)","location":{"filename":"src/types/message_origin.cr","line_number":71,"url":null},"def":{"name":"message_id=","args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"visibility":"Public","body":"@message_id = message_id"},"external_var":false},{"html_id":"sender_user:Hamilton::Types::User-instance-method","name":"sender_user","doc":"User that sent the message originally.","summary":"<p>User that sent the message originally.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":17,"url":null},"def":{"name":"sender_user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@sender_user"},"external_var":false},{"html_id":"sender_user=(sender_user:Hamilton::Types::User)-instance-method","name":"sender_user=","doc":"User that sent the message originally.","summary":"<p>User that sent the message originally.</p>","abstract":false,"args":[{"name":"sender_user","external_name":"sender_user","restriction":"Hamilton::Types::User"}],"args_string":"(sender_user : Hamilton::Types::User)","args_html":"(sender_user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/message_origin.cr","line_number":17,"url":null},"def":{"name":"sender_user=","args":[{"name":"sender_user","external_name":"sender_user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@sender_user = sender_user"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the message origin, always \"channel\".","summary":"<p>Type of the message origin, always &quot;channel&quot;.</p>","abstract":false,"location":{"filename":"src/types/message_origin.cr","line_number":62,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the message origin, always \"channel\".","summary":"<p>Type of the message origin, always &quot;channel&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/message_origin.cr","line_number":62,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MessageReactionCountUpdated","path":"Hamilton/Types/MessageReactionCountUpdated.html","kind":"class","full_name":"Hamilton::Types::MessageReactionCountUpdated","name":"MessageReactionCountUpdated","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/message_reaction_type_updated.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents reaction changes on a message with anonymous reactions.","summary":"<p>This object represents reaction changes on a message with anonymous reactions.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"The chat containing the message.","summary":"<p>The chat containing the message.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":11,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"The chat containing the message.","summary":"<p>The chat containing the message.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":11,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"date:Int32-instance-method","name":"date","doc":"Date of the change in Unix time.","summary":"<p>Date of the change in Unix time.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":17,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date of the change in Unix time.","summary":"<p>Date of the change in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":17,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"message_id:Int32-instance-method","name":"message_id","doc":"Unique message identifier inside the chat.","summary":"<p>Unique message identifier inside the chat.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":14,"url":null},"def":{"name":"message_id","return_type":"Int32","visibility":"Public","body":"@message_id"},"external_var":false},{"html_id":"message_id=(message_id:Int32)-instance-method","name":"message_id=","doc":"Unique message identifier inside the chat.","summary":"<p>Unique message identifier inside the chat.</p>","abstract":false,"args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"args_string":"(message_id : Int32)","args_html":"(message_id : Int32)","location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":14,"url":null},"def":{"name":"message_id=","args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"visibility":"Public","body":"@message_id = message_id"},"external_var":false},{"html_id":"reactions:Array(Hamilton::Types::ReactionCount)-instance-method","name":"reactions","doc":"List of reactions that are present on the message.","summary":"<p>List of reactions that are present on the message.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":20,"url":null},"def":{"name":"reactions","return_type":"Array(Hamilton::Types::ReactionCount)","visibility":"Public","body":"@reactions"},"external_var":false},{"html_id":"reactions=(reactions:Array(Hamilton::Types::ReactionCount))-instance-method","name":"reactions=","doc":"List of reactions that are present on the message.","summary":"<p>List of reactions that are present on the message.</p>","abstract":false,"args":[{"name":"reactions","external_name":"reactions","restriction":"Array(Hamilton::Types::ReactionCount)"}],"args_string":"(reactions : Array(Hamilton::Types::ReactionCount))","args_html":"(reactions : Array(<a href=\"../../Hamilton/Types/ReactionCount.html\">Hamilton::Types::ReactionCount</a>))","location":{"filename":"src/types/message_reaction_type_updated.cr","line_number":20,"url":null},"def":{"name":"reactions=","args":[{"name":"reactions","external_name":"reactions","restriction":"Array(Hamilton::Types::ReactionCount)"}],"visibility":"Public","body":"@reactions = reactions"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/MessageReactionUpdated","path":"Hamilton/Types/MessageReactionUpdated.html","kind":"class","full_name":"Hamilton::Types::MessageReactionUpdated","name":"MessageReactionUpdated","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/message_reaction_updated.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a change of a reaction on a message performed by a user.","summary":"<p>This object represents a change of a reaction on a message performed by a user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/message_reaction_updated.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/message_reaction_updated.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"actor_chat:Hamilton::Types::Chat|Nil-instance-method","name":"actor_chat","doc":"The chat on behalf of which the reaction was changed, if the user is anonymous.","summary":"<p>The chat on behalf of which the reaction was changed, if the user is anonymous.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_updated.cr","line_number":20,"url":null},"def":{"name":"actor_chat","return_type":"Hamilton::Types::Chat | Nil","visibility":"Public","body":"@actor_chat"},"external_var":false},{"html_id":"actor_chat=(actor_chat:Hamilton::Types::Chat|Nil)-instance-method","name":"actor_chat=","doc":"The chat on behalf of which the reaction was changed, if the user is anonymous.","summary":"<p>The chat on behalf of which the reaction was changed, if the user is anonymous.</p>","abstract":false,"args":[{"name":"actor_chat","external_name":"actor_chat","restriction":"Hamilton::Types::Chat | Nil"}],"args_string":"(actor_chat : Hamilton::Types::Chat | Nil)","args_html":"(actor_chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a> | Nil)","location":{"filename":"src/types/message_reaction_updated.cr","line_number":20,"url":null},"def":{"name":"actor_chat=","args":[{"name":"actor_chat","external_name":"actor_chat","restriction":"Hamilton::Types::Chat | Nil"}],"visibility":"Public","body":"@actor_chat = actor_chat"},"external_var":false},{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"The chat containing the message the user reacted to.","summary":"<p>The chat containing the message the user reacted to.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_updated.cr","line_number":11,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"The chat containing the message the user reacted to.","summary":"<p>The chat containing the message the user reacted to.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/message_reaction_updated.cr","line_number":11,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"date:Int32-instance-method","name":"date","doc":"Date of the change in Unix time.","summary":"<p>Date of the change in Unix time.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_updated.cr","line_number":23,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date of the change in Unix time.","summary":"<p>Date of the change in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/message_reaction_updated.cr","line_number":23,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"message_id:Int32-instance-method","name":"message_id","doc":"Unique identifier of the message inside the chat.","summary":"<p>Unique identifier of the message inside the chat.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_updated.cr","line_number":14,"url":null},"def":{"name":"message_id","return_type":"Int32","visibility":"Public","body":"@message_id"},"external_var":false},{"html_id":"message_id=(message_id:Int32)-instance-method","name":"message_id=","doc":"Unique identifier of the message inside the chat.","summary":"<p>Unique identifier of the message inside the chat.</p>","abstract":false,"args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"args_string":"(message_id : Int32)","args_html":"(message_id : Int32)","location":{"filename":"src/types/message_reaction_updated.cr","line_number":14,"url":null},"def":{"name":"message_id=","args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"visibility":"Public","body":"@message_id = message_id"},"external_var":false},{"html_id":"new_reaction:Array(Hamilton::Types::ReactionType)-instance-method","name":"new_reaction","doc":"New list of reaction types that have been set by the user.","summary":"<p>New list of reaction types that have been set by the user.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_updated.cr","line_number":29,"url":null},"def":{"name":"new_reaction","return_type":"Array(Hamilton::Types::ReactionType)","visibility":"Public","body":"@new_reaction"},"external_var":false},{"html_id":"new_reaction=(new_reaction:Array(Hamilton::Types::ReactionType))-instance-method","name":"new_reaction=","doc":"New list of reaction types that have been set by the user.","summary":"<p>New list of reaction types that have been set by the user.</p>","abstract":false,"args":[{"name":"new_reaction","external_name":"new_reaction","restriction":"Array(Hamilton::Types::ReactionType)"}],"args_string":"(new_reaction : Array(Hamilton::Types::ReactionType))","args_html":"(new_reaction : Array(<a href=\"../../Hamilton/Types/ReactionType.html\">Hamilton::Types::ReactionType</a>))","location":{"filename":"src/types/message_reaction_updated.cr","line_number":29,"url":null},"def":{"name":"new_reaction=","args":[{"name":"new_reaction","external_name":"new_reaction","restriction":"Array(Hamilton::Types::ReactionType)"}],"visibility":"Public","body":"@new_reaction = new_reaction"},"external_var":false},{"html_id":"old_reaction:Array(Hamilton::Types::ReactionType)-instance-method","name":"old_reaction","doc":"Previous list of reaction types that were set by the user.","summary":"<p>Previous list of reaction types that were set by the user.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_updated.cr","line_number":26,"url":null},"def":{"name":"old_reaction","return_type":"Array(Hamilton::Types::ReactionType)","visibility":"Public","body":"@old_reaction"},"external_var":false},{"html_id":"old_reaction=(old_reaction:Array(Hamilton::Types::ReactionType))-instance-method","name":"old_reaction=","doc":"Previous list of reaction types that were set by the user.","summary":"<p>Previous list of reaction types that were set by the user.</p>","abstract":false,"args":[{"name":"old_reaction","external_name":"old_reaction","restriction":"Array(Hamilton::Types::ReactionType)"}],"args_string":"(old_reaction : Array(Hamilton::Types::ReactionType))","args_html":"(old_reaction : Array(<a href=\"../../Hamilton/Types/ReactionType.html\">Hamilton::Types::ReactionType</a>))","location":{"filename":"src/types/message_reaction_updated.cr","line_number":26,"url":null},"def":{"name":"old_reaction=","args":[{"name":"old_reaction","external_name":"old_reaction","restriction":"Array(Hamilton::Types::ReactionType)"}],"visibility":"Public","body":"@old_reaction = old_reaction"},"external_var":false},{"html_id":"user:Hamilton::Types::User|Nil-instance-method","name":"user","doc":"The user that changed the reaction, if the user isn't anonymous.","summary":"<p>The user that changed the reaction, if the user isn't anonymous.</p>","abstract":false,"location":{"filename":"src/types/message_reaction_updated.cr","line_number":17,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User|Nil)-instance-method","name":"user=","doc":"The user that changed the reaction, if the user isn't anonymous.","summary":"<p>The user that changed the reaction, if the user isn't anonymous.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(user : Hamilton::Types::User | Nil)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/message_reaction_updated.cr","line_number":17,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/OrderInfo","path":"Hamilton/Types/OrderInfo.html","kind":"class","full_name":"Hamilton::Types::OrderInfo","name":"OrderInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/order_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents information about an order.","summary":"<p>This object represents information about an order.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/order_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/order_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"email:String|Nil-instance-method","name":"email","doc":"User email.","summary":"<p>User email.</p>","abstract":false,"location":{"filename":"src/types/order_info.cr","line_number":17,"url":null},"def":{"name":"email","return_type":"String | Nil","visibility":"Public","body":"@email"},"external_var":false},{"html_id":"email=(email:String|Nil)-instance-method","name":"email=","doc":"User email.","summary":"<p>User email.</p>","abstract":false,"args":[{"name":"email","external_name":"email","restriction":"String | Nil"}],"args_string":"(email : String | Nil)","args_html":"(email : String | Nil)","location":{"filename":"src/types/order_info.cr","line_number":17,"url":null},"def":{"name":"email=","args":[{"name":"email","external_name":"email","restriction":"String | Nil"}],"visibility":"Public","body":"@email = email"},"external_var":false},{"html_id":"name:String|Nil-instance-method","name":"name","doc":"User name.","summary":"<p>User name.</p>","abstract":false,"location":{"filename":"src/types/order_info.cr","line_number":11,"url":null},"def":{"name":"name","return_type":"String | Nil","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String|Nil)-instance-method","name":"name=","doc":"User name.","summary":"<p>User name.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String | Nil"}],"args_string":"(name : String | Nil)","args_html":"(name : String | Nil)","location":{"filename":"src/types/order_info.cr","line_number":11,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String | Nil"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"phone_number:String|Nil-instance-method","name":"phone_number","doc":"User's phone number.","summary":"<p>User's phone number.</p>","abstract":false,"location":{"filename":"src/types/order_info.cr","line_number":14,"url":null},"def":{"name":"phone_number","return_type":"String | Nil","visibility":"Public","body":"@phone_number"},"external_var":false},{"html_id":"phone_number=(phone_number:String|Nil)-instance-method","name":"phone_number=","doc":"User's phone number.","summary":"<p>User's phone number.</p>","abstract":false,"args":[{"name":"phone_number","external_name":"phone_number","restriction":"String | Nil"}],"args_string":"(phone_number : String | Nil)","args_html":"(phone_number : String | Nil)","location":{"filename":"src/types/order_info.cr","line_number":14,"url":null},"def":{"name":"phone_number=","args":[{"name":"phone_number","external_name":"phone_number","restriction":"String | Nil"}],"visibility":"Public","body":"@phone_number = phone_number"},"external_var":false},{"html_id":"shipping_address:Hamilton::Types::ShippingAddress|Nil-instance-method","name":"shipping_address","doc":"User shipping address.","summary":"<p>User shipping address.</p>","abstract":false,"location":{"filename":"src/types/order_info.cr","line_number":20,"url":null},"def":{"name":"shipping_address","return_type":"Hamilton::Types::ShippingAddress | Nil","visibility":"Public","body":"@shipping_address"},"external_var":false},{"html_id":"shipping_address=(shipping_address:Hamilton::Types::ShippingAddress|Nil)-instance-method","name":"shipping_address=","doc":"User shipping address.","summary":"<p>User shipping address.</p>","abstract":false,"args":[{"name":"shipping_address","external_name":"shipping_address","restriction":"Hamilton::Types::ShippingAddress | Nil"}],"args_string":"(shipping_address : Hamilton::Types::ShippingAddress | Nil)","args_html":"(shipping_address : <a href=\"../../Hamilton/Types/ShippingAddress.html\">Hamilton::Types::ShippingAddress</a> | Nil)","location":{"filename":"src/types/order_info.cr","line_number":20,"url":null},"def":{"name":"shipping_address=","args":[{"name":"shipping_address","external_name":"shipping_address","restriction":"Hamilton::Types::ShippingAddress | Nil"}],"visibility":"Public","body":"@shipping_address = shipping_address"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/OwnedGift","path":"Hamilton/Types/OwnedGift.html","kind":"alias","full_name":"Hamilton::Types::OwnedGift","name":"OwnedGift","abstract":false,"locations":[{"filename":"src/types/owned_gift.cr","line_number":85,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::OwnedGiftRegular | Hamilton::Types::OwnedGiftUnique)","aliased_html":"<a href=\"../../Hamilton/Types/OwnedGiftRegular.html\">Hamilton::Types::OwnedGiftRegular</a> | <a href=\"../../Hamilton/Types/OwnedGiftUnique.html\">Hamilton::Types::OwnedGiftUnique</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes a gift received and owned by a user or a chat.","summary":"<p>This object describes a gift received and owned by a user or a chat.</p>"},{"html_id":"hamilton/Hamilton/Types/OwnedGiftRegular","path":"Hamilton/Types/OwnedGiftRegular.html","kind":"class","full_name":"Hamilton::Types::OwnedGiftRegular","name":"OwnedGiftRegular","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/owned_gift.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a regular gift owned by a user or a chat.","summary":"<p>Describes a regular gift owned by a user or a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/owned_gift.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/owned_gift.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"can_be_upgraded:Bool|Nil-instance-method","name":"can_be_upgraded","doc":"True, if the gift can be upgraded to a unique gift; for gifts received on behalf of business accounts only.","summary":"<p>True, if the gift can be upgraded to a unique gift; for gifts received on behalf of business accounts only.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":38,"url":null},"def":{"name":"can_be_upgraded","return_type":"Bool | Nil","visibility":"Public","body":"@can_be_upgraded"},"external_var":false},{"html_id":"can_be_upgraded=(can_be_upgraded:Bool|Nil)-instance-method","name":"can_be_upgraded=","doc":"True, if the gift can be upgraded to a unique gift; for gifts received on behalf of business accounts only.","summary":"<p>True, if the gift can be upgraded to a unique gift; for gifts received on behalf of business accounts only.</p>","abstract":false,"args":[{"name":"can_be_upgraded","external_name":"can_be_upgraded","restriction":"Bool | Nil"}],"args_string":"(can_be_upgraded : Bool | Nil)","args_html":"(can_be_upgraded : Bool | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":38,"url":null},"def":{"name":"can_be_upgraded=","args":[{"name":"can_be_upgraded","external_name":"can_be_upgraded","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_be_upgraded = can_be_upgraded"},"external_var":false},{"html_id":"convert_star_count:Int32|Nil-instance-method","name":"convert_star_count","doc":"Number of Telegram Stars that can be claimed by the receiver instead of the gift; omitted if the gift cannot be converted to Telegram Stars.","summary":"<p>Number of Telegram Stars that can be claimed by the receiver instead of the gift; omitted if the gift cannot be converted to Telegram Stars.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":44,"url":null},"def":{"name":"convert_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@convert_star_count"},"external_var":false},{"html_id":"convert_star_count=(convert_star_count:Int32|Nil)-instance-method","name":"convert_star_count=","doc":"Number of Telegram Stars that can be claimed by the receiver instead of the gift; omitted if the gift cannot be converted to Telegram Stars.","summary":"<p>Number of Telegram Stars that can be claimed by the receiver instead of the gift; omitted if the gift cannot be converted to Telegram Stars.</p>","abstract":false,"args":[{"name":"convert_star_count","external_name":"convert_star_count","restriction":"Int32 | Nil"}],"args_string":"(convert_star_count : Int32 | Nil)","args_html":"(convert_star_count : Int32 | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":44,"url":null},"def":{"name":"convert_star_count=","args":[{"name":"convert_star_count","external_name":"convert_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@convert_star_count = convert_star_count"},"external_var":false},{"html_id":"entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"entities","doc":"Special entities that appear in the text.","summary":"<p>Special entities that appear in the text.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":29,"url":null},"def":{"name":"entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@entities"},"external_var":false},{"html_id":"entities=(entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"entities=","doc":"Special entities that appear in the text.","summary":"<p>Special entities that appear in the text.</p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":29,"url":null},"def":{"name":"entities=","args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@entities = entities"},"external_var":false},{"html_id":"gift:Hamilton::Types::Gift-instance-method","name":"gift","doc":"Information about the regular gift.","summary":"<p>Information about the regular gift.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":14,"url":null},"def":{"name":"gift","return_type":"Hamilton::Types::Gift","visibility":"Public","body":"@gift"},"external_var":false},{"html_id":"gift=(gift:Hamilton::Types::Gift)-instance-method","name":"gift=","doc":"Information about the regular gift.","summary":"<p>Information about the regular gift.</p>","abstract":false,"args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::Gift"}],"args_string":"(gift : Hamilton::Types::Gift)","args_html":"(gift : <a href=\"../../Hamilton/Types/Gift.html\">Hamilton::Types::Gift</a>)","location":{"filename":"src/types/owned_gift.cr","line_number":14,"url":null},"def":{"name":"gift=","args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::Gift"}],"visibility":"Public","body":"@gift = gift"},"external_var":false},{"html_id":"is_private:Bool|Nil-instance-method","name":"is_private","doc":"True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them.","summary":"<p>True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":32,"url":null},"def":{"name":"is_private","return_type":"Bool | Nil","visibility":"Public","body":"@is_private"},"external_var":false},{"html_id":"is_private=(is_private:Bool|Nil)-instance-method","name":"is_private=","doc":"True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them.","summary":"<p>True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them.</p>","abstract":false,"args":[{"name":"is_private","external_name":"is_private","restriction":"Bool | Nil"}],"args_string":"(is_private : Bool | Nil)","args_html":"(is_private : Bool | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":32,"url":null},"def":{"name":"is_private=","args":[{"name":"is_private","external_name":"is_private","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_private = is_private"},"external_var":false},{"html_id":"is_saved:Bool|Nil-instance-method","name":"is_saved","doc":"True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only.","summary":"<p>True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":35,"url":null},"def":{"name":"is_saved","return_type":"Bool | Nil","visibility":"Public","body":"@is_saved"},"external_var":false},{"html_id":"is_saved=(is_saved:Bool|Nil)-instance-method","name":"is_saved=","doc":"True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only.","summary":"<p>True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only.</p>","abstract":false,"args":[{"name":"is_saved","external_name":"is_saved","restriction":"Bool | Nil"}],"args_string":"(is_saved : Bool | Nil)","args_html":"(is_saved : Bool | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":35,"url":null},"def":{"name":"is_saved=","args":[{"name":"is_saved","external_name":"is_saved","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_saved = is_saved"},"external_var":false},{"html_id":"owned_gift_id:String|Nil-instance-method","name":"owned_gift_id","doc":"Unique identifier of the gift for the bot; for gifts received on behalf of business accounts only.","summary":"<p>Unique identifier of the gift for the bot; for gifts received on behalf of business accounts only.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":17,"url":null},"def":{"name":"owned_gift_id","return_type":"String | Nil","visibility":"Public","body":"@owned_gift_id"},"external_var":false},{"html_id":"owned_gift_id=(owned_gift_id:String|Nil)-instance-method","name":"owned_gift_id=","doc":"Unique identifier of the gift for the bot; for gifts received on behalf of business accounts only.","summary":"<p>Unique identifier of the gift for the bot; for gifts received on behalf of business accounts only.</p>","abstract":false,"args":[{"name":"owned_gift_id","external_name":"owned_gift_id","restriction":"String | Nil"}],"args_string":"(owned_gift_id : String | Nil)","args_html":"(owned_gift_id : String | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":17,"url":null},"def":{"name":"owned_gift_id=","args":[{"name":"owned_gift_id","external_name":"owned_gift_id","restriction":"String | Nil"}],"visibility":"Public","body":"@owned_gift_id = owned_gift_id"},"external_var":false},{"html_id":"prepaid_upgrade_star_count:Int32|Nil-instance-method","name":"prepaid_upgrade_star_count","doc":"Number of Telegram Stars that were paid by the sender for the ability to upgrade the gift.","summary":"<p>Number of Telegram Stars that were paid by the sender for the ability to upgrade the gift.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":47,"url":null},"def":{"name":"prepaid_upgrade_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@prepaid_upgrade_star_count"},"external_var":false},{"html_id":"prepaid_upgrade_star_count=(prepaid_upgrade_star_count:Int32|Nil)-instance-method","name":"prepaid_upgrade_star_count=","doc":"Number of Telegram Stars that were paid by the sender for the ability to upgrade the gift.","summary":"<p>Number of Telegram Stars that were paid by the sender for the ability to upgrade the gift.</p>","abstract":false,"args":[{"name":"prepaid_upgrade_star_count","external_name":"prepaid_upgrade_star_count","restriction":"Int32 | Nil"}],"args_string":"(prepaid_upgrade_star_count : Int32 | Nil)","args_html":"(prepaid_upgrade_star_count : Int32 | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":47,"url":null},"def":{"name":"prepaid_upgrade_star_count=","args":[{"name":"prepaid_upgrade_star_count","external_name":"prepaid_upgrade_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@prepaid_upgrade_star_count = prepaid_upgrade_star_count"},"external_var":false},{"html_id":"send_date:Int32-instance-method","name":"send_date","doc":"Date the gift was sent in Unix time.","summary":"<p>Date the gift was sent in Unix time.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":23,"url":null},"def":{"name":"send_date","return_type":"Int32","visibility":"Public","body":"@send_date"},"external_var":false},{"html_id":"send_date=(send_date:Int32)-instance-method","name":"send_date=","doc":"Date the gift was sent in Unix time.","summary":"<p>Date the gift was sent in Unix time.</p>","abstract":false,"args":[{"name":"send_date","external_name":"send_date","restriction":"Int32"}],"args_string":"(send_date : Int32)","args_html":"(send_date : Int32)","location":{"filename":"src/types/owned_gift.cr","line_number":23,"url":null},"def":{"name":"send_date=","args":[{"name":"send_date","external_name":"send_date","restriction":"Int32"}],"visibility":"Public","body":"@send_date = send_date"},"external_var":false},{"html_id":"sender_user:Hamilton::Types::User|Nil-instance-method","name":"sender_user","doc":"Sender of the gift if it is a known user.","summary":"<p>Sender of the gift if it is a known user.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":20,"url":null},"def":{"name":"sender_user","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@sender_user"},"external_var":false},{"html_id":"sender_user=(sender_user:Hamilton::Types::User|Nil)-instance-method","name":"sender_user=","doc":"Sender of the gift if it is a known user.","summary":"<p>Sender of the gift if it is a known user.</p>","abstract":false,"args":[{"name":"sender_user","external_name":"sender_user","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(sender_user : Hamilton::Types::User | Nil)","args_html":"(sender_user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":20,"url":null},"def":{"name":"sender_user=","args":[{"name":"sender_user","external_name":"sender_user","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@sender_user = sender_user"},"external_var":false},{"html_id":"text:String|Nil-instance-method","name":"text","doc":"Text of the message that was added to the gift.","summary":"<p>Text of the message that was added to the gift.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":26,"url":null},"def":{"name":"text","return_type":"String | Nil","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String|Nil)-instance-method","name":"text=","doc":"Text of the message that was added to the gift.","summary":"<p>Text of the message that was added to the gift.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | Nil"}],"args_string":"(text : String | Nil)","args_html":"(text : String | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":26,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String | Nil"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the gift, always “regular”.","summary":"<p>Type of the gift, always “regular”.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the gift, always “regular”.","summary":"<p>Type of the gift, always “regular”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/owned_gift.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"was_refunded:Bool|Nil-instance-method","name":"was_refunded","doc":"True, if the gift was refunded and isn't available anymore.","summary":"<p>True, if the gift was refunded and isn't available anymore.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":41,"url":null},"def":{"name":"was_refunded","return_type":"Bool | Nil","visibility":"Public","body":"@was_refunded"},"external_var":false},{"html_id":"was_refunded=(was_refunded:Bool|Nil)-instance-method","name":"was_refunded=","doc":"True, if the gift was refunded and isn't available anymore.","summary":"<p>True, if the gift was refunded and isn't available anymore.</p>","abstract":false,"args":[{"name":"was_refunded","external_name":"was_refunded","restriction":"Bool | Nil"}],"args_string":"(was_refunded : Bool | Nil)","args_html":"(was_refunded : Bool | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":41,"url":null},"def":{"name":"was_refunded=","args":[{"name":"was_refunded","external_name":"was_refunded","restriction":"Bool | Nil"}],"visibility":"Public","body":"@was_refunded = was_refunded"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/OwnedGifts","path":"Hamilton/Types/OwnedGifts.html","kind":"class","full_name":"Hamilton::Types::OwnedGifts","name":"OwnedGifts","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/owned_gift.cr","line_number":89,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Contains the list of gifts received and owned by a user or a chat.","summary":"<p>Contains the list of gifts received and owned by a user or a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/owned_gift.cr","line_number":90,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/owned_gift.cr","line_number":90,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"gifts:Array(Hamilton::Types::OwnedGift)-instance-method","name":"gifts","doc":"The list of gifts.","summary":"<p>The list of gifts.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":97,"url":null},"def":{"name":"gifts","return_type":"Array(Hamilton::Types::OwnedGift)","visibility":"Public","body":"@gifts"},"external_var":false},{"html_id":"gifts=(gifts:Array(Hamilton::Types::OwnedGift))-instance-method","name":"gifts=","doc":"The list of gifts.","summary":"<p>The list of gifts.</p>","abstract":false,"args":[{"name":"gifts","external_name":"gifts","restriction":"Array(Hamilton::Types::OwnedGift)"}],"args_string":"(gifts : Array(Hamilton::Types::OwnedGift))","args_html":"(gifts : Array(<a href=\"../../Hamilton/Types/OwnedGift.html\">Hamilton::Types::OwnedGift</a>))","location":{"filename":"src/types/owned_gift.cr","line_number":97,"url":null},"def":{"name":"gifts=","args":[{"name":"gifts","external_name":"gifts","restriction":"Array(Hamilton::Types::OwnedGift)"}],"visibility":"Public","body":"@gifts = gifts"},"external_var":false},{"html_id":"next_offset:String|Nil-instance-method","name":"next_offset","doc":"Offset for the next request. If empty, then there are no more results.","summary":"<p>Offset for the next request.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":100,"url":null},"def":{"name":"next_offset","return_type":"String | Nil","visibility":"Public","body":"@next_offset"},"external_var":false},{"html_id":"next_offset=(next_offset:String|Nil)-instance-method","name":"next_offset=","doc":"Offset for the next request. If empty, then there are no more results.","summary":"<p>Offset for the next request.</p>","abstract":false,"args":[{"name":"next_offset","external_name":"next_offset","restriction":"String | Nil"}],"args_string":"(next_offset : String | Nil)","args_html":"(next_offset : String | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":100,"url":null},"def":{"name":"next_offset=","args":[{"name":"next_offset","external_name":"next_offset","restriction":"String | Nil"}],"visibility":"Public","body":"@next_offset = next_offset"},"external_var":false},{"html_id":"total_count:Int32-instance-method","name":"total_count","doc":"The total number of gifts owned by the user or the chat.","summary":"<p>The total number of gifts owned by the user or the chat.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":94,"url":null},"def":{"name":"total_count","return_type":"Int32","visibility":"Public","body":"@total_count"},"external_var":false},{"html_id":"total_count=(total_count:Int32)-instance-method","name":"total_count=","doc":"The total number of gifts owned by the user or the chat.","summary":"<p>The total number of gifts owned by the user or the chat.</p>","abstract":false,"args":[{"name":"total_count","external_name":"total_count","restriction":"Int32"}],"args_string":"(total_count : Int32)","args_html":"(total_count : Int32)","location":{"filename":"src/types/owned_gift.cr","line_number":94,"url":null},"def":{"name":"total_count=","args":[{"name":"total_count","external_name":"total_count","restriction":"Int32"}],"visibility":"Public","body":"@total_count = total_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/OwnedGiftUnique","path":"Hamilton/Types/OwnedGiftUnique.html","kind":"class","full_name":"Hamilton::Types::OwnedGiftUnique","name":"OwnedGiftUnique","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/owned_gift.cr","line_number":52,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a unique gift received and owned by a user or a chat.","summary":"<p>Describes a unique gift received and owned by a user or a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/owned_gift.cr","line_number":53,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/owned_gift.cr","line_number":53,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"can_be_transferred:Bool|Nil-instance-method","name":"can_be_transferred","doc":"True, if the gift can be transferred to another owner; for gifts received on behalf of business accounts only.","summary":"<p>True, if the gift can be transferred to another owner; for gifts received on behalf of business accounts only.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":75,"url":null},"def":{"name":"can_be_transferred","return_type":"Bool | Nil","visibility":"Public","body":"@can_be_transferred"},"external_var":false},{"html_id":"can_be_transferred=(can_be_transferred:Bool|Nil)-instance-method","name":"can_be_transferred=","doc":"True, if the gift can be transferred to another owner; for gifts received on behalf of business accounts only.","summary":"<p>True, if the gift can be transferred to another owner; for gifts received on behalf of business accounts only.</p>","abstract":false,"args":[{"name":"can_be_transferred","external_name":"can_be_transferred","restriction":"Bool | Nil"}],"args_string":"(can_be_transferred : Bool | Nil)","args_html":"(can_be_transferred : Bool | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":75,"url":null},"def":{"name":"can_be_transferred=","args":[{"name":"can_be_transferred","external_name":"can_be_transferred","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_be_transferred = can_be_transferred"},"external_var":false},{"html_id":"gift:Hamilton::Types::UniqueGift-instance-method","name":"gift","doc":"Information about the unique gift.","summary":"<p>Information about the unique gift.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":60,"url":null},"def":{"name":"gift","return_type":"Hamilton::Types::UniqueGift","visibility":"Public","body":"@gift"},"external_var":false},{"html_id":"gift=(gift:Hamilton::Types::UniqueGift)-instance-method","name":"gift=","doc":"Information about the unique gift.","summary":"<p>Information about the unique gift.</p>","abstract":false,"args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::UniqueGift"}],"args_string":"(gift : Hamilton::Types::UniqueGift)","args_html":"(gift : <a href=\"../../Hamilton/Types/UniqueGift.html\">Hamilton::Types::UniqueGift</a>)","location":{"filename":"src/types/owned_gift.cr","line_number":60,"url":null},"def":{"name":"gift=","args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::UniqueGift"}],"visibility":"Public","body":"@gift = gift"},"external_var":false},{"html_id":"is_saved:Bool|Nil-instance-method","name":"is_saved","doc":"True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only.","summary":"<p>True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":72,"url":null},"def":{"name":"is_saved","return_type":"Bool | Nil","visibility":"Public","body":"@is_saved"},"external_var":false},{"html_id":"is_saved=(is_saved:Bool|Nil)-instance-method","name":"is_saved=","doc":"True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only.","summary":"<p>True, if the gift is displayed on the account's profile page; for gifts received on behalf of business accounts only.</p>","abstract":false,"args":[{"name":"is_saved","external_name":"is_saved","restriction":"Bool | Nil"}],"args_string":"(is_saved : Bool | Nil)","args_html":"(is_saved : Bool | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":72,"url":null},"def":{"name":"is_saved=","args":[{"name":"is_saved","external_name":"is_saved","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_saved = is_saved"},"external_var":false},{"html_id":"next_transfer_date:Int32|Nil-instance-method","name":"next_transfer_date","doc":"Point in time (Unix timestamp) when the gift can be transferred. If it is in the past, then the gift can be transferred now.","summary":"<p>Point in time (Unix timestamp) when the gift can be transferred.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":81,"url":null},"def":{"name":"next_transfer_date","return_type":"Int32 | Nil","visibility":"Public","body":"@next_transfer_date"},"external_var":false},{"html_id":"next_transfer_date=(next_transfer_date:Int32|Nil)-instance-method","name":"next_transfer_date=","doc":"Point in time (Unix timestamp) when the gift can be transferred. If it is in the past, then the gift can be transferred now.","summary":"<p>Point in time (Unix timestamp) when the gift can be transferred.</p>","abstract":false,"args":[{"name":"next_transfer_date","external_name":"next_transfer_date","restriction":"Int32 | Nil"}],"args_string":"(next_transfer_date : Int32 | Nil)","args_html":"(next_transfer_date : Int32 | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":81,"url":null},"def":{"name":"next_transfer_date=","args":[{"name":"next_transfer_date","external_name":"next_transfer_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@next_transfer_date = next_transfer_date"},"external_var":false},{"html_id":"owned_gift_id:String|Nil-instance-method","name":"owned_gift_id","doc":"Unique identifier of the received gift for the bot; for gifts received on behalf of business accounts only.","summary":"<p>Unique identifier of the received gift for the bot; for gifts received on behalf of business accounts only.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":63,"url":null},"def":{"name":"owned_gift_id","return_type":"String | Nil","visibility":"Public","body":"@owned_gift_id"},"external_var":false},{"html_id":"owned_gift_id=(owned_gift_id:String|Nil)-instance-method","name":"owned_gift_id=","doc":"Unique identifier of the received gift for the bot; for gifts received on behalf of business accounts only.","summary":"<p>Unique identifier of the received gift for the bot; for gifts received on behalf of business accounts only.</p>","abstract":false,"args":[{"name":"owned_gift_id","external_name":"owned_gift_id","restriction":"String | Nil"}],"args_string":"(owned_gift_id : String | Nil)","args_html":"(owned_gift_id : String | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":63,"url":null},"def":{"name":"owned_gift_id=","args":[{"name":"owned_gift_id","external_name":"owned_gift_id","restriction":"String | Nil"}],"visibility":"Public","body":"@owned_gift_id = owned_gift_id"},"external_var":false},{"html_id":"send_date:Int32-instance-method","name":"send_date","doc":"Date the gift was sent in Unix time.","summary":"<p>Date the gift was sent in Unix time.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":69,"url":null},"def":{"name":"send_date","return_type":"Int32","visibility":"Public","body":"@send_date"},"external_var":false},{"html_id":"send_date=(send_date:Int32)-instance-method","name":"send_date=","doc":"Date the gift was sent in Unix time.","summary":"<p>Date the gift was sent in Unix time.</p>","abstract":false,"args":[{"name":"send_date","external_name":"send_date","restriction":"Int32"}],"args_string":"(send_date : Int32)","args_html":"(send_date : Int32)","location":{"filename":"src/types/owned_gift.cr","line_number":69,"url":null},"def":{"name":"send_date=","args":[{"name":"send_date","external_name":"send_date","restriction":"Int32"}],"visibility":"Public","body":"@send_date = send_date"},"external_var":false},{"html_id":"sender_user:Hamilton::Types::User|Nil-instance-method","name":"sender_user","doc":"Sender of the gift if it is a known user.","summary":"<p>Sender of the gift if it is a known user.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":66,"url":null},"def":{"name":"sender_user","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@sender_user"},"external_var":false},{"html_id":"sender_user=(sender_user:Hamilton::Types::User|Nil)-instance-method","name":"sender_user=","doc":"Sender of the gift if it is a known user.","summary":"<p>Sender of the gift if it is a known user.</p>","abstract":false,"args":[{"name":"sender_user","external_name":"sender_user","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(sender_user : Hamilton::Types::User | Nil)","args_html":"(sender_user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":66,"url":null},"def":{"name":"sender_user=","args":[{"name":"sender_user","external_name":"sender_user","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@sender_user = sender_user"},"external_var":false},{"html_id":"transfer_star_count:Int32|Nil-instance-method","name":"transfer_star_count","doc":"Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift.","summary":"<p>Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":78,"url":null},"def":{"name":"transfer_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@transfer_star_count"},"external_var":false},{"html_id":"transfer_star_count=(transfer_star_count:Int32|Nil)-instance-method","name":"transfer_star_count=","doc":"Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift.","summary":"<p>Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift.</p>","abstract":false,"args":[{"name":"transfer_star_count","external_name":"transfer_star_count","restriction":"Int32 | Nil"}],"args_string":"(transfer_star_count : Int32 | Nil)","args_html":"(transfer_star_count : Int32 | Nil)","location":{"filename":"src/types/owned_gift.cr","line_number":78,"url":null},"def":{"name":"transfer_star_count=","args":[{"name":"transfer_star_count","external_name":"transfer_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@transfer_star_count = transfer_star_count"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the gift, always \"unique\".","summary":"<p>Type of the gift, always &quot;unique&quot;.</p>","abstract":false,"location":{"filename":"src/types/owned_gift.cr","line_number":57,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the gift, always \"unique\".","summary":"<p>Type of the gift, always &quot;unique&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/owned_gift.cr","line_number":57,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PaidMedia","path":"Hamilton/Types/PaidMedia.html","kind":"alias","full_name":"Hamilton::Types::PaidMedia","name":"PaidMedia","abstract":false,"locations":[{"filename":"src/types/paid_media.cr","line_number":50,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::PaidMediaPhoto | Hamilton::Types::PaidMediaPreview | Hamilton::Types::PaidMediaVideo)","aliased_html":"<a href=\"../../Hamilton/Types/PaidMediaPhoto.html\">Hamilton::Types::PaidMediaPhoto</a> | <a href=\"../../Hamilton/Types/PaidMediaPreview.html\">Hamilton::Types::PaidMediaPreview</a> | <a href=\"../../Hamilton/Types/PaidMediaVideo.html\">Hamilton::Types::PaidMediaVideo</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes paid media.","summary":"<p>This object describes paid media.</p>"},{"html_id":"hamilton/Hamilton/Types/PaidMediaInfo","path":"Hamilton/Types/PaidMediaInfo.html","kind":"class","full_name":"Hamilton::Types::PaidMediaInfo","name":"PaidMediaInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/paid_media_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the paid media added to a message.","summary":"<p>Describes the paid media added to a message.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/paid_media_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/paid_media_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"paid_media:Array(Hamilton::Types::PaidMedia)-instance-method","name":"paid_media","doc":"Information about the paid media.","summary":"<p>Information about the paid media.</p>","abstract":false,"location":{"filename":"src/types/paid_media_info.cr","line_number":14,"url":null},"def":{"name":"paid_media","return_type":"Array(Hamilton::Types::PaidMedia)","visibility":"Public","body":"@paid_media"},"external_var":false},{"html_id":"paid_media=(paid_media:Array(Hamilton::Types::PaidMedia))-instance-method","name":"paid_media=","doc":"Information about the paid media.","summary":"<p>Information about the paid media.</p>","abstract":false,"args":[{"name":"paid_media","external_name":"paid_media","restriction":"Array(Hamilton::Types::PaidMedia)"}],"args_string":"(paid_media : Array(Hamilton::Types::PaidMedia))","args_html":"(paid_media : Array(<a href=\"../../Hamilton/Types/PaidMedia.html\">Hamilton::Types::PaidMedia</a>))","location":{"filename":"src/types/paid_media_info.cr","line_number":14,"url":null},"def":{"name":"paid_media=","args":[{"name":"paid_media","external_name":"paid_media","restriction":"Array(Hamilton::Types::PaidMedia)"}],"visibility":"Public","body":"@paid_media = paid_media"},"external_var":false},{"html_id":"star_count:Int32-instance-method","name":"star_count","doc":"The number of Telegram Stars that must be paid to buy access to the media.","summary":"<p>The number of Telegram Stars that must be paid to buy access to the media.</p>","abstract":false,"location":{"filename":"src/types/paid_media_info.cr","line_number":11,"url":null},"def":{"name":"star_count","return_type":"Int32","visibility":"Public","body":"@star_count"},"external_var":false},{"html_id":"star_count=(star_count:Int32)-instance-method","name":"star_count=","doc":"The number of Telegram Stars that must be paid to buy access to the media.","summary":"<p>The number of Telegram Stars that must be paid to buy access to the media.</p>","abstract":false,"args":[{"name":"star_count","external_name":"star_count","restriction":"Int32"}],"args_string":"(star_count : Int32)","args_html":"(star_count : Int32)","location":{"filename":"src/types/paid_media_info.cr","line_number":11,"url":null},"def":{"name":"star_count=","args":[{"name":"star_count","external_name":"star_count","restriction":"Int32"}],"visibility":"Public","body":"@star_count = star_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PaidMediaPhoto","path":"Hamilton/Types/PaidMediaPhoto.html","kind":"class","full_name":"Hamilton::Types::PaidMediaPhoto","name":"PaidMediaPhoto","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/paid_media.cr","line_number":25,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The paid media is a photo.","summary":"<p>The paid media is a photo.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/paid_media.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/paid_media.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"photo:Array(Hamilton::Types::PhotoSize)-instance-method","name":"photo","doc":"The photo.","summary":"<p>The photo.</p>","abstract":false,"location":{"filename":"src/types/paid_media.cr","line_number":33,"url":null},"def":{"name":"photo","return_type":"Array(Hamilton::Types::PhotoSize)","visibility":"Public","body":"@photo"},"external_var":false},{"html_id":"photo=(photo:Array(Hamilton::Types::PhotoSize))-instance-method","name":"photo=","doc":"The photo.","summary":"<p>The photo.</p>","abstract":false,"args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize)"}],"args_string":"(photo : Array(Hamilton::Types::PhotoSize))","args_html":"(photo : Array(<a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a>))","location":{"filename":"src/types/paid_media.cr","line_number":33,"url":null},"def":{"name":"photo=","args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize)"}],"visibility":"Public","body":"@photo = photo"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the paid media, always \"photo\".","summary":"<p>Type of the paid media, always &quot;photo&quot;.</p>","abstract":false,"location":{"filename":"src/types/paid_media.cr","line_number":30,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the paid media, always \"photo\".","summary":"<p>Type of the paid media, always &quot;photo&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/paid_media.cr","line_number":30,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PaidMediaPreview","path":"Hamilton/Types/PaidMediaPreview.html","kind":"class","full_name":"Hamilton::Types::PaidMediaPreview","name":"PaidMediaPreview","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/paid_media.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The paid media isn't available before the payment..","summary":"<p>The paid media isn't available before the payment..</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/paid_media.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/paid_media.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"duration:Int32|Nil-instance-method","name":"duration","doc":"Duration of the media in seconds as defined by the sender.","summary":"<p>Duration of the media in seconds as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/paid_media.cr","line_number":20,"url":null},"def":{"name":"duration","return_type":"Int32 | Nil","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32|Nil)-instance-method","name":"duration=","doc":"Duration of the media in seconds as defined by the sender.","summary":"<p>Duration of the media in seconds as defined by the sender.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32 | Nil"}],"args_string":"(duration : Int32 | Nil)","args_html":"(duration : Int32 | Nil)","location":{"filename":"src/types/paid_media.cr","line_number":20,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"height:Int32|Nil-instance-method","name":"height","doc":"Media height as defined by the sender.","summary":"<p>Media height as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/paid_media.cr","line_number":17,"url":null},"def":{"name":"height","return_type":"Int32 | Nil","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int32|Nil)-instance-method","name":"height=","doc":"Media height as defined by the sender.","summary":"<p>Media height as defined by the sender.</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32 | Nil"}],"args_string":"(height : Int32 | Nil)","args_html":"(height : Int32 | Nil)","location":{"filename":"src/types/paid_media.cr","line_number":17,"url":null},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the paid media, always “preview”.","summary":"<p>Type of the paid media, always “preview”.</p>","abstract":false,"location":{"filename":"src/types/paid_media.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the paid media, always “preview”.","summary":"<p>Type of the paid media, always “preview”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/paid_media.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"width:Int32|Nil-instance-method","name":"width","doc":"Media width as defined by the sender.","summary":"<p>Media width as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/paid_media.cr","line_number":14,"url":null},"def":{"name":"width","return_type":"Int32 | Nil","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int32|Nil)-instance-method","name":"width=","doc":"Media width as defined by the sender.","summary":"<p>Media width as defined by the sender.</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32 | Nil"}],"args_string":"(width : Int32 | Nil)","args_html":"(width : Int32 | Nil)","location":{"filename":"src/types/paid_media.cr","line_number":14,"url":null},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@width = width"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PaidMediaPurchased","path":"Hamilton/Types/PaidMediaPurchased.html","kind":"class","full_name":"Hamilton::Types::PaidMediaPurchased","name":"PaidMediaPurchased","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/paid_media_purchased.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about a paid media purchase.","summary":"<p>This object contains information about a paid media purchase.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/paid_media_purchased.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/paid_media_purchased.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"from:Hamilton::Types::User-instance-method","name":"from","doc":"User who purchased the media.","summary":"<p>User who purchased the media.</p>","abstract":false,"location":{"filename":"src/types/paid_media_purchased.cr","line_number":11,"url":null},"def":{"name":"from","return_type":"Hamilton::Types::User","visibility":"Public","body":"@from"},"external_var":false},{"html_id":"from=(from:Hamilton::Types::User)-instance-method","name":"from=","doc":"User who purchased the media.","summary":"<p>User who purchased the media.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"args_string":"(from : Hamilton::Types::User)","args_html":"(from : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/paid_media_purchased.cr","line_number":11,"url":null},"def":{"name":"from=","args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@from = from"},"external_var":false},{"html_id":"paid_media_payload:Int32-instance-method","name":"paid_media_payload","doc":"Bot-specified paid media payload.","summary":"<p>Bot-specified paid media payload.</p>","abstract":false,"location":{"filename":"src/types/paid_media_purchased.cr","line_number":14,"url":null},"def":{"name":"paid_media_payload","return_type":"Int32","visibility":"Public","body":"@paid_media_payload"},"external_var":false},{"html_id":"paid_media_payload=(paid_media_payload:Int32)-instance-method","name":"paid_media_payload=","doc":"Bot-specified paid media payload.","summary":"<p>Bot-specified paid media payload.</p>","abstract":false,"args":[{"name":"paid_media_payload","external_name":"paid_media_payload","restriction":"Int32"}],"args_string":"(paid_media_payload : Int32)","args_html":"(paid_media_payload : Int32)","location":{"filename":"src/types/paid_media_purchased.cr","line_number":14,"url":null},"def":{"name":"paid_media_payload=","args":[{"name":"paid_media_payload","external_name":"paid_media_payload","restriction":"Int32"}],"visibility":"Public","body":"@paid_media_payload = paid_media_payload"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PaidMediaVideo","path":"Hamilton/Types/PaidMediaVideo.html","kind":"class","full_name":"Hamilton::Types::PaidMediaVideo","name":"PaidMediaVideo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/paid_media.cr","line_number":38,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The paid media is a video.","summary":"<p>The paid media is a video.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/paid_media.cr","line_number":39,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/paid_media.cr","line_number":39,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the paid media, always \"video\".","summary":"<p>Type of the paid media, always &quot;video&quot;.</p>","abstract":false,"location":{"filename":"src/types/paid_media.cr","line_number":43,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the paid media, always \"video\".","summary":"<p>Type of the paid media, always &quot;video&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/paid_media.cr","line_number":43,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"video:Hamilton::Types::Video-instance-method","name":"video","doc":"The video.","summary":"<p>The video.</p>","abstract":false,"location":{"filename":"src/types/paid_media.cr","line_number":46,"url":null},"def":{"name":"video","return_type":"Hamilton::Types::Video","visibility":"Public","body":"@video"},"external_var":false},{"html_id":"video=(video:Hamilton::Types::Video)-instance-method","name":"video=","doc":"The video.","summary":"<p>The video.</p>","abstract":false,"args":[{"name":"video","external_name":"video","restriction":"Hamilton::Types::Video"}],"args_string":"(video : Hamilton::Types::Video)","args_html":"(video : <a href=\"../../Hamilton/Types/Video.html\">Hamilton::Types::Video</a>)","location":{"filename":"src/types/paid_media.cr","line_number":46,"url":null},"def":{"name":"video=","args":[{"name":"video","external_name":"video","restriction":"Hamilton::Types::Video"}],"visibility":"Public","body":"@video = video"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PaidMessagePriceChanged","path":"Hamilton/Types/PaidMessagePriceChanged.html","kind":"class","full_name":"Hamilton::Types::PaidMessagePriceChanged","name":"PaidMessagePriceChanged","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/paid_message_price_changed.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about a change in the price of paid messages within a chat.","summary":"<p>Describes a service message about a change in the price of paid messages within a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/paid_message_price_changed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/paid_message_price_changed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"paid_message_star_count:Int32-instance-method","name":"paid_message_star_count","doc":"The new number of Telegram Stars that must be paid by non-administrator users of the supergroup chat for each sent message.","summary":"<p>The new number of Telegram Stars that must be paid by non-administrator users of the supergroup chat for each sent message.</p>","abstract":false,"location":{"filename":"src/types/paid_message_price_changed.cr","line_number":11,"url":null},"def":{"name":"paid_message_star_count","return_type":"Int32","visibility":"Public","body":"@paid_message_star_count"},"external_var":false},{"html_id":"paid_message_star_count=(paid_message_star_count:Int32)-instance-method","name":"paid_message_star_count=","doc":"The new number of Telegram Stars that must be paid by non-administrator users of the supergroup chat for each sent message.","summary":"<p>The new number of Telegram Stars that must be paid by non-administrator users of the supergroup chat for each sent message.</p>","abstract":false,"args":[{"name":"paid_message_star_count","external_name":"paid_message_star_count","restriction":"Int32"}],"args_string":"(paid_message_star_count : Int32)","args_html":"(paid_message_star_count : Int32)","location":{"filename":"src/types/paid_message_price_changed.cr","line_number":11,"url":null},"def":{"name":"paid_message_star_count=","args":[{"name":"paid_message_star_count","external_name":"paid_message_star_count","restriction":"Int32"}],"visibility":"Public","body":"@paid_message_star_count = paid_message_star_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportData","path":"Hamilton/Types/PassportData.html","kind":"class","full_name":"Hamilton::Types::PassportData","name":"PassportData","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_data.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes Telegram Passport data shared with the bot by the user.","summary":"<p>Describes Telegram Passport data shared with the bot by the user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_data.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_data.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"credentials:Hamilton::Types::EncryptedCredentials-instance-method","name":"credentials","doc":"Encrypted credentials required to decrypt the data.","summary":"<p>Encrypted credentials required to decrypt the data.</p>","abstract":false,"location":{"filename":"src/types/passport_data.cr","line_number":14,"url":null},"def":{"name":"credentials","return_type":"Hamilton::Types::EncryptedCredentials","visibility":"Public","body":"@credentials"},"external_var":false},{"html_id":"credentials=(credentials:Hamilton::Types::EncryptedCredentials)-instance-method","name":"credentials=","doc":"Encrypted credentials required to decrypt the data.","summary":"<p>Encrypted credentials required to decrypt the data.</p>","abstract":false,"args":[{"name":"credentials","external_name":"credentials","restriction":"Hamilton::Types::EncryptedCredentials"}],"args_string":"(credentials : Hamilton::Types::EncryptedCredentials)","args_html":"(credentials : <a href=\"../../Hamilton/Types/EncryptedCredentials.html\">Hamilton::Types::EncryptedCredentials</a>)","location":{"filename":"src/types/passport_data.cr","line_number":14,"url":null},"def":{"name":"credentials=","args":[{"name":"credentials","external_name":"credentials","restriction":"Hamilton::Types::EncryptedCredentials"}],"visibility":"Public","body":"@credentials = credentials"},"external_var":false},{"html_id":"data:Array(Hamilton::Types::EncryptedPassportElement)-instance-method","name":"data","doc":"Array with information about documents and other Telegram Passport elements that was shared with the bot.","summary":"<p>Array with information about documents and other Telegram Passport elements that was shared with the bot.</p>","abstract":false,"location":{"filename":"src/types/passport_data.cr","line_number":11,"url":null},"def":{"name":"data","return_type":"Array(Hamilton::Types::EncryptedPassportElement)","visibility":"Public","body":"@data"},"external_var":false},{"html_id":"data=(data:Array(Hamilton::Types::EncryptedPassportElement))-instance-method","name":"data=","doc":"Array with information about documents and other Telegram Passport elements that was shared with the bot.","summary":"<p>Array with information about documents and other Telegram Passport elements that was shared with the bot.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Array(Hamilton::Types::EncryptedPassportElement)"}],"args_string":"(data : Array(Hamilton::Types::EncryptedPassportElement))","args_html":"(data : Array(<a href=\"../../Hamilton/Types/EncryptedPassportElement.html\">Hamilton::Types::EncryptedPassportElement</a>))","location":{"filename":"src/types/passport_data.cr","line_number":11,"url":null},"def":{"name":"data=","args":[{"name":"data","external_name":"data","restriction":"Array(Hamilton::Types::EncryptedPassportElement)"}],"visibility":"Public","body":"@data = data"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportElementError","path":"Hamilton/Types/PassportElementError.html","kind":"alias","full_name":"Hamilton::Types::PassportElementError","name":"PassportElementError","abstract":false,"locations":[{"filename":"src/types/passport_element_error.cr","line_number":179,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::PassportElementErrorDataField | Hamilton::Types::PassportElementErrorFile | Hamilton::Types::PassportElementErrorFiles | Hamilton::Types::PassportElementErrorFrontSide | Hamilton::Types::PassportElementErrorReverseSide | Hamilton::Types::PassportElementErrorSelfie | Hamilton::Types::PassportElementErrorTranslationFile | Hamilton::Types::PassportElementErrorTranslationFiles | Hamilton::Types::PassportElementErrorUnspecified)","aliased_html":"<a href=\"../../Hamilton/Types/PassportElementErrorDataField.html\">Hamilton::Types::PassportElementErrorDataField</a> | <a href=\"../../Hamilton/Types/PassportElementErrorFile.html\">Hamilton::Types::PassportElementErrorFile</a> | <a href=\"../../Hamilton/Types/PassportElementErrorFiles.html\">Hamilton::Types::PassportElementErrorFiles</a> | <a href=\"../../Hamilton/Types/PassportElementErrorFrontSide.html\">Hamilton::Types::PassportElementErrorFrontSide</a> | <a href=\"../../Hamilton/Types/PassportElementErrorReverseSide.html\">Hamilton::Types::PassportElementErrorReverseSide</a> | <a href=\"../../Hamilton/Types/PassportElementErrorSelfie.html\">Hamilton::Types::PassportElementErrorSelfie</a> | <a href=\"../../Hamilton/Types/PassportElementErrorTranslationFile.html\">Hamilton::Types::PassportElementErrorTranslationFile</a> | <a href=\"../../Hamilton/Types/PassportElementErrorTranslationFiles.html\">Hamilton::Types::PassportElementErrorTranslationFiles</a> | <a href=\"../../Hamilton/Types/PassportElementErrorUnspecified.html\">Hamilton::Types::PassportElementErrorUnspecified</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user.","summary":"<p>This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user.</p>"},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorDataField","path":"Hamilton/Types/PassportElementErrorDataField.html","kind":"class","full_name":"Hamilton::Types::PassportElementErrorDataField","name":"PassportElementErrorDataField","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_element_error.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.","summary":"<p>Represents an issue in one of the data fields that was provided by the user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"data_hash:String-instance-method","name":"data_hash","doc":"Base64-encoded data hash.","summary":"<p>Base64-encoded data hash.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":20,"url":null},"def":{"name":"data_hash","return_type":"String","visibility":"Public","body":"@data_hash"},"external_var":false},{"html_id":"data_hash=(data_hash:String)-instance-method","name":"data_hash=","doc":"Base64-encoded data hash.","summary":"<p>Base64-encoded data hash.</p>","abstract":false,"args":[{"name":"data_hash","external_name":"data_hash","restriction":"String"}],"args_string":"(data_hash : String)","args_html":"(data_hash : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":20,"url":null},"def":{"name":"data_hash=","args":[{"name":"data_hash","external_name":"data_hash","restriction":"String"}],"visibility":"Public","body":"@data_hash = data_hash"},"external_var":false},{"html_id":"field_name:String-instance-method","name":"field_name","doc":"Name of the data field which has the error.","summary":"<p>Name of the data field which has the error.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":17,"url":null},"def":{"name":"field_name","return_type":"String","visibility":"Public","body":"@field_name"},"external_var":false},{"html_id":"field_name=(field_name:String)-instance-method","name":"field_name=","doc":"Name of the data field which has the error.","summary":"<p>Name of the data field which has the error.</p>","abstract":false,"args":[{"name":"field_name","external_name":"field_name","restriction":"String"}],"args_string":"(field_name : String)","args_html":"(field_name : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":17,"url":null},"def":{"name":"field_name=","args":[{"name":"field_name","external_name":"field_name","restriction":"String"}],"visibility":"Public","body":"@field_name = field_name"},"external_var":false},{"html_id":"message:String-instance-method","name":"message","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":23,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String)-instance-method","name":"message=","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":23,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Error source, must be \"data\".","summary":"<p>Error source, must be &quot;data&quot;.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":11,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Error source, must be \"data\".","summary":"<p>Error source, must be &quot;data&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":11,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":14,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":14,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorFile","path":"Hamilton/Types/PassportElementErrorFile.html","kind":"class","full_name":"Hamilton::Types::PassportElementErrorFile","name":"PassportElementErrorFile","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_element_error.cr","line_number":85,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.","summary":"<p>Represents an issue with a document scan.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":86,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":86,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_hash:String-instance-method","name":"file_hash","doc":"Base64-encoded file hash.","summary":"<p>Base64-encoded file hash.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":96,"url":null},"def":{"name":"file_hash","return_type":"String","visibility":"Public","body":"@file_hash"},"external_var":false},{"html_id":"file_hash=(file_hash:String)-instance-method","name":"file_hash=","doc":"Base64-encoded file hash.","summary":"<p>Base64-encoded file hash.</p>","abstract":false,"args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"args_string":"(file_hash : String)","args_html":"(file_hash : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":96,"url":null},"def":{"name":"file_hash=","args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"visibility":"Public","body":"@file_hash = file_hash"},"external_var":false},{"html_id":"message:String-instance-method","name":"message","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":99,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String)-instance-method","name":"message=","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":99,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Error source, must be \"file\".","summary":"<p>Error source, must be &quot;file&quot;.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":90,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Error source, must be \"file\".","summary":"<p>Error source, must be &quot;file&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":90,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":93,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":93,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorFiles","path":"Hamilton/Types/PassportElementErrorFiles.html","kind":"class","full_name":"Hamilton::Types::PassportElementErrorFiles","name":"PassportElementErrorFiles","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_element_error.cr","line_number":104,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.","summary":"<p>Represents an issue with a list of scans.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":105,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":105,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_hash:Array(String)-instance-method","name":"file_hash","doc":"Base64-encoded file hashes.","summary":"<p>Base64-encoded file hashes.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":115,"url":null},"def":{"name":"file_hash","return_type":"Array(String)","visibility":"Public","body":"@file_hash"},"external_var":false},{"html_id":"file_hash=(file_hash:Array(String))-instance-method","name":"file_hash=","doc":"Base64-encoded file hashes.","summary":"<p>Base64-encoded file hashes.</p>","abstract":false,"args":[{"name":"file_hash","external_name":"file_hash","restriction":"Array(String)"}],"args_string":"(file_hash : Array(String))","args_html":"(file_hash : Array(String))","location":{"filename":"src/types/passport_element_error.cr","line_number":115,"url":null},"def":{"name":"file_hash=","args":[{"name":"file_hash","external_name":"file_hash","restriction":"Array(String)"}],"visibility":"Public","body":"@file_hash = file_hash"},"external_var":false},{"html_id":"message:String-instance-method","name":"message","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":118,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String)-instance-method","name":"message=","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":118,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Error source, must be \"files\".","summary":"<p>Error source, must be &quot;files&quot;.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":109,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Error source, must be \"files\".","summary":"<p>Error source, must be &quot;files&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":109,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":112,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":112,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorFrontSide","path":"Hamilton/Types/PassportElementErrorFrontSide.html","kind":"class","full_name":"Hamilton::Types::PassportElementErrorFrontSide","name":"PassportElementErrorFrontSide","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_element_error.cr","line_number":28,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.","summary":"<p>Represents an issue with the front side of a document.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_hash:String-instance-method","name":"file_hash","doc":"Base64-encoded hash of the file with the front side of the document.","summary":"<p>Base64-encoded hash of the file with the front side of the document.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":39,"url":null},"def":{"name":"file_hash","return_type":"String","visibility":"Public","body":"@file_hash"},"external_var":false},{"html_id":"file_hash=(file_hash:String)-instance-method","name":"file_hash=","doc":"Base64-encoded hash of the file with the front side of the document.","summary":"<p>Base64-encoded hash of the file with the front side of the document.</p>","abstract":false,"args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"args_string":"(file_hash : String)","args_html":"(file_hash : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":39,"url":null},"def":{"name":"file_hash=","args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"visibility":"Public","body":"@file_hash = file_hash"},"external_var":false},{"html_id":"message:String-instance-method","name":"message","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":42,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String)-instance-method","name":"message=","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":42,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Error source, must be \"front_side\".","summary":"<p>Error source, must be &quot;front_side&quot;.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":33,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Error source, must be \"front_side\".","summary":"<p>Error source, must be &quot;front_side&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":33,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":36,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":36,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorReverseSide","path":"Hamilton/Types/PassportElementErrorReverseSide.html","kind":"class","full_name":"Hamilton::Types::PassportElementErrorReverseSide","name":"PassportElementErrorReverseSide","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_element_error.cr","line_number":47,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.","summary":"<p>Represents an issue with the reverse side of a document.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":48,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":48,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_hash:String-instance-method","name":"file_hash","doc":"Base64-encoded hash of the file with the reverse side of the document.","summary":"<p>Base64-encoded hash of the file with the reverse side of the document.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":58,"url":null},"def":{"name":"file_hash","return_type":"String","visibility":"Public","body":"@file_hash"},"external_var":false},{"html_id":"file_hash=(file_hash:String)-instance-method","name":"file_hash=","doc":"Base64-encoded hash of the file with the reverse side of the document.","summary":"<p>Base64-encoded hash of the file with the reverse side of the document.</p>","abstract":false,"args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"args_string":"(file_hash : String)","args_html":"(file_hash : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":58,"url":null},"def":{"name":"file_hash=","args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"visibility":"Public","body":"@file_hash = file_hash"},"external_var":false},{"html_id":"message:String-instance-method","name":"message","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":61,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String)-instance-method","name":"message=","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":61,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Error source, must be \"reverse_side\".","summary":"<p>Error source, must be &quot;reverse_side&quot;.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":52,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Error source, must be \"reverse_side\".","summary":"<p>Error source, must be &quot;reverse_side&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":52,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":55,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":55,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorSelfie","path":"Hamilton/Types/PassportElementErrorSelfie.html","kind":"class","full_name":"Hamilton::Types::PassportElementErrorSelfie","name":"PassportElementErrorSelfie","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_element_error.cr","line_number":66,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.","summary":"<p>Represents an issue with the selfie with a document.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":67,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":67,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_hash:String-instance-method","name":"file_hash","doc":"Base64-encoded hash of the file with the selfie.","summary":"<p>Base64-encoded hash of the file with the selfie.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":77,"url":null},"def":{"name":"file_hash","return_type":"String","visibility":"Public","body":"@file_hash"},"external_var":false},{"html_id":"file_hash=(file_hash:String)-instance-method","name":"file_hash=","doc":"Base64-encoded hash of the file with the selfie.","summary":"<p>Base64-encoded hash of the file with the selfie.</p>","abstract":false,"args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"args_string":"(file_hash : String)","args_html":"(file_hash : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":77,"url":null},"def":{"name":"file_hash=","args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"visibility":"Public","body":"@file_hash = file_hash"},"external_var":false},{"html_id":"message:String-instance-method","name":"message","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":80,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String)-instance-method","name":"message=","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":80,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Error source, must be \"selfie\".","summary":"<p>Error source, must be &quot;selfie&quot;.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":71,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Error source, must be \"selfie\".","summary":"<p>Error source, must be &quot;selfie&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":71,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":74,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":74,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorTranslationFile","path":"Hamilton/Types/PassportElementErrorTranslationFile.html","kind":"class","full_name":"Hamilton::Types::PassportElementErrorTranslationFile","name":"PassportElementErrorTranslationFile","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_element_error.cr","line_number":123,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.","summary":"<p>Represents an issue with one of the files that constitute the translation of a document.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":124,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":124,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_hash:String-instance-method","name":"file_hash","doc":"Base64-encoded file hash.","summary":"<p>Base64-encoded file hash.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":134,"url":null},"def":{"name":"file_hash","return_type":"String","visibility":"Public","body":"@file_hash"},"external_var":false},{"html_id":"file_hash=(file_hash:String)-instance-method","name":"file_hash=","doc":"Base64-encoded file hash.","summary":"<p>Base64-encoded file hash.</p>","abstract":false,"args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"args_string":"(file_hash : String)","args_html":"(file_hash : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":134,"url":null},"def":{"name":"file_hash=","args":[{"name":"file_hash","external_name":"file_hash","restriction":"String"}],"visibility":"Public","body":"@file_hash = file_hash"},"external_var":false},{"html_id":"message:String-instance-method","name":"message","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":137,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String)-instance-method","name":"message=","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":137,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Error source, must be \"translation_file\".","summary":"<p>Error source, must be &quot;translation_file&quot;.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":128,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Error source, must be \"translation_file\".","summary":"<p>Error source, must be &quot;translation_file&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":128,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":131,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":131,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorTranslationFiles","path":"Hamilton/Types/PassportElementErrorTranslationFiles.html","kind":"class","full_name":"Hamilton::Types::PassportElementErrorTranslationFiles","name":"PassportElementErrorTranslationFiles","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_element_error.cr","line_number":142,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.","summary":"<p>Represents an issue with the translated version of a document.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":143,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":143,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_hash:Array(String)-instance-method","name":"file_hash","doc":"Base64-encoded file hashes.","summary":"<p>Base64-encoded file hashes.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":153,"url":null},"def":{"name":"file_hash","return_type":"Array(String)","visibility":"Public","body":"@file_hash"},"external_var":false},{"html_id":"file_hash=(file_hash:Array(String))-instance-method","name":"file_hash=","doc":"Base64-encoded file hashes.","summary":"<p>Base64-encoded file hashes.</p>","abstract":false,"args":[{"name":"file_hash","external_name":"file_hash","restriction":"Array(String)"}],"args_string":"(file_hash : Array(String))","args_html":"(file_hash : Array(String))","location":{"filename":"src/types/passport_element_error.cr","line_number":153,"url":null},"def":{"name":"file_hash=","args":[{"name":"file_hash","external_name":"file_hash","restriction":"Array(String)"}],"visibility":"Public","body":"@file_hash = file_hash"},"external_var":false},{"html_id":"message:String-instance-method","name":"message","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":156,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String)-instance-method","name":"message=","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":156,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Error source, must be \"translation_files\".","summary":"<p>Error source, must be &quot;translation_files&quot;.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":147,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Error source, must be \"translation_files\".","summary":"<p>Error source, must be &quot;translation_files&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":147,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":150,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.","summary":"<p>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":150,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportElementErrorUnspecified","path":"Hamilton/Types/PassportElementErrorUnspecified.html","kind":"class","full_name":"Hamilton::Types::PassportElementErrorUnspecified","name":"PassportElementErrorUnspecified","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_element_error.cr","line_number":161,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents an issue in an unspecified place. The error is considered resolved when new data is added.","summary":"<p>Represents an issue in an unspecified place.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":162,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_element_error.cr","line_number":162,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"element_hash:String-instance-method","name":"element_hash","doc":"Base64-encoded element hash.","summary":"<p>Base64-encoded element hash.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":172,"url":null},"def":{"name":"element_hash","return_type":"String","visibility":"Public","body":"@element_hash"},"external_var":false},{"html_id":"element_hash=(element_hash:String)-instance-method","name":"element_hash=","doc":"Base64-encoded element hash.","summary":"<p>Base64-encoded element hash.</p>","abstract":false,"args":[{"name":"element_hash","external_name":"element_hash","restriction":"String"}],"args_string":"(element_hash : String)","args_html":"(element_hash : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":172,"url":null},"def":{"name":"element_hash=","args":[{"name":"element_hash","external_name":"element_hash","restriction":"String"}],"visibility":"Public","body":"@element_hash = element_hash"},"external_var":false},{"html_id":"message:String-instance-method","name":"message","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":175,"url":null},"def":{"name":"message","return_type":"String","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:String)-instance-method","name":"message=","doc":"Error message.","summary":"<p>Error message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":175,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"source:String-instance-method","name":"source","doc":"Error source, must be \"unspecified\".","summary":"<p>Error source, must be &quot;unspecified&quot;.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":166,"url":null},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Error source, must be \"unspecified\".","summary":"<p>Error source, must be &quot;unspecified&quot;.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":166,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@source = source"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of element of the user's Telegram Passport which has the issue.","summary":"<p>Type of element of the user's Telegram Passport which has the issue.</p>","abstract":false,"location":{"filename":"src/types/passport_element_error.cr","line_number":169,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of element of the user's Telegram Passport which has the issue.","summary":"<p>Type of element of the user's Telegram Passport which has the issue.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/passport_element_error.cr","line_number":169,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PassportFile","path":"Hamilton/Types/PassportFile.html","kind":"class","full_name":"Hamilton::Types::PassportFile","name":"PassportFile","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/passport_file.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.","summary":"<p>This object represents a file uploaded to Telegram Passport.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/passport_file.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/passport_file.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_date:Int32-instance-method","name":"file_date","doc":"Unix time when the file was uploaded.","summary":"<p>Unix time when the file was uploaded.</p>","abstract":false,"location":{"filename":"src/types/passport_file.cr","line_number":20,"url":null},"def":{"name":"file_date","return_type":"Int32","visibility":"Public","body":"@file_date"},"external_var":false},{"html_id":"file_date=(file_date:Int32)-instance-method","name":"file_date=","doc":"Unix time when the file was uploaded.","summary":"<p>Unix time when the file was uploaded.</p>","abstract":false,"args":[{"name":"file_date","external_name":"file_date","restriction":"Int32"}],"args_string":"(file_date : Int32)","args_html":"(file_date : Int32)","location":{"filename":"src/types/passport_file.cr","line_number":20,"url":null},"def":{"name":"file_date=","args":[{"name":"file_date","external_name":"file_date","restriction":"Int32"}],"visibility":"Public","body":"@file_date = file_date"},"external_var":false},{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/passport_file.cr","line_number":11,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/passport_file.cr","line_number":11,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_size:Int32-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/passport_file.cr","line_number":17,"url":null},"def":{"name":"file_size","return_type":"Int32","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int32)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int32"}],"args_string":"(file_size : Int32)","args_html":"(file_size : Int32)","location":{"filename":"src/types/passport_file.cr","line_number":17,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int32"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/passport_file.cr","line_number":14,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/passport_file.cr","line_number":14,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PhotoSize","path":"Hamilton/Types/PhotoSize.html","kind":"class","full_name":"Hamilton::Types::PhotoSize","name":"PhotoSize","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/photo_size.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents one size of a photo or a file / sticker thumbnail.","summary":"<p>This object represents one size of a photo or a file / sticker thumbnail.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/photo_size.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/photo_size.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/photo_size.cr","line_number":11,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/photo_size.cr","line_number":11,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_size:Int32-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/photo_size.cr","line_number":23,"url":null},"def":{"name":"file_size","return_type":"Int32","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int32)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int32"}],"args_string":"(file_size : Int32)","args_html":"(file_size : Int32)","location":{"filename":"src/types/photo_size.cr","line_number":23,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int32"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/photo_size.cr","line_number":14,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/photo_size.cr","line_number":14,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false},{"html_id":"height:Int32-instance-method","name":"height","doc":"Photo height.","summary":"<p>Photo height.</p>","abstract":false,"location":{"filename":"src/types/photo_size.cr","line_number":20,"url":null},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int32)-instance-method","name":"height=","doc":"Photo height.","summary":"<p>Photo height.</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(height : Int32)","args_html":"(height : Int32)","location":{"filename":"src/types/photo_size.cr","line_number":20,"url":null},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"width:Int32-instance-method","name":"width","doc":"Photo width.","summary":"<p>Photo width.</p>","abstract":false,"location":{"filename":"src/types/photo_size.cr","line_number":17,"url":null},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int32)-instance-method","name":"width=","doc":"Photo width.","summary":"<p>Photo width.</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/types/photo_size.cr","line_number":17,"url":null},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@width = width"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Poll","path":"Hamilton/Types/Poll.html","kind":"class","full_name":"Hamilton::Types::Poll","name":"Poll","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/poll.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about a poll.","summary":"<p>This object contains information about a poll.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/poll.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/poll.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"allows_multiple_answers:Bool-instance-method","name":"allows_multiple_answers","doc":"True, if the poll allows multiple answers.","summary":"<p>True, if the poll allows multiple answers.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":35,"url":null},"def":{"name":"allows_multiple_answers","return_type":"Bool","visibility":"Public","body":"@allows_multiple_answers"},"external_var":false},{"html_id":"allows_multiple_answers=(allows_multiple_answers:Bool)-instance-method","name":"allows_multiple_answers=","doc":"True, if the poll allows multiple answers.","summary":"<p>True, if the poll allows multiple answers.</p>","abstract":false,"args":[{"name":"allows_multiple_answers","external_name":"allows_multiple_answers","restriction":"Bool"}],"args_string":"(allows_multiple_answers : Bool)","args_html":"(allows_multiple_answers : Bool)","location":{"filename":"src/types/poll.cr","line_number":35,"url":null},"def":{"name":"allows_multiple_answers=","args":[{"name":"allows_multiple_answers","external_name":"allows_multiple_answers","restriction":"Bool"}],"visibility":"Public","body":"@allows_multiple_answers = allows_multiple_answers"},"external_var":false},{"html_id":"close_date:Int32-instance-method","name":"close_date","doc":"Point in time (Unix timestamp) when the poll will be automatically closed.","summary":"<p>Point in time (Unix timestamp) when the poll will be automatically closed.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":50,"url":null},"def":{"name":"close_date","return_type":"Int32","visibility":"Public","body":"@close_date"},"external_var":false},{"html_id":"close_date=(close_date:Int32)-instance-method","name":"close_date=","doc":"Point in time (Unix timestamp) when the poll will be automatically closed.","summary":"<p>Point in time (Unix timestamp) when the poll will be automatically closed.</p>","abstract":false,"args":[{"name":"close_date","external_name":"close_date","restriction":"Int32"}],"args_string":"(close_date : Int32)","args_html":"(close_date : Int32)","location":{"filename":"src/types/poll.cr","line_number":50,"url":null},"def":{"name":"close_date=","args":[{"name":"close_date","external_name":"close_date","restriction":"Int32"}],"visibility":"Public","body":"@close_date = close_date"},"external_var":false},{"html_id":"correct_option_id:Int32|Nil-instance-method","name":"correct_option_id","doc":"0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.","summary":"<p>0-based identifier of the correct answer option.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":38,"url":null},"def":{"name":"correct_option_id","return_type":"Int32 | Nil","visibility":"Public","body":"@correct_option_id"},"external_var":false},{"html_id":"correct_option_id=(correct_option_id:Int32|Nil)-instance-method","name":"correct_option_id=","doc":"0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.","summary":"<p>0-based identifier of the correct answer option.</p>","abstract":false,"args":[{"name":"correct_option_id","external_name":"correct_option_id","restriction":"Int32 | Nil"}],"args_string":"(correct_option_id : Int32 | Nil)","args_html":"(correct_option_id : Int32 | Nil)","location":{"filename":"src/types/poll.cr","line_number":38,"url":null},"def":{"name":"correct_option_id=","args":[{"name":"correct_option_id","external_name":"correct_option_id","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@correct_option_id = correct_option_id"},"external_var":false},{"html_id":"explanation:String|Nil-instance-method","name":"explanation","doc":"Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters.","summary":"<p>Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":41,"url":null},"def":{"name":"explanation","return_type":"String | Nil","visibility":"Public","body":"@explanation"},"external_var":false},{"html_id":"explanation=(explanation:String|Nil)-instance-method","name":"explanation=","doc":"Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters.","summary":"<p>Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters.</p>","abstract":false,"args":[{"name":"explanation","external_name":"explanation","restriction":"String | Nil"}],"args_string":"(explanation : String | Nil)","args_html":"(explanation : String | Nil)","location":{"filename":"src/types/poll.cr","line_number":41,"url":null},"def":{"name":"explanation=","args":[{"name":"explanation","external_name":"explanation","restriction":"String | Nil"}],"visibility":"Public","body":"@explanation = explanation"},"external_var":false},{"html_id":"explanation_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"explanation_entities","doc":"Special entities like usernames, URLs, bot commands, etc. that appear in the explanation.","summary":"<p>Special entities like usernames, URLs, bot commands, etc.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":44,"url":null},"def":{"name":"explanation_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@explanation_entities"},"external_var":false},{"html_id":"explanation_entities=(explanation_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"explanation_entities=","doc":"Special entities like usernames, URLs, bot commands, etc. that appear in the explanation.","summary":"<p>Special entities like usernames, URLs, bot commands, etc.</p>","abstract":false,"args":[{"name":"explanation_entities","external_name":"explanation_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(explanation_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(explanation_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/poll.cr","line_number":44,"url":null},"def":{"name":"explanation_entities=","args":[{"name":"explanation_entities","external_name":"explanation_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@explanation_entities = explanation_entities"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique poll identifier.","summary":"<p>Unique poll identifier.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique poll identifier.","summary":"<p>Unique poll identifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/poll.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"is_anonymous:Bool-instance-method","name":"is_anonymous","doc":"True, if the poll is anonymous.","summary":"<p>True, if the poll is anonymous.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":29,"url":null},"def":{"name":"is_anonymous","return_type":"Bool","visibility":"Public","body":"@is_anonymous"},"external_var":false},{"html_id":"is_anonymous=(is_anonymous:Bool)-instance-method","name":"is_anonymous=","doc":"True, if the poll is anonymous.","summary":"<p>True, if the poll is anonymous.</p>","abstract":false,"args":[{"name":"is_anonymous","external_name":"is_anonymous","restriction":"Bool"}],"args_string":"(is_anonymous : Bool)","args_html":"(is_anonymous : Bool)","location":{"filename":"src/types/poll.cr","line_number":29,"url":null},"def":{"name":"is_anonymous=","args":[{"name":"is_anonymous","external_name":"is_anonymous","restriction":"Bool"}],"visibility":"Public","body":"@is_anonymous = is_anonymous"},"external_var":false},{"html_id":"is_closed:Bool-instance-method","name":"is_closed","doc":"True, if the poll is closed.","summary":"<p>True, if the poll is closed.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":26,"url":null},"def":{"name":"is_closed","return_type":"Bool","visibility":"Public","body":"@is_closed"},"external_var":false},{"html_id":"is_closed=(is_closed:Bool)-instance-method","name":"is_closed=","doc":"True, if the poll is closed.","summary":"<p>True, if the poll is closed.</p>","abstract":false,"args":[{"name":"is_closed","external_name":"is_closed","restriction":"Bool"}],"args_string":"(is_closed : Bool)","args_html":"(is_closed : Bool)","location":{"filename":"src/types/poll.cr","line_number":26,"url":null},"def":{"name":"is_closed=","args":[{"name":"is_closed","external_name":"is_closed","restriction":"Bool"}],"visibility":"Public","body":"@is_closed = is_closed"},"external_var":false},{"html_id":"open_period:Int32-instance-method","name":"open_period","doc":"Amount of time in seconds the poll will be active after creation.","summary":"<p>Amount of time in seconds the poll will be active after creation.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":47,"url":null},"def":{"name":"open_period","return_type":"Int32","visibility":"Public","body":"@open_period"},"external_var":false},{"html_id":"open_period=(open_period:Int32)-instance-method","name":"open_period=","doc":"Amount of time in seconds the poll will be active after creation.","summary":"<p>Amount of time in seconds the poll will be active after creation.</p>","abstract":false,"args":[{"name":"open_period","external_name":"open_period","restriction":"Int32"}],"args_string":"(open_period : Int32)","args_html":"(open_period : Int32)","location":{"filename":"src/types/poll.cr","line_number":47,"url":null},"def":{"name":"open_period=","args":[{"name":"open_period","external_name":"open_period","restriction":"Int32"}],"visibility":"Public","body":"@open_period = open_period"},"external_var":false},{"html_id":"options:Array(Hamilton::Types::PollOption)-instance-method","name":"options","doc":"List of poll options.","summary":"<p>List of poll options.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":20,"url":null},"def":{"name":"options","return_type":"Array(Hamilton::Types::PollOption)","visibility":"Public","body":"@options"},"external_var":false},{"html_id":"options=(options:Array(Hamilton::Types::PollOption))-instance-method","name":"options=","doc":"List of poll options.","summary":"<p>List of poll options.</p>","abstract":false,"args":[{"name":"options","external_name":"options","restriction":"Array(Hamilton::Types::PollOption)"}],"args_string":"(options : Array(Hamilton::Types::PollOption))","args_html":"(options : Array(<a href=\"../../Hamilton/Types/PollOption.html\">Hamilton::Types::PollOption</a>))","location":{"filename":"src/types/poll.cr","line_number":20,"url":null},"def":{"name":"options=","args":[{"name":"options","external_name":"options","restriction":"Array(Hamilton::Types::PollOption)"}],"visibility":"Public","body":"@options = options"},"external_var":false},{"html_id":"question:String-instance-method","name":"question","doc":"Poll question, 1-300 characters.","summary":"<p>Poll question, 1-300 characters.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":14,"url":null},"def":{"name":"question","return_type":"String","visibility":"Public","body":"@question"},"external_var":false},{"html_id":"question=(question:String)-instance-method","name":"question=","doc":"Poll question, 1-300 characters.","summary":"<p>Poll question, 1-300 characters.</p>","abstract":false,"args":[{"name":"question","external_name":"question","restriction":"String"}],"args_string":"(question : String)","args_html":"(question : String)","location":{"filename":"src/types/poll.cr","line_number":14,"url":null},"def":{"name":"question=","args":[{"name":"question","external_name":"question","restriction":"String"}],"visibility":"Public","body":"@question = question"},"external_var":false},{"html_id":"question_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"question_entities","doc":"Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions.","summary":"<p>Special entities that appear in the question.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":17,"url":null},"def":{"name":"question_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@question_entities"},"external_var":false},{"html_id":"question_entities=(question_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"question_entities=","doc":"Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions.","summary":"<p>Special entities that appear in the question.</p>","abstract":false,"args":[{"name":"question_entities","external_name":"question_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(question_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(question_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/poll.cr","line_number":17,"url":null},"def":{"name":"question_entities=","args":[{"name":"question_entities","external_name":"question_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@question_entities = question_entities"},"external_var":false},{"html_id":"total_voter_count:Int32-instance-method","name":"total_voter_count","doc":"Total number of users that voted in the poll.","summary":"<p>Total number of users that voted in the poll.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":23,"url":null},"def":{"name":"total_voter_count","return_type":"Int32","visibility":"Public","body":"@total_voter_count"},"external_var":false},{"html_id":"total_voter_count=(total_voter_count:Int32)-instance-method","name":"total_voter_count=","doc":"Total number of users that voted in the poll.","summary":"<p>Total number of users that voted in the poll.</p>","abstract":false,"args":[{"name":"total_voter_count","external_name":"total_voter_count","restriction":"Int32"}],"args_string":"(total_voter_count : Int32)","args_html":"(total_voter_count : Int32)","location":{"filename":"src/types/poll.cr","line_number":23,"url":null},"def":{"name":"total_voter_count=","args":[{"name":"total_voter_count","external_name":"total_voter_count","restriction":"Int32"}],"visibility":"Public","body":"@total_voter_count = total_voter_count"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Poll type, currently can be “regular” or “quiz”.","summary":"<p>Poll type, currently can be “regular” or “quiz”.</p>","abstract":false,"location":{"filename":"src/types/poll.cr","line_number":32,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Poll type, currently can be “regular” or “quiz”.","summary":"<p>Poll type, currently can be “regular” or “quiz”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/poll.cr","line_number":32,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PollAnswer","path":"Hamilton/Types/PollAnswer.html","kind":"class","full_name":"Hamilton::Types::PollAnswer","name":"PollAnswer","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/poll_answer.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an answer of a user in a non-anonymous poll.","summary":"<p>This object represents an answer of a user in a non-anonymous poll.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/poll_answer.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/poll_answer.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"option_ids:Array(Int32)-instance-method","name":"option_ids","doc":"0-based identifiers of chosen answer options. May be empty if the vote was retracted.","summary":"<p>0-based identifiers of chosen answer options.</p>","abstract":false,"location":{"filename":"src/types/poll_answer.cr","line_number":20,"url":null},"def":{"name":"option_ids","return_type":"Array(Int32)","visibility":"Public","body":"@option_ids"},"external_var":false},{"html_id":"option_ids=(option_ids:Array(Int32))-instance-method","name":"option_ids=","doc":"0-based identifiers of chosen answer options. May be empty if the vote was retracted.","summary":"<p>0-based identifiers of chosen answer options.</p>","abstract":false,"args":[{"name":"option_ids","external_name":"option_ids","restriction":"Array(Int32)"}],"args_string":"(option_ids : Array(Int32))","args_html":"(option_ids : Array(Int32))","location":{"filename":"src/types/poll_answer.cr","line_number":20,"url":null},"def":{"name":"option_ids=","args":[{"name":"option_ids","external_name":"option_ids","restriction":"Array(Int32)"}],"visibility":"Public","body":"@option_ids = option_ids"},"external_var":false},{"html_id":"poll_id:String-instance-method","name":"poll_id","doc":"Unique poll identifier.","summary":"<p>Unique poll identifier.</p>","abstract":false,"location":{"filename":"src/types/poll_answer.cr","line_number":11,"url":null},"def":{"name":"poll_id","return_type":"String","visibility":"Public","body":"@poll_id"},"external_var":false},{"html_id":"poll_id=(poll_id:String)-instance-method","name":"poll_id=","doc":"Unique poll identifier.","summary":"<p>Unique poll identifier.</p>","abstract":false,"args":[{"name":"poll_id","external_name":"poll_id","restriction":"String"}],"args_string":"(poll_id : String)","args_html":"(poll_id : String)","location":{"filename":"src/types/poll_answer.cr","line_number":11,"url":null},"def":{"name":"poll_id=","args":[{"name":"poll_id","external_name":"poll_id","restriction":"String"}],"visibility":"Public","body":"@poll_id = poll_id"},"external_var":false},{"html_id":"user:Hamilton::Types::User|Nil-instance-method","name":"user","doc":"The user that changed the answer to the poll, if the voter isn't anonymous.","summary":"<p>The user that changed the answer to the poll, if the voter isn't anonymous.</p>","abstract":false,"location":{"filename":"src/types/poll_answer.cr","line_number":17,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User|Nil)-instance-method","name":"user=","doc":"The user that changed the answer to the poll, if the voter isn't anonymous.","summary":"<p>The user that changed the answer to the poll, if the voter isn't anonymous.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(user : Hamilton::Types::User | Nil)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/poll_answer.cr","line_number":17,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@user = user"},"external_var":false},{"html_id":"voter_chat:Hamilton::Types::Chat|Nil-instance-method","name":"voter_chat","doc":"The chat that changed the answer to the poll, if the voter is anonymous.","summary":"<p>The chat that changed the answer to the poll, if the voter is anonymous.</p>","abstract":false,"location":{"filename":"src/types/poll_answer.cr","line_number":14,"url":null},"def":{"name":"voter_chat","return_type":"Hamilton::Types::Chat | Nil","visibility":"Public","body":"@voter_chat"},"external_var":false},{"html_id":"voter_chat=(voter_chat:Hamilton::Types::Chat|Nil)-instance-method","name":"voter_chat=","doc":"The chat that changed the answer to the poll, if the voter is anonymous.","summary":"<p>The chat that changed the answer to the poll, if the voter is anonymous.</p>","abstract":false,"args":[{"name":"voter_chat","external_name":"voter_chat","restriction":"Hamilton::Types::Chat | Nil"}],"args_string":"(voter_chat : Hamilton::Types::Chat | Nil)","args_html":"(voter_chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a> | Nil)","location":{"filename":"src/types/poll_answer.cr","line_number":14,"url":null},"def":{"name":"voter_chat=","args":[{"name":"voter_chat","external_name":"voter_chat","restriction":"Hamilton::Types::Chat | Nil"}],"visibility":"Public","body":"@voter_chat = voter_chat"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PollOption","path":"Hamilton/Types/PollOption.html","kind":"class","full_name":"Hamilton::Types::PollOption","name":"PollOption","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/poll_option.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about one answer option in a poll.","summary":"<p>This object contains information about one answer option in a poll.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/poll_option.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/poll_option.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"text:String-instance-method","name":"text","doc":"Option text, 1-100 characters.","summary":"<p>Option text, 1-100 characters.</p>","abstract":false,"location":{"filename":"src/types/poll_option.cr","line_number":11,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"Option text, 1-100 characters.","summary":"<p>Option text, 1-100 characters.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/poll_option.cr","line_number":11,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false},{"html_id":"text_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"text_entities","doc":"Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts","summary":"<p>Special entities that appear in the option text.</p>","abstract":false,"location":{"filename":"src/types/poll_option.cr","line_number":14,"url":null},"def":{"name":"text_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@text_entities"},"external_var":false},{"html_id":"text_entities=(text_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"text_entities=","doc":"Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts","summary":"<p>Special entities that appear in the option text.</p>","abstract":false,"args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(text_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(text_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/poll_option.cr","line_number":14,"url":null},"def":{"name":"text_entities=","args":[{"name":"text_entities","external_name":"text_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@text_entities = text_entities"},"external_var":false},{"html_id":"voter_count:Int32-instance-method","name":"voter_count","doc":"Number of users that voted for this option.","summary":"<p>Number of users that voted for this option.</p>","abstract":false,"location":{"filename":"src/types/poll_option.cr","line_number":17,"url":null},"def":{"name":"voter_count","return_type":"Int32","visibility":"Public","body":"@voter_count"},"external_var":false},{"html_id":"voter_count=(voter_count:Int32)-instance-method","name":"voter_count=","doc":"Number of users that voted for this option.","summary":"<p>Number of users that voted for this option.</p>","abstract":false,"args":[{"name":"voter_count","external_name":"voter_count","restriction":"Int32"}],"args_string":"(voter_count : Int32)","args_html":"(voter_count : Int32)","location":{"filename":"src/types/poll_option.cr","line_number":17,"url":null},"def":{"name":"voter_count=","args":[{"name":"voter_count","external_name":"voter_count","restriction":"Int32"}],"visibility":"Public","body":"@voter_count = voter_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PreCheckoutQuery","path":"Hamilton/Types/PreCheckoutQuery.html","kind":"class","full_name":"Hamilton::Types::PreCheckoutQuery","name":"PreCheckoutQuery","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/pre_checkout_query.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about an incoming pre-checkout query.","summary":"<p>This object contains information about an incoming pre-checkout query.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/pre_checkout_query.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/pre_checkout_query.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"currency:String-instance-method","name":"currency","doc":"Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.","summary":"<p>Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.</p>","abstract":false,"location":{"filename":"src/types/pre_checkout_query.cr","line_number":17,"url":null},"def":{"name":"currency","return_type":"String","visibility":"Public","body":"@currency"},"external_var":false},{"html_id":"currency=(currency:String)-instance-method","name":"currency=","doc":"Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.","summary":"<p>Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.</p>","abstract":false,"args":[{"name":"currency","external_name":"currency","restriction":"String"}],"args_string":"(currency : String)","args_html":"(currency : String)","location":{"filename":"src/types/pre_checkout_query.cr","line_number":17,"url":null},"def":{"name":"currency=","args":[{"name":"currency","external_name":"currency","restriction":"String"}],"visibility":"Public","body":"@currency = currency"},"external_var":false},{"html_id":"from:Hamilton::Types::User-instance-method","name":"from","doc":"User who sent the query.","summary":"<p>User who sent the query.</p>","abstract":false,"location":{"filename":"src/types/pre_checkout_query.cr","line_number":14,"url":null},"def":{"name":"from","return_type":"Hamilton::Types::User","visibility":"Public","body":"@from"},"external_var":false},{"html_id":"from=(from:Hamilton::Types::User)-instance-method","name":"from=","doc":"User who sent the query.","summary":"<p>User who sent the query.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"args_string":"(from : Hamilton::Types::User)","args_html":"(from : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/pre_checkout_query.cr","line_number":14,"url":null},"def":{"name":"from=","args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@from = from"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique query identifier.","summary":"<p>Unique query identifier.</p>","abstract":false,"location":{"filename":"src/types/pre_checkout_query.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique query identifier.","summary":"<p>Unique query identifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/pre_checkout_query.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"invoice_payload:String-instance-method","name":"invoice_payload","doc":"Bot-specified invoice payload.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"location":{"filename":"src/types/pre_checkout_query.cr","line_number":23,"url":null},"def":{"name":"invoice_payload","return_type":"String","visibility":"Public","body":"@invoice_payload"},"external_var":false},{"html_id":"invoice_payload=(invoice_payload:String)-instance-method","name":"invoice_payload=","doc":"Bot-specified invoice payload.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String"}],"args_string":"(invoice_payload : String)","args_html":"(invoice_payload : String)","location":{"filename":"src/types/pre_checkout_query.cr","line_number":23,"url":null},"def":{"name":"invoice_payload=","args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String"}],"visibility":"Public","body":"@invoice_payload = invoice_payload"},"external_var":false},{"html_id":"order_info:Hamilton::Types::OrderInfo|Nil-instance-method","name":"order_info","doc":"Order information provided by the user.","summary":"<p>Order information provided by the user.</p>","abstract":false,"location":{"filename":"src/types/pre_checkout_query.cr","line_number":29,"url":null},"def":{"name":"order_info","return_type":"Hamilton::Types::OrderInfo | Nil","visibility":"Public","body":"@order_info"},"external_var":false},{"html_id":"order_info=(order_info:Hamilton::Types::OrderInfo|Nil)-instance-method","name":"order_info=","doc":"Order information provided by the user.","summary":"<p>Order information provided by the user.</p>","abstract":false,"args":[{"name":"order_info","external_name":"order_info","restriction":"Hamilton::Types::OrderInfo | Nil"}],"args_string":"(order_info : Hamilton::Types::OrderInfo | Nil)","args_html":"(order_info : <a href=\"../../Hamilton/Types/OrderInfo.html\">Hamilton::Types::OrderInfo</a> | Nil)","location":{"filename":"src/types/pre_checkout_query.cr","line_number":29,"url":null},"def":{"name":"order_info=","args":[{"name":"order_info","external_name":"order_info","restriction":"Hamilton::Types::OrderInfo | Nil"}],"visibility":"Public","body":"@order_info = order_info"},"external_var":false},{"html_id":"shipping_option_id:String|Nil-instance-method","name":"shipping_option_id","doc":"Identifier of the shipping option chosen by the user.","summary":"<p>Identifier of the shipping option chosen by the user.</p>","abstract":false,"location":{"filename":"src/types/pre_checkout_query.cr","line_number":26,"url":null},"def":{"name":"shipping_option_id","return_type":"String | Nil","visibility":"Public","body":"@shipping_option_id"},"external_var":false},{"html_id":"shipping_option_id=(shipping_option_id:String|Nil)-instance-method","name":"shipping_option_id=","doc":"Identifier of the shipping option chosen by the user.","summary":"<p>Identifier of the shipping option chosen by the user.</p>","abstract":false,"args":[{"name":"shipping_option_id","external_name":"shipping_option_id","restriction":"String | Nil"}],"args_string":"(shipping_option_id : String | Nil)","args_html":"(shipping_option_id : String | Nil)","location":{"filename":"src/types/pre_checkout_query.cr","line_number":26,"url":null},"def":{"name":"shipping_option_id=","args":[{"name":"shipping_option_id","external_name":"shipping_option_id","restriction":"String | Nil"}],"visibility":"Public","body":"@shipping_option_id = shipping_option_id"},"external_var":false},{"html_id":"total_amount:Int32-instance-method","name":"total_amount","doc":"Total price in the smallest units of the currency (integer, not float/double).","summary":"<p>Total price in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"location":{"filename":"src/types/pre_checkout_query.cr","line_number":20,"url":null},"def":{"name":"total_amount","return_type":"Int32","visibility":"Public","body":"@total_amount"},"external_var":false},{"html_id":"total_amount=(total_amount:Int32)-instance-method","name":"total_amount=","doc":"Total price in the smallest units of the currency (integer, not float/double).","summary":"<p>Total price in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"args":[{"name":"total_amount","external_name":"total_amount","restriction":"Int32"}],"args_string":"(total_amount : Int32)","args_html":"(total_amount : Int32)","location":{"filename":"src/types/pre_checkout_query.cr","line_number":20,"url":null},"def":{"name":"total_amount=","args":[{"name":"total_amount","external_name":"total_amount","restriction":"Int32"}],"visibility":"Public","body":"@total_amount = total_amount"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/PreparedInlineMessage","path":"Hamilton/Types/PreparedInlineMessage.html","kind":"class","full_name":"Hamilton::Types::PreparedInlineMessage","name":"PreparedInlineMessage","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/prepared_inline_message.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes an inline message to be sent by a user of a Mini App.","summary":"<p>Describes an inline message to be sent by a user of a Mini App.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/prepared_inline_message.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/prepared_inline_message.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"expiration_date:Int32-instance-method","name":"expiration_date","doc":"Expiration date of the prepared message, in Unix time. Expired prepared messages can no longer be used.","summary":"<p>Expiration date of the prepared message, in Unix time.</p>","abstract":false,"location":{"filename":"src/types/prepared_inline_message.cr","line_number":14,"url":null},"def":{"name":"expiration_date","return_type":"Int32","visibility":"Public","body":"@expiration_date"},"external_var":false},{"html_id":"expiration_date=(expiration_date:Int32)-instance-method","name":"expiration_date=","doc":"Expiration date of the prepared message, in Unix time. Expired prepared messages can no longer be used.","summary":"<p>Expiration date of the prepared message, in Unix time.</p>","abstract":false,"args":[{"name":"expiration_date","external_name":"expiration_date","restriction":"Int32"}],"args_string":"(expiration_date : Int32)","args_html":"(expiration_date : Int32)","location":{"filename":"src/types/prepared_inline_message.cr","line_number":14,"url":null},"def":{"name":"expiration_date=","args":[{"name":"expiration_date","external_name":"expiration_date","restriction":"Int32"}],"visibility":"Public","body":"@expiration_date = expiration_date"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier of the prepared message.","summary":"<p>Unique identifier of the prepared message.</p>","abstract":false,"location":{"filename":"src/types/prepared_inline_message.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier of the prepared message.","summary":"<p>Unique identifier of the prepared message.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/prepared_inline_message.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ProximityAlertTriggered","path":"Hamilton/Types/ProximityAlertTriggered.html","kind":"class","full_name":"Hamilton::Types::ProximityAlertTriggered","name":"ProximityAlertTriggered","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/proximity_alert_triggered.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.","summary":"<p>This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/proximity_alert_triggered.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/proximity_alert_triggered.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"distance:Int32-instance-method","name":"distance","doc":"The distance between the users.","summary":"<p>The distance between the users.</p>","abstract":false,"location":{"filename":"src/types/proximity_alert_triggered.cr","line_number":17,"url":null},"def":{"name":"distance","return_type":"Int32","visibility":"Public","body":"@distance"},"external_var":false},{"html_id":"distance=(distance:Int32)-instance-method","name":"distance=","doc":"The distance between the users.","summary":"<p>The distance between the users.</p>","abstract":false,"args":[{"name":"distance","external_name":"distance","restriction":"Int32"}],"args_string":"(distance : Int32)","args_html":"(distance : Int32)","location":{"filename":"src/types/proximity_alert_triggered.cr","line_number":17,"url":null},"def":{"name":"distance=","args":[{"name":"distance","external_name":"distance","restriction":"Int32"}],"visibility":"Public","body":"@distance = distance"},"external_var":false},{"html_id":"traveler:Hamilton::Types::User-instance-method","name":"traveler","doc":"User that triggered the alert.","summary":"<p>User that triggered the alert.</p>","abstract":false,"location":{"filename":"src/types/proximity_alert_triggered.cr","line_number":11,"url":null},"def":{"name":"traveler","return_type":"Hamilton::Types::User","visibility":"Public","body":"@traveler"},"external_var":false},{"html_id":"traveler=(traveler:Hamilton::Types::User)-instance-method","name":"traveler=","doc":"User that triggered the alert.","summary":"<p>User that triggered the alert.</p>","abstract":false,"args":[{"name":"traveler","external_name":"traveler","restriction":"Hamilton::Types::User"}],"args_string":"(traveler : Hamilton::Types::User)","args_html":"(traveler : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/proximity_alert_triggered.cr","line_number":11,"url":null},"def":{"name":"traveler=","args":[{"name":"traveler","external_name":"traveler","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@traveler = traveler"},"external_var":false},{"html_id":"watcher:Hamilton::Types::User-instance-method","name":"watcher","doc":"User that set the alert.","summary":"<p>User that set the alert.</p>","abstract":false,"location":{"filename":"src/types/proximity_alert_triggered.cr","line_number":14,"url":null},"def":{"name":"watcher","return_type":"Hamilton::Types::User","visibility":"Public","body":"@watcher"},"external_var":false},{"html_id":"watcher=(watcher:Hamilton::Types::User)-instance-method","name":"watcher=","doc":"User that set the alert.","summary":"<p>User that set the alert.</p>","abstract":false,"args":[{"name":"watcher","external_name":"watcher","restriction":"Hamilton::Types::User"}],"args_string":"(watcher : Hamilton::Types::User)","args_html":"(watcher : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/proximity_alert_triggered.cr","line_number":14,"url":null},"def":{"name":"watcher=","args":[{"name":"watcher","external_name":"watcher","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@watcher = watcher"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ReactionCount","path":"Hamilton/Types/ReactionCount.html","kind":"class","full_name":"Hamilton::Types::ReactionCount","name":"ReactionCount","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/reaction_count.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Represents a reaction added to a message along with the number of times it was added.","summary":"<p>Represents a reaction added to a message along with the number of times it was added.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/reaction_count.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/reaction_count.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"total_count:Int32-instance-method","name":"total_count","doc":"Number of times the reaction was added.","summary":"<p>Number of times the reaction was added.</p>","abstract":false,"location":{"filename":"src/types/reaction_count.cr","line_number":14,"url":null},"def":{"name":"total_count","return_type":"Int32","visibility":"Public","body":"@total_count"},"external_var":false},{"html_id":"total_count=(total_count:Int32)-instance-method","name":"total_count=","doc":"Number of times the reaction was added.","summary":"<p>Number of times the reaction was added.</p>","abstract":false,"args":[{"name":"total_count","external_name":"total_count","restriction":"Int32"}],"args_string":"(total_count : Int32)","args_html":"(total_count : Int32)","location":{"filename":"src/types/reaction_count.cr","line_number":14,"url":null},"def":{"name":"total_count=","args":[{"name":"total_count","external_name":"total_count","restriction":"Int32"}],"visibility":"Public","body":"@total_count = total_count"},"external_var":false},{"html_id":"type:Hamilton::Types::ReactionType-instance-method","name":"type","doc":"Type of the reaction.","summary":"<p>Type of the reaction.</p>","abstract":false,"location":{"filename":"src/types/reaction_count.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"Hamilton::Types::ReactionType","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:Hamilton::Types::ReactionType)-instance-method","name":"type=","doc":"Type of the reaction.","summary":"<p>Type of the reaction.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Hamilton::Types::ReactionType"}],"args_string":"(type : Hamilton::Types::ReactionType)","args_html":"(type : <a href=\"../../Hamilton/Types/ReactionType.html\">Hamilton::Types::ReactionType</a>)","location":{"filename":"src/types/reaction_count.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"Hamilton::Types::ReactionType"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ReactionType","path":"Hamilton/Types/ReactionType.html","kind":"alias","full_name":"Hamilton::Types::ReactionType","name":"ReactionType","abstract":false,"locations":[{"filename":"src/types/reaction_type.cr","line_number":41,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::ReactionTypeCustomEmoji | Hamilton::Types::ReactionTypeEmoji | Hamilton::Types::ReactionTypePaid)","aliased_html":"<a href=\"../../Hamilton/Types/ReactionTypeCustomEmoji.html\">Hamilton::Types::ReactionTypeCustomEmoji</a> | <a href=\"../../Hamilton/Types/ReactionTypeEmoji.html\">Hamilton::Types::ReactionTypeEmoji</a> | <a href=\"../../Hamilton/Types/ReactionTypePaid.html\">Hamilton::Types::ReactionTypePaid</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the type of a reaction.","summary":"<p>This object describes the type of a reaction.</p>"},{"html_id":"hamilton/Hamilton/Types/ReactionTypeCustomEmoji","path":"Hamilton/Types/ReactionTypeCustomEmoji.html","kind":"class","full_name":"Hamilton::Types::ReactionTypeCustomEmoji","name":"ReactionTypeCustomEmoji","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/reaction_type.cr","line_number":19,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The reaction is based on a custom emoji.","summary":"<p>The reaction is based on a custom emoji.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/reaction_type.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/reaction_type.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"custom_emoji_id:String-instance-method","name":"custom_emoji_id","doc":"Custom emoji identifier.","summary":"<p>Custom emoji identifier.</p>","abstract":false,"location":{"filename":"src/types/reaction_type.cr","line_number":27,"url":null},"def":{"name":"custom_emoji_id","return_type":"String","visibility":"Public","body":"@custom_emoji_id"},"external_var":false},{"html_id":"custom_emoji_id=(custom_emoji_id:String)-instance-method","name":"custom_emoji_id=","doc":"Custom emoji identifier.","summary":"<p>Custom emoji identifier.</p>","abstract":false,"args":[{"name":"custom_emoji_id","external_name":"custom_emoji_id","restriction":"String"}],"args_string":"(custom_emoji_id : String)","args_html":"(custom_emoji_id : String)","location":{"filename":"src/types/reaction_type.cr","line_number":27,"url":null},"def":{"name":"custom_emoji_id=","args":[{"name":"custom_emoji_id","external_name":"custom_emoji_id","restriction":"String"}],"visibility":"Public","body":"@custom_emoji_id = custom_emoji_id"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the reaction, always \"custom_emoji\".","summary":"<p>Type of the reaction, always &quot;custom_emoji&quot;.</p>","abstract":false,"location":{"filename":"src/types/reaction_type.cr","line_number":24,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the reaction, always \"custom_emoji\".","summary":"<p>Type of the reaction, always &quot;custom_emoji&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/reaction_type.cr","line_number":24,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ReactionTypeEmoji","path":"Hamilton/Types/ReactionTypeEmoji.html","kind":"class","full_name":"Hamilton::Types::ReactionTypeEmoji","name":"ReactionTypeEmoji","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/reaction_type.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The reaction is based on an emoji.","summary":"<p>The reaction is based on an emoji.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/reaction_type.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/reaction_type.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"emoji:String-instance-method","name":"emoji","doc":"Reaction emoji. Currently, it can be one of \"❤\", \"👍\", \"👎\", \"🔥\", \"🥰\", \"👏\", \"😁\", \"🤔\", \"🤯\", \"😱\", \"🤬\", \"😢\", \"🎉\", \"🤩\", \"🤮\", \"💩\", \"🙏\", \"👌\", \"🕊\", \"🤡\", \"🥱\", \"🥴\", \"😍\", \"🐳\", \"❤‍🔥\", \"🌚\", \"🌭\", \"💯\", \"🤣\", \"⚡\", \"🍌\", \"🏆\", \"💔\", \"🤨\", \"😐\", \"🍓\", \"🍾\", \"💋\", \"🖕\", \"😈\", \"😴\", \"😭\", \"🤓\", \"👻\", \"👨‍💻\", \"👀\", \"🎃\", \"🙈\", \"😇\", \"😨\", \"🤝\", \"✍\", \"🤗\", \"🫡\", \"🎅\", \"🎄\", \"☃\", \"💅\", \"🤪\", \"🗿\", \"🆒\", \"💘\", \"🙉\", \"🦄\", \"😘\", \"💊\", \"🙊\", \"😎\", \"👾\", \"🤷‍♂\", \"🤷\", \"🤷‍♀\", \"😡\".","summary":"<p>Reaction emoji.</p>","abstract":false,"location":{"filename":"src/types/reaction_type.cr","line_number":14,"url":null},"def":{"name":"emoji","return_type":"String","visibility":"Public","body":"@emoji"},"external_var":false},{"html_id":"emoji=(emoji:String)-instance-method","name":"emoji=","doc":"Reaction emoji. Currently, it can be one of \"❤\", \"👍\", \"👎\", \"🔥\", \"🥰\", \"👏\", \"😁\", \"🤔\", \"🤯\", \"😱\", \"🤬\", \"😢\", \"🎉\", \"🤩\", \"🤮\", \"💩\", \"🙏\", \"👌\", \"🕊\", \"🤡\", \"🥱\", \"🥴\", \"😍\", \"🐳\", \"❤‍🔥\", \"🌚\", \"🌭\", \"💯\", \"🤣\", \"⚡\", \"🍌\", \"🏆\", \"💔\", \"🤨\", \"😐\", \"🍓\", \"🍾\", \"💋\", \"🖕\", \"😈\", \"😴\", \"😭\", \"🤓\", \"👻\", \"👨‍💻\", \"👀\", \"🎃\", \"🙈\", \"😇\", \"😨\", \"🤝\", \"✍\", \"🤗\", \"🫡\", \"🎅\", \"🎄\", \"☃\", \"💅\", \"🤪\", \"🗿\", \"🆒\", \"💘\", \"🙉\", \"🦄\", \"😘\", \"💊\", \"🙊\", \"😎\", \"👾\", \"🤷‍♂\", \"🤷\", \"🤷‍♀\", \"😡\".","summary":"<p>Reaction emoji.</p>","abstract":false,"args":[{"name":"emoji","external_name":"emoji","restriction":"String"}],"args_string":"(emoji : String)","args_html":"(emoji : String)","location":{"filename":"src/types/reaction_type.cr","line_number":14,"url":null},"def":{"name":"emoji=","args":[{"name":"emoji","external_name":"emoji","restriction":"String"}],"visibility":"Public","body":"@emoji = emoji"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the reaction, always “emoji”.","summary":"<p>Type of the reaction, always “emoji”.</p>","abstract":false,"location":{"filename":"src/types/reaction_type.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the reaction, always “emoji”.","summary":"<p>Type of the reaction, always “emoji”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/reaction_type.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ReactionTypePaid","path":"Hamilton/Types/ReactionTypePaid.html","kind":"class","full_name":"Hamilton::Types::ReactionTypePaid","name":"ReactionTypePaid","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/reaction_type.cr","line_number":32,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The reaction is paid.","summary":"<p>The reaction is paid.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/reaction_type.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/reaction_type.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the reaction, always \"paid\".","summary":"<p>Type of the reaction, always &quot;paid&quot;.</p>","abstract":false,"location":{"filename":"src/types/reaction_type.cr","line_number":37,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the reaction, always \"paid\".","summary":"<p>Type of the reaction, always &quot;paid&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/reaction_type.cr","line_number":37,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/RefundedPayment","path":"Hamilton/Types/RefundedPayment.html","kind":"class","full_name":"Hamilton::Types::RefundedPayment","name":"RefundedPayment","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/refunded_payment.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains basic information about a refunded payment.","summary":"<p>This object contains basic information about a refunded payment.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/refunded_payment.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/refunded_payment.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"currency:String-instance-method","name":"currency","doc":"Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars. Currently, always “XTR”.","summary":"<p>Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.</p>","abstract":false,"location":{"filename":"src/types/refunded_payment.cr","line_number":11,"url":null},"def":{"name":"currency","return_type":"String","visibility":"Public","body":"@currency"},"external_var":false},{"html_id":"currency=(currency:String)-instance-method","name":"currency=","doc":"Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars. Currently, always “XTR”.","summary":"<p>Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.</p>","abstract":false,"args":[{"name":"currency","external_name":"currency","restriction":"String"}],"args_string":"(currency : String)","args_html":"(currency : String)","location":{"filename":"src/types/refunded_payment.cr","line_number":11,"url":null},"def":{"name":"currency=","args":[{"name":"currency","external_name":"currency","restriction":"String"}],"visibility":"Public","body":"@currency = currency"},"external_var":false},{"html_id":"invoice_payload:String-instance-method","name":"invoice_payload","doc":"Bot-specified invoice payload.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"location":{"filename":"src/types/refunded_payment.cr","line_number":17,"url":null},"def":{"name":"invoice_payload","return_type":"String","visibility":"Public","body":"@invoice_payload"},"external_var":false},{"html_id":"invoice_payload=(invoice_payload:String)-instance-method","name":"invoice_payload=","doc":"Bot-specified invoice payload.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String"}],"args_string":"(invoice_payload : String)","args_html":"(invoice_payload : String)","location":{"filename":"src/types/refunded_payment.cr","line_number":17,"url":null},"def":{"name":"invoice_payload=","args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String"}],"visibility":"Public","body":"@invoice_payload = invoice_payload"},"external_var":false},{"html_id":"provider_payment_charge_id:String|Nil-instance-method","name":"provider_payment_charge_id","doc":"Provider payment identifier.","summary":"<p>Provider payment identifier.</p>","abstract":false,"location":{"filename":"src/types/refunded_payment.cr","line_number":23,"url":null},"def":{"name":"provider_payment_charge_id","return_type":"String | Nil","visibility":"Public","body":"@provider_payment_charge_id"},"external_var":false},{"html_id":"provider_payment_charge_id=(provider_payment_charge_id:String|Nil)-instance-method","name":"provider_payment_charge_id=","doc":"Provider payment identifier.","summary":"<p>Provider payment identifier.</p>","abstract":false,"args":[{"name":"provider_payment_charge_id","external_name":"provider_payment_charge_id","restriction":"String | Nil"}],"args_string":"(provider_payment_charge_id : String | Nil)","args_html":"(provider_payment_charge_id : String | Nil)","location":{"filename":"src/types/refunded_payment.cr","line_number":23,"url":null},"def":{"name":"provider_payment_charge_id=","args":[{"name":"provider_payment_charge_id","external_name":"provider_payment_charge_id","restriction":"String | Nil"}],"visibility":"Public","body":"@provider_payment_charge_id = provider_payment_charge_id"},"external_var":false},{"html_id":"telegram_payment_charge_id:String-instance-method","name":"telegram_payment_charge_id","doc":"Telegram payment identifier.","summary":"<p>Telegram payment identifier.</p>","abstract":false,"location":{"filename":"src/types/refunded_payment.cr","line_number":20,"url":null},"def":{"name":"telegram_payment_charge_id","return_type":"String","visibility":"Public","body":"@telegram_payment_charge_id"},"external_var":false},{"html_id":"telegram_payment_charge_id=(telegram_payment_charge_id:String)-instance-method","name":"telegram_payment_charge_id=","doc":"Telegram payment identifier.","summary":"<p>Telegram payment identifier.</p>","abstract":false,"args":[{"name":"telegram_payment_charge_id","external_name":"telegram_payment_charge_id","restriction":"String"}],"args_string":"(telegram_payment_charge_id : String)","args_html":"(telegram_payment_charge_id : String)","location":{"filename":"src/types/refunded_payment.cr","line_number":20,"url":null},"def":{"name":"telegram_payment_charge_id=","args":[{"name":"telegram_payment_charge_id","external_name":"telegram_payment_charge_id","restriction":"String"}],"visibility":"Public","body":"@telegram_payment_charge_id = telegram_payment_charge_id"},"external_var":false},{"html_id":"total_amount:Int32-instance-method","name":"total_amount","doc":"Total refunded price in the smallest units of the currency (integer, not float/double).","summary":"<p>Total refunded price in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"location":{"filename":"src/types/refunded_payment.cr","line_number":14,"url":null},"def":{"name":"total_amount","return_type":"Int32","visibility":"Public","body":"@total_amount"},"external_var":false},{"html_id":"total_amount=(total_amount:Int32)-instance-method","name":"total_amount=","doc":"Total refunded price in the smallest units of the currency (integer, not float/double).","summary":"<p>Total refunded price in the smallest units of the currency (integer, not float/double).</p>","abstract":false,"args":[{"name":"total_amount","external_name":"total_amount","restriction":"Int32"}],"args_string":"(total_amount : Int32)","args_html":"(total_amount : Int32)","location":{"filename":"src/types/refunded_payment.cr","line_number":14,"url":null},"def":{"name":"total_amount=","args":[{"name":"total_amount","external_name":"total_amount","restriction":"Int32"}],"visibility":"Public","body":"@total_amount = total_amount"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ReplyKeyboardMarkup","path":"Hamilton/Types/ReplyKeyboardMarkup.html","kind":"class","full_name":"Hamilton::Types::ReplyKeyboardMarkup","name":"ReplyKeyboardMarkup","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/reply_keyboard_markup.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a custom keyboard with reply options. Not supported in channels and for messages sent on behalf of a Telegram Business account.","summary":"<p>This object represents a custom keyboard with reply options.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"input_field_placeholder:String|Nil-instance-method","name":"input_field_placeholder","doc":"The placeholder to be shown in the input field when the keyboard is active; 1-64 characters.","summary":"<p>The placeholder to be shown in the input field when the keyboard is active; 1-64 characters.</p>","abstract":false,"location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":23,"url":null},"def":{"name":"input_field_placeholder","return_type":"String | Nil","visibility":"Public","body":"@input_field_placeholder"},"external_var":false},{"html_id":"input_field_placeholder=(input_field_placeholder:String|Nil)-instance-method","name":"input_field_placeholder=","doc":"The placeholder to be shown in the input field when the keyboard is active; 1-64 characters.","summary":"<p>The placeholder to be shown in the input field when the keyboard is active; 1-64 characters.</p>","abstract":false,"args":[{"name":"input_field_placeholder","external_name":"input_field_placeholder","restriction":"String | Nil"}],"args_string":"(input_field_placeholder : String | Nil)","args_html":"(input_field_placeholder : String | Nil)","location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":23,"url":null},"def":{"name":"input_field_placeholder=","args":[{"name":"input_field_placeholder","external_name":"input_field_placeholder","restriction":"String | Nil"}],"visibility":"Public","body":"@input_field_placeholder = input_field_placeholder"},"external_var":false},{"html_id":"is_persistent:Bool|Nil-instance-method","name":"is_persistent","doc":"Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon.","summary":"<p>Requests clients to always show the keyboard when the regular keyboard is hidden.</p>","abstract":false,"location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":14,"url":null},"def":{"name":"is_persistent","return_type":"Bool | Nil","visibility":"Public","body":"@is_persistent"},"external_var":false},{"html_id":"is_persistent=(is_persistent:Bool|Nil)-instance-method","name":"is_persistent=","doc":"Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon.","summary":"<p>Requests clients to always show the keyboard when the regular keyboard is hidden.</p>","abstract":false,"args":[{"name":"is_persistent","external_name":"is_persistent","restriction":"Bool | Nil"}],"args_string":"(is_persistent : Bool | Nil)","args_html":"(is_persistent : Bool | Nil)","location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":14,"url":null},"def":{"name":"is_persistent=","args":[{"name":"is_persistent","external_name":"is_persistent","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_persistent = is_persistent"},"external_var":false},{"html_id":"keyboard:Array(Array(Hamilton::Types::KeyboardButton))-instance-method","name":"keyboard","doc":"Array of button rows, each represented by an Array of KeyboardButton objects.","summary":"<p>Array of button rows, each represented by an Array of KeyboardButton objects.</p>","abstract":false,"location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":11,"url":null},"def":{"name":"keyboard","return_type":"Array(Array(Hamilton::Types::KeyboardButton))","visibility":"Public","body":"@keyboard"},"external_var":false},{"html_id":"keyboard=(keyboard:Array(Array(Hamilton::Types::KeyboardButton)))-instance-method","name":"keyboard=","doc":"Array of button rows, each represented by an Array of KeyboardButton objects.","summary":"<p>Array of button rows, each represented by an Array of KeyboardButton objects.</p>","abstract":false,"args":[{"name":"keyboard","external_name":"keyboard","restriction":"Array(Array(Hamilton::Types::KeyboardButton))"}],"args_string":"(keyboard : Array(Array(Hamilton::Types::KeyboardButton)))","args_html":"(keyboard : Array(Array(<a href=\"../../Hamilton/Types/KeyboardButton.html\">Hamilton::Types::KeyboardButton</a>)))","location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":11,"url":null},"def":{"name":"keyboard=","args":[{"name":"keyboard","external_name":"keyboard","restriction":"Array(Array(Hamilton::Types::KeyboardButton))"}],"visibility":"Public","body":"@keyboard = keyboard"},"external_var":false},{"html_id":"one_time_keyboard:Bool|Nil-instance-method","name":"one_time_keyboard","doc":"Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false.","summary":"<p>Requests clients to hide the keyboard as soon as it's been used.</p>","abstract":false,"location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":20,"url":null},"def":{"name":"one_time_keyboard","return_type":"Bool | Nil","visibility":"Public","body":"@one_time_keyboard"},"external_var":false},{"html_id":"one_time_keyboard=(one_time_keyboard:Bool|Nil)-instance-method","name":"one_time_keyboard=","doc":"Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false.","summary":"<p>Requests clients to hide the keyboard as soon as it's been used.</p>","abstract":false,"args":[{"name":"one_time_keyboard","external_name":"one_time_keyboard","restriction":"Bool | Nil"}],"args_string":"(one_time_keyboard : Bool | Nil)","args_html":"(one_time_keyboard : Bool | Nil)","location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":20,"url":null},"def":{"name":"one_time_keyboard=","args":[{"name":"one_time_keyboard","external_name":"one_time_keyboard","restriction":"Bool | Nil"}],"visibility":"Public","body":"@one_time_keyboard = one_time_keyboard"},"external_var":false},{"html_id":"resize_keyboard:Bool|Nil-instance-method","name":"resize_keyboard","doc":"Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.","summary":"<p>Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons).</p>","abstract":false,"location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":17,"url":null},"def":{"name":"resize_keyboard","return_type":"Bool | Nil","visibility":"Public","body":"@resize_keyboard"},"external_var":false},{"html_id":"resize_keyboard=(resize_keyboard:Bool|Nil)-instance-method","name":"resize_keyboard=","doc":"Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.","summary":"<p>Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons).</p>","abstract":false,"args":[{"name":"resize_keyboard","external_name":"resize_keyboard","restriction":"Bool | Nil"}],"args_string":"(resize_keyboard : Bool | Nil)","args_html":"(resize_keyboard : Bool | Nil)","location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":17,"url":null},"def":{"name":"resize_keyboard=","args":[{"name":"resize_keyboard","external_name":"resize_keyboard","restriction":"Bool | Nil"}],"visibility":"Public","body":"@resize_keyboard = resize_keyboard"},"external_var":false},{"html_id":"selective:Bool|Nil-instance-method","name":"selective","doc":"Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.","summary":"<p>Use this parameter if you want to show the keyboard to specific users only.</p>","abstract":false,"location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":26,"url":null},"def":{"name":"selective","return_type":"Bool | Nil","visibility":"Public","body":"@selective"},"external_var":false},{"html_id":"selective=(selective:Bool|Nil)-instance-method","name":"selective=","doc":"Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.","summary":"<p>Use this parameter if you want to show the keyboard to specific users only.</p>","abstract":false,"args":[{"name":"selective","external_name":"selective","restriction":"Bool | Nil"}],"args_string":"(selective : Bool | Nil)","args_html":"(selective : Bool | Nil)","location":{"filename":"src/types/reply_keyboard_markup.cr","line_number":26,"url":null},"def":{"name":"selective=","args":[{"name":"selective","external_name":"selective","restriction":"Bool | Nil"}],"visibility":"Public","body":"@selective = selective"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ReplyKeyboardRemove","path":"Hamilton/Types/ReplyKeyboardRemove.html","kind":"class","full_name":"Hamilton::Types::ReplyKeyboardRemove","name":"ReplyKeyboardRemove","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/reply_keyboard_remove.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button. Not supported in channels and for messages sent on behalf of a Telegram Business account.","summary":"<p>Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/reply_keyboard_remove.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/reply_keyboard_remove.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"remove_keyboard:Bool-instance-method","name":"remove_keyboard","doc":"Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup).","summary":"<p>Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup).</p>","abstract":false,"location":{"filename":"src/types/reply_keyboard_remove.cr","line_number":11,"url":null},"def":{"name":"remove_keyboard","return_type":"Bool","visibility":"Public","body":"@remove_keyboard"},"external_var":false},{"html_id":"remove_keyboard=(remove_keyboard:Bool)-instance-method","name":"remove_keyboard=","doc":"Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup).","summary":"<p>Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup).</p>","abstract":false,"args":[{"name":"remove_keyboard","external_name":"remove_keyboard","restriction":"Bool"}],"args_string":"(remove_keyboard : Bool)","args_html":"(remove_keyboard : Bool)","location":{"filename":"src/types/reply_keyboard_remove.cr","line_number":11,"url":null},"def":{"name":"remove_keyboard=","args":[{"name":"remove_keyboard","external_name":"remove_keyboard","restriction":"Bool"}],"visibility":"Public","body":"@remove_keyboard = remove_keyboard"},"external_var":false},{"html_id":"selective:Bool|Nil-instance-method","name":"selective","doc":"Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.","summary":"<p>Use this parameter if you want to remove the keyboard for specific users only.</p>","abstract":false,"location":{"filename":"src/types/reply_keyboard_remove.cr","line_number":14,"url":null},"def":{"name":"selective","return_type":"Bool | Nil","visibility":"Public","body":"@selective"},"external_var":false},{"html_id":"selective=(selective:Bool|Nil)-instance-method","name":"selective=","doc":"Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.","summary":"<p>Use this parameter if you want to remove the keyboard for specific users only.</p>","abstract":false,"args":[{"name":"selective","external_name":"selective","restriction":"Bool | Nil"}],"args_string":"(selective : Bool | Nil)","args_html":"(selective : Bool | Nil)","location":{"filename":"src/types/reply_keyboard_remove.cr","line_number":14,"url":null},"def":{"name":"selective=","args":[{"name":"selective","external_name":"selective","restriction":"Bool | Nil"}],"visibility":"Public","body":"@selective = selective"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ReplyParameters","path":"Hamilton/Types/ReplyParameters.html","kind":"class","full_name":"Hamilton::Types::ReplyParameters","name":"ReplyParameters","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/reply_parameters.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes reply parameters for the message that is being sent.","summary":"<p>Describes reply parameters for the message that is being sent.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/reply_parameters.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/reply_parameters.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"allow_sending_without_reply:Bool|Nil-instance-method","name":"allow_sending_without_reply","doc":"Pass True if the message should be sent even if the specified message to be replied to is not found. Always False for replies in another chat or forum topic. Always True for messages sent on behalf of a business account.","summary":"<p>Pass True if the message should be sent even if the specified message to be replied to is not found.</p>","abstract":false,"location":{"filename":"src/types/reply_parameters.cr","line_number":17,"url":null},"def":{"name":"allow_sending_without_reply","return_type":"Bool | Nil","visibility":"Public","body":"@allow_sending_without_reply"},"external_var":false},{"html_id":"allow_sending_without_reply=(allow_sending_without_reply:Bool|Nil)-instance-method","name":"allow_sending_without_reply=","doc":"Pass True if the message should be sent even if the specified message to be replied to is not found. Always False for replies in another chat or forum topic. Always True for messages sent on behalf of a business account.","summary":"<p>Pass True if the message should be sent even if the specified message to be replied to is not found.</p>","abstract":false,"args":[{"name":"allow_sending_without_reply","external_name":"allow_sending_without_reply","restriction":"Bool | Nil"}],"args_string":"(allow_sending_without_reply : Bool | Nil)","args_html":"(allow_sending_without_reply : Bool | Nil)","location":{"filename":"src/types/reply_parameters.cr","line_number":17,"url":null},"def":{"name":"allow_sending_without_reply=","args":[{"name":"allow_sending_without_reply","external_name":"allow_sending_without_reply","restriction":"Bool | Nil"}],"visibility":"Public","body":"@allow_sending_without_reply = allow_sending_without_reply"},"external_var":false},{"html_id":"chat_id:String|Int32|Nil-instance-method","name":"chat_id","doc":"If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername). Not supported for messages sent on behalf of a business account and messages from channel direct messages chats.","summary":"<p>If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername).</p>","abstract":false,"location":{"filename":"src/types/reply_parameters.cr","line_number":14,"url":null},"def":{"name":"chat_id","return_type":"String | Int32 | Nil","visibility":"Public","body":"@chat_id"},"external_var":false},{"html_id":"chat_id=(chat_id:String|Int32|Nil)-instance-method","name":"chat_id=","doc":"If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername). Not supported for messages sent on behalf of a business account and messages from channel direct messages chats.","summary":"<p>If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername).</p>","abstract":false,"args":[{"name":"chat_id","external_name":"chat_id","restriction":"String | Int32 | Nil"}],"args_string":"(chat_id : String | Int32 | Nil)","args_html":"(chat_id : String | Int32 | Nil)","location":{"filename":"src/types/reply_parameters.cr","line_number":14,"url":null},"def":{"name":"chat_id=","args":[{"name":"chat_id","external_name":"chat_id","restriction":"String | Int32 | Nil"}],"visibility":"Public","body":"@chat_id = chat_id"},"external_var":false},{"html_id":"checklist_task_id:Int32|Nil-instance-method","name":"checklist_task_id","doc":"Identifier of the specific checklist task to be replied to.","summary":"<p>Identifier of the specific checklist task to be replied to.</p>","abstract":false,"location":{"filename":"src/types/reply_parameters.cr","line_number":32,"url":null},"def":{"name":"checklist_task_id","return_type":"Int32 | Nil","visibility":"Public","body":"@checklist_task_id"},"external_var":false},{"html_id":"checklist_task_id=(checklist_task_id:Int32|Nil)-instance-method","name":"checklist_task_id=","doc":"Identifier of the specific checklist task to be replied to.","summary":"<p>Identifier of the specific checklist task to be replied to.</p>","abstract":false,"args":[{"name":"checklist_task_id","external_name":"checklist_task_id","restriction":"Int32 | Nil"}],"args_string":"(checklist_task_id : Int32 | Nil)","args_html":"(checklist_task_id : Int32 | Nil)","location":{"filename":"src/types/reply_parameters.cr","line_number":32,"url":null},"def":{"name":"checklist_task_id=","args":[{"name":"checklist_task_id","external_name":"checklist_task_id","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@checklist_task_id = checklist_task_id"},"external_var":false},{"html_id":"message_id:Int32-instance-method","name":"message_id","doc":"Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified.","summary":"<p>Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified.</p>","abstract":false,"location":{"filename":"src/types/reply_parameters.cr","line_number":11,"url":null},"def":{"name":"message_id","return_type":"Int32","visibility":"Public","body":"@message_id"},"external_var":false},{"html_id":"message_id=(message_id:Int32)-instance-method","name":"message_id=","doc":"Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified.","summary":"<p>Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified.</p>","abstract":false,"args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"args_string":"(message_id : Int32)","args_html":"(message_id : Int32)","location":{"filename":"src/types/reply_parameters.cr","line_number":11,"url":null},"def":{"name":"message_id=","args":[{"name":"message_id","external_name":"message_id","restriction":"Int32"}],"visibility":"Public","body":"@message_id = message_id"},"external_var":false},{"html_id":"quote:String|Nil-instance-method","name":"quote","doc":"Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities. The message will fail to send if the quote isn't found in the original message.","summary":"<p>Quoted part of the message to be replied to; 0-1024 characters after entities parsing.</p>","abstract":false,"location":{"filename":"src/types/reply_parameters.cr","line_number":20,"url":null},"def":{"name":"quote","return_type":"String | Nil","visibility":"Public","body":"@quote"},"external_var":false},{"html_id":"quote=(quote:String|Nil)-instance-method","name":"quote=","doc":"Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities. The message will fail to send if the quote isn't found in the original message.","summary":"<p>Quoted part of the message to be replied to; 0-1024 characters after entities parsing.</p>","abstract":false,"args":[{"name":"quote","external_name":"quote","restriction":"String | Nil"}],"args_string":"(quote : String | Nil)","args_html":"(quote : String | Nil)","location":{"filename":"src/types/reply_parameters.cr","line_number":20,"url":null},"def":{"name":"quote=","args":[{"name":"quote","external_name":"quote","restriction":"String | Nil"}],"visibility":"Public","body":"@quote = quote"},"external_var":false},{"html_id":"quote_entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"quote_entities","doc":"A JSON-serialized list of special entities that appear in the quote. It can be specified instead of quote_parse_mode.","summary":"<p>A JSON-serialized list of special entities that appear in the quote.</p>","abstract":false,"location":{"filename":"src/types/reply_parameters.cr","line_number":26,"url":null},"def":{"name":"quote_entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@quote_entities"},"external_var":false},{"html_id":"quote_entities=(quote_entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"quote_entities=","doc":"A JSON-serialized list of special entities that appear in the quote. It can be specified instead of quote_parse_mode.","summary":"<p>A JSON-serialized list of special entities that appear in the quote.</p>","abstract":false,"args":[{"name":"quote_entities","external_name":"quote_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(quote_entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(quote_entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/reply_parameters.cr","line_number":26,"url":null},"def":{"name":"quote_entities=","args":[{"name":"quote_entities","external_name":"quote_entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@quote_entities = quote_entities"},"external_var":false},{"html_id":"quote_parse_mode:String|Nil-instance-method","name":"quote_parse_mode","doc":"Mode for parsing entities in the quote.","summary":"<p>Mode for parsing entities in the quote.</p>","abstract":false,"location":{"filename":"src/types/reply_parameters.cr","line_number":23,"url":null},"def":{"name":"quote_parse_mode","return_type":"String | Nil","visibility":"Public","body":"@quote_parse_mode"},"external_var":false},{"html_id":"quote_parse_mode=(quote_parse_mode:String|Nil)-instance-method","name":"quote_parse_mode=","doc":"Mode for parsing entities in the quote.","summary":"<p>Mode for parsing entities in the quote.</p>","abstract":false,"args":[{"name":"quote_parse_mode","external_name":"quote_parse_mode","restriction":"String | Nil"}],"args_string":"(quote_parse_mode : String | Nil)","args_html":"(quote_parse_mode : String | Nil)","location":{"filename":"src/types/reply_parameters.cr","line_number":23,"url":null},"def":{"name":"quote_parse_mode=","args":[{"name":"quote_parse_mode","external_name":"quote_parse_mode","restriction":"String | Nil"}],"visibility":"Public","body":"@quote_parse_mode = quote_parse_mode"},"external_var":false},{"html_id":"quote_position:Int32|Nil-instance-method","name":"quote_position","doc":"Position of the quote in the original message in UTF-16 code units.","summary":"<p>Position of the quote in the original message in UTF-16 code units.</p>","abstract":false,"location":{"filename":"src/types/reply_parameters.cr","line_number":29,"url":null},"def":{"name":"quote_position","return_type":"Int32 | Nil","visibility":"Public","body":"@quote_position"},"external_var":false},{"html_id":"quote_position=(quote_position:Int32|Nil)-instance-method","name":"quote_position=","doc":"Position of the quote in the original message in UTF-16 code units.","summary":"<p>Position of the quote in the original message in UTF-16 code units.</p>","abstract":false,"args":[{"name":"quote_position","external_name":"quote_position","restriction":"Int32 | Nil"}],"args_string":"(quote_position : Int32 | Nil)","args_html":"(quote_position : Int32 | Nil)","location":{"filename":"src/types/reply_parameters.cr","line_number":29,"url":null},"def":{"name":"quote_position=","args":[{"name":"quote_position","external_name":"quote_position","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@quote_position = quote_position"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ResponseParameters","path":"Hamilton/Types/ResponseParameters.html","kind":"class","full_name":"Hamilton::Types::ResponseParameters","name":"ResponseParameters","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/response_parameters.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes why a request was unsuccessful.","summary":"<p>Describes why a request was unsuccessful.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/response_parameters.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/response_parameters.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"migrate_to_chat_id:Int64|Nil-instance-method","name":"migrate_to_chat_id","doc":"The group has been migrated to a supergroup with the specified identifier.","summary":"<p>The group has been migrated to a supergroup with the specified identifier.</p>","abstract":false,"location":{"filename":"src/types/response_parameters.cr","line_number":11,"url":null},"def":{"name":"migrate_to_chat_id","return_type":"Int64 | Nil","visibility":"Public","body":"@migrate_to_chat_id"},"external_var":false},{"html_id":"migrate_to_chat_id=(migrate_to_chat_id:Int64|Nil)-instance-method","name":"migrate_to_chat_id=","doc":"The group has been migrated to a supergroup with the specified identifier.","summary":"<p>The group has been migrated to a supergroup with the specified identifier.</p>","abstract":false,"args":[{"name":"migrate_to_chat_id","external_name":"migrate_to_chat_id","restriction":"Int64 | Nil"}],"args_string":"(migrate_to_chat_id : Int64 | Nil)","args_html":"(migrate_to_chat_id : Int64 | Nil)","location":{"filename":"src/types/response_parameters.cr","line_number":11,"url":null},"def":{"name":"migrate_to_chat_id=","args":[{"name":"migrate_to_chat_id","external_name":"migrate_to_chat_id","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@migrate_to_chat_id = migrate_to_chat_id"},"external_var":false},{"html_id":"retry_after:Int32-instance-method","name":"retry_after","doc":"In case of exceeding flood control, the number of seconds left to wait before the request can be repeated.","summary":"<p>In case of exceeding flood control, the number of seconds left to wait before the request can be repeated.</p>","abstract":false,"location":{"filename":"src/types/response_parameters.cr","line_number":14,"url":null},"def":{"name":"retry_after","return_type":"Int32","visibility":"Public","body":"@retry_after"},"external_var":false},{"html_id":"retry_after=(retry_after:Int32)-instance-method","name":"retry_after=","doc":"In case of exceeding flood control, the number of seconds left to wait before the request can be repeated.","summary":"<p>In case of exceeding flood control, the number of seconds left to wait before the request can be repeated.</p>","abstract":false,"args":[{"name":"retry_after","external_name":"retry_after","restriction":"Int32"}],"args_string":"(retry_after : Int32)","args_html":"(retry_after : Int32)","location":{"filename":"src/types/response_parameters.cr","line_number":14,"url":null},"def":{"name":"retry_after=","args":[{"name":"retry_after","external_name":"retry_after","restriction":"Int32"}],"visibility":"Public","body":"@retry_after = retry_after"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/RevenueWithdrawalState","path":"Hamilton/Types/RevenueWithdrawalState.html","kind":"alias","full_name":"Hamilton::Types::RevenueWithdrawalState","name":"RevenueWithdrawalState","abstract":false,"locations":[{"filename":"src/types/revenue_withdrawal_state.cr","line_number":41,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::RevenueWithdrawalStateFailed | Hamilton::Types::RevenueWithdrawalStatePending | Hamilton::Types::RevenueWithdrawalStateSucceeded)","aliased_html":"<a href=\"../../Hamilton/Types/RevenueWithdrawalStateFailed.html\">Hamilton::Types::RevenueWithdrawalStateFailed</a> | <a href=\"../../Hamilton/Types/RevenueWithdrawalStatePending.html\">Hamilton::Types::RevenueWithdrawalStatePending</a> | <a href=\"../../Hamilton/Types/RevenueWithdrawalStateSucceeded.html\">Hamilton::Types::RevenueWithdrawalStateSucceeded</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the state of a revenue withdrawal operation.","summary":"<p>This object describes the state of a revenue withdrawal operation.</p>"},{"html_id":"hamilton/Hamilton/Types/RevenueWithdrawalStateFailed","path":"Hamilton/Types/RevenueWithdrawalStateFailed.html","kind":"class","full_name":"Hamilton::Types::RevenueWithdrawalStateFailed","name":"RevenueWithdrawalStateFailed","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/revenue_withdrawal_state.cr","line_number":32,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The withdrawal failed and the transaction was refunded.","summary":"<p>The withdrawal failed and the transaction was refunded.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":33,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the state, always \"failed\".","summary":"<p>Type of the state, always &quot;failed&quot;.</p>","abstract":false,"location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":37,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the state, always \"failed\".","summary":"<p>Type of the state, always &quot;failed&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":37,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/RevenueWithdrawalStatePending","path":"Hamilton/Types/RevenueWithdrawalStatePending.html","kind":"class","full_name":"Hamilton::Types::RevenueWithdrawalStatePending","name":"RevenueWithdrawalStatePending","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/revenue_withdrawal_state.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The withdrawal is in progress.","summary":"<p>The withdrawal is in progress.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the state, always “pending”.","summary":"<p>Type of the state, always “pending”.</p>","abstract":false,"location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the state, always “pending”.","summary":"<p>Type of the state, always “pending”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/RevenueWithdrawalStateSucceeded","path":"Hamilton/Types/RevenueWithdrawalStateSucceeded.html","kind":"class","full_name":"Hamilton::Types::RevenueWithdrawalStateSucceeded","name":"RevenueWithdrawalStateSucceeded","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/revenue_withdrawal_state.cr","line_number":16,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"The withdrawal succeeded.","summary":"<p>The withdrawal succeeded.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"date:Int32-instance-method","name":"date","doc":"Date the withdrawal was completed in Unix time.","summary":"<p>Date the withdrawal was completed in Unix time.</p>","abstract":false,"location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":24,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date the withdrawal was completed in Unix time.","summary":"<p>Date the withdrawal was completed in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":24,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the state, always \"succeeded\".","summary":"<p>Type of the state, always &quot;succeeded&quot;.</p>","abstract":false,"location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":21,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the state, always \"succeeded\".","summary":"<p>Type of the state, always &quot;succeeded&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":21,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"url:String-instance-method","name":"url","doc":"An HTTPS URL that can be used to see transaction details.","summary":"<p>An HTTPS URL that can be used to see transaction details.</p>","abstract":false,"location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":27,"url":null},"def":{"name":"url","return_type":"String","visibility":"Public","body":"@url"},"external_var":false},{"html_id":"url=(url:String)-instance-method","name":"url=","doc":"An HTTPS URL that can be used to see transaction details.","summary":"<p>An HTTPS URL that can be used to see transaction details.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String"}],"args_string":"(url : String)","args_html":"(url : String)","location":{"filename":"src/types/revenue_withdrawal_state.cr","line_number":27,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String"}],"visibility":"Public","body":"@url = url"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SentWebAppMessage","path":"Hamilton/Types/SentWebAppMessage.html","kind":"class","full_name":"Hamilton::Types::SentWebAppMessage","name":"SentWebAppMessage","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/sent_web_app_message.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes an inline message sent by a Web App on behalf of a user.","summary":"<p>Describes an inline message sent by a Web App on behalf of a user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/sent_web_app_message.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/sent_web_app_message.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"inline_message_id:String|Nil-instance-method","name":"inline_message_id","doc":"Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message.","summary":"<p>Identifier of the sent inline message.</p>","abstract":false,"location":{"filename":"src/types/sent_web_app_message.cr","line_number":11,"url":null},"def":{"name":"inline_message_id","return_type":"String | Nil","visibility":"Public","body":"@inline_message_id"},"external_var":false},{"html_id":"inline_message_id=(inline_message_id:String|Nil)-instance-method","name":"inline_message_id=","doc":"Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message.","summary":"<p>Identifier of the sent inline message.</p>","abstract":false,"args":[{"name":"inline_message_id","external_name":"inline_message_id","restriction":"String | Nil"}],"args_string":"(inline_message_id : String | Nil)","args_html":"(inline_message_id : String | Nil)","location":{"filename":"src/types/sent_web_app_message.cr","line_number":11,"url":null},"def":{"name":"inline_message_id=","args":[{"name":"inline_message_id","external_name":"inline_message_id","restriction":"String | Nil"}],"visibility":"Public","body":"@inline_message_id = inline_message_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SharedUser","path":"Hamilton/Types/SharedUser.html","kind":"class","full_name":"Hamilton::Types::SharedUser","name":"SharedUser","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/shared_user.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about a user that was shared with the bot using a KeyboardButtonRequestUsers button.","summary":"<p>This object contains information about a user that was shared with the bot using a KeyboardButtonRequestUsers button.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/shared_user.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/shared_user.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"first_name:String|Nil-instance-method","name":"first_name","doc":"First name of the user, if the name was requested by the bot.","summary":"<p>First name of the user, if the name was requested by the bot.</p>","abstract":false,"location":{"filename":"src/types/shared_user.cr","line_number":14,"url":null},"def":{"name":"first_name","return_type":"String | Nil","visibility":"Public","body":"@first_name"},"external_var":false},{"html_id":"first_name=(first_name:String|Nil)-instance-method","name":"first_name=","doc":"First name of the user, if the name was requested by the bot.","summary":"<p>First name of the user, if the name was requested by the bot.</p>","abstract":false,"args":[{"name":"first_name","external_name":"first_name","restriction":"String | Nil"}],"args_string":"(first_name : String | Nil)","args_html":"(first_name : String | Nil)","location":{"filename":"src/types/shared_user.cr","line_number":14,"url":null},"def":{"name":"first_name=","args":[{"name":"first_name","external_name":"first_name","restriction":"String | Nil"}],"visibility":"Public","body":"@first_name = first_name"},"external_var":false},{"html_id":"last_name:String|Nil-instance-method","name":"last_name","doc":"Last name of the user, if the name was requested by the bot.","summary":"<p>Last name of the user, if the name was requested by the bot.</p>","abstract":false,"location":{"filename":"src/types/shared_user.cr","line_number":17,"url":null},"def":{"name":"last_name","return_type":"String | Nil","visibility":"Public","body":"@last_name"},"external_var":false},{"html_id":"last_name=(last_name:String|Nil)-instance-method","name":"last_name=","doc":"Last name of the user, if the name was requested by the bot.","summary":"<p>Last name of the user, if the name was requested by the bot.</p>","abstract":false,"args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"args_string":"(last_name : String | Nil)","args_html":"(last_name : String | Nil)","location":{"filename":"src/types/shared_user.cr","line_number":17,"url":null},"def":{"name":"last_name=","args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"visibility":"Public","body":"@last_name = last_name"},"external_var":false},{"html_id":"photo:Array(Hamilton::Types::PhotoSize)|Nil-instance-method","name":"photo","doc":"Available sizes of the chat photo, if the photo was requested by the bot.","summary":"<p>Available sizes of the chat photo, if the photo was requested by the bot.</p>","abstract":false,"location":{"filename":"src/types/shared_user.cr","line_number":23,"url":null},"def":{"name":"photo","return_type":"Array(Hamilton::Types::PhotoSize) | Nil","visibility":"Public","body":"@photo"},"external_var":false},{"html_id":"photo=(photo:Array(Hamilton::Types::PhotoSize)|Nil)-instance-method","name":"photo=","doc":"Available sizes of the chat photo, if the photo was requested by the bot.","summary":"<p>Available sizes of the chat photo, if the photo was requested by the bot.</p>","abstract":false,"args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"args_string":"(photo : Array(Hamilton::Types::PhotoSize) | Nil)","args_html":"(photo : Array(<a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a>) | Nil)","location":{"filename":"src/types/shared_user.cr","line_number":23,"url":null},"def":{"name":"photo=","args":[{"name":"photo","external_name":"photo","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"visibility":"Public","body":"@photo = photo"},"external_var":false},{"html_id":"user_id:Int64-instance-method","name":"user_id","doc":"Identifier of the shared user. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means.","summary":"<p>Identifier of the shared user.</p>","abstract":false,"location":{"filename":"src/types/shared_user.cr","line_number":11,"url":null},"def":{"name":"user_id","return_type":"Int64","visibility":"Public","body":"@user_id"},"external_var":false},{"html_id":"user_id=(user_id:Int64)-instance-method","name":"user_id=","doc":"Identifier of the shared user. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means.","summary":"<p>Identifier of the shared user.</p>","abstract":false,"args":[{"name":"user_id","external_name":"user_id","restriction":"Int64"}],"args_string":"(user_id : Int64)","args_html":"(user_id : Int64)","location":{"filename":"src/types/shared_user.cr","line_number":11,"url":null},"def":{"name":"user_id=","args":[{"name":"user_id","external_name":"user_id","restriction":"Int64"}],"visibility":"Public","body":"@user_id = user_id"},"external_var":false},{"html_id":"username:String|Nil-instance-method","name":"username","doc":"Username of the user, if the username was requested by the bot.","summary":"<p>Username of the user, if the username was requested by the bot.</p>","abstract":false,"location":{"filename":"src/types/shared_user.cr","line_number":20,"url":null},"def":{"name":"username","return_type":"String | Nil","visibility":"Public","body":"@username"},"external_var":false},{"html_id":"username=(username:String|Nil)-instance-method","name":"username=","doc":"Username of the user, if the username was requested by the bot.","summary":"<p>Username of the user, if the username was requested by the bot.</p>","abstract":false,"args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"args_string":"(username : String | Nil)","args_html":"(username : String | Nil)","location":{"filename":"src/types/shared_user.cr","line_number":20,"url":null},"def":{"name":"username=","args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"visibility":"Public","body":"@username = username"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ShippingAddress","path":"Hamilton/Types/ShippingAddress.html","kind":"class","full_name":"Hamilton::Types::ShippingAddress","name":"ShippingAddress","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/shipping_address.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a shipping address.","summary":"<p>This object represents a shipping address.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/shipping_address.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/shipping_address.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"city:String-instance-method","name":"city","doc":"City.","summary":"<p>City.</p>","abstract":false,"location":{"filename":"src/types/shipping_address.cr","line_number":17,"url":null},"def":{"name":"city","return_type":"String","visibility":"Public","body":"@city"},"external_var":false},{"html_id":"city=(city:String)-instance-method","name":"city=","doc":"City.","summary":"<p>City.</p>","abstract":false,"args":[{"name":"city","external_name":"city","restriction":"String"}],"args_string":"(city : String)","args_html":"(city : String)","location":{"filename":"src/types/shipping_address.cr","line_number":17,"url":null},"def":{"name":"city=","args":[{"name":"city","external_name":"city","restriction":"String"}],"visibility":"Public","body":"@city = city"},"external_var":false},{"html_id":"country_code:String-instance-method","name":"country_code","doc":"Two-letter ISO 3166-1 alpha-2 country code.","summary":"<p>Two-letter ISO 3166-1 alpha-2 country code.</p>","abstract":false,"location":{"filename":"src/types/shipping_address.cr","line_number":11,"url":null},"def":{"name":"country_code","return_type":"String","visibility":"Public","body":"@country_code"},"external_var":false},{"html_id":"country_code=(country_code:String)-instance-method","name":"country_code=","doc":"Two-letter ISO 3166-1 alpha-2 country code.","summary":"<p>Two-letter ISO 3166-1 alpha-2 country code.</p>","abstract":false,"args":[{"name":"country_code","external_name":"country_code","restriction":"String"}],"args_string":"(country_code : String)","args_html":"(country_code : String)","location":{"filename":"src/types/shipping_address.cr","line_number":11,"url":null},"def":{"name":"country_code=","args":[{"name":"country_code","external_name":"country_code","restriction":"String"}],"visibility":"Public","body":"@country_code = country_code"},"external_var":false},{"html_id":"post_code:String-instance-method","name":"post_code","doc":"Address post code.","summary":"<p>Address post code.</p>","abstract":false,"location":{"filename":"src/types/shipping_address.cr","line_number":26,"url":null},"def":{"name":"post_code","return_type":"String","visibility":"Public","body":"@post_code"},"external_var":false},{"html_id":"post_code=(post_code:String)-instance-method","name":"post_code=","doc":"Address post code.","summary":"<p>Address post code.</p>","abstract":false,"args":[{"name":"post_code","external_name":"post_code","restriction":"String"}],"args_string":"(post_code : String)","args_html":"(post_code : String)","location":{"filename":"src/types/shipping_address.cr","line_number":26,"url":null},"def":{"name":"post_code=","args":[{"name":"post_code","external_name":"post_code","restriction":"String"}],"visibility":"Public","body":"@post_code = post_code"},"external_var":false},{"html_id":"state:String-instance-method","name":"state","doc":"State, if applicable.","summary":"<p>State, if applicable.</p>","abstract":false,"location":{"filename":"src/types/shipping_address.cr","line_number":14,"url":null},"def":{"name":"state","return_type":"String","visibility":"Public","body":"@state"},"external_var":false},{"html_id":"state=(state:String)-instance-method","name":"state=","doc":"State, if applicable.","summary":"<p>State, if applicable.</p>","abstract":false,"args":[{"name":"state","external_name":"state","restriction":"String"}],"args_string":"(state : String)","args_html":"(state : String)","location":{"filename":"src/types/shipping_address.cr","line_number":14,"url":null},"def":{"name":"state=","args":[{"name":"state","external_name":"state","restriction":"String"}],"visibility":"Public","body":"@state = state"},"external_var":false},{"html_id":"street_line1:String-instance-method","name":"street_line1","doc":"First line for the address.","summary":"<p>First line for the address.</p>","abstract":false,"location":{"filename":"src/types/shipping_address.cr","line_number":20,"url":null},"def":{"name":"street_line1","return_type":"String","visibility":"Public","body":"@street_line1"},"external_var":false},{"html_id":"street_line1=(street_line1:String)-instance-method","name":"street_line1=","doc":"First line for the address.","summary":"<p>First line for the address.</p>","abstract":false,"args":[{"name":"street_line1","external_name":"street_line1","restriction":"String"}],"args_string":"(street_line1 : String)","args_html":"(street_line1 : String)","location":{"filename":"src/types/shipping_address.cr","line_number":20,"url":null},"def":{"name":"street_line1=","args":[{"name":"street_line1","external_name":"street_line1","restriction":"String"}],"visibility":"Public","body":"@street_line1 = street_line1"},"external_var":false},{"html_id":"street_line2:String-instance-method","name":"street_line2","doc":"Second line for the address.","summary":"<p>Second line for the address.</p>","abstract":false,"location":{"filename":"src/types/shipping_address.cr","line_number":23,"url":null},"def":{"name":"street_line2","return_type":"String","visibility":"Public","body":"@street_line2"},"external_var":false},{"html_id":"street_line2=(street_line2:String)-instance-method","name":"street_line2=","doc":"Second line for the address.","summary":"<p>Second line for the address.</p>","abstract":false,"args":[{"name":"street_line2","external_name":"street_line2","restriction":"String"}],"args_string":"(street_line2 : String)","args_html":"(street_line2 : String)","location":{"filename":"src/types/shipping_address.cr","line_number":23,"url":null},"def":{"name":"street_line2=","args":[{"name":"street_line2","external_name":"street_line2","restriction":"String"}],"visibility":"Public","body":"@street_line2 = street_line2"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ShippingOption","path":"Hamilton/Types/ShippingOption.html","kind":"class","full_name":"Hamilton::Types::ShippingOption","name":"ShippingOption","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/shipping_option.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents one shipping option.","summary":"<p>This object represents one shipping option.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/shipping_option.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/shipping_option.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"id:String-instance-method","name":"id","doc":"Shipping option identifier.","summary":"<p>Shipping option identifier.</p>","abstract":false,"location":{"filename":"src/types/shipping_option.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Shipping option identifier.","summary":"<p>Shipping option identifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/shipping_option.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"prices:Array(Hamilton::Types::LabeledPrice)-instance-method","name":"prices","doc":"List of price portions.","summary":"<p>List of price portions.</p>","abstract":false,"location":{"filename":"src/types/shipping_option.cr","line_number":17,"url":null},"def":{"name":"prices","return_type":"Array(Hamilton::Types::LabeledPrice)","visibility":"Public","body":"@prices"},"external_var":false},{"html_id":"prices=(prices:Array(Hamilton::Types::LabeledPrice))-instance-method","name":"prices=","doc":"List of price portions.","summary":"<p>List of price portions.</p>","abstract":false,"args":[{"name":"prices","external_name":"prices","restriction":"Array(Hamilton::Types::LabeledPrice)"}],"args_string":"(prices : Array(Hamilton::Types::LabeledPrice))","args_html":"(prices : Array(<a href=\"../../Hamilton/Types/LabeledPrice.html\">Hamilton::Types::LabeledPrice</a>))","location":{"filename":"src/types/shipping_option.cr","line_number":17,"url":null},"def":{"name":"prices=","args":[{"name":"prices","external_name":"prices","restriction":"Array(Hamilton::Types::LabeledPrice)"}],"visibility":"Public","body":"@prices = prices"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Option title.","summary":"<p>Option title.</p>","abstract":false,"location":{"filename":"src/types/shipping_option.cr","line_number":14,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Option title.","summary":"<p>Option title.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/shipping_option.cr","line_number":14,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/ShippingQuery","path":"Hamilton/Types/ShippingQuery.html","kind":"class","full_name":"Hamilton::Types::ShippingQuery","name":"ShippingQuery","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/shipping_query.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about an incoming shipping query.","summary":"<p>This object contains information about an incoming shipping query.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/shipping_query.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/shipping_query.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"from:Hamilton::Types::User-instance-method","name":"from","doc":"User who sent the query.","summary":"<p>User who sent the query.</p>","abstract":false,"location":{"filename":"src/types/shipping_query.cr","line_number":14,"url":null},"def":{"name":"from","return_type":"Hamilton::Types::User","visibility":"Public","body":"@from"},"external_var":false},{"html_id":"from=(from:Hamilton::Types::User)-instance-method","name":"from=","doc":"User who sent the query.","summary":"<p>User who sent the query.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"args_string":"(from : Hamilton::Types::User)","args_html":"(from : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/shipping_query.cr","line_number":14,"url":null},"def":{"name":"from=","args":[{"name":"from","external_name":"from","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@from = from"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique query identifier.","summary":"<p>Unique query identifier.</p>","abstract":false,"location":{"filename":"src/types/shipping_query.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique query identifier.","summary":"<p>Unique query identifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/shipping_query.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"invoice_payload:String-instance-method","name":"invoice_payload","doc":"Bot-specified invoice payload.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"location":{"filename":"src/types/shipping_query.cr","line_number":17,"url":null},"def":{"name":"invoice_payload","return_type":"String","visibility":"Public","body":"@invoice_payload"},"external_var":false},{"html_id":"invoice_payload=(invoice_payload:String)-instance-method","name":"invoice_payload=","doc":"Bot-specified invoice payload.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String"}],"args_string":"(invoice_payload : String)","args_html":"(invoice_payload : String)","location":{"filename":"src/types/shipping_query.cr","line_number":17,"url":null},"def":{"name":"invoice_payload=","args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String"}],"visibility":"Public","body":"@invoice_payload = invoice_payload"},"external_var":false},{"html_id":"shipping_address:Hamilton::Types::ShippingAddress-instance-method","name":"shipping_address","doc":"User specified shipping address.","summary":"<p>User specified shipping address.</p>","abstract":false,"location":{"filename":"src/types/shipping_query.cr","line_number":20,"url":null},"def":{"name":"shipping_address","return_type":"Hamilton::Types::ShippingAddress","visibility":"Public","body":"@shipping_address"},"external_var":false},{"html_id":"shipping_address=(shipping_address:Hamilton::Types::ShippingAddress)-instance-method","name":"shipping_address=","doc":"User specified shipping address.","summary":"<p>User specified shipping address.</p>","abstract":false,"args":[{"name":"shipping_address","external_name":"shipping_address","restriction":"Hamilton::Types::ShippingAddress"}],"args_string":"(shipping_address : Hamilton::Types::ShippingAddress)","args_html":"(shipping_address : <a href=\"../../Hamilton/Types/ShippingAddress.html\">Hamilton::Types::ShippingAddress</a>)","location":{"filename":"src/types/shipping_query.cr","line_number":20,"url":null},"def":{"name":"shipping_address=","args":[{"name":"shipping_address","external_name":"shipping_address","restriction":"Hamilton::Types::ShippingAddress"}],"visibility":"Public","body":"@shipping_address = shipping_address"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StarAmount","path":"Hamilton/Types/StarAmount.html","kind":"class","full_name":"Hamilton::Types::StarAmount","name":"StarAmount","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/star_amount.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes an amount of Telegram Stars.","summary":"<p>Describes an amount of Telegram Stars.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/star_amount.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/star_amount.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"amount:Int32-instance-method","name":"amount","doc":"Integer amount of Telegram Stars, rounded to 0; can be negative.","summary":"<p>Integer amount of Telegram Stars, rounded to 0; can be negative.</p>","abstract":false,"location":{"filename":"src/types/star_amount.cr","line_number":11,"url":null},"def":{"name":"amount","return_type":"Int32","visibility":"Public","body":"@amount"},"external_var":false},{"html_id":"amount=(amount:Int32)-instance-method","name":"amount=","doc":"Integer amount of Telegram Stars, rounded to 0; can be negative.","summary":"<p>Integer amount of Telegram Stars, rounded to 0; can be negative.</p>","abstract":false,"args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"args_string":"(amount : Int32)","args_html":"(amount : Int32)","location":{"filename":"src/types/star_amount.cr","line_number":11,"url":null},"def":{"name":"amount=","args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"visibility":"Public","body":"@amount = amount"},"external_var":false},{"html_id":"nanostar_amount:Int32|Nil-instance-method","name":"nanostar_amount","doc":"The number of 1/1000000000 shares of Telegram Stars; from -999999999 to 999999999; can be negative if and only if amount is non-positive.","summary":"<p>The number of 1/1000000000 shares of Telegram Stars; from -999999999 to 999999999; can be negative if and only if amount is non-positive.</p>","abstract":false,"location":{"filename":"src/types/star_amount.cr","line_number":14,"url":null},"def":{"name":"nanostar_amount","return_type":"Int32 | Nil","visibility":"Public","body":"@nanostar_amount"},"external_var":false},{"html_id":"nanostar_amount=(nanostar_amount:Int32|Nil)-instance-method","name":"nanostar_amount=","doc":"The number of 1/1000000000 shares of Telegram Stars; from -999999999 to 999999999; can be negative if and only if amount is non-positive.","summary":"<p>The number of 1/1000000000 shares of Telegram Stars; from -999999999 to 999999999; can be negative if and only if amount is non-positive.</p>","abstract":false,"args":[{"name":"nanostar_amount","external_name":"nanostar_amount","restriction":"Int32 | Nil"}],"args_string":"(nanostar_amount : Int32 | Nil)","args_html":"(nanostar_amount : Int32 | Nil)","location":{"filename":"src/types/star_amount.cr","line_number":14,"url":null},"def":{"name":"nanostar_amount=","args":[{"name":"nanostar_amount","external_name":"nanostar_amount","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@nanostar_amount = nanostar_amount"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StarTransaction","path":"Hamilton/Types/StarTransaction.html","kind":"class","full_name":"Hamilton::Types::StarTransaction","name":"StarTransaction","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/star_transaction.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a Telegram Star transaction. Note that if the buyer initiates a chargeback with the payment provider from whom they acquired Stars (e.g., Apple, Google) following this transaction, the refunded Stars will be deducted from the bot's balance. This is outside of Telegram's control.","summary":"<p>Describes a Telegram Star transaction.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/star_transaction.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/star_transaction.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"amount:Int32-instance-method","name":"amount","doc":"Integer amount of Telegram Stars transferred by the transaction.","summary":"<p>Integer amount of Telegram Stars transferred by the transaction.</p>","abstract":false,"location":{"filename":"src/types/star_transaction.cr","line_number":14,"url":null},"def":{"name":"amount","return_type":"Int32","visibility":"Public","body":"@amount"},"external_var":false},{"html_id":"amount=(amount:Int32)-instance-method","name":"amount=","doc":"Integer amount of Telegram Stars transferred by the transaction.","summary":"<p>Integer amount of Telegram Stars transferred by the transaction.</p>","abstract":false,"args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"args_string":"(amount : Int32)","args_html":"(amount : Int32)","location":{"filename":"src/types/star_transaction.cr","line_number":14,"url":null},"def":{"name":"amount=","args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"visibility":"Public","body":"@amount = amount"},"external_var":false},{"html_id":"date:Int32-instance-method","name":"date","doc":"Date the transaction was created in Unix time.","summary":"<p>Date the transaction was created in Unix time.</p>","abstract":false,"location":{"filename":"src/types/star_transaction.cr","line_number":20,"url":null},"def":{"name":"date","return_type":"Int32","visibility":"Public","body":"@date"},"external_var":false},{"html_id":"date=(date:Int32)-instance-method","name":"date=","doc":"Date the transaction was created in Unix time.","summary":"<p>Date the transaction was created in Unix time.</p>","abstract":false,"args":[{"name":"date","external_name":"date","restriction":"Int32"}],"args_string":"(date : Int32)","args_html":"(date : Int32)","location":{"filename":"src/types/star_transaction.cr","line_number":20,"url":null},"def":{"name":"date=","args":[{"name":"date","external_name":"date","restriction":"Int32"}],"visibility":"Public","body":"@date = date"},"external_var":false},{"html_id":"id:String-instance-method","name":"id","doc":"Unique identifier of the transaction. Coincides with the identifier of the original transaction for refund transactions. Coincides with `SuccessfulPayment.telegram_payment_charge_id` for successful incoming payments from users.","summary":"<p>Unique identifier of the transaction.</p>","abstract":false,"location":{"filename":"src/types/star_transaction.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Unique identifier of the transaction. Coincides with the identifier of the original transaction for refund transactions. Coincides with `SuccessfulPayment.telegram_payment_charge_id` for successful incoming payments from users.","summary":"<p>Unique identifier of the transaction.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/types/star_transaction.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"nanostar_amount:Int32|Nil-instance-method","name":"nanostar_amount","doc":"The number of 1/1000000000 shares of Telegram Stars transferred by the transaction; from 0 to 999999999.","summary":"<p>The number of 1/1000000000 shares of Telegram Stars transferred by the transaction; from 0 to 999999999.</p>","abstract":false,"location":{"filename":"src/types/star_transaction.cr","line_number":17,"url":null},"def":{"name":"nanostar_amount","return_type":"Int32 | Nil","visibility":"Public","body":"@nanostar_amount"},"external_var":false},{"html_id":"nanostar_amount=(nanostar_amount:Int32|Nil)-instance-method","name":"nanostar_amount=","doc":"The number of 1/1000000000 shares of Telegram Stars transferred by the transaction; from 0 to 999999999.","summary":"<p>The number of 1/1000000000 shares of Telegram Stars transferred by the transaction; from 0 to 999999999.</p>","abstract":false,"args":[{"name":"nanostar_amount","external_name":"nanostar_amount","restriction":"Int32 | Nil"}],"args_string":"(nanostar_amount : Int32 | Nil)","args_html":"(nanostar_amount : Int32 | Nil)","location":{"filename":"src/types/star_transaction.cr","line_number":17,"url":null},"def":{"name":"nanostar_amount=","args":[{"name":"nanostar_amount","external_name":"nanostar_amount","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@nanostar_amount = nanostar_amount"},"external_var":false},{"html_id":"receiver:Hamilton::Types::TransactionPartner|Nil-instance-method","name":"receiver","doc":"Receiver of an outgoing transaction (e.g., a user for a purchase refund, Fragment for a withdrawal). Only for outgoing transactions.","summary":"<p>Receiver of an outgoing transaction (e.g., a user for a purchase refund, Fragment for a withdrawal).</p>","abstract":false,"location":{"filename":"src/types/star_transaction.cr","line_number":26,"url":null},"def":{"name":"receiver","return_type":"Hamilton::Types::TransactionPartner | Nil","visibility":"Public","body":"@receiver"},"external_var":false},{"html_id":"receiver=(receiver:Hamilton::Types::TransactionPartner|Nil)-instance-method","name":"receiver=","doc":"Receiver of an outgoing transaction (e.g., a user for a purchase refund, Fragment for a withdrawal). Only for outgoing transactions.","summary":"<p>Receiver of an outgoing transaction (e.g., a user for a purchase refund, Fragment for a withdrawal).</p>","abstract":false,"args":[{"name":"receiver","external_name":"receiver","restriction":"Hamilton::Types::TransactionPartner | Nil"}],"args_string":"(receiver : Hamilton::Types::TransactionPartner | Nil)","args_html":"(receiver : <a href=\"../../Hamilton/Types/TransactionPartner.html\">Hamilton::Types::TransactionPartner</a> | Nil)","location":{"filename":"src/types/star_transaction.cr","line_number":26,"url":null},"def":{"name":"receiver=","args":[{"name":"receiver","external_name":"receiver","restriction":"Hamilton::Types::TransactionPartner | Nil"}],"visibility":"Public","body":"@receiver = receiver"},"external_var":false},{"html_id":"source:Hamilton::Types::TransactionPartner|Nil-instance-method","name":"source","doc":"Source of an incoming transaction (e.g., a user purchasing goods or services, Fragment refunding a failed withdrawal). Only for incoming transactions.","summary":"<p>Source of an incoming transaction (e.g., a user purchasing goods or services, Fragment refunding a failed withdrawal).</p>","abstract":false,"location":{"filename":"src/types/star_transaction.cr","line_number":23,"url":null},"def":{"name":"source","return_type":"Hamilton::Types::TransactionPartner | Nil","visibility":"Public","body":"@source"},"external_var":false},{"html_id":"source=(source:Hamilton::Types::TransactionPartner|Nil)-instance-method","name":"source=","doc":"Source of an incoming transaction (e.g., a user purchasing goods or services, Fragment refunding a failed withdrawal). Only for incoming transactions.","summary":"<p>Source of an incoming transaction (e.g., a user purchasing goods or services, Fragment refunding a failed withdrawal).</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"Hamilton::Types::TransactionPartner | Nil"}],"args_string":"(source : Hamilton::Types::TransactionPartner | Nil)","args_html":"(source : <a href=\"../../Hamilton/Types/TransactionPartner.html\">Hamilton::Types::TransactionPartner</a> | Nil)","location":{"filename":"src/types/star_transaction.cr","line_number":23,"url":null},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"Hamilton::Types::TransactionPartner | Nil"}],"visibility":"Public","body":"@source = source"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StarTransactions","path":"Hamilton/Types/StarTransactions.html","kind":"class","full_name":"Hamilton::Types::StarTransactions","name":"StarTransactions","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/star_transaction.cr","line_number":31,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Contains a list of Telegram Star transactions.","summary":"<p>Contains a list of Telegram Star transactions.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/star_transaction.cr","line_number":32,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/star_transaction.cr","line_number":32,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"transactions:Array(Hamilton::Types::StarTransaction)-instance-method","name":"transactions","doc":"The list of transactions.","summary":"<p>The list of transactions.</p>","abstract":false,"location":{"filename":"src/types/star_transaction.cr","line_number":36,"url":null},"def":{"name":"transactions","return_type":"Array(Hamilton::Types::StarTransaction)","visibility":"Public","body":"@transactions"},"external_var":false},{"html_id":"transactions=(transactions:Array(Hamilton::Types::StarTransaction))-instance-method","name":"transactions=","doc":"The list of transactions.","summary":"<p>The list of transactions.</p>","abstract":false,"args":[{"name":"transactions","external_name":"transactions","restriction":"Array(Hamilton::Types::StarTransaction)"}],"args_string":"(transactions : Array(Hamilton::Types::StarTransaction))","args_html":"(transactions : Array(<a href=\"../../Hamilton/Types/StarTransaction.html\">Hamilton::Types::StarTransaction</a>))","location":{"filename":"src/types/star_transaction.cr","line_number":36,"url":null},"def":{"name":"transactions=","args":[{"name":"transactions","external_name":"transactions","restriction":"Array(Hamilton::Types::StarTransaction)"}],"visibility":"Public","body":"@transactions = transactions"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Sticker","path":"Hamilton/Types/Sticker.html","kind":"class","full_name":"Hamilton::Types::Sticker","name":"Sticker","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/sticker.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a sticker.","summary":"<p>This object represents a sticker.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/sticker.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/sticker.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"custom_emoji_id:String|Nil-instance-method","name":"custom_emoji_id","doc":"For custom emoji stickers, unique identifier of the custom emoji.","summary":"<p>For custom emoji stickers, unique identifier of the custom emoji.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":47,"url":null},"def":{"name":"custom_emoji_id","return_type":"String | Nil","visibility":"Public","body":"@custom_emoji_id"},"external_var":false},{"html_id":"custom_emoji_id=(custom_emoji_id:String|Nil)-instance-method","name":"custom_emoji_id=","doc":"For custom emoji stickers, unique identifier of the custom emoji.","summary":"<p>For custom emoji stickers, unique identifier of the custom emoji.</p>","abstract":false,"args":[{"name":"custom_emoji_id","external_name":"custom_emoji_id","restriction":"String | Nil"}],"args_string":"(custom_emoji_id : String | Nil)","args_html":"(custom_emoji_id : String | Nil)","location":{"filename":"src/types/sticker.cr","line_number":47,"url":null},"def":{"name":"custom_emoji_id=","args":[{"name":"custom_emoji_id","external_name":"custom_emoji_id","restriction":"String | Nil"}],"visibility":"Public","body":"@custom_emoji_id = custom_emoji_id"},"external_var":false},{"html_id":"emoji:String|Nil-instance-method","name":"emoji","doc":"Emoji associated with the sticker.","summary":"<p>Emoji associated with the sticker.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":35,"url":null},"def":{"name":"emoji","return_type":"String | Nil","visibility":"Public","body":"@emoji"},"external_var":false},{"html_id":"emoji=(emoji:String|Nil)-instance-method","name":"emoji=","doc":"Emoji associated with the sticker.","summary":"<p>Emoji associated with the sticker.</p>","abstract":false,"args":[{"name":"emoji","external_name":"emoji","restriction":"String | Nil"}],"args_string":"(emoji : String | Nil)","args_html":"(emoji : String | Nil)","location":{"filename":"src/types/sticker.cr","line_number":35,"url":null},"def":{"name":"emoji=","args":[{"name":"emoji","external_name":"emoji","restriction":"String | Nil"}],"visibility":"Public","body":"@emoji = emoji"},"external_var":false},{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":11,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/sticker.cr","line_number":11,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_size:Int32|Nil-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":53,"url":null},"def":{"name":"file_size","return_type":"Int32 | Nil","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int32|Nil)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int32 | Nil"}],"args_string":"(file_size : Int32 | Nil)","args_html":"(file_size : Int32 | Nil)","location":{"filename":"src/types/sticker.cr","line_number":53,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":14,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/sticker.cr","line_number":14,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false},{"html_id":"height:Int32-instance-method","name":"height","doc":"Sticker height.","summary":"<p>Sticker height.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":23,"url":null},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int32)-instance-method","name":"height=","doc":"Sticker height.","summary":"<p>Sticker height.</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(height : Int32)","args_html":"(height : Int32)","location":{"filename":"src/types/sticker.cr","line_number":23,"url":null},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"is_animated:Bool-instance-method","name":"is_animated","doc":"True, if the sticker is animated.","summary":"<p>True, if the sticker is animated.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":26,"url":null},"def":{"name":"is_animated","return_type":"Bool","visibility":"Public","body":"@is_animated"},"external_var":false},{"html_id":"is_animated=(is_animated:Bool)-instance-method","name":"is_animated=","doc":"True, if the sticker is animated.","summary":"<p>True, if the sticker is animated.</p>","abstract":false,"args":[{"name":"is_animated","external_name":"is_animated","restriction":"Bool"}],"args_string":"(is_animated : Bool)","args_html":"(is_animated : Bool)","location":{"filename":"src/types/sticker.cr","line_number":26,"url":null},"def":{"name":"is_animated=","args":[{"name":"is_animated","external_name":"is_animated","restriction":"Bool"}],"visibility":"Public","body":"@is_animated = is_animated"},"external_var":false},{"html_id":"is_video:Bool-instance-method","name":"is_video","doc":"True, if the sticker is a video sticker.","summary":"<p>True, if the sticker is a video sticker.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":29,"url":null},"def":{"name":"is_video","return_type":"Bool","visibility":"Public","body":"@is_video"},"external_var":false},{"html_id":"is_video=(is_video:Bool)-instance-method","name":"is_video=","doc":"True, if the sticker is a video sticker.","summary":"<p>True, if the sticker is a video sticker.</p>","abstract":false,"args":[{"name":"is_video","external_name":"is_video","restriction":"Bool"}],"args_string":"(is_video : Bool)","args_html":"(is_video : Bool)","location":{"filename":"src/types/sticker.cr","line_number":29,"url":null},"def":{"name":"is_video=","args":[{"name":"is_video","external_name":"is_video","restriction":"Bool"}],"visibility":"Public","body":"@is_video = is_video"},"external_var":false},{"html_id":"mask_position:Hamilton::Types::MaskPosition|Nil-instance-method","name":"mask_position","doc":"For mask stickers, the position where the mask should be placed.","summary":"<p>For mask stickers, the position where the mask should be placed.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":44,"url":null},"def":{"name":"mask_position","return_type":"Hamilton::Types::MaskPosition | Nil","visibility":"Public","body":"@mask_position"},"external_var":false},{"html_id":"mask_position=(mask_position:Hamilton::Types::MaskPosition|Nil)-instance-method","name":"mask_position=","doc":"For mask stickers, the position where the mask should be placed.","summary":"<p>For mask stickers, the position where the mask should be placed.</p>","abstract":false,"args":[{"name":"mask_position","external_name":"mask_position","restriction":"Hamilton::Types::MaskPosition | Nil"}],"args_string":"(mask_position : Hamilton::Types::MaskPosition | Nil)","args_html":"(mask_position : <a href=\"../../Hamilton/Types/MaskPosition.html\">Hamilton::Types::MaskPosition</a> | Nil)","location":{"filename":"src/types/sticker.cr","line_number":44,"url":null},"def":{"name":"mask_position=","args":[{"name":"mask_position","external_name":"mask_position","restriction":"Hamilton::Types::MaskPosition | Nil"}],"visibility":"Public","body":"@mask_position = mask_position"},"external_var":false},{"html_id":"needs_repainting:Bool|Nil-instance-method","name":"needs_repainting","doc":"True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places.","summary":"<p>True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":50,"url":null},"def":{"name":"needs_repainting","return_type":"Bool | Nil","visibility":"Public","body":"@needs_repainting"},"external_var":false},{"html_id":"needs_repainting=(needs_repainting:Bool|Nil)-instance-method","name":"needs_repainting=","doc":"True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places.","summary":"<p>True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places.</p>","abstract":false,"args":[{"name":"needs_repainting","external_name":"needs_repainting","restriction":"Bool | Nil"}],"args_string":"(needs_repainting : Bool | Nil)","args_html":"(needs_repainting : Bool | Nil)","location":{"filename":"src/types/sticker.cr","line_number":50,"url":null},"def":{"name":"needs_repainting=","args":[{"name":"needs_repainting","external_name":"needs_repainting","restriction":"Bool | Nil"}],"visibility":"Public","body":"@needs_repainting = needs_repainting"},"external_var":false},{"html_id":"premium_animation:Hamilton::Types::File|Nil-instance-method","name":"premium_animation","doc":"For premium regular stickers, premium animation for the sticker.","summary":"<p>For premium regular stickers, premium animation for the sticker.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":41,"url":null},"def":{"name":"premium_animation","return_type":"Hamilton::Types::File | Nil","visibility":"Public","body":"@premium_animation"},"external_var":false},{"html_id":"premium_animation=(premium_animation:Hamilton::Types::File|Nil)-instance-method","name":"premium_animation=","doc":"For premium regular stickers, premium animation for the sticker.","summary":"<p>For premium regular stickers, premium animation for the sticker.</p>","abstract":false,"args":[{"name":"premium_animation","external_name":"premium_animation","restriction":"Hamilton::Types::File | Nil"}],"args_string":"(premium_animation : Hamilton::Types::File | Nil)","args_html":"(premium_animation : <a href=\"../../Hamilton/Types/File.html\">Hamilton::Types::File</a> | Nil)","location":{"filename":"src/types/sticker.cr","line_number":41,"url":null},"def":{"name":"premium_animation=","args":[{"name":"premium_animation","external_name":"premium_animation","restriction":"Hamilton::Types::File | Nil"}],"visibility":"Public","body":"@premium_animation = premium_animation"},"external_var":false},{"html_id":"set_name:String|Nil-instance-method","name":"set_name","doc":"Name of the sticker set to which the sticker belongs.","summary":"<p>Name of the sticker set to which the sticker belongs.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":38,"url":null},"def":{"name":"set_name","return_type":"String | Nil","visibility":"Public","body":"@set_name"},"external_var":false},{"html_id":"set_name=(set_name:String|Nil)-instance-method","name":"set_name=","doc":"Name of the sticker set to which the sticker belongs.","summary":"<p>Name of the sticker set to which the sticker belongs.</p>","abstract":false,"args":[{"name":"set_name","external_name":"set_name","restriction":"String | Nil"}],"args_string":"(set_name : String | Nil)","args_html":"(set_name : String | Nil)","location":{"filename":"src/types/sticker.cr","line_number":38,"url":null},"def":{"name":"set_name=","args":[{"name":"set_name","external_name":"set_name","restriction":"String | Nil"}],"visibility":"Public","body":"@set_name = set_name"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::PhotoSize|Nil-instance-method","name":"thumbnail","doc":"Sticker thumbnail in the .WEBP or .JPG format.","summary":"<p>Sticker thumbnail in the .WEBP or .JPG format.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":32,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::PhotoSize | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::PhotoSize|Nil)-instance-method","name":"thumbnail=","doc":"Sticker thumbnail in the .WEBP or .JPG format.","summary":"<p>Sticker thumbnail in the .WEBP or .JPG format.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"args_string":"(thumbnail : Hamilton::Types::PhotoSize | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a> | Nil)","location":{"filename":"src/types/sticker.cr","line_number":32,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the sticker, currently one of “regular”, “mask”, “custom_emoji”. The type of the sticker is independent from its format, which is determined by the fields `is_animated` and `is_video`.","summary":"<p>Type of the sticker, currently one of “regular”, “mask”, “custom_emoji”.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":17,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the sticker, currently one of “regular”, “mask”, “custom_emoji”. The type of the sticker is independent from its format, which is determined by the fields `is_animated` and `is_video`.","summary":"<p>Type of the sticker, currently one of “regular”, “mask”, “custom_emoji”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/sticker.cr","line_number":17,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"width:Int32-instance-method","name":"width","doc":"Sticker width.","summary":"<p>Sticker width.</p>","abstract":false,"location":{"filename":"src/types/sticker.cr","line_number":20,"url":null},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int32)-instance-method","name":"width=","doc":"Sticker width.","summary":"<p>Sticker width.</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/types/sticker.cr","line_number":20,"url":null},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@width = width"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StickerSet","path":"Hamilton/Types/StickerSet.html","kind":"class","full_name":"Hamilton::Types::StickerSet","name":"StickerSet","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/sticker_set.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a sticker set.","summary":"<p>This object represents a sticker set.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/sticker_set.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/sticker_set.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"name:String-instance-method","name":"name","doc":"Sticker set name.","summary":"<p>Sticker set name.</p>","abstract":false,"location":{"filename":"src/types/sticker_set.cr","line_number":11,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"Sticker set name.","summary":"<p>Sticker set name.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/types/sticker_set.cr","line_number":11,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"sticker_type:String-instance-method","name":"sticker_type","doc":"Type of stickers in the set, currently one of “regular”, “mask”, “custom_emoji”.","summary":"<p>Type of stickers in the set, currently one of “regular”, “mask”, “custom_emoji”.</p>","abstract":false,"location":{"filename":"src/types/sticker_set.cr","line_number":17,"url":null},"def":{"name":"sticker_type","return_type":"String","visibility":"Public","body":"@sticker_type"},"external_var":false},{"html_id":"sticker_type=(sticker_type:String)-instance-method","name":"sticker_type=","doc":"Type of stickers in the set, currently one of “regular”, “mask”, “custom_emoji”.","summary":"<p>Type of stickers in the set, currently one of “regular”, “mask”, “custom_emoji”.</p>","abstract":false,"args":[{"name":"sticker_type","external_name":"sticker_type","restriction":"String"}],"args_string":"(sticker_type : String)","args_html":"(sticker_type : String)","location":{"filename":"src/types/sticker_set.cr","line_number":17,"url":null},"def":{"name":"sticker_type=","args":[{"name":"sticker_type","external_name":"sticker_type","restriction":"String"}],"visibility":"Public","body":"@sticker_type = sticker_type"},"external_var":false},{"html_id":"stickrs:Array(Hamilton::Types::Sticker)-instance-method","name":"stickrs","doc":"List of all set stickers.","summary":"<p>List of all set stickers.</p>","abstract":false,"location":{"filename":"src/types/sticker_set.cr","line_number":20,"url":null},"def":{"name":"stickrs","return_type":"Array(Hamilton::Types::Sticker)","visibility":"Public","body":"@stickrs"},"external_var":false},{"html_id":"stickrs=(stickrs:Array(Hamilton::Types::Sticker))-instance-method","name":"stickrs=","doc":"List of all set stickers.","summary":"<p>List of all set stickers.</p>","abstract":false,"args":[{"name":"stickrs","external_name":"stickrs","restriction":"Array(Hamilton::Types::Sticker)"}],"args_string":"(stickrs : Array(Hamilton::Types::Sticker))","args_html":"(stickrs : Array(<a href=\"../../Hamilton/Types/Sticker.html\">Hamilton::Types::Sticker</a>))","location":{"filename":"src/types/sticker_set.cr","line_number":20,"url":null},"def":{"name":"stickrs=","args":[{"name":"stickrs","external_name":"stickrs","restriction":"Array(Hamilton::Types::Sticker)"}],"visibility":"Public","body":"@stickrs = stickrs"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::PhotoSize|Nil-instance-method","name":"thumbnail","doc":"Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format.","summary":"<p>Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format.</p>","abstract":false,"location":{"filename":"src/types/sticker_set.cr","line_number":23,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::PhotoSize | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::PhotoSize|Nil)-instance-method","name":"thumbnail=","doc":"Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format.","summary":"<p>Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"args_string":"(thumbnail : Hamilton::Types::PhotoSize | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a> | Nil)","location":{"filename":"src/types/sticker_set.cr","line_number":23,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Sticker set title.","summary":"<p>Sticker set title.</p>","abstract":false,"location":{"filename":"src/types/sticker_set.cr","line_number":14,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Sticker set title.","summary":"<p>Sticker set title.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/sticker_set.cr","line_number":14,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Story","path":"Hamilton/Types/Story.html","kind":"class","full_name":"Hamilton::Types::Story","name":"Story","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/story.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a story.","summary":"<p>This object represents a story.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/story.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/story.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Chat that posted the story","summary":"<p>Chat that posted the story</p>","abstract":false,"location":{"filename":"src/types/story.cr","line_number":11,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Chat that posted the story","summary":"<p>Chat that posted the story</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/story.cr","line_number":11,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"id:Int32-instance-method","name":"id","doc":"Unique identifier for the story in the chat.","summary":"<p>Unique identifier for the story in the chat.</p>","abstract":false,"location":{"filename":"src/types/story.cr","line_number":14,"url":null},"def":{"name":"id","return_type":"Int32","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:Int32)-instance-method","name":"id=","doc":"Unique identifier for the story in the chat.","summary":"<p>Unique identifier for the story in the chat.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int32"}],"args_string":"(id : Int32)","args_html":"(id : Int32)","location":{"filename":"src/types/story.cr","line_number":14,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"Int32"}],"visibility":"Public","body":"@id = id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StoryArea","path":"Hamilton/Types/StoryArea.html","kind":"class","full_name":"Hamilton::Types::StoryArea","name":"StoryArea","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/story_area.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a clickable area on a story media.","summary":"<p>Describes a clickable area on a story media.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/story_area.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/story_area.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"position:Hamilton::Types::StoryAreaPosition-instance-method","name":"position","doc":"Position of the area.","summary":"<p>Position of the area.</p>","abstract":false,"location":{"filename":"src/types/story_area.cr","line_number":11,"url":null},"def":{"name":"position","return_type":"Hamilton::Types::StoryAreaPosition","visibility":"Public","body":"@position"},"external_var":false},{"html_id":"position=(position:Hamilton::Types::StoryAreaPosition)-instance-method","name":"position=","doc":"Position of the area.","summary":"<p>Position of the area.</p>","abstract":false,"args":[{"name":"position","external_name":"position","restriction":"Hamilton::Types::StoryAreaPosition"}],"args_string":"(position : Hamilton::Types::StoryAreaPosition)","args_html":"(position : <a href=\"../../Hamilton/Types/StoryAreaPosition.html\">Hamilton::Types::StoryAreaPosition</a>)","location":{"filename":"src/types/story_area.cr","line_number":11,"url":null},"def":{"name":"position=","args":[{"name":"position","external_name":"position","restriction":"Hamilton::Types::StoryAreaPosition"}],"visibility":"Public","body":"@position = position"},"external_var":false},{"html_id":"type:Hamilton::Types::StoryAreaType-instance-method","name":"type","doc":"Type of the area.","summary":"<p>Type of the area.</p>","abstract":false,"location":{"filename":"src/types/story_area.cr","line_number":14,"url":null},"def":{"name":"type","return_type":"Hamilton::Types::StoryAreaType","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:Hamilton::Types::StoryAreaType)-instance-method","name":"type=","doc":"Type of the area.","summary":"<p>Type of the area.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Hamilton::Types::StoryAreaType"}],"args_string":"(type : Hamilton::Types::StoryAreaType)","args_html":"(type : <a href=\"../../Hamilton/Types/StoryAreaType.html\">Hamilton::Types::StoryAreaType</a>)","location":{"filename":"src/types/story_area.cr","line_number":14,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"Hamilton::Types::StoryAreaType"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StoryAreaPosition","path":"Hamilton/Types/StoryAreaPosition.html","kind":"class","full_name":"Hamilton::Types::StoryAreaPosition","name":"StoryAreaPosition","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/story_area_position.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the position of a clickable area within a story.","summary":"<p>Describes the position of a clickable area within a story.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/story_area_position.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/story_area_position.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"corner_radius_percentage:Float32-instance-method","name":"corner_radius_percentage","doc":"The radius of the rectangle corner rounding, as a percentage of the media width.","summary":"<p>The radius of the rectangle corner rounding, as a percentage of the media width.</p>","abstract":false,"location":{"filename":"src/types/story_area_position.cr","line_number":26,"url":null},"def":{"name":"corner_radius_percentage","return_type":"Float32","visibility":"Public","body":"@corner_radius_percentage"},"external_var":false},{"html_id":"corner_radius_percentage=(corner_radius_percentage:Float32)-instance-method","name":"corner_radius_percentage=","doc":"The radius of the rectangle corner rounding, as a percentage of the media width.","summary":"<p>The radius of the rectangle corner rounding, as a percentage of the media width.</p>","abstract":false,"args":[{"name":"corner_radius_percentage","external_name":"corner_radius_percentage","restriction":"Float32"}],"args_string":"(corner_radius_percentage : Float32)","args_html":"(corner_radius_percentage : Float32)","location":{"filename":"src/types/story_area_position.cr","line_number":26,"url":null},"def":{"name":"corner_radius_percentage=","args":[{"name":"corner_radius_percentage","external_name":"corner_radius_percentage","restriction":"Float32"}],"visibility":"Public","body":"@corner_radius_percentage = corner_radius_percentage"},"external_var":false},{"html_id":"height_percentage:Float32-instance-method","name":"height_percentage","doc":"The height of the area's rectangle, as a percentage of the media height.","summary":"<p>The height of the area's rectangle, as a percentage of the media height.</p>","abstract":false,"location":{"filename":"src/types/story_area_position.cr","line_number":20,"url":null},"def":{"name":"height_percentage","return_type":"Float32","visibility":"Public","body":"@height_percentage"},"external_var":false},{"html_id":"height_percentage=(height_percentage:Float32)-instance-method","name":"height_percentage=","doc":"The height of the area's rectangle, as a percentage of the media height.","summary":"<p>The height of the area's rectangle, as a percentage of the media height.</p>","abstract":false,"args":[{"name":"height_percentage","external_name":"height_percentage","restriction":"Float32"}],"args_string":"(height_percentage : Float32)","args_html":"(height_percentage : Float32)","location":{"filename":"src/types/story_area_position.cr","line_number":20,"url":null},"def":{"name":"height_percentage=","args":[{"name":"height_percentage","external_name":"height_percentage","restriction":"Float32"}],"visibility":"Public","body":"@height_percentage = height_percentage"},"external_var":false},{"html_id":"rotation_angle:Float32-instance-method","name":"rotation_angle","doc":"The clockwise rotation angle of the rectangle, in degrees; 0-360.","summary":"<p>The clockwise rotation angle of the rectangle, in degrees; 0-360.</p>","abstract":false,"location":{"filename":"src/types/story_area_position.cr","line_number":23,"url":null},"def":{"name":"rotation_angle","return_type":"Float32","visibility":"Public","body":"@rotation_angle"},"external_var":false},{"html_id":"rotation_angle=(rotation_angle:Float32)-instance-method","name":"rotation_angle=","doc":"The clockwise rotation angle of the rectangle, in degrees; 0-360.","summary":"<p>The clockwise rotation angle of the rectangle, in degrees; 0-360.</p>","abstract":false,"args":[{"name":"rotation_angle","external_name":"rotation_angle","restriction":"Float32"}],"args_string":"(rotation_angle : Float32)","args_html":"(rotation_angle : Float32)","location":{"filename":"src/types/story_area_position.cr","line_number":23,"url":null},"def":{"name":"rotation_angle=","args":[{"name":"rotation_angle","external_name":"rotation_angle","restriction":"Float32"}],"visibility":"Public","body":"@rotation_angle = rotation_angle"},"external_var":false},{"html_id":"width_percentage:Float32-instance-method","name":"width_percentage","doc":"The width of the area's rectangle, as a percentage of the media width.","summary":"<p>The width of the area's rectangle, as a percentage of the media width.</p>","abstract":false,"location":{"filename":"src/types/story_area_position.cr","line_number":17,"url":null},"def":{"name":"width_percentage","return_type":"Float32","visibility":"Public","body":"@width_percentage"},"external_var":false},{"html_id":"width_percentage=(width_percentage:Float32)-instance-method","name":"width_percentage=","doc":"The width of the area's rectangle, as a percentage of the media width.","summary":"<p>The width of the area's rectangle, as a percentage of the media width.</p>","abstract":false,"args":[{"name":"width_percentage","external_name":"width_percentage","restriction":"Float32"}],"args_string":"(width_percentage : Float32)","args_html":"(width_percentage : Float32)","location":{"filename":"src/types/story_area_position.cr","line_number":17,"url":null},"def":{"name":"width_percentage=","args":[{"name":"width_percentage","external_name":"width_percentage","restriction":"Float32"}],"visibility":"Public","body":"@width_percentage = width_percentage"},"external_var":false},{"html_id":"x_percentage:Float32-instance-method","name":"x_percentage","doc":"The abscissa of the area's center, as a percentage of the media width.","summary":"<p>The abscissa of the area's center, as a percentage of the media width.</p>","abstract":false,"location":{"filename":"src/types/story_area_position.cr","line_number":11,"url":null},"def":{"name":"x_percentage","return_type":"Float32","visibility":"Public","body":"@x_percentage"},"external_var":false},{"html_id":"x_percentage=(x_percentage:Float32)-instance-method","name":"x_percentage=","doc":"The abscissa of the area's center, as a percentage of the media width.","summary":"<p>The abscissa of the area's center, as a percentage of the media width.</p>","abstract":false,"args":[{"name":"x_percentage","external_name":"x_percentage","restriction":"Float32"}],"args_string":"(x_percentage : Float32)","args_html":"(x_percentage : Float32)","location":{"filename":"src/types/story_area_position.cr","line_number":11,"url":null},"def":{"name":"x_percentage=","args":[{"name":"x_percentage","external_name":"x_percentage","restriction":"Float32"}],"visibility":"Public","body":"@x_percentage = x_percentage"},"external_var":false},{"html_id":"y_percentage:Float32-instance-method","name":"y_percentage","doc":"The ordinate of the area's center, as a percentage of the media height.","summary":"<p>The ordinate of the area's center, as a percentage of the media height.</p>","abstract":false,"location":{"filename":"src/types/story_area_position.cr","line_number":14,"url":null},"def":{"name":"y_percentage","return_type":"Float32","visibility":"Public","body":"@y_percentage"},"external_var":false},{"html_id":"y_percentage=(y_percentage:Float32)-instance-method","name":"y_percentage=","doc":"The ordinate of the area's center, as a percentage of the media height.","summary":"<p>The ordinate of the area's center, as a percentage of the media height.</p>","abstract":false,"args":[{"name":"y_percentage","external_name":"y_percentage","restriction":"Float32"}],"args_string":"(y_percentage : Float32)","args_html":"(y_percentage : Float32)","location":{"filename":"src/types/story_area_position.cr","line_number":14,"url":null},"def":{"name":"y_percentage=","args":[{"name":"y_percentage","external_name":"y_percentage","restriction":"Float32"}],"visibility":"Public","body":"@y_percentage = y_percentage"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StoryAreaType","path":"Hamilton/Types/StoryAreaType.html","kind":"alias","full_name":"Hamilton::Types::StoryAreaType","name":"StoryAreaType","abstract":false,"locations":[{"filename":"src/types/story_area_type.cr","line_number":88,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::StoryAreaTypeLink | Hamilton::Types::StoryAreaTypeLocation | Hamilton::Types::StoryAreaTypeSuggestedReaction | Hamilton::Types::StoryAreaTypeUniqueGift | Hamilton::Types::StoryAreaTypeWeather)","aliased_html":"<a href=\"../../Hamilton/Types/StoryAreaTypeLink.html\">Hamilton::Types::StoryAreaTypeLink</a> | <a href=\"../../Hamilton/Types/StoryAreaTypeLocation.html\">Hamilton::Types::StoryAreaTypeLocation</a> | <a href=\"../../Hamilton/Types/StoryAreaTypeSuggestedReaction.html\">Hamilton::Types::StoryAreaTypeSuggestedReaction</a> | <a href=\"../../Hamilton/Types/StoryAreaTypeUniqueGift.html\">Hamilton::Types::StoryAreaTypeUniqueGift</a> | <a href=\"../../Hamilton/Types/StoryAreaTypeWeather.html\">Hamilton::Types::StoryAreaTypeWeather</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the type of a clickable area on a story.","summary":"<p>Describes the type of a clickable area on a story.</p>"},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeLink","path":"Hamilton/Types/StoryAreaTypeLink.html","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeLink","name":"StoryAreaTypeLink","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/story_area_type.cr","line_number":44,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a story area pointing to an HTTP or tg:// link. Currently, a story can have up to 3 link areas.","summary":"<p>Describes a story area pointing to an HTTP or tg:// link.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":45,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":45,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the area, always \"link\".","summary":"<p>Type of the area, always &quot;link&quot;.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":49,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the area, always \"link\".","summary":"<p>Type of the area, always &quot;link&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/story_area_type.cr","line_number":49,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"url:String-instance-method","name":"url","doc":"HTTP or `tg://` URL to be opened when the area is clicked.","summary":"<p>HTTP or <code>tg://</code> URL to be opened when the area is clicked.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":52,"url":null},"def":{"name":"url","return_type":"String","visibility":"Public","body":"@url"},"external_var":false},{"html_id":"url=(url:String)-instance-method","name":"url=","doc":"HTTP or `tg://` URL to be opened when the area is clicked.","summary":"<p>HTTP or <code>tg://</code> URL to be opened when the area is clicked.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String"}],"args_string":"(url : String)","args_html":"(url : String)","location":{"filename":"src/types/story_area_type.cr","line_number":52,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String"}],"visibility":"Public","body":"@url = url"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeLocation","path":"Hamilton/Types/StoryAreaTypeLocation.html","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeLocation","name":"StoryAreaTypeLocation","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/story_area_type.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a story area pointing to a location. Currently, a story can have up to 10 location areas.","summary":"<p>Describes a story area pointing to a location.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"address:Hamilton::Types::LocationAddress-instance-method","name":"address","doc":"Address of the location.","summary":"<p>Address of the location.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":20,"url":null},"def":{"name":"address","return_type":"Hamilton::Types::LocationAddress","visibility":"Public","body":"@address"},"external_var":false},{"html_id":"address=(address:Hamilton::Types::LocationAddress)-instance-method","name":"address=","doc":"Address of the location.","summary":"<p>Address of the location.</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"Hamilton::Types::LocationAddress"}],"args_string":"(address : Hamilton::Types::LocationAddress)","args_html":"(address : <a href=\"../../Hamilton/Types/LocationAddress.html\">Hamilton::Types::LocationAddress</a>)","location":{"filename":"src/types/story_area_type.cr","line_number":20,"url":null},"def":{"name":"address=","args":[{"name":"address","external_name":"address","restriction":"Hamilton::Types::LocationAddress"}],"visibility":"Public","body":"@address = address"},"external_var":false},{"html_id":"latitude:Float32-instance-method","name":"latitude","doc":"Location latitude in degrees.","summary":"<p>Location latitude in degrees.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":14,"url":null},"def":{"name":"latitude","return_type":"Float32","visibility":"Public","body":"@latitude"},"external_var":false},{"html_id":"latitude=(latitude:Float32)-instance-method","name":"latitude=","doc":"Location latitude in degrees.","summary":"<p>Location latitude in degrees.</p>","abstract":false,"args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"args_string":"(latitude : Float32)","args_html":"(latitude : Float32)","location":{"filename":"src/types/story_area_type.cr","line_number":14,"url":null},"def":{"name":"latitude=","args":[{"name":"latitude","external_name":"latitude","restriction":"Float32"}],"visibility":"Public","body":"@latitude = latitude"},"external_var":false},{"html_id":"longitude:Float32-instance-method","name":"longitude","doc":"Location longitude in degrees.","summary":"<p>Location longitude in degrees.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":17,"url":null},"def":{"name":"longitude","return_type":"Float32","visibility":"Public","body":"@longitude"},"external_var":false},{"html_id":"longitude=(longitude:Float32)-instance-method","name":"longitude=","doc":"Location longitude in degrees.","summary":"<p>Location longitude in degrees.</p>","abstract":false,"args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"args_string":"(longitude : Float32)","args_html":"(longitude : Float32)","location":{"filename":"src/types/story_area_type.cr","line_number":17,"url":null},"def":{"name":"longitude=","args":[{"name":"longitude","external_name":"longitude","restriction":"Float32"}],"visibility":"Public","body":"@longitude = longitude"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the area, always “location”.","summary":"<p>Type of the area, always “location”.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the area, always “location”.","summary":"<p>Type of the area, always “location”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/story_area_type.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeSuggestedReaction","path":"Hamilton/Types/StoryAreaTypeSuggestedReaction.html","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeSuggestedReaction","name":"StoryAreaTypeSuggestedReaction","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/story_area_type.cr","line_number":25,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a story area pointing to a suggested reaction. Currently, a story can have up to 5 suggested reaction areas.","summary":"<p>Describes a story area pointing to a suggested reaction.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"is_dark:Bool|Nil-instance-method","name":"is_dark","doc":"Pass True if the reaction area has a dark background.","summary":"<p>Pass True if the reaction area has a dark background.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":36,"url":null},"def":{"name":"is_dark","return_type":"Bool | Nil","visibility":"Public","body":"@is_dark"},"external_var":false},{"html_id":"is_dark=(is_dark:Bool|Nil)-instance-method","name":"is_dark=","doc":"Pass True if the reaction area has a dark background.","summary":"<p>Pass True if the reaction area has a dark background.</p>","abstract":false,"args":[{"name":"is_dark","external_name":"is_dark","restriction":"Bool | Nil"}],"args_string":"(is_dark : Bool | Nil)","args_html":"(is_dark : Bool | Nil)","location":{"filename":"src/types/story_area_type.cr","line_number":36,"url":null},"def":{"name":"is_dark=","args":[{"name":"is_dark","external_name":"is_dark","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_dark = is_dark"},"external_var":false},{"html_id":"is_flipped:Bool|Nil-instance-method","name":"is_flipped","doc":"Pass True if reaction area corner is flipped.","summary":"<p>Pass True if reaction area corner is flipped.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":39,"url":null},"def":{"name":"is_flipped","return_type":"Bool | Nil","visibility":"Public","body":"@is_flipped"},"external_var":false},{"html_id":"is_flipped=(is_flipped:Bool|Nil)-instance-method","name":"is_flipped=","doc":"Pass True if reaction area corner is flipped.","summary":"<p>Pass True if reaction area corner is flipped.</p>","abstract":false,"args":[{"name":"is_flipped","external_name":"is_flipped","restriction":"Bool | Nil"}],"args_string":"(is_flipped : Bool | Nil)","args_html":"(is_flipped : Bool | Nil)","location":{"filename":"src/types/story_area_type.cr","line_number":39,"url":null},"def":{"name":"is_flipped=","args":[{"name":"is_flipped","external_name":"is_flipped","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_flipped = is_flipped"},"external_var":false},{"html_id":"reaction_type:Hamilton::Types::ReactionType-instance-method","name":"reaction_type","doc":"Type of the reaction.","summary":"<p>Type of the reaction.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":33,"url":null},"def":{"name":"reaction_type","return_type":"Hamilton::Types::ReactionType","visibility":"Public","body":"@reaction_type"},"external_var":false},{"html_id":"reaction_type=(reaction_type:Hamilton::Types::ReactionType)-instance-method","name":"reaction_type=","doc":"Type of the reaction.","summary":"<p>Type of the reaction.</p>","abstract":false,"args":[{"name":"reaction_type","external_name":"reaction_type","restriction":"Hamilton::Types::ReactionType"}],"args_string":"(reaction_type : Hamilton::Types::ReactionType)","args_html":"(reaction_type : <a href=\"../../Hamilton/Types/ReactionType.html\">Hamilton::Types::ReactionType</a>)","location":{"filename":"src/types/story_area_type.cr","line_number":33,"url":null},"def":{"name":"reaction_type=","args":[{"name":"reaction_type","external_name":"reaction_type","restriction":"Hamilton::Types::ReactionType"}],"visibility":"Public","body":"@reaction_type = reaction_type"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the area, always \"suggested_reaction\".","summary":"<p>Type of the area, always &quot;suggested_reaction&quot;.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":30,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the area, always \"suggested_reaction\".","summary":"<p>Type of the area, always &quot;suggested_reaction&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/story_area_type.cr","line_number":30,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeUniqueGift","path":"Hamilton/Types/StoryAreaTypeUniqueGift.html","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeUniqueGift","name":"StoryAreaTypeUniqueGift","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/story_area_type.cr","line_number":76,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a story area pointing to a unique gift. Currently, a story can have at most 1 unique gift area.","summary":"<p>Describes a story area pointing to a unique gift.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":77,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":77,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"name:String-instance-method","name":"name","doc":"Unique name of the gift.","summary":"<p>Unique name of the gift.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":84,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"Unique name of the gift.","summary":"<p>Unique name of the gift.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/types/story_area_type.cr","line_number":84,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the area, always \"unique_gift\".","summary":"<p>Type of the area, always &quot;unique_gift&quot;.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":81,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the area, always \"unique_gift\".","summary":"<p>Type of the area, always &quot;unique_gift&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/story_area_type.cr","line_number":81,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/StoryAreaTypeWeather","path":"Hamilton/Types/StoryAreaTypeWeather.html","kind":"class","full_name":"Hamilton::Types::StoryAreaTypeWeather","name":"StoryAreaTypeWeather","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/story_area_type.cr","line_number":57,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a story area containing weather information. Currently, a story can have up to 3 weather areas.","summary":"<p>Describes a story area containing weather information.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/story_area_type.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"background_color:Int32-instance-method","name":"background_color","doc":"A color of the area background in the ARGB format.","summary":"<p>A color of the area background in the ARGB format.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":71,"url":null},"def":{"name":"background_color","return_type":"Int32","visibility":"Public","body":"@background_color"},"external_var":false},{"html_id":"background_color=(background_color:Int32)-instance-method","name":"background_color=","doc":"A color of the area background in the ARGB format.","summary":"<p>A color of the area background in the ARGB format.</p>","abstract":false,"args":[{"name":"background_color","external_name":"background_color","restriction":"Int32"}],"args_string":"(background_color : Int32)","args_html":"(background_color : Int32)","location":{"filename":"src/types/story_area_type.cr","line_number":71,"url":null},"def":{"name":"background_color=","args":[{"name":"background_color","external_name":"background_color","restriction":"Int32"}],"visibility":"Public","body":"@background_color = background_color"},"external_var":false},{"html_id":"emoji:String-instance-method","name":"emoji","doc":"Emoji representing the weather.","summary":"<p>Emoji representing the weather.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":68,"url":null},"def":{"name":"emoji","return_type":"String","visibility":"Public","body":"@emoji"},"external_var":false},{"html_id":"emoji=(emoji:String)-instance-method","name":"emoji=","doc":"Emoji representing the weather.","summary":"<p>Emoji representing the weather.</p>","abstract":false,"args":[{"name":"emoji","external_name":"emoji","restriction":"String"}],"args_string":"(emoji : String)","args_html":"(emoji : String)","location":{"filename":"src/types/story_area_type.cr","line_number":68,"url":null},"def":{"name":"emoji=","args":[{"name":"emoji","external_name":"emoji","restriction":"String"}],"visibility":"Public","body":"@emoji = emoji"},"external_var":false},{"html_id":"temperature:Float32-instance-method","name":"temperature","doc":"Temperature, in degree Celsius.","summary":"<p>Temperature, in degree Celsius.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":65,"url":null},"def":{"name":"temperature","return_type":"Float32","visibility":"Public","body":"@temperature"},"external_var":false},{"html_id":"temperature=(temperature:Float32)-instance-method","name":"temperature=","doc":"Temperature, in degree Celsius.","summary":"<p>Temperature, in degree Celsius.</p>","abstract":false,"args":[{"name":"temperature","external_name":"temperature","restriction":"Float32"}],"args_string":"(temperature : Float32)","args_html":"(temperature : Float32)","location":{"filename":"src/types/story_area_type.cr","line_number":65,"url":null},"def":{"name":"temperature=","args":[{"name":"temperature","external_name":"temperature","restriction":"Float32"}],"visibility":"Public","body":"@temperature = temperature"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the area, always \"weather\".","summary":"<p>Type of the area, always &quot;weather&quot;.</p>","abstract":false,"location":{"filename":"src/types/story_area_type.cr","line_number":62,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the area, always \"weather\".","summary":"<p>Type of the area, always &quot;weather&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/story_area_type.cr","line_number":62,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SuccessfulPayment","path":"Hamilton/Types/SuccessfulPayment.html","kind":"class","full_name":"Hamilton::Types::SuccessfulPayment","name":"SuccessfulPayment","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/successful_payment.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains basic information about a successful payment. Note that if the buyer initiates a chargeback with the relevant payment provider following this transaction, the funds may be debited from your balance. This is outside of Telegram's control.","summary":"<p>This object contains basic information about a successful payment.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/successful_payment.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/successful_payment.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"currency:String-instance-method","name":"currency","doc":"Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.","summary":"<p>Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":11,"url":null},"def":{"name":"currency","return_type":"String","visibility":"Public","body":"@currency"},"external_var":false},{"html_id":"currency=(currency:String)-instance-method","name":"currency=","doc":"Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.","summary":"<p>Three-letter ISO 4217 currency code, or “XTR” for payments in Telegram Stars.</p>","abstract":false,"args":[{"name":"currency","external_name":"currency","restriction":"String"}],"args_string":"(currency : String)","args_html":"(currency : String)","location":{"filename":"src/types/successful_payment.cr","line_number":11,"url":null},"def":{"name":"currency=","args":[{"name":"currency","external_name":"currency","restriction":"String"}],"visibility":"Public","body":"@currency = currency"},"external_var":false},{"html_id":"invoice_payload:String-instance-method","name":"invoice_payload","doc":"Bot-specified invoice payload.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":17,"url":null},"def":{"name":"invoice_payload","return_type":"String","visibility":"Public","body":"@invoice_payload"},"external_var":false},{"html_id":"invoice_payload=(invoice_payload:String)-instance-method","name":"invoice_payload=","doc":"Bot-specified invoice payload.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String"}],"args_string":"(invoice_payload : String)","args_html":"(invoice_payload : String)","location":{"filename":"src/types/successful_payment.cr","line_number":17,"url":null},"def":{"name":"invoice_payload=","args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String"}],"visibility":"Public","body":"@invoice_payload = invoice_payload"},"external_var":false},{"html_id":"is_first_recurring:Bool|Nil-instance-method","name":"is_first_recurring","doc":"True, if the payment is the first payment for a subscription.","summary":"<p>True, if the payment is the first payment for a subscription.</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":26,"url":null},"def":{"name":"is_first_recurring","return_type":"Bool | Nil","visibility":"Public","body":"@is_first_recurring"},"external_var":false},{"html_id":"is_first_recurring=(is_first_recurring:Bool|Nil)-instance-method","name":"is_first_recurring=","doc":"True, if the payment is the first payment for a subscription.","summary":"<p>True, if the payment is the first payment for a subscription.</p>","abstract":false,"args":[{"name":"is_first_recurring","external_name":"is_first_recurring","restriction":"Bool | Nil"}],"args_string":"(is_first_recurring : Bool | Nil)","args_html":"(is_first_recurring : Bool | Nil)","location":{"filename":"src/types/successful_payment.cr","line_number":26,"url":null},"def":{"name":"is_first_recurring=","args":[{"name":"is_first_recurring","external_name":"is_first_recurring","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_first_recurring = is_first_recurring"},"external_var":false},{"html_id":"is_recurring:Bool|Nil-instance-method","name":"is_recurring","doc":"True, if the payment is a recurring payment for a subscription.","summary":"<p>True, if the payment is a recurring payment for a subscription.</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":23,"url":null},"def":{"name":"is_recurring","return_type":"Bool | Nil","visibility":"Public","body":"@is_recurring"},"external_var":false},{"html_id":"is_recurring=(is_recurring:Bool|Nil)-instance-method","name":"is_recurring=","doc":"True, if the payment is a recurring payment for a subscription.","summary":"<p>True, if the payment is a recurring payment for a subscription.</p>","abstract":false,"args":[{"name":"is_recurring","external_name":"is_recurring","restriction":"Bool | Nil"}],"args_string":"(is_recurring : Bool | Nil)","args_html":"(is_recurring : Bool | Nil)","location":{"filename":"src/types/successful_payment.cr","line_number":23,"url":null},"def":{"name":"is_recurring=","args":[{"name":"is_recurring","external_name":"is_recurring","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_recurring = is_recurring"},"external_var":false},{"html_id":"order_info:Hamilton::Types::OrderInfo-instance-method","name":"order_info","doc":"Order information provided by the user.","summary":"<p>Order information provided by the user.</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":32,"url":null},"def":{"name":"order_info","return_type":"Hamilton::Types::OrderInfo","visibility":"Public","body":"@order_info"},"external_var":false},{"html_id":"order_info=(order_info:Hamilton::Types::OrderInfo)-instance-method","name":"order_info=","doc":"Order information provided by the user.","summary":"<p>Order information provided by the user.</p>","abstract":false,"args":[{"name":"order_info","external_name":"order_info","restriction":"Hamilton::Types::OrderInfo"}],"args_string":"(order_info : Hamilton::Types::OrderInfo)","args_html":"(order_info : <a href=\"../../Hamilton/Types/OrderInfo.html\">Hamilton::Types::OrderInfo</a>)","location":{"filename":"src/types/successful_payment.cr","line_number":32,"url":null},"def":{"name":"order_info=","args":[{"name":"order_info","external_name":"order_info","restriction":"Hamilton::Types::OrderInfo"}],"visibility":"Public","body":"@order_info = order_info"},"external_var":false},{"html_id":"provider_payment_charge_id:String-instance-method","name":"provider_payment_charge_id","doc":"Provider payment identifier.","summary":"<p>Provider payment identifier.</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":38,"url":null},"def":{"name":"provider_payment_charge_id","return_type":"String","visibility":"Public","body":"@provider_payment_charge_id"},"external_var":false},{"html_id":"provider_payment_charge_id=(provider_payment_charge_id:String)-instance-method","name":"provider_payment_charge_id=","doc":"Provider payment identifier.","summary":"<p>Provider payment identifier.</p>","abstract":false,"args":[{"name":"provider_payment_charge_id","external_name":"provider_payment_charge_id","restriction":"String"}],"args_string":"(provider_payment_charge_id : String)","args_html":"(provider_payment_charge_id : String)","location":{"filename":"src/types/successful_payment.cr","line_number":38,"url":null},"def":{"name":"provider_payment_charge_id=","args":[{"name":"provider_payment_charge_id","external_name":"provider_payment_charge_id","restriction":"String"}],"visibility":"Public","body":"@provider_payment_charge_id = provider_payment_charge_id"},"external_var":false},{"html_id":"shipping_option_id:String|Nil-instance-method","name":"shipping_option_id","doc":"Identifier of the shipping option chosen by the user.","summary":"<p>Identifier of the shipping option chosen by the user.</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":29,"url":null},"def":{"name":"shipping_option_id","return_type":"String | Nil","visibility":"Public","body":"@shipping_option_id"},"external_var":false},{"html_id":"shipping_option_id=(shipping_option_id:String|Nil)-instance-method","name":"shipping_option_id=","doc":"Identifier of the shipping option chosen by the user.","summary":"<p>Identifier of the shipping option chosen by the user.</p>","abstract":false,"args":[{"name":"shipping_option_id","external_name":"shipping_option_id","restriction":"String | Nil"}],"args_string":"(shipping_option_id : String | Nil)","args_html":"(shipping_option_id : String | Nil)","location":{"filename":"src/types/successful_payment.cr","line_number":29,"url":null},"def":{"name":"shipping_option_id=","args":[{"name":"shipping_option_id","external_name":"shipping_option_id","restriction":"String | Nil"}],"visibility":"Public","body":"@shipping_option_id = shipping_option_id"},"external_var":false},{"html_id":"subscription_expiration_date:Int32|Nil-instance-method","name":"subscription_expiration_date","doc":"Expiration date of the subscription, in Unix time; for recurring payments only.","summary":"<p>Expiration date of the subscription, in Unix time; for recurring payments only.</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":20,"url":null},"def":{"name":"subscription_expiration_date","return_type":"Int32 | Nil","visibility":"Public","body":"@subscription_expiration_date"},"external_var":false},{"html_id":"subscription_expiration_date=(subscription_expiration_date:Int32|Nil)-instance-method","name":"subscription_expiration_date=","doc":"Expiration date of the subscription, in Unix time; for recurring payments only.","summary":"<p>Expiration date of the subscription, in Unix time; for recurring payments only.</p>","abstract":false,"args":[{"name":"subscription_expiration_date","external_name":"subscription_expiration_date","restriction":"Int32 | Nil"}],"args_string":"(subscription_expiration_date : Int32 | Nil)","args_html":"(subscription_expiration_date : Int32 | Nil)","location":{"filename":"src/types/successful_payment.cr","line_number":20,"url":null},"def":{"name":"subscription_expiration_date=","args":[{"name":"subscription_expiration_date","external_name":"subscription_expiration_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@subscription_expiration_date = subscription_expiration_date"},"external_var":false},{"html_id":"telegram_payment_charge_id:String-instance-method","name":"telegram_payment_charge_id","doc":"Telegram payment identifier.","summary":"<p>Telegram payment identifier.</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":35,"url":null},"def":{"name":"telegram_payment_charge_id","return_type":"String","visibility":"Public","body":"@telegram_payment_charge_id"},"external_var":false},{"html_id":"telegram_payment_charge_id=(telegram_payment_charge_id:String)-instance-method","name":"telegram_payment_charge_id=","doc":"Telegram payment identifier.","summary":"<p>Telegram payment identifier.</p>","abstract":false,"args":[{"name":"telegram_payment_charge_id","external_name":"telegram_payment_charge_id","restriction":"String"}],"args_string":"(telegram_payment_charge_id : String)","args_html":"(telegram_payment_charge_id : String)","location":{"filename":"src/types/successful_payment.cr","line_number":35,"url":null},"def":{"name":"telegram_payment_charge_id=","args":[{"name":"telegram_payment_charge_id","external_name":"telegram_payment_charge_id","restriction":"String"}],"visibility":"Public","body":"@telegram_payment_charge_id = telegram_payment_charge_id"},"external_var":false},{"html_id":"total_amount:Int32-instance-method","name":"total_amount","doc":"Total price in the smallest units of the currency (integer, not float/double)..","summary":"<p>Total price in the smallest units of the currency (integer, not float/double)..</p>","abstract":false,"location":{"filename":"src/types/successful_payment.cr","line_number":14,"url":null},"def":{"name":"total_amount","return_type":"Int32","visibility":"Public","body":"@total_amount"},"external_var":false},{"html_id":"total_amount=(total_amount:Int32)-instance-method","name":"total_amount=","doc":"Total price in the smallest units of the currency (integer, not float/double)..","summary":"<p>Total price in the smallest units of the currency (integer, not float/double)..</p>","abstract":false,"args":[{"name":"total_amount","external_name":"total_amount","restriction":"Int32"}],"args_string":"(total_amount : Int32)","args_html":"(total_amount : Int32)","location":{"filename":"src/types/successful_payment.cr","line_number":14,"url":null},"def":{"name":"total_amount=","args":[{"name":"total_amount","external_name":"total_amount","restriction":"Int32"}],"visibility":"Public","body":"@total_amount = total_amount"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SuggestedPostApprovalFailed","path":"Hamilton/Types/SuggestedPostApprovalFailed.html","kind":"class","full_name":"Hamilton::Types::SuggestedPostApprovalFailed","name":"SuggestedPostApprovalFailed","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/suggested_post_approval_failed.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about the failed approval of a suggested post. Currently, only caused by insufficient user funds at the time of approval.","summary":"<p>Describes a service message about the failed approval of a suggested post.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_approval_failed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_approval_failed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"price:Hamilton::Types::SuggestedPostPrice-instance-method","name":"price","doc":"Expected price of the post.","summary":"<p>Expected price of the post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_approval_failed.cr","line_number":14,"url":null},"def":{"name":"price","return_type":"Hamilton::Types::SuggestedPostPrice","visibility":"Public","body":"@price"},"external_var":false},{"html_id":"price=(price:Hamilton::Types::SuggestedPostPrice)-instance-method","name":"price=","doc":"Expected price of the post.","summary":"<p>Expected price of the post.</p>","abstract":false,"args":[{"name":"price","external_name":"price","restriction":"Hamilton::Types::SuggestedPostPrice"}],"args_string":"(price : Hamilton::Types::SuggestedPostPrice)","args_html":"(price : <a href=\"../../Hamilton/Types/SuggestedPostPrice.html\">Hamilton::Types::SuggestedPostPrice</a>)","location":{"filename":"src/types/suggested_post_approval_failed.cr","line_number":14,"url":null},"def":{"name":"price=","args":[{"name":"price","external_name":"price","restriction":"Hamilton::Types::SuggestedPostPrice"}],"visibility":"Public","body":"@price = price"},"external_var":false},{"html_id":"suggested_post_message:Hamilton::Types::Message|Nil-instance-method","name":"suggested_post_message","doc":"Message containing the suggested post whose approval has failed. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post whose approval has failed.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_approval_failed.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@suggested_post_message"},"external_var":false},{"html_id":"suggested_post_message=(suggested_post_message:Hamilton::Types::Message|Nil)-instance-method","name":"suggested_post_message=","doc":"Message containing the suggested post whose approval has failed. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post whose approval has failed.</p>","abstract":false,"args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(suggested_post_message : Hamilton::Types::Message | Nil)","args_html":"(suggested_post_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/suggested_post_approval_failed.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message=","args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@suggested_post_message = suggested_post_message"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SuggestedPostApproved","path":"Hamilton/Types/SuggestedPostApproved.html","kind":"class","full_name":"Hamilton::Types::SuggestedPostApproved","name":"SuggestedPostApproved","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/suggested_post_approved.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about the approval of a suggested post.","summary":"<p>Describes a service message about the approval of a suggested post.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_approved.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_approved.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"price:Hamilton::Types::SuggestedPostPrice|Nil-instance-method","name":"price","doc":"Amount paid for the post.","summary":"<p>Amount paid for the post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_approved.cr","line_number":14,"url":null},"def":{"name":"price","return_type":"Hamilton::Types::SuggestedPostPrice | Nil","visibility":"Public","body":"@price"},"external_var":false},{"html_id":"price=(price:Hamilton::Types::SuggestedPostPrice|Nil)-instance-method","name":"price=","doc":"Amount paid for the post.","summary":"<p>Amount paid for the post.</p>","abstract":false,"args":[{"name":"price","external_name":"price","restriction":"Hamilton::Types::SuggestedPostPrice | Nil"}],"args_string":"(price : Hamilton::Types::SuggestedPostPrice | Nil)","args_html":"(price : <a href=\"../../Hamilton/Types/SuggestedPostPrice.html\">Hamilton::Types::SuggestedPostPrice</a> | Nil)","location":{"filename":"src/types/suggested_post_approved.cr","line_number":14,"url":null},"def":{"name":"price=","args":[{"name":"price","external_name":"price","restriction":"Hamilton::Types::SuggestedPostPrice | Nil"}],"visibility":"Public","body":"@price = price"},"external_var":false},{"html_id":"send_date:Int32-instance-method","name":"send_date","doc":"Date when the post will be published.","summary":"<p>Date when the post will be published.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_approved.cr","line_number":17,"url":null},"def":{"name":"send_date","return_type":"Int32","visibility":"Public","body":"@send_date"},"external_var":false},{"html_id":"send_date=(send_date:Int32)-instance-method","name":"send_date=","doc":"Date when the post will be published.","summary":"<p>Date when the post will be published.</p>","abstract":false,"args":[{"name":"send_date","external_name":"send_date","restriction":"Int32"}],"args_string":"(send_date : Int32)","args_html":"(send_date : Int32)","location":{"filename":"src/types/suggested_post_approved.cr","line_number":17,"url":null},"def":{"name":"send_date=","args":[{"name":"send_date","external_name":"send_date","restriction":"Int32"}],"visibility":"Public","body":"@send_date = send_date"},"external_var":false},{"html_id":"suggested_post_message:Hamilton::Types::Message|Nil-instance-method","name":"suggested_post_message","doc":"Message containing the suggested post. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_approved.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@suggested_post_message"},"external_var":false},{"html_id":"suggested_post_message=(suggested_post_message:Hamilton::Types::Message|Nil)-instance-method","name":"suggested_post_message=","doc":"Message containing the suggested post. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post.</p>","abstract":false,"args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(suggested_post_message : Hamilton::Types::Message | Nil)","args_html":"(suggested_post_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/suggested_post_approved.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message=","args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@suggested_post_message = suggested_post_message"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SuggestedPostDeclined","path":"Hamilton/Types/SuggestedPostDeclined.html","kind":"class","full_name":"Hamilton::Types::SuggestedPostDeclined","name":"SuggestedPostDeclined","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/suggested_post_declined.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about the rejection of a suggested post.","summary":"<p>Describes a service message about the rejection of a suggested post.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_declined.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_declined.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"comment:String|Nil-instance-method","name":"comment","doc":"Comment with which the post was declined.","summary":"<p>Comment with which the post was declined.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_declined.cr","line_number":14,"url":null},"def":{"name":"comment","return_type":"String | Nil","visibility":"Public","body":"@comment"},"external_var":false},{"html_id":"comment=(comment:String|Nil)-instance-method","name":"comment=","doc":"Comment with which the post was declined.","summary":"<p>Comment with which the post was declined.</p>","abstract":false,"args":[{"name":"comment","external_name":"comment","restriction":"String | Nil"}],"args_string":"(comment : String | Nil)","args_html":"(comment : String | Nil)","location":{"filename":"src/types/suggested_post_declined.cr","line_number":14,"url":null},"def":{"name":"comment=","args":[{"name":"comment","external_name":"comment","restriction":"String | Nil"}],"visibility":"Public","body":"@comment = comment"},"external_var":false},{"html_id":"suggested_post_message:Hamilton::Types::Message|Nil-instance-method","name":"suggested_post_message","doc":"Message containing the suggested post. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_declined.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@suggested_post_message"},"external_var":false},{"html_id":"suggested_post_message=(suggested_post_message:Hamilton::Types::Message|Nil)-instance-method","name":"suggested_post_message=","doc":"Message containing the suggested post. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post.</p>","abstract":false,"args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(suggested_post_message : Hamilton::Types::Message | Nil)","args_html":"(suggested_post_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/suggested_post_declined.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message=","args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@suggested_post_message = suggested_post_message"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SuggestedPostInfo","path":"Hamilton/Types/SuggestedPostInfo.html","kind":"class","full_name":"Hamilton::Types::SuggestedPostInfo","name":"SuggestedPostInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/suggested_post_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Contains information about a suggested post.","summary":"<p>Contains information about a suggested post.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"price:Hamilton::Types::SuggestedPostPrice|Nil-instance-method","name":"price","doc":"Proposed price of the post. If the field is omitted, then the post is unpaid.","summary":"<p>Proposed price of the post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_info.cr","line_number":14,"url":null},"def":{"name":"price","return_type":"Hamilton::Types::SuggestedPostPrice | Nil","visibility":"Public","body":"@price"},"external_var":false},{"html_id":"price=(price:Hamilton::Types::SuggestedPostPrice|Nil)-instance-method","name":"price=","doc":"Proposed price of the post. If the field is omitted, then the post is unpaid.","summary":"<p>Proposed price of the post.</p>","abstract":false,"args":[{"name":"price","external_name":"price","restriction":"Hamilton::Types::SuggestedPostPrice | Nil"}],"args_string":"(price : Hamilton::Types::SuggestedPostPrice | Nil)","args_html":"(price : <a href=\"../../Hamilton/Types/SuggestedPostPrice.html\">Hamilton::Types::SuggestedPostPrice</a> | Nil)","location":{"filename":"src/types/suggested_post_info.cr","line_number":14,"url":null},"def":{"name":"price=","args":[{"name":"price","external_name":"price","restriction":"Hamilton::Types::SuggestedPostPrice | Nil"}],"visibility":"Public","body":"@price = price"},"external_var":false},{"html_id":"send_date:Int32|Nil-instance-method","name":"send_date","doc":"Proposed send date of the post. If the field is omitted, then the post can be published at any time within 30 days at the sole discretion of the user or administrator who approves it.","summary":"<p>Proposed send date of the post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_info.cr","line_number":17,"url":null},"def":{"name":"send_date","return_type":"Int32 | Nil","visibility":"Public","body":"@send_date"},"external_var":false},{"html_id":"send_date=(send_date:Int32|Nil)-instance-method","name":"send_date=","doc":"Proposed send date of the post. If the field is omitted, then the post can be published at any time within 30 days at the sole discretion of the user or administrator who approves it.","summary":"<p>Proposed send date of the post.</p>","abstract":false,"args":[{"name":"send_date","external_name":"send_date","restriction":"Int32 | Nil"}],"args_string":"(send_date : Int32 | Nil)","args_html":"(send_date : Int32 | Nil)","location":{"filename":"src/types/suggested_post_info.cr","line_number":17,"url":null},"def":{"name":"send_date=","args":[{"name":"send_date","external_name":"send_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@send_date = send_date"},"external_var":false},{"html_id":"state:String-instance-method","name":"state","doc":"State of the suggested post. Currently, it can be one of “pending”, “approved”, “declined”.","summary":"<p>State of the suggested post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_info.cr","line_number":11,"url":null},"def":{"name":"state","return_type":"String","visibility":"Public","body":"@state"},"external_var":false},{"html_id":"state=(state:String)-instance-method","name":"state=","doc":"State of the suggested post. Currently, it can be one of “pending”, “approved”, “declined”.","summary":"<p>State of the suggested post.</p>","abstract":false,"args":[{"name":"state","external_name":"state","restriction":"String"}],"args_string":"(state : String)","args_html":"(state : String)","location":{"filename":"src/types/suggested_post_info.cr","line_number":11,"url":null},"def":{"name":"state=","args":[{"name":"state","external_name":"state","restriction":"String"}],"visibility":"Public","body":"@state = state"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SuggestedPostPaid","path":"Hamilton/Types/SuggestedPostPaid.html","kind":"class","full_name":"Hamilton::Types::SuggestedPostPaid","name":"SuggestedPostPaid","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/suggested_post_paid.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about a successful payment for a suggested post.","summary":"<p>Describes a service message about a successful payment for a suggested post.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_paid.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_paid.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"amount:Int32|Nil-instance-method","name":"amount","doc":"The amount of the currency that was received by the channel in nanotoncoins; for payments in toncoins only.","summary":"<p>The amount of the currency that was received by the channel in nanotoncoins; for payments in toncoins only.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_paid.cr","line_number":17,"url":null},"def":{"name":"amount","return_type":"Int32 | Nil","visibility":"Public","body":"@amount"},"external_var":false},{"html_id":"amount=(amount:Int32|Nil)-instance-method","name":"amount=","doc":"The amount of the currency that was received by the channel in nanotoncoins; for payments in toncoins only.","summary":"<p>The amount of the currency that was received by the channel in nanotoncoins; for payments in toncoins only.</p>","abstract":false,"args":[{"name":"amount","external_name":"amount","restriction":"Int32 | Nil"}],"args_string":"(amount : Int32 | Nil)","args_html":"(amount : Int32 | Nil)","location":{"filename":"src/types/suggested_post_paid.cr","line_number":17,"url":null},"def":{"name":"amount=","args":[{"name":"amount","external_name":"amount","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@amount = amount"},"external_var":false},{"html_id":"currency:String-instance-method","name":"currency","doc":"Currency in which the payment was made. Currently, one of “XTR” for Telegram Stars or “TON” for toncoins.","summary":"<p>Currency in which the payment was made.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_paid.cr","line_number":14,"url":null},"def":{"name":"currency","return_type":"String","visibility":"Public","body":"@currency"},"external_var":false},{"html_id":"currency=(currency:String)-instance-method","name":"currency=","doc":"Currency in which the payment was made. Currently, one of “XTR” for Telegram Stars or “TON” for toncoins.","summary":"<p>Currency in which the payment was made.</p>","abstract":false,"args":[{"name":"currency","external_name":"currency","restriction":"String"}],"args_string":"(currency : String)","args_html":"(currency : String)","location":{"filename":"src/types/suggested_post_paid.cr","line_number":14,"url":null},"def":{"name":"currency=","args":[{"name":"currency","external_name":"currency","restriction":"String"}],"visibility":"Public","body":"@currency = currency"},"external_var":false},{"html_id":"star_amount:Hamilton::Types::StarAmount-instance-method","name":"star_amount","doc":"The amount of Telegram Stars that was received by the channel; for payments in Telegram Stars only.","summary":"<p>The amount of Telegram Stars that was received by the channel; for payments in Telegram Stars only.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_paid.cr","line_number":20,"url":null},"def":{"name":"star_amount","return_type":"Hamilton::Types::StarAmount","visibility":"Public","body":"@star_amount"},"external_var":false},{"html_id":"star_amount=(star_amount:Hamilton::Types::StarAmount)-instance-method","name":"star_amount=","doc":"The amount of Telegram Stars that was received by the channel; for payments in Telegram Stars only.","summary":"<p>The amount of Telegram Stars that was received by the channel; for payments in Telegram Stars only.</p>","abstract":false,"args":[{"name":"star_amount","external_name":"star_amount","restriction":"Hamilton::Types::StarAmount"}],"args_string":"(star_amount : Hamilton::Types::StarAmount)","args_html":"(star_amount : <a href=\"../../Hamilton/Types/StarAmount.html\">Hamilton::Types::StarAmount</a>)","location":{"filename":"src/types/suggested_post_paid.cr","line_number":20,"url":null},"def":{"name":"star_amount=","args":[{"name":"star_amount","external_name":"star_amount","restriction":"Hamilton::Types::StarAmount"}],"visibility":"Public","body":"@star_amount = star_amount"},"external_var":false},{"html_id":"suggested_post_message:Hamilton::Types::Message|Nil-instance-method","name":"suggested_post_message","doc":"Message containing the suggested post. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_paid.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@suggested_post_message"},"external_var":false},{"html_id":"suggested_post_message=(suggested_post_message:Hamilton::Types::Message|Nil)-instance-method","name":"suggested_post_message=","doc":"Message containing the suggested post. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post.</p>","abstract":false,"args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(suggested_post_message : Hamilton::Types::Message | Nil)","args_html":"(suggested_post_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/suggested_post_paid.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message=","args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@suggested_post_message = suggested_post_message"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SuggestedPostParameters","path":"Hamilton/Types/SuggestedPostParameters.html","kind":"class","full_name":"Hamilton::Types::SuggestedPostParameters","name":"SuggestedPostParameters","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/suggested_post_parameters.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Contains parameters of a post that is being suggested by the bot.","summary":"<p>Contains parameters of a post that is being suggested by the bot.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_parameters.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_parameters.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"price:Hamilton::Types::SuggestedPostPrice|Nil-instance-method","name":"price","doc":"Proposed price for the post. If the field is omitted, then the post is unpaid.","summary":"<p>Proposed price for the post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_parameters.cr","line_number":11,"url":null},"def":{"name":"price","return_type":"Hamilton::Types::SuggestedPostPrice | Nil","visibility":"Public","body":"@price"},"external_var":false},{"html_id":"price=(price:Hamilton::Types::SuggestedPostPrice|Nil)-instance-method","name":"price=","doc":"Proposed price for the post. If the field is omitted, then the post is unpaid.","summary":"<p>Proposed price for the post.</p>","abstract":false,"args":[{"name":"price","external_name":"price","restriction":"Hamilton::Types::SuggestedPostPrice | Nil"}],"args_string":"(price : Hamilton::Types::SuggestedPostPrice | Nil)","args_html":"(price : <a href=\"../../Hamilton/Types/SuggestedPostPrice.html\">Hamilton::Types::SuggestedPostPrice</a> | Nil)","location":{"filename":"src/types/suggested_post_parameters.cr","line_number":11,"url":null},"def":{"name":"price=","args":[{"name":"price","external_name":"price","restriction":"Hamilton::Types::SuggestedPostPrice | Nil"}],"visibility":"Public","body":"@price = price"},"external_var":false},{"html_id":"send_date:Int32|Nil-instance-method","name":"send_date","doc":"Proposed send date of the post. If specified, then the date must be between 300 second and 2678400 seconds (30 days) in the future. If the field is omitted, then the post can be published at any time within 30 days at the sole discretion of the user who approves it.","summary":"<p>Proposed send date of the post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_parameters.cr","line_number":14,"url":null},"def":{"name":"send_date","return_type":"Int32 | Nil","visibility":"Public","body":"@send_date"},"external_var":false},{"html_id":"send_date=(send_date:Int32|Nil)-instance-method","name":"send_date=","doc":"Proposed send date of the post. If specified, then the date must be between 300 second and 2678400 seconds (30 days) in the future. If the field is omitted, then the post can be published at any time within 30 days at the sole discretion of the user who approves it.","summary":"<p>Proposed send date of the post.</p>","abstract":false,"args":[{"name":"send_date","external_name":"send_date","restriction":"Int32 | Nil"}],"args_string":"(send_date : Int32 | Nil)","args_html":"(send_date : Int32 | Nil)","location":{"filename":"src/types/suggested_post_parameters.cr","line_number":14,"url":null},"def":{"name":"send_date=","args":[{"name":"send_date","external_name":"send_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@send_date = send_date"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SuggestedPostPrice","path":"Hamilton/Types/SuggestedPostPrice.html","kind":"class","full_name":"Hamilton::Types::SuggestedPostPrice","name":"SuggestedPostPrice","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/suggested_post_price.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the price of a suggested post.","summary":"<p>Describes the price of a suggested post.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_price.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_price.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"amount:Int32-instance-method","name":"amount","doc":"The amount of the currency that will be paid for the post in the smallest units of the currency, i.e. Telegram Stars or nanotoncoins. Currently, price in Telegram Stars must be between 5 and 100000, and price in nanotoncoins must be between 10000000 and 10000000000000.","summary":"<p>The amount of the currency that will be paid for the post in the smallest units of the currency, i.e.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_price.cr","line_number":14,"url":null},"def":{"name":"amount","return_type":"Int32","visibility":"Public","body":"@amount"},"external_var":false},{"html_id":"amount=(amount:Int32)-instance-method","name":"amount=","doc":"The amount of the currency that will be paid for the post in the smallest units of the currency, i.e. Telegram Stars or nanotoncoins. Currently, price in Telegram Stars must be between 5 and 100000, and price in nanotoncoins must be between 10000000 and 10000000000000.","summary":"<p>The amount of the currency that will be paid for the post in the smallest units of the currency, i.e.</p>","abstract":false,"args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"args_string":"(amount : Int32)","args_html":"(amount : Int32)","location":{"filename":"src/types/suggested_post_price.cr","line_number":14,"url":null},"def":{"name":"amount=","args":[{"name":"amount","external_name":"amount","restriction":"Int32"}],"visibility":"Public","body":"@amount = amount"},"external_var":false},{"html_id":"currency:String-instance-method","name":"currency","doc":"Currency in which the post will be paid. Currently, must be one of “XTR” for Telegram Stars or “TON” for toncoins.","summary":"<p>Currency in which the post will be paid.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_price.cr","line_number":11,"url":null},"def":{"name":"currency","return_type":"String","visibility":"Public","body":"@currency"},"external_var":false},{"html_id":"currency=(currency:String)-instance-method","name":"currency=","doc":"Currency in which the post will be paid. Currently, must be one of “XTR” for Telegram Stars or “TON” for toncoins.","summary":"<p>Currency in which the post will be paid.</p>","abstract":false,"args":[{"name":"currency","external_name":"currency","restriction":"String"}],"args_string":"(currency : String)","args_html":"(currency : String)","location":{"filename":"src/types/suggested_post_price.cr","line_number":11,"url":null},"def":{"name":"currency=","args":[{"name":"currency","external_name":"currency","restriction":"String"}],"visibility":"Public","body":"@currency = currency"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SuggestedPostRefunded","path":"Hamilton/Types/SuggestedPostRefunded.html","kind":"class","full_name":"Hamilton::Types::SuggestedPostRefunded","name":"SuggestedPostRefunded","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/suggested_post_refunded.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about a payment refund for a suggested post.","summary":"<p>Describes a service message about a payment refund for a suggested post.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_refunded.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/suggested_post_refunded.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"reason:String-instance-method","name":"reason","doc":"Reason for the refund. Currently, one of “post_deleted” if the post was deleted within 24 hours of being posted or removed from scheduled messages without being posted, or “payment_refunded” if the payer refunded their payment.","summary":"<p>Reason for the refund.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_refunded.cr","line_number":14,"url":null},"def":{"name":"reason","return_type":"String","visibility":"Public","body":"@reason"},"external_var":false},{"html_id":"reason=(reason:String)-instance-method","name":"reason=","doc":"Reason for the refund. Currently, one of “post_deleted” if the post was deleted within 24 hours of being posted or removed from scheduled messages without being posted, or “payment_refunded” if the payer refunded their payment.","summary":"<p>Reason for the refund.</p>","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String"}],"args_string":"(reason : String)","args_html":"(reason : String)","location":{"filename":"src/types/suggested_post_refunded.cr","line_number":14,"url":null},"def":{"name":"reason=","args":[{"name":"reason","external_name":"reason","restriction":"String"}],"visibility":"Public","body":"@reason = reason"},"external_var":false},{"html_id":"suggested_post_message:Hamilton::Types::Message|Nil-instance-method","name":"suggested_post_message","doc":"Message containing the suggested post. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post.</p>","abstract":false,"location":{"filename":"src/types/suggested_post_refunded.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@suggested_post_message"},"external_var":false},{"html_id":"suggested_post_message=(suggested_post_message:Hamilton::Types::Message|Nil)-instance-method","name":"suggested_post_message=","doc":"Message containing the suggested post. Note that the Message object in this field will not contain the reply_to_message field even if it itself is a reply.","summary":"<p>Message containing the suggested post.</p>","abstract":false,"args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(suggested_post_message : Hamilton::Types::Message | Nil)","args_html":"(suggested_post_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/suggested_post_refunded.cr","line_number":11,"url":null},"def":{"name":"suggested_post_message=","args":[{"name":"suggested_post_message","external_name":"suggested_post_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@suggested_post_message = suggested_post_message"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/SwitchInlineQueryChosenChat","path":"Hamilton/Types/SwitchInlineQueryChosenChat.html","kind":"class","full_name":"Hamilton::Types::SwitchInlineQueryChosenChat","name":"SwitchInlineQueryChosenChat","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query.","summary":"<p>This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"allow_bot_chats:Bool|Nil-instance-method","name":"allow_bot_chats","doc":"True, if private chats with bots can be chosen.","summary":"<p>True, if private chats with bots can be chosen.</p>","abstract":false,"location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":17,"url":null},"def":{"name":"allow_bot_chats","return_type":"Bool | Nil","visibility":"Public","body":"@allow_bot_chats"},"external_var":false},{"html_id":"allow_bot_chats=(allow_bot_chats:Bool|Nil)-instance-method","name":"allow_bot_chats=","doc":"True, if private chats with bots can be chosen.","summary":"<p>True, if private chats with bots can be chosen.</p>","abstract":false,"args":[{"name":"allow_bot_chats","external_name":"allow_bot_chats","restriction":"Bool | Nil"}],"args_string":"(allow_bot_chats : Bool | Nil)","args_html":"(allow_bot_chats : Bool | Nil)","location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":17,"url":null},"def":{"name":"allow_bot_chats=","args":[{"name":"allow_bot_chats","external_name":"allow_bot_chats","restriction":"Bool | Nil"}],"visibility":"Public","body":"@allow_bot_chats = allow_bot_chats"},"external_var":false},{"html_id":"allow_channel_chats:Bool|Nil-instance-method","name":"allow_channel_chats","doc":"True, if channel chats can be chosen.","summary":"<p>True, if channel chats can be chosen.</p>","abstract":false,"location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":23,"url":null},"def":{"name":"allow_channel_chats","return_type":"Bool | Nil","visibility":"Public","body":"@allow_channel_chats"},"external_var":false},{"html_id":"allow_channel_chats=(allow_channel_chats:Bool|Nil)-instance-method","name":"allow_channel_chats=","doc":"True, if channel chats can be chosen.","summary":"<p>True, if channel chats can be chosen.</p>","abstract":false,"args":[{"name":"allow_channel_chats","external_name":"allow_channel_chats","restriction":"Bool | Nil"}],"args_string":"(allow_channel_chats : Bool | Nil)","args_html":"(allow_channel_chats : Bool | Nil)","location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":23,"url":null},"def":{"name":"allow_channel_chats=","args":[{"name":"allow_channel_chats","external_name":"allow_channel_chats","restriction":"Bool | Nil"}],"visibility":"Public","body":"@allow_channel_chats = allow_channel_chats"},"external_var":false},{"html_id":"allow_group_chats:Bool|Nil-instance-method","name":"allow_group_chats","doc":"True, if group and supergroup chats can be chosen.","summary":"<p>True, if group and supergroup chats can be chosen.</p>","abstract":false,"location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":20,"url":null},"def":{"name":"allow_group_chats","return_type":"Bool | Nil","visibility":"Public","body":"@allow_group_chats"},"external_var":false},{"html_id":"allow_group_chats=(allow_group_chats:Bool|Nil)-instance-method","name":"allow_group_chats=","doc":"True, if group and supergroup chats can be chosen.","summary":"<p>True, if group and supergroup chats can be chosen.</p>","abstract":false,"args":[{"name":"allow_group_chats","external_name":"allow_group_chats","restriction":"Bool | Nil"}],"args_string":"(allow_group_chats : Bool | Nil)","args_html":"(allow_group_chats : Bool | Nil)","location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":20,"url":null},"def":{"name":"allow_group_chats=","args":[{"name":"allow_group_chats","external_name":"allow_group_chats","restriction":"Bool | Nil"}],"visibility":"Public","body":"@allow_group_chats = allow_group_chats"},"external_var":false},{"html_id":"allow_user_chats:Bool|Nil-instance-method","name":"allow_user_chats","doc":"True, if private chats with users can be chosen.","summary":"<p>True, if private chats with users can be chosen.</p>","abstract":false,"location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":14,"url":null},"def":{"name":"allow_user_chats","return_type":"Bool | Nil","visibility":"Public","body":"@allow_user_chats"},"external_var":false},{"html_id":"allow_user_chats=(allow_user_chats:Bool|Nil)-instance-method","name":"allow_user_chats=","doc":"True, if private chats with users can be chosen.","summary":"<p>True, if private chats with users can be chosen.</p>","abstract":false,"args":[{"name":"allow_user_chats","external_name":"allow_user_chats","restriction":"Bool | Nil"}],"args_string":"(allow_user_chats : Bool | Nil)","args_html":"(allow_user_chats : Bool | Nil)","location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":14,"url":null},"def":{"name":"allow_user_chats=","args":[{"name":"allow_user_chats","external_name":"allow_user_chats","restriction":"Bool | Nil"}],"visibility":"Public","body":"@allow_user_chats = allow_user_chats"},"external_var":false},{"html_id":"query:String|Nil-instance-method","name":"query","doc":"The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted.","summary":"<p>The default inline query to be inserted in the input field.</p>","abstract":false,"location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":11,"url":null},"def":{"name":"query","return_type":"String | Nil","visibility":"Public","body":"@query"},"external_var":false},{"html_id":"query=(query:String|Nil)-instance-method","name":"query=","doc":"The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted.","summary":"<p>The default inline query to be inserted in the input field.</p>","abstract":false,"args":[{"name":"query","external_name":"query","restriction":"String | Nil"}],"args_string":"(query : String | Nil)","args_html":"(query : String | Nil)","location":{"filename":"src/types/swith_online_query_chosen_chat.cr","line_number":11,"url":null},"def":{"name":"query=","args":[{"name":"query","external_name":"query","restriction":"String | Nil"}],"visibility":"Public","body":"@query = query"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/TextQuote","path":"Hamilton/Types/TextQuote.html","kind":"class","full_name":"Hamilton::Types::TextQuote","name":"TextQuote","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/text_quote.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about the quoted part of a message that is replied to by the given message.","summary":"<p>This object contains information about the quoted part of a message that is replied to by the given message.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/text_quote.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/text_quote.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"entities:Array(Hamilton::Types::MessageEntity)|Nil-instance-method","name":"entities","doc":"Special entities that appear in the quote. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are kept in quotes.","summary":"<p>Special entities that appear in the quote.</p>","abstract":false,"location":{"filename":"src/types/text_quote.cr","line_number":14,"url":null},"def":{"name":"entities","return_type":"Array(Hamilton::Types::MessageEntity) | Nil","visibility":"Public","body":"@entities"},"external_var":false},{"html_id":"entities=(entities:Array(Hamilton::Types::MessageEntity)|Nil)-instance-method","name":"entities=","doc":"Special entities that appear in the quote. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are kept in quotes.","summary":"<p>Special entities that appear in the quote.</p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"args_string":"(entities : Array(Hamilton::Types::MessageEntity) | Nil)","args_html":"(entities : Array(<a href=\"../../Hamilton/Types/MessageEntity.html\">Hamilton::Types::MessageEntity</a>) | Nil)","location":{"filename":"src/types/text_quote.cr","line_number":14,"url":null},"def":{"name":"entities=","args":[{"name":"entities","external_name":"entities","restriction":"Array(Hamilton::Types::MessageEntity) | Nil"}],"visibility":"Public","body":"@entities = entities"},"external_var":false},{"html_id":"is_manual:Bool|Nil-instance-method","name":"is_manual","doc":"True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server.","summary":"<p>True, if the quote was chosen manually by the message sender.</p>","abstract":false,"location":{"filename":"src/types/text_quote.cr","line_number":20,"url":null},"def":{"name":"is_manual","return_type":"Bool | Nil","visibility":"Public","body":"@is_manual"},"external_var":false},{"html_id":"is_manual=(is_manual:Bool|Nil)-instance-method","name":"is_manual=","doc":"True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server.","summary":"<p>True, if the quote was chosen manually by the message sender.</p>","abstract":false,"args":[{"name":"is_manual","external_name":"is_manual","restriction":"Bool | Nil"}],"args_string":"(is_manual : Bool | Nil)","args_html":"(is_manual : Bool | Nil)","location":{"filename":"src/types/text_quote.cr","line_number":20,"url":null},"def":{"name":"is_manual=","args":[{"name":"is_manual","external_name":"is_manual","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_manual = is_manual"},"external_var":false},{"html_id":"position:Int32-instance-method","name":"position","doc":"Approximate quote position in the original message in UTF-16 code units as specified by the sender.","summary":"<p>Approximate quote position in the original message in UTF-16 code units as specified by the sender.</p>","abstract":false,"location":{"filename":"src/types/text_quote.cr","line_number":17,"url":null},"def":{"name":"position","return_type":"Int32","visibility":"Public","body":"@position"},"external_var":false},{"html_id":"position=(position:Int32)-instance-method","name":"position=","doc":"Approximate quote position in the original message in UTF-16 code units as specified by the sender.","summary":"<p>Approximate quote position in the original message in UTF-16 code units as specified by the sender.</p>","abstract":false,"args":[{"name":"position","external_name":"position","restriction":"Int32"}],"args_string":"(position : Int32)","args_html":"(position : Int32)","location":{"filename":"src/types/text_quote.cr","line_number":17,"url":null},"def":{"name":"position=","args":[{"name":"position","external_name":"position","restriction":"Int32"}],"visibility":"Public","body":"@position = position"},"external_var":false},{"html_id":"text:String-instance-method","name":"text","doc":"Text of the quoted part of a message that is replied to by the given message.","summary":"<p>Text of the quoted part of a message that is replied to by the given message.</p>","abstract":false,"location":{"filename":"src/types/text_quote.cr","line_number":11,"url":null},"def":{"name":"text","return_type":"String","visibility":"Public","body":"@text"},"external_var":false},{"html_id":"text=(text:String)-instance-method","name":"text=","doc":"Text of the quoted part of a message that is replied to by the given message.","summary":"<p>Text of the quoted part of a message that is replied to by the given message.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String)","args_html":"(text : String)","location":{"filename":"src/types/text_quote.cr","line_number":11,"url":null},"def":{"name":"text=","args":[{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@text = text"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/TransactionPartner","path":"Hamilton/Types/TransactionPartner.html","kind":"alias","full_name":"Hamilton::Types::TransactionPartner","name":"TransactionPartner","abstract":false,"locations":[{"filename":"src/types/transaction_partner.cr","line_number":120,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":true,"aliased":"(Hamilton::Types::TransactionPartnerAffiliateProgram | Hamilton::Types::TransactionPartnerChat | Hamilton::Types::TransactionPartnerFragment | Hamilton::Types::TransactionPartnerOther | Hamilton::Types::TransactionPartnerTelegramAds | Hamilton::Types::TransactionPartnerTelegramApi | Hamilton::Types::TransactionPartnerUser)","aliased_html":"<a href=\"../../Hamilton/Types/TransactionPartnerAffiliateProgram.html\">Hamilton::Types::TransactionPartnerAffiliateProgram</a> | <a href=\"../../Hamilton/Types/TransactionPartnerChat.html\">Hamilton::Types::TransactionPartnerChat</a> | <a href=\"../../Hamilton/Types/TransactionPartnerFragment.html\">Hamilton::Types::TransactionPartnerFragment</a> | <a href=\"../../Hamilton/Types/TransactionPartnerOther.html\">Hamilton::Types::TransactionPartnerOther</a> | <a href=\"../../Hamilton/Types/TransactionPartnerTelegramAds.html\">Hamilton::Types::TransactionPartnerTelegramAds</a> | <a href=\"../../Hamilton/Types/TransactionPartnerTelegramApi.html\">Hamilton::Types::TransactionPartnerTelegramApi</a> | <a href=\"../../Hamilton/Types/TransactionPartnerUser.html\">Hamilton::Types::TransactionPartnerUser</a>","const":false,"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the source of a transaction, or its recipient for outgoing transactions.","summary":"<p>This object describes the source of a transaction, or its recipient for outgoing transactions.</p>"},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerAffiliateProgram","path":"Hamilton/Types/TransactionPartnerAffiliateProgram.html","kind":"class","full_name":"Hamilton::Types::TransactionPartnerAffiliateProgram","name":"TransactionPartnerAffiliateProgram","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/transaction_partner.cr","line_number":59,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the affiliate program that issued the affiliate commission received via this transaction.","summary":"<p>Describes the affiliate program that issued the affiliate commission received via this transaction.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":60,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":60,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"commission_per_mille:Int32-instance-method","name":"commission_per_mille","doc":"The number of Telegram Stars received by the bot for each 1000 Telegram Stars received by the affiliate program sponsor from referred users.","summary":"<p>The number of Telegram Stars received by the bot for each 1000 Telegram Stars received by the affiliate program sponsor from referred users.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":70,"url":null},"def":{"name":"commission_per_mille","return_type":"Int32","visibility":"Public","body":"@commission_per_mille"},"external_var":false},{"html_id":"commission_per_mille=(commission_per_mille:Int32)-instance-method","name":"commission_per_mille=","doc":"The number of Telegram Stars received by the bot for each 1000 Telegram Stars received by the affiliate program sponsor from referred users.","summary":"<p>The number of Telegram Stars received by the bot for each 1000 Telegram Stars received by the affiliate program sponsor from referred users.</p>","abstract":false,"args":[{"name":"commission_per_mille","external_name":"commission_per_mille","restriction":"Int32"}],"args_string":"(commission_per_mille : Int32)","args_html":"(commission_per_mille : Int32)","location":{"filename":"src/types/transaction_partner.cr","line_number":70,"url":null},"def":{"name":"commission_per_mille=","args":[{"name":"commission_per_mille","external_name":"commission_per_mille","restriction":"Int32"}],"visibility":"Public","body":"@commission_per_mille = commission_per_mille"},"external_var":false},{"html_id":"sponsor_user:Hamilton::Types::User|Nil-instance-method","name":"sponsor_user","doc":"Information about the bot that sponsored the affiliate program.","summary":"<p>Information about the bot that sponsored the affiliate program.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":67,"url":null},"def":{"name":"sponsor_user","return_type":"Hamilton::Types::User | Nil","visibility":"Public","body":"@sponsor_user"},"external_var":false},{"html_id":"sponsor_user=(sponsor_user:Hamilton::Types::User|Nil)-instance-method","name":"sponsor_user=","doc":"Information about the bot that sponsored the affiliate program.","summary":"<p>Information about the bot that sponsored the affiliate program.</p>","abstract":false,"args":[{"name":"sponsor_user","external_name":"sponsor_user","restriction":"Hamilton::Types::User | Nil"}],"args_string":"(sponsor_user : Hamilton::Types::User | Nil)","args_html":"(sponsor_user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a> | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":67,"url":null},"def":{"name":"sponsor_user=","args":[{"name":"sponsor_user","external_name":"sponsor_user","restriction":"Hamilton::Types::User | Nil"}],"visibility":"Public","body":"@sponsor_user = sponsor_user"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the transaction partner, always \"affiliate_program\".","summary":"<p>Type of the transaction partner, always &quot;affiliate_program&quot;.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":64,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the transaction partner, always \"affiliate_program\".","summary":"<p>Type of the transaction partner, always &quot;affiliate_program&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/transaction_partner.cr","line_number":64,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerChat","path":"Hamilton/Types/TransactionPartnerChat.html","kind":"class","full_name":"Hamilton::Types::TransactionPartnerChat","name":"TransactionPartnerChat","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/transaction_partner.cr","line_number":43,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a transaction with a chat.","summary":"<p>Describes a transaction with a chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"chat:Hamilton::Types::Chat-instance-method","name":"chat","doc":"Information about the chat.","summary":"<p>Information about the chat.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":51,"url":null},"def":{"name":"chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@chat"},"external_var":false},{"html_id":"chat=(chat:Hamilton::Types::Chat)-instance-method","name":"chat=","doc":"Information about the chat.","summary":"<p>Information about the chat.</p>","abstract":false,"args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(chat : Hamilton::Types::Chat)","args_html":"(chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/transaction_partner.cr","line_number":51,"url":null},"def":{"name":"chat=","args":[{"name":"chat","external_name":"chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@chat = chat"},"external_var":false},{"html_id":"gift:Hamilton::Types::Gift|Nil-instance-method","name":"gift","doc":"The gift sent to the chat by the bot.","summary":"<p>The gift sent to the chat by the bot.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":54,"url":null},"def":{"name":"gift","return_type":"Hamilton::Types::Gift | Nil","visibility":"Public","body":"@gift"},"external_var":false},{"html_id":"gift=(gift:Hamilton::Types::Gift|Nil)-instance-method","name":"gift=","doc":"The gift sent to the chat by the bot.","summary":"<p>The gift sent to the chat by the bot.</p>","abstract":false,"args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::Gift | Nil"}],"args_string":"(gift : Hamilton::Types::Gift | Nil)","args_html":"(gift : <a href=\"../../Hamilton/Types/Gift.html\">Hamilton::Types::Gift</a> | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":54,"url":null},"def":{"name":"gift=","args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::Gift | Nil"}],"visibility":"Public","body":"@gift = gift"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the transaction partner, always “chat”.","summary":"<p>Type of the transaction partner, always “chat”.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":48,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the transaction partner, always “chat”.","summary":"<p>Type of the transaction partner, always “chat”.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/transaction_partner.cr","line_number":48,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerFragment","path":"Hamilton/Types/TransactionPartnerFragment.html","kind":"class","full_name":"Hamilton::Types::TransactionPartnerFragment","name":"TransactionPartnerFragment","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/transaction_partner.cr","line_number":75,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a withdrawal transaction with Fragment.","summary":"<p>Describes a withdrawal transaction with Fragment.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":76,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":76,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the transaction partner, always \"fragment\".","summary":"<p>Type of the transaction partner, always &quot;fragment&quot;.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":80,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the transaction partner, always \"fragment\".","summary":"<p>Type of the transaction partner, always &quot;fragment&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/transaction_partner.cr","line_number":80,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"withdrawal_state:Hamilton::Types::RevenueWithdrawalState|Nil-instance-method","name":"withdrawal_state","doc":"State of the transaction if the transaction is outgoing.","summary":"<p>State of the transaction if the transaction is outgoing.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":83,"url":null},"def":{"name":"withdrawal_state","return_type":"Hamilton::Types::RevenueWithdrawalState | Nil","visibility":"Public","body":"@withdrawal_state"},"external_var":false},{"html_id":"withdrawal_state=(withdrawal_state:Hamilton::Types::RevenueWithdrawalState|Nil)-instance-method","name":"withdrawal_state=","doc":"State of the transaction if the transaction is outgoing.","summary":"<p>State of the transaction if the transaction is outgoing.</p>","abstract":false,"args":[{"name":"withdrawal_state","external_name":"withdrawal_state","restriction":"Hamilton::Types::RevenueWithdrawalState | Nil"}],"args_string":"(withdrawal_state : Hamilton::Types::RevenueWithdrawalState | Nil)","args_html":"(withdrawal_state : <a href=\"../../Hamilton/Types/RevenueWithdrawalState.html\">Hamilton::Types::RevenueWithdrawalState</a> | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":83,"url":null},"def":{"name":"withdrawal_state=","args":[{"name":"withdrawal_state","external_name":"withdrawal_state","restriction":"Hamilton::Types::RevenueWithdrawalState | Nil"}],"visibility":"Public","body":"@withdrawal_state = withdrawal_state"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerOther","path":"Hamilton/Types/TransactionPartnerOther.html","kind":"class","full_name":"Hamilton::Types::TransactionPartnerOther","name":"TransactionPartnerOther","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/transaction_partner.cr","line_number":111,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a transaction with an unknown source or recipient.","summary":"<p>Describes a transaction with an unknown source or recipient.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":112,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":112,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the transaction partner, always \"other\".","summary":"<p>Type of the transaction partner, always &quot;other&quot;.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":116,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the transaction partner, always \"other\".","summary":"<p>Type of the transaction partner, always &quot;other&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/transaction_partner.cr","line_number":116,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerTelegramAds","path":"Hamilton/Types/TransactionPartnerTelegramAds.html","kind":"class","full_name":"Hamilton::Types::TransactionPartnerTelegramAds","name":"TransactionPartnerTelegramAds","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/transaction_partner.cr","line_number":88,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a withdrawal transaction to the Telegram Ads platform.","summary":"<p>Describes a withdrawal transaction to the Telegram Ads platform.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":89,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":89,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"type:String-instance-method","name":"type","doc":"Type of the transaction partner, always \"telegram_ads\".","summary":"<p>Type of the transaction partner, always &quot;telegram_ads&quot;.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":93,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the transaction partner, always \"telegram_ads\".","summary":"<p>Type of the transaction partner, always &quot;telegram_ads&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/transaction_partner.cr","line_number":93,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerTelegramApi","path":"Hamilton/Types/TransactionPartnerTelegramApi.html","kind":"class","full_name":"Hamilton::Types::TransactionPartnerTelegramApi","name":"TransactionPartnerTelegramApi","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/transaction_partner.cr","line_number":98,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a transaction with payment for paid broadcasting.","summary":"<p>Describes a transaction with payment for paid broadcasting.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":99,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":99,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"request_count:Int32-instance-method","name":"request_count","doc":"The number of successful requests that exceeded regular limits and were therefore billed.","summary":"<p>The number of successful requests that exceeded regular limits and were therefore billed.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":106,"url":null},"def":{"name":"request_count","return_type":"Int32","visibility":"Public","body":"@request_count"},"external_var":false},{"html_id":"request_count=(request_count:Int32)-instance-method","name":"request_count=","doc":"The number of successful requests that exceeded regular limits and were therefore billed.","summary":"<p>The number of successful requests that exceeded regular limits and were therefore billed.</p>","abstract":false,"args":[{"name":"request_count","external_name":"request_count","restriction":"Int32"}],"args_string":"(request_count : Int32)","args_html":"(request_count : Int32)","location":{"filename":"src/types/transaction_partner.cr","line_number":106,"url":null},"def":{"name":"request_count=","args":[{"name":"request_count","external_name":"request_count","restriction":"Int32"}],"visibility":"Public","body":"@request_count = request_count"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the transaction partner, always \"telegram_api\".","summary":"<p>Type of the transaction partner, always &quot;telegram_api&quot;.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":103,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the transaction partner, always \"telegram_api\".","summary":"<p>Type of the transaction partner, always &quot;telegram_api&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/transaction_partner.cr","line_number":103,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/TransactionPartnerUser","path":"Hamilton/Types/TransactionPartnerUser.html","kind":"class","full_name":"Hamilton::Types::TransactionPartnerUser","name":"TransactionPartnerUser","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/transaction_partner.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a transaction with a user.","summary":"<p>Describes a transaction with a user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/transaction_partner.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"affiliate:Hamilton::Types::AffiliateInfo|Nil-instance-method","name":"affiliate","doc":"Information about the affiliate that received a commission via this transaction. Can be available only for “invoice_payment” and “paid_media_payment” transactions.","summary":"<p>Information about the affiliate that received a commission via this transaction.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":20,"url":null},"def":{"name":"affiliate","return_type":"Hamilton::Types::AffiliateInfo | Nil","visibility":"Public","body":"@affiliate"},"external_var":false},{"html_id":"affiliate=(affiliate:Hamilton::Types::AffiliateInfo|Nil)-instance-method","name":"affiliate=","doc":"Information about the affiliate that received a commission via this transaction. Can be available only for “invoice_payment” and “paid_media_payment” transactions.","summary":"<p>Information about the affiliate that received a commission via this transaction.</p>","abstract":false,"args":[{"name":"affiliate","external_name":"affiliate","restriction":"Hamilton::Types::AffiliateInfo | Nil"}],"args_string":"(affiliate : Hamilton::Types::AffiliateInfo | Nil)","args_html":"(affiliate : <a href=\"../../Hamilton/Types/AffiliateInfo.html\">Hamilton::Types::AffiliateInfo</a> | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":20,"url":null},"def":{"name":"affiliate=","args":[{"name":"affiliate","external_name":"affiliate","restriction":"Hamilton::Types::AffiliateInfo | Nil"}],"visibility":"Public","body":"@affiliate = affiliate"},"external_var":false},{"html_id":"gift:Hamilton::Types::Gift|Nil-instance-method","name":"gift","doc":"The gift sent to the user by the bot; for “gift_purchase” transactions only.","summary":"<p>The gift sent to the user by the bot; for “gift_purchase” transactions only.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":35,"url":null},"def":{"name":"gift","return_type":"Hamilton::Types::Gift | Nil","visibility":"Public","body":"@gift"},"external_var":false},{"html_id":"gift=(gift:Hamilton::Types::Gift|Nil)-instance-method","name":"gift=","doc":"The gift sent to the user by the bot; for “gift_purchase” transactions only.","summary":"<p>The gift sent to the user by the bot; for “gift_purchase” transactions only.</p>","abstract":false,"args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::Gift | Nil"}],"args_string":"(gift : Hamilton::Types::Gift | Nil)","args_html":"(gift : <a href=\"../../Hamilton/Types/Gift.html\">Hamilton::Types::Gift</a> | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":35,"url":null},"def":{"name":"gift=","args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::Gift | Nil"}],"visibility":"Public","body":"@gift = gift"},"external_var":false},{"html_id":"invoice_payload:String|Nil-instance-method","name":"invoice_payload","doc":"Bot-specified invoice payload. Can be available only for “invoice_payment” transactions.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":23,"url":null},"def":{"name":"invoice_payload","return_type":"String | Nil","visibility":"Public","body":"@invoice_payload"},"external_var":false},{"html_id":"invoice_payload=(invoice_payload:String|Nil)-instance-method","name":"invoice_payload=","doc":"Bot-specified invoice payload. Can be available only for “invoice_payment” transactions.","summary":"<p>Bot-specified invoice payload.</p>","abstract":false,"args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String | Nil"}],"args_string":"(invoice_payload : String | Nil)","args_html":"(invoice_payload : String | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":23,"url":null},"def":{"name":"invoice_payload=","args":[{"name":"invoice_payload","external_name":"invoice_payload","restriction":"String | Nil"}],"visibility":"Public","body":"@invoice_payload = invoice_payload"},"external_var":false},{"html_id":"paid_media:Array(Hamilton::Types::PaidMedia)|Nil-instance-method","name":"paid_media","doc":"Information about the paid media bought by the user; for “paid_media_payment” transactions only.","summary":"<p>Information about the paid media bought by the user; for “paid_media_payment” transactions only.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":29,"url":null},"def":{"name":"paid_media","return_type":"Array(Hamilton::Types::PaidMedia) | Nil","visibility":"Public","body":"@paid_media"},"external_var":false},{"html_id":"paid_media=(paid_media:Array(Hamilton::Types::PaidMedia)|Nil)-instance-method","name":"paid_media=","doc":"Information about the paid media bought by the user; for “paid_media_payment” transactions only.","summary":"<p>Information about the paid media bought by the user; for “paid_media_payment” transactions only.</p>","abstract":false,"args":[{"name":"paid_media","external_name":"paid_media","restriction":"Array(Hamilton::Types::PaidMedia) | Nil"}],"args_string":"(paid_media : Array(Hamilton::Types::PaidMedia) | Nil)","args_html":"(paid_media : Array(<a href=\"../../Hamilton/Types/PaidMedia.html\">Hamilton::Types::PaidMedia</a>) | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":29,"url":null},"def":{"name":"paid_media=","args":[{"name":"paid_media","external_name":"paid_media","restriction":"Array(Hamilton::Types::PaidMedia) | Nil"}],"visibility":"Public","body":"@paid_media = paid_media"},"external_var":false},{"html_id":"paid_media_payload:String|Nil-instance-method","name":"paid_media_payload","doc":"Bot-specified paid media payload. Can be available only for “paid_media_payment” transactions.","summary":"<p>Bot-specified paid media payload.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":32,"url":null},"def":{"name":"paid_media_payload","return_type":"String | Nil","visibility":"Public","body":"@paid_media_payload"},"external_var":false},{"html_id":"paid_media_payload=(paid_media_payload:String|Nil)-instance-method","name":"paid_media_payload=","doc":"Bot-specified paid media payload. Can be available only for “paid_media_payment” transactions.","summary":"<p>Bot-specified paid media payload.</p>","abstract":false,"args":[{"name":"paid_media_payload","external_name":"paid_media_payload","restriction":"String | Nil"}],"args_string":"(paid_media_payload : String | Nil)","args_html":"(paid_media_payload : String | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":32,"url":null},"def":{"name":"paid_media_payload=","args":[{"name":"paid_media_payload","external_name":"paid_media_payload","restriction":"String | Nil"}],"visibility":"Public","body":"@paid_media_payload = paid_media_payload"},"external_var":false},{"html_id":"premium_subscription_duration:Int32|Nil-instance-method","name":"premium_subscription_duration","doc":"Number of months the gifted Telegram Premium subscription will be active for; for “premium_purchase” transactions only.","summary":"<p>Number of months the gifted Telegram Premium subscription will be active for; for “premium_purchase” transactions only.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":38,"url":null},"def":{"name":"premium_subscription_duration","return_type":"Int32 | Nil","visibility":"Public","body":"@premium_subscription_duration"},"external_var":false},{"html_id":"premium_subscription_duration=(premium_subscription_duration:Int32|Nil)-instance-method","name":"premium_subscription_duration=","doc":"Number of months the gifted Telegram Premium subscription will be active for; for “premium_purchase” transactions only.","summary":"<p>Number of months the gifted Telegram Premium subscription will be active for; for “premium_purchase” transactions only.</p>","abstract":false,"args":[{"name":"premium_subscription_duration","external_name":"premium_subscription_duration","restriction":"Int32 | Nil"}],"args_string":"(premium_subscription_duration : Int32 | Nil)","args_html":"(premium_subscription_duration : Int32 | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":38,"url":null},"def":{"name":"premium_subscription_duration=","args":[{"name":"premium_subscription_duration","external_name":"premium_subscription_duration","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@premium_subscription_duration = premium_subscription_duration"},"external_var":false},{"html_id":"subscription_period:Int32|Nil-instance-method","name":"subscription_period","doc":"The duration of the paid subscription. Can be available only for “invoice_payment” transactions.","summary":"<p>The duration of the paid subscription.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":26,"url":null},"def":{"name":"subscription_period","return_type":"Int32 | Nil","visibility":"Public","body":"@subscription_period"},"external_var":false},{"html_id":"subscription_period=(subscription_period:Int32|Nil)-instance-method","name":"subscription_period=","doc":"The duration of the paid subscription. Can be available only for “invoice_payment” transactions.","summary":"<p>The duration of the paid subscription.</p>","abstract":false,"args":[{"name":"subscription_period","external_name":"subscription_period","restriction":"Int32 | Nil"}],"args_string":"(subscription_period : Int32 | Nil)","args_html":"(subscription_period : Int32 | Nil)","location":{"filename":"src/types/transaction_partner.cr","line_number":26,"url":null},"def":{"name":"subscription_period=","args":[{"name":"subscription_period","external_name":"subscription_period","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@subscription_period = subscription_period"},"external_var":false},{"html_id":"transaction_type:String-instance-method","name":"transaction_type","doc":"Type of the transaction, currently one of “invoice_payment” for payments via invoices, “paid_media_payment” for payments for paid media, “gift_purchase” for gifts sent by the bot, “premium_purchase” for Telegram Premium subscriptions gifted by the bot, “business_account_transfer” for direct transfers from managed business accounts.","summary":"<p>Type of the transaction, currently one of “invoice_payment” for payments via invoices, “paid_media_payment” for payments for paid media, “gift_purchase” for gifts sent by the bot, “premium_purchase” for Telegram Premium subscriptions gifted by the bot, “business_account_transfer” for direct transfers from managed business accounts.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":14,"url":null},"def":{"name":"transaction_type","return_type":"String","visibility":"Public","body":"@transaction_type"},"external_var":false},{"html_id":"transaction_type=(transaction_type:String)-instance-method","name":"transaction_type=","doc":"Type of the transaction, currently one of “invoice_payment” for payments via invoices, “paid_media_payment” for payments for paid media, “gift_purchase” for gifts sent by the bot, “premium_purchase” for Telegram Premium subscriptions gifted by the bot, “business_account_transfer” for direct transfers from managed business accounts.","summary":"<p>Type of the transaction, currently one of “invoice_payment” for payments via invoices, “paid_media_payment” for payments for paid media, “gift_purchase” for gifts sent by the bot, “premium_purchase” for Telegram Premium subscriptions gifted by the bot, “business_account_transfer” for direct transfers from managed business accounts.</p>","abstract":false,"args":[{"name":"transaction_type","external_name":"transaction_type","restriction":"String"}],"args_string":"(transaction_type : String)","args_html":"(transaction_type : String)","location":{"filename":"src/types/transaction_partner.cr","line_number":14,"url":null},"def":{"name":"transaction_type=","args":[{"name":"transaction_type","external_name":"transaction_type","restriction":"String"}],"visibility":"Public","body":"@transaction_type = transaction_type"},"external_var":false},{"html_id":"type:String-instance-method","name":"type","doc":"Type of the transaction partner, always \"user\".","summary":"<p>Type of the transaction partner, always &quot;user&quot;.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":11,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:String)-instance-method","name":"type=","doc":"Type of the transaction partner, always \"user\".","summary":"<p>Type of the transaction partner, always &quot;user&quot;.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/types/transaction_partner.cr","line_number":11,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"String"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"user:Hamilton::Types::User-instance-method","name":"user","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"location":{"filename":"src/types/transaction_partner.cr","line_number":17,"url":null},"def":{"name":"user","return_type":"Hamilton::Types::User","visibility":"Public","body":"@user"},"external_var":false},{"html_id":"user=(user:Hamilton::Types::User)-instance-method","name":"user=","doc":"Information about the user.","summary":"<p>Information about the user.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"args_string":"(user : Hamilton::Types::User)","args_html":"(user : <a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>)","location":{"filename":"src/types/transaction_partner.cr","line_number":17,"url":null},"def":{"name":"user=","args":[{"name":"user","external_name":"user","restriction":"Hamilton::Types::User"}],"visibility":"Public","body":"@user = user"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/UniqueGift","path":"Hamilton/Types/UniqueGift.html","kind":"class","full_name":"Hamilton::Types::UniqueGift","name":"UniqueGift","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/unique_gift.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes a unique gift that was upgraded from a regular gift.","summary":"<p>This object describes a unique gift that was upgraded from a regular gift.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"backdrop:Hamilton::Types::UniqueGiftBackdrop-instance-method","name":"backdrop","doc":"Backdrop of the gift.","summary":"<p>Backdrop of the gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift.cr","line_number":26,"url":null},"def":{"name":"backdrop","return_type":"Hamilton::Types::UniqueGiftBackdrop","visibility":"Public","body":"@backdrop"},"external_var":false},{"html_id":"backdrop=(backdrop:Hamilton::Types::UniqueGiftBackdrop)-instance-method","name":"backdrop=","doc":"Backdrop of the gift.","summary":"<p>Backdrop of the gift.</p>","abstract":false,"args":[{"name":"backdrop","external_name":"backdrop","restriction":"Hamilton::Types::UniqueGiftBackdrop"}],"args_string":"(backdrop : Hamilton::Types::UniqueGiftBackdrop)","args_html":"(backdrop : <a href=\"../../Hamilton/Types/UniqueGiftBackdrop.html\">Hamilton::Types::UniqueGiftBackdrop</a>)","location":{"filename":"src/types/unique_gift.cr","line_number":26,"url":null},"def":{"name":"backdrop=","args":[{"name":"backdrop","external_name":"backdrop","restriction":"Hamilton::Types::UniqueGiftBackdrop"}],"visibility":"Public","body":"@backdrop = backdrop"},"external_var":false},{"html_id":"base_name:String-instance-method","name":"base_name","doc":"Human-readable name of the regular gift from which this unique gift was upgraded.","summary":"<p>Human-readable name of the regular gift from which this unique gift was upgraded.</p>","abstract":false,"location":{"filename":"src/types/unique_gift.cr","line_number":11,"url":null},"def":{"name":"base_name","return_type":"String","visibility":"Public","body":"@base_name"},"external_var":false},{"html_id":"base_name=(base_name:String)-instance-method","name":"base_name=","doc":"Human-readable name of the regular gift from which this unique gift was upgraded.","summary":"<p>Human-readable name of the regular gift from which this unique gift was upgraded.</p>","abstract":false,"args":[{"name":"base_name","external_name":"base_name","restriction":"String"}],"args_string":"(base_name : String)","args_html":"(base_name : String)","location":{"filename":"src/types/unique_gift.cr","line_number":11,"url":null},"def":{"name":"base_name=","args":[{"name":"base_name","external_name":"base_name","restriction":"String"}],"visibility":"Public","body":"@base_name = base_name"},"external_var":false},{"html_id":"model:Hamilton::Types::UniqueGiftModel-instance-method","name":"model","doc":"Model of the gift.","summary":"<p>Model of the gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift.cr","line_number":20,"url":null},"def":{"name":"model","return_type":"Hamilton::Types::UniqueGiftModel","visibility":"Public","body":"@model"},"external_var":false},{"html_id":"model=(model:Hamilton::Types::UniqueGiftModel)-instance-method","name":"model=","doc":"Model of the gift.","summary":"<p>Model of the gift.</p>","abstract":false,"args":[{"name":"model","external_name":"model","restriction":"Hamilton::Types::UniqueGiftModel"}],"args_string":"(model : Hamilton::Types::UniqueGiftModel)","args_html":"(model : <a href=\"../../Hamilton/Types/UniqueGiftModel.html\">Hamilton::Types::UniqueGiftModel</a>)","location":{"filename":"src/types/unique_gift.cr","line_number":20,"url":null},"def":{"name":"model=","args":[{"name":"model","external_name":"model","restriction":"Hamilton::Types::UniqueGiftModel"}],"visibility":"Public","body":"@model = model"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","doc":"Unique name of the gift. This name can be used in `https://t.me/nft/...` links and story areas.","summary":"<p>Unique name of the gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift.cr","line_number":14,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"Unique name of the gift. This name can be used in `https://t.me/nft/...` links and story areas.","summary":"<p>Unique name of the gift.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/types/unique_gift.cr","line_number":14,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"number:Int32-instance-method","name":"number","doc":"Unique number of the upgraded gift among gifts upgraded from the same regular gift.","summary":"<p>Unique number of the upgraded gift among gifts upgraded from the same regular gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift.cr","line_number":17,"url":null},"def":{"name":"number","return_type":"Int32","visibility":"Public","body":"@number"},"external_var":false},{"html_id":"number=(number:Int32)-instance-method","name":"number=","doc":"Unique number of the upgraded gift among gifts upgraded from the same regular gift.","summary":"<p>Unique number of the upgraded gift among gifts upgraded from the same regular gift.</p>","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32)","args_html":"(number : Int32)","location":{"filename":"src/types/unique_gift.cr","line_number":17,"url":null},"def":{"name":"number=","args":[{"name":"number","external_name":"number","restriction":"Int32"}],"visibility":"Public","body":"@number = number"},"external_var":false},{"html_id":"publisher_chat:Hamilton::Types::Chat-instance-method","name":"publisher_chat","doc":"Information about the chat that published the gift.","summary":"<p>Information about the chat that published the gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift.cr","line_number":29,"url":null},"def":{"name":"publisher_chat","return_type":"Hamilton::Types::Chat","visibility":"Public","body":"@publisher_chat"},"external_var":false},{"html_id":"publisher_chat=(publisher_chat:Hamilton::Types::Chat)-instance-method","name":"publisher_chat=","doc":"Information about the chat that published the gift.","summary":"<p>Information about the chat that published the gift.</p>","abstract":false,"args":[{"name":"publisher_chat","external_name":"publisher_chat","restriction":"Hamilton::Types::Chat"}],"args_string":"(publisher_chat : Hamilton::Types::Chat)","args_html":"(publisher_chat : <a href=\"../../Hamilton/Types/Chat.html\">Hamilton::Types::Chat</a>)","location":{"filename":"src/types/unique_gift.cr","line_number":29,"url":null},"def":{"name":"publisher_chat=","args":[{"name":"publisher_chat","external_name":"publisher_chat","restriction":"Hamilton::Types::Chat"}],"visibility":"Public","body":"@publisher_chat = publisher_chat"},"external_var":false},{"html_id":"symbol:Hamilton::Types::UniqueGiftSymbol-instance-method","name":"symbol","doc":"Symbol of the gift.","summary":"<p>Symbol of the gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift.cr","line_number":23,"url":null},"def":{"name":"symbol","return_type":"Hamilton::Types::UniqueGiftSymbol","visibility":"Public","body":"@symbol"},"external_var":false},{"html_id":"symbol=(symbol:Hamilton::Types::UniqueGiftSymbol)-instance-method","name":"symbol=","doc":"Symbol of the gift.","summary":"<p>Symbol of the gift.</p>","abstract":false,"args":[{"name":"symbol","external_name":"symbol","restriction":"Hamilton::Types::UniqueGiftSymbol"}],"args_string":"(symbol : Hamilton::Types::UniqueGiftSymbol)","args_html":"(symbol : <a href=\"../../Hamilton/Types/UniqueGiftSymbol.html\">Hamilton::Types::UniqueGiftSymbol</a>)","location":{"filename":"src/types/unique_gift.cr","line_number":23,"url":null},"def":{"name":"symbol=","args":[{"name":"symbol","external_name":"symbol","restriction":"Hamilton::Types::UniqueGiftSymbol"}],"visibility":"Public","body":"@symbol = symbol"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/UniqueGiftBackdrop","path":"Hamilton/Types/UniqueGiftBackdrop.html","kind":"class","full_name":"Hamilton::Types::UniqueGiftBackdrop","name":"UniqueGiftBackdrop","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/unique_gift_backdrop.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the backdrop of a unique gift.","summary":"<p>This object describes the backdrop of a unique gift.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_backdrop.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_backdrop.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"colors:Hamilton::Types::UniqueGiftBackdropColors-instance-method","name":"colors","doc":"Colors of the backdrop.","summary":"<p>Colors of the backdrop.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_backdrop.cr","line_number":14,"url":null},"def":{"name":"colors","return_type":"Hamilton::Types::UniqueGiftBackdropColors","visibility":"Public","body":"@colors"},"external_var":false},{"html_id":"colors=(colors:Hamilton::Types::UniqueGiftBackdropColors)-instance-method","name":"colors=","doc":"Colors of the backdrop.","summary":"<p>Colors of the backdrop.</p>","abstract":false,"args":[{"name":"colors","external_name":"colors","restriction":"Hamilton::Types::UniqueGiftBackdropColors"}],"args_string":"(colors : Hamilton::Types::UniqueGiftBackdropColors)","args_html":"(colors : <a href=\"../../Hamilton/Types/UniqueGiftBackdropColors.html\">Hamilton::Types::UniqueGiftBackdropColors</a>)","location":{"filename":"src/types/unique_gift_backdrop.cr","line_number":14,"url":null},"def":{"name":"colors=","args":[{"name":"colors","external_name":"colors","restriction":"Hamilton::Types::UniqueGiftBackdropColors"}],"visibility":"Public","body":"@colors = colors"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","doc":"Name of the model.","summary":"<p>Name of the model.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_backdrop.cr","line_number":11,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"Name of the model.","summary":"<p>Name of the model.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/types/unique_gift_backdrop.cr","line_number":11,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"rarity_per_mille:Int32-instance-method","name":"rarity_per_mille","doc":"The number of unique gifts that receive this backdrop for every 1000 gifts upgraded.","summary":"<p>The number of unique gifts that receive this backdrop for every 1000 gifts upgraded.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_backdrop.cr","line_number":17,"url":null},"def":{"name":"rarity_per_mille","return_type":"Int32","visibility":"Public","body":"@rarity_per_mille"},"external_var":false},{"html_id":"rarity_per_mille=(rarity_per_mille:Int32)-instance-method","name":"rarity_per_mille=","doc":"The number of unique gifts that receive this backdrop for every 1000 gifts upgraded.","summary":"<p>The number of unique gifts that receive this backdrop for every 1000 gifts upgraded.</p>","abstract":false,"args":[{"name":"rarity_per_mille","external_name":"rarity_per_mille","restriction":"Int32"}],"args_string":"(rarity_per_mille : Int32)","args_html":"(rarity_per_mille : Int32)","location":{"filename":"src/types/unique_gift_backdrop.cr","line_number":17,"url":null},"def":{"name":"rarity_per_mille=","args":[{"name":"rarity_per_mille","external_name":"rarity_per_mille","restriction":"Int32"}],"visibility":"Public","body":"@rarity_per_mille = rarity_per_mille"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/UniqueGiftBackdropColors","path":"Hamilton/Types/UniqueGiftBackdropColors.html","kind":"class","full_name":"Hamilton::Types::UniqueGiftBackdropColors","name":"UniqueGiftBackdropColors","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the colors of the backdrop of a unique gift.","summary":"<p>This object describes the colors of the backdrop of a unique gift.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"center_color:Int32-instance-method","name":"center_color","doc":"The color in the center of the backdrop in RGB format.","summary":"<p>The color in the center of the backdrop in RGB format.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":11,"url":null},"def":{"name":"center_color","return_type":"Int32","visibility":"Public","body":"@center_color"},"external_var":false},{"html_id":"center_color=(center_color:Int32)-instance-method","name":"center_color=","doc":"The color in the center of the backdrop in RGB format.","summary":"<p>The color in the center of the backdrop in RGB format.</p>","abstract":false,"args":[{"name":"center_color","external_name":"center_color","restriction":"Int32"}],"args_string":"(center_color : Int32)","args_html":"(center_color : Int32)","location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":11,"url":null},"def":{"name":"center_color=","args":[{"name":"center_color","external_name":"center_color","restriction":"Int32"}],"visibility":"Public","body":"@center_color = center_color"},"external_var":false},{"html_id":"edge_color:Int32-instance-method","name":"edge_color","doc":"The color on the edges of the backdrop in RGB format.","summary":"<p>The color on the edges of the backdrop in RGB format.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":14,"url":null},"def":{"name":"edge_color","return_type":"Int32","visibility":"Public","body":"@edge_color"},"external_var":false},{"html_id":"edge_color=(edge_color:Int32)-instance-method","name":"edge_color=","doc":"The color on the edges of the backdrop in RGB format.","summary":"<p>The color on the edges of the backdrop in RGB format.</p>","abstract":false,"args":[{"name":"edge_color","external_name":"edge_color","restriction":"Int32"}],"args_string":"(edge_color : Int32)","args_html":"(edge_color : Int32)","location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":14,"url":null},"def":{"name":"edge_color=","args":[{"name":"edge_color","external_name":"edge_color","restriction":"Int32"}],"visibility":"Public","body":"@edge_color = edge_color"},"external_var":false},{"html_id":"symbol_color:Int32-instance-method","name":"symbol_color","doc":"The color to be applied to the symbol in RGB format.","summary":"<p>The color to be applied to the symbol in RGB format.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":17,"url":null},"def":{"name":"symbol_color","return_type":"Int32","visibility":"Public","body":"@symbol_color"},"external_var":false},{"html_id":"symbol_color=(symbol_color:Int32)-instance-method","name":"symbol_color=","doc":"The color to be applied to the symbol in RGB format.","summary":"<p>The color to be applied to the symbol in RGB format.</p>","abstract":false,"args":[{"name":"symbol_color","external_name":"symbol_color","restriction":"Int32"}],"args_string":"(symbol_color : Int32)","args_html":"(symbol_color : Int32)","location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":17,"url":null},"def":{"name":"symbol_color=","args":[{"name":"symbol_color","external_name":"symbol_color","restriction":"Int32"}],"visibility":"Public","body":"@symbol_color = symbol_color"},"external_var":false},{"html_id":"text_color:Int32-instance-method","name":"text_color","doc":"The color for the text on the backdrop in RGB format.","summary":"<p>The color for the text on the backdrop in RGB format.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":20,"url":null},"def":{"name":"text_color","return_type":"Int32","visibility":"Public","body":"@text_color"},"external_var":false},{"html_id":"text_color=(text_color:Int32)-instance-method","name":"text_color=","doc":"The color for the text on the backdrop in RGB format.","summary":"<p>The color for the text on the backdrop in RGB format.</p>","abstract":false,"args":[{"name":"text_color","external_name":"text_color","restriction":"Int32"}],"args_string":"(text_color : Int32)","args_html":"(text_color : Int32)","location":{"filename":"src/types/unique_gift_backdrop_colors.cr","line_number":20,"url":null},"def":{"name":"text_color=","args":[{"name":"text_color","external_name":"text_color","restriction":"Int32"}],"visibility":"Public","body":"@text_color = text_color"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/UniqueGiftInfo","path":"Hamilton/Types/UniqueGiftInfo.html","kind":"class","full_name":"Hamilton::Types::UniqueGiftInfo","name":"UniqueGiftInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/unique_gift_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a service message about a unique gift that was sent or received.","summary":"<p>Describes a service message about a unique gift that was sent or received.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"gift:Hamilton::Types::UniqueGift-instance-method","name":"gift","doc":"Information about the gift.","summary":"<p>Information about the gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_info.cr","line_number":11,"url":null},"def":{"name":"gift","return_type":"Hamilton::Types::UniqueGift","visibility":"Public","body":"@gift"},"external_var":false},{"html_id":"gift=(gift:Hamilton::Types::UniqueGift)-instance-method","name":"gift=","doc":"Information about the gift.","summary":"<p>Information about the gift.</p>","abstract":false,"args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::UniqueGift"}],"args_string":"(gift : Hamilton::Types::UniqueGift)","args_html":"(gift : <a href=\"../../Hamilton/Types/UniqueGift.html\">Hamilton::Types::UniqueGift</a>)","location":{"filename":"src/types/unique_gift_info.cr","line_number":11,"url":null},"def":{"name":"gift=","args":[{"name":"gift","external_name":"gift","restriction":"Hamilton::Types::UniqueGift"}],"visibility":"Public","body":"@gift = gift"},"external_var":false},{"html_id":"last_resale_star_count:Int32|Nil-instance-method","name":"last_resale_star_count","doc":"For gifts bought from other users, the price paid for the gift.","summary":"<p>For gifts bought from other users, the price paid for the gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_info.cr","line_number":17,"url":null},"def":{"name":"last_resale_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@last_resale_star_count"},"external_var":false},{"html_id":"last_resale_star_count=(last_resale_star_count:Int32|Nil)-instance-method","name":"last_resale_star_count=","doc":"For gifts bought from other users, the price paid for the gift.","summary":"<p>For gifts bought from other users, the price paid for the gift.</p>","abstract":false,"args":[{"name":"last_resale_star_count","external_name":"last_resale_star_count","restriction":"Int32 | Nil"}],"args_string":"(last_resale_star_count : Int32 | Nil)","args_html":"(last_resale_star_count : Int32 | Nil)","location":{"filename":"src/types/unique_gift_info.cr","line_number":17,"url":null},"def":{"name":"last_resale_star_count=","args":[{"name":"last_resale_star_count","external_name":"last_resale_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@last_resale_star_count = last_resale_star_count"},"external_var":false},{"html_id":"next_transfer_date:Int32|Nil-instance-method","name":"next_transfer_date","doc":"Point in time (Unix timestamp) when the gift can be transferred. If it is in the past, then the gift can be transferred now.","summary":"<p>Point in time (Unix timestamp) when the gift can be transferred.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_info.cr","line_number":26,"url":null},"def":{"name":"next_transfer_date","return_type":"Int32 | Nil","visibility":"Public","body":"@next_transfer_date"},"external_var":false},{"html_id":"next_transfer_date=(next_transfer_date:Int32|Nil)-instance-method","name":"next_transfer_date=","doc":"Point in time (Unix timestamp) when the gift can be transferred. If it is in the past, then the gift can be transferred now.","summary":"<p>Point in time (Unix timestamp) when the gift can be transferred.</p>","abstract":false,"args":[{"name":"next_transfer_date","external_name":"next_transfer_date","restriction":"Int32 | Nil"}],"args_string":"(next_transfer_date : Int32 | Nil)","args_html":"(next_transfer_date : Int32 | Nil)","location":{"filename":"src/types/unique_gift_info.cr","line_number":26,"url":null},"def":{"name":"next_transfer_date=","args":[{"name":"next_transfer_date","external_name":"next_transfer_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@next_transfer_date = next_transfer_date"},"external_var":false},{"html_id":"origin:String-instance-method","name":"origin","doc":"Origin of the gift. Currently, either “upgrade” for gifts upgraded from regular gifts, “transfer” for gifts transferred from other users or channels, or “resale” for gifts bought from other users.","summary":"<p>Origin of the gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_info.cr","line_number":14,"url":null},"def":{"name":"origin","return_type":"String","visibility":"Public","body":"@origin"},"external_var":false},{"html_id":"origin=(origin:String)-instance-method","name":"origin=","doc":"Origin of the gift. Currently, either “upgrade” for gifts upgraded from regular gifts, “transfer” for gifts transferred from other users or channels, or “resale” for gifts bought from other users.","summary":"<p>Origin of the gift.</p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"String"}],"args_string":"(origin : String)","args_html":"(origin : String)","location":{"filename":"src/types/unique_gift_info.cr","line_number":14,"url":null},"def":{"name":"origin=","args":[{"name":"origin","external_name":"origin","restriction":"String"}],"visibility":"Public","body":"@origin = origin"},"external_var":false},{"html_id":"owned_gift_id:String|Nil-instance-method","name":"owned_gift_id","doc":"Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts.","summary":"<p>Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_info.cr","line_number":20,"url":null},"def":{"name":"owned_gift_id","return_type":"String | Nil","visibility":"Public","body":"@owned_gift_id"},"external_var":false},{"html_id":"owned_gift_id=(owned_gift_id:String|Nil)-instance-method","name":"owned_gift_id=","doc":"Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts.","summary":"<p>Unique identifier of the received gift for the bot; only present for gifts received on behalf of business accounts.</p>","abstract":false,"args":[{"name":"owned_gift_id","external_name":"owned_gift_id","restriction":"String | Nil"}],"args_string":"(owned_gift_id : String | Nil)","args_html":"(owned_gift_id : String | Nil)","location":{"filename":"src/types/unique_gift_info.cr","line_number":20,"url":null},"def":{"name":"owned_gift_id=","args":[{"name":"owned_gift_id","external_name":"owned_gift_id","restriction":"String | Nil"}],"visibility":"Public","body":"@owned_gift_id = owned_gift_id"},"external_var":false},{"html_id":"transfer_star_count:Int32|Nil-instance-method","name":"transfer_star_count","doc":"Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift.","summary":"<p>Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_info.cr","line_number":23,"url":null},"def":{"name":"transfer_star_count","return_type":"Int32 | Nil","visibility":"Public","body":"@transfer_star_count"},"external_var":false},{"html_id":"transfer_star_count=(transfer_star_count:Int32|Nil)-instance-method","name":"transfer_star_count=","doc":"Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift.","summary":"<p>Number of Telegram Stars that must be paid to transfer the gift; omitted if the bot cannot transfer the gift.</p>","abstract":false,"args":[{"name":"transfer_star_count","external_name":"transfer_star_count","restriction":"Int32 | Nil"}],"args_string":"(transfer_star_count : Int32 | Nil)","args_html":"(transfer_star_count : Int32 | Nil)","location":{"filename":"src/types/unique_gift_info.cr","line_number":23,"url":null},"def":{"name":"transfer_star_count=","args":[{"name":"transfer_star_count","external_name":"transfer_star_count","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@transfer_star_count = transfer_star_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/UniqueGiftModel","path":"Hamilton/Types/UniqueGiftModel.html","kind":"class","full_name":"Hamilton::Types::UniqueGiftModel","name":"UniqueGiftModel","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/unique_gift_model.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the model of a unique gift.","summary":"<p>This object describes the model of a unique gift.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_model.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_model.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"name:String-instance-method","name":"name","doc":"Name of the model.","summary":"<p>Name of the model.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_model.cr","line_number":11,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"Name of the model.","summary":"<p>Name of the model.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/types/unique_gift_model.cr","line_number":11,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"rarity_per_mille:Int32-instance-method","name":"rarity_per_mille","doc":"The number of unique gifts that receive this model for every 1000 gifts upgraded.","summary":"<p>The number of unique gifts that receive this model for every 1000 gifts upgraded.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_model.cr","line_number":17,"url":null},"def":{"name":"rarity_per_mille","return_type":"Int32","visibility":"Public","body":"@rarity_per_mille"},"external_var":false},{"html_id":"rarity_per_mille=(rarity_per_mille:Int32)-instance-method","name":"rarity_per_mille=","doc":"The number of unique gifts that receive this model for every 1000 gifts upgraded.","summary":"<p>The number of unique gifts that receive this model for every 1000 gifts upgraded.</p>","abstract":false,"args":[{"name":"rarity_per_mille","external_name":"rarity_per_mille","restriction":"Int32"}],"args_string":"(rarity_per_mille : Int32)","args_html":"(rarity_per_mille : Int32)","location":{"filename":"src/types/unique_gift_model.cr","line_number":17,"url":null},"def":{"name":"rarity_per_mille=","args":[{"name":"rarity_per_mille","external_name":"rarity_per_mille","restriction":"Int32"}],"visibility":"Public","body":"@rarity_per_mille = rarity_per_mille"},"external_var":false},{"html_id":"sticker:Hamilton::Types::Sticker-instance-method","name":"sticker","doc":"The sticker that represents the unique gift.","summary":"<p>The sticker that represents the unique gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_model.cr","line_number":14,"url":null},"def":{"name":"sticker","return_type":"Hamilton::Types::Sticker","visibility":"Public","body":"@sticker"},"external_var":false},{"html_id":"sticker=(sticker:Hamilton::Types::Sticker)-instance-method","name":"sticker=","doc":"The sticker that represents the unique gift.","summary":"<p>The sticker that represents the unique gift.</p>","abstract":false,"args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker"}],"args_string":"(sticker : Hamilton::Types::Sticker)","args_html":"(sticker : <a href=\"../../Hamilton/Types/Sticker.html\">Hamilton::Types::Sticker</a>)","location":{"filename":"src/types/unique_gift_model.cr","line_number":14,"url":null},"def":{"name":"sticker=","args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker"}],"visibility":"Public","body":"@sticker = sticker"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/UniqueGiftSymbol","path":"Hamilton/Types/UniqueGiftSymbol.html","kind":"class","full_name":"Hamilton::Types::UniqueGiftSymbol","name":"UniqueGiftSymbol","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/unique_gift_symbol.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object describes the symbol shown on the pattern of a unique gift.","summary":"<p>This object describes the symbol shown on the pattern of a unique gift.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_symbol.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/unique_gift_symbol.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"name:String-instance-method","name":"name","doc":"Name of the model.","summary":"<p>Name of the model.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_symbol.cr","line_number":11,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"Name of the model.","summary":"<p>Name of the model.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/types/unique_gift_symbol.cr","line_number":11,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"rarity_per_mille:Int32-instance-method","name":"rarity_per_mille","doc":"The number of unique gifts that receive this model for every 1000 gifts upgraded.","summary":"<p>The number of unique gifts that receive this model for every 1000 gifts upgraded.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_symbol.cr","line_number":17,"url":null},"def":{"name":"rarity_per_mille","return_type":"Int32","visibility":"Public","body":"@rarity_per_mille"},"external_var":false},{"html_id":"rarity_per_mille=(rarity_per_mille:Int32)-instance-method","name":"rarity_per_mille=","doc":"The number of unique gifts that receive this model for every 1000 gifts upgraded.","summary":"<p>The number of unique gifts that receive this model for every 1000 gifts upgraded.</p>","abstract":false,"args":[{"name":"rarity_per_mille","external_name":"rarity_per_mille","restriction":"Int32"}],"args_string":"(rarity_per_mille : Int32)","args_html":"(rarity_per_mille : Int32)","location":{"filename":"src/types/unique_gift_symbol.cr","line_number":17,"url":null},"def":{"name":"rarity_per_mille=","args":[{"name":"rarity_per_mille","external_name":"rarity_per_mille","restriction":"Int32"}],"visibility":"Public","body":"@rarity_per_mille = rarity_per_mille"},"external_var":false},{"html_id":"sticker:Hamilton::Types::Sticker-instance-method","name":"sticker","doc":"The sticker that represents the unique gift.","summary":"<p>The sticker that represents the unique gift.</p>","abstract":false,"location":{"filename":"src/types/unique_gift_symbol.cr","line_number":14,"url":null},"def":{"name":"sticker","return_type":"Hamilton::Types::Sticker","visibility":"Public","body":"@sticker"},"external_var":false},{"html_id":"sticker=(sticker:Hamilton::Types::Sticker)-instance-method","name":"sticker=","doc":"The sticker that represents the unique gift.","summary":"<p>The sticker that represents the unique gift.</p>","abstract":false,"args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker"}],"args_string":"(sticker : Hamilton::Types::Sticker)","args_html":"(sticker : <a href=\"../../Hamilton/Types/Sticker.html\">Hamilton::Types::Sticker</a>)","location":{"filename":"src/types/unique_gift_symbol.cr","line_number":14,"url":null},"def":{"name":"sticker=","args":[{"name":"sticker","external_name":"sticker","restriction":"Hamilton::Types::Sticker"}],"visibility":"Public","body":"@sticker = sticker"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Update","path":"Hamilton/Types/Update.html","kind":"class","full_name":"Hamilton::Types::Update","name":"Update","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/update.cr","line_number":7,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents an incoming update.\nAt most one of the optional parameters can be present in any given update.","summary":"<p>This object represents an incoming update.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/update.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/update.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"business_connection:Hamilton::Types::BusinessConnection|Nil-instance-method","name":"business_connection","doc":"The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot.","summary":"<p>The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":27,"url":null},"def":{"name":"business_connection","return_type":"Hamilton::Types::BusinessConnection | Nil","visibility":"Public","body":"@business_connection"},"external_var":false},{"html_id":"business_connection=(business_connection:Hamilton::Types::BusinessConnection|Nil)-instance-method","name":"business_connection=","doc":"The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot.","summary":"<p>The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot.</p>","abstract":false,"args":[{"name":"business_connection","external_name":"business_connection","restriction":"Hamilton::Types::BusinessConnection | Nil"}],"args_string":"(business_connection : Hamilton::Types::BusinessConnection | Nil)","args_html":"(business_connection : <a href=\"../../Hamilton/Types/BusinessConnection.html\">Hamilton::Types::BusinessConnection</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":27,"url":null},"def":{"name":"business_connection=","args":[{"name":"business_connection","external_name":"business_connection","restriction":"Hamilton::Types::BusinessConnection | Nil"}],"visibility":"Public","body":"@business_connection = business_connection"},"external_var":false},{"html_id":"business_message:Hamilton::Types::Message|Nil-instance-method","name":"business_message","doc":"New message from a connected business account.","summary":"<p>New message from a connected business account.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":30,"url":null},"def":{"name":"business_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@business_message"},"external_var":false},{"html_id":"business_message=(business_message:Hamilton::Types::Message|Nil)-instance-method","name":"business_message=","doc":"New message from a connected business account.","summary":"<p>New message from a connected business account.</p>","abstract":false,"args":[{"name":"business_message","external_name":"business_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(business_message : Hamilton::Types::Message | Nil)","args_html":"(business_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":30,"url":null},"def":{"name":"business_message=","args":[{"name":"business_message","external_name":"business_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@business_message = business_message"},"external_var":false},{"html_id":"callback_query:Hamilton::Types::CallbackQuery|Nil-instance-method","name":"callback_query","doc":"New incoming callback query.","summary":"<p>New incoming callback query.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":51,"url":null},"def":{"name":"callback_query","return_type":"Hamilton::Types::CallbackQuery | Nil","visibility":"Public","body":"@callback_query"},"external_var":false},{"html_id":"callback_query=(callback_query:Hamilton::Types::CallbackQuery|Nil)-instance-method","name":"callback_query=","doc":"New incoming callback query.","summary":"<p>New incoming callback query.</p>","abstract":false,"args":[{"name":"callback_query","external_name":"callback_query","restriction":"Hamilton::Types::CallbackQuery | Nil"}],"args_string":"(callback_query : Hamilton::Types::CallbackQuery | Nil)","args_html":"(callback_query : <a href=\"../../Hamilton/Types/CallbackQuery.html\">Hamilton::Types::CallbackQuery</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":51,"url":null},"def":{"name":"callback_query=","args":[{"name":"callback_query","external_name":"callback_query","restriction":"Hamilton::Types::CallbackQuery | Nil"}],"visibility":"Public","body":"@callback_query = callback_query"},"external_var":false},{"html_id":"channel_post:Hamilton::Types::Message|Nil-instance-method","name":"channel_post","doc":"New incoming channel post of any kind - text, photo, sticker, etc.","summary":"<p>New incoming channel post of any kind - text, photo, sticker, etc.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":21,"url":null},"def":{"name":"channel_post","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@channel_post"},"external_var":false},{"html_id":"channel_post=(channel_post:Hamilton::Types::Message|Nil)-instance-method","name":"channel_post=","doc":"New incoming channel post of any kind - text, photo, sticker, etc.","summary":"<p>New incoming channel post of any kind - text, photo, sticker, etc.</p>","abstract":false,"args":[{"name":"channel_post","external_name":"channel_post","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(channel_post : Hamilton::Types::Message | Nil)","args_html":"(channel_post : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":21,"url":null},"def":{"name":"channel_post=","args":[{"name":"channel_post","external_name":"channel_post","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@channel_post = channel_post"},"external_var":false},{"html_id":"chat_boost:Hamilton::Types::ChatBoostUpdated|Nil-instance-method","name":"chat_boost","doc":"A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates.","summary":"<p>A chat boost was added or changed.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":78,"url":null},"def":{"name":"chat_boost","return_type":"Hamilton::Types::ChatBoostUpdated | Nil","visibility":"Public","body":"@chat_boost"},"external_var":false},{"html_id":"chat_boost=(chat_boost:Hamilton::Types::ChatBoostUpdated|Nil)-instance-method","name":"chat_boost=","doc":"A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates.","summary":"<p>A chat boost was added or changed.</p>","abstract":false,"args":[{"name":"chat_boost","external_name":"chat_boost","restriction":"Hamilton::Types::ChatBoostUpdated | Nil"}],"args_string":"(chat_boost : Hamilton::Types::ChatBoostUpdated | Nil)","args_html":"(chat_boost : <a href=\"../../Hamilton/Types/ChatBoostUpdated.html\">Hamilton::Types::ChatBoostUpdated</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":78,"url":null},"def":{"name":"chat_boost=","args":[{"name":"chat_boost","external_name":"chat_boost","restriction":"Hamilton::Types::ChatBoostUpdated | Nil"}],"visibility":"Public","body":"@chat_boost = chat_boost"},"external_var":false},{"html_id":"chat_join_request:Hamilton::Types::ChatJoinRequest|Nil-instance-method","name":"chat_join_request","doc":"A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates.","summary":"<p>A request to join the chat has been sent.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":75,"url":null},"def":{"name":"chat_join_request","return_type":"Hamilton::Types::ChatJoinRequest | Nil","visibility":"Public","body":"@chat_join_request"},"external_var":false},{"html_id":"chat_join_request=(chat_join_request:Hamilton::Types::ChatJoinRequest|Nil)-instance-method","name":"chat_join_request=","doc":"A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates.","summary":"<p>A request to join the chat has been sent.</p>","abstract":false,"args":[{"name":"chat_join_request","external_name":"chat_join_request","restriction":"Hamilton::Types::ChatJoinRequest | Nil"}],"args_string":"(chat_join_request : Hamilton::Types::ChatJoinRequest | Nil)","args_html":"(chat_join_request : <a href=\"../../Hamilton/Types/ChatJoinRequest.html\">Hamilton::Types::ChatJoinRequest</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":75,"url":null},"def":{"name":"chat_join_request=","args":[{"name":"chat_join_request","external_name":"chat_join_request","restriction":"Hamilton::Types::ChatJoinRequest | Nil"}],"visibility":"Public","body":"@chat_join_request = chat_join_request"},"external_var":false},{"html_id":"chat_member:Hamilton::Types::ChatMemberUpdated|Nil-instance-method","name":"chat_member","doc":"A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \"chat_member\" in the list of allowed_updates to receive these updates.","summary":"<p>A chat member's status was updated in a chat.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":72,"url":null},"def":{"name":"chat_member","return_type":"Hamilton::Types::ChatMemberUpdated | Nil","visibility":"Public","body":"@chat_member"},"external_var":false},{"html_id":"chat_member=(chat_member:Hamilton::Types::ChatMemberUpdated|Nil)-instance-method","name":"chat_member=","doc":"A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \"chat_member\" in the list of allowed_updates to receive these updates.","summary":"<p>A chat member's status was updated in a chat.</p>","abstract":false,"args":[{"name":"chat_member","external_name":"chat_member","restriction":"Hamilton::Types::ChatMemberUpdated | Nil"}],"args_string":"(chat_member : Hamilton::Types::ChatMemberUpdated | Nil)","args_html":"(chat_member : <a href=\"../../Hamilton/Types/ChatMemberUpdated.html\">Hamilton::Types::ChatMemberUpdated</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":72,"url":null},"def":{"name":"chat_member=","args":[{"name":"chat_member","external_name":"chat_member","restriction":"Hamilton::Types::ChatMemberUpdated | Nil"}],"visibility":"Public","body":"@chat_member = chat_member"},"external_var":false},{"html_id":"chosen_inline_result:Hamilton::Types::ChosenInlineResult|Nil-instance-method","name":"chosen_inline_result","doc":"The result of an inline query that was chosen by a user and sent to their chat partner.","summary":"<p>The result of an inline query that was chosen by a user and sent to their chat partner.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":48,"url":null},"def":{"name":"chosen_inline_result","return_type":"Hamilton::Types::ChosenInlineResult | Nil","visibility":"Public","body":"@chosen_inline_result"},"external_var":false},{"html_id":"chosen_inline_result=(chosen_inline_result:Hamilton::Types::ChosenInlineResult|Nil)-instance-method","name":"chosen_inline_result=","doc":"The result of an inline query that was chosen by a user and sent to their chat partner.","summary":"<p>The result of an inline query that was chosen by a user and sent to their chat partner.</p>","abstract":false,"args":[{"name":"chosen_inline_result","external_name":"chosen_inline_result","restriction":"Hamilton::Types::ChosenInlineResult | Nil"}],"args_string":"(chosen_inline_result : Hamilton::Types::ChosenInlineResult | Nil)","args_html":"(chosen_inline_result : <a href=\"../../Hamilton/Types/ChosenInlineResult.html\">Hamilton::Types::ChosenInlineResult</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":48,"url":null},"def":{"name":"chosen_inline_result=","args":[{"name":"chosen_inline_result","external_name":"chosen_inline_result","restriction":"Hamilton::Types::ChosenInlineResult | Nil"}],"visibility":"Public","body":"@chosen_inline_result = chosen_inline_result"},"external_var":false},{"html_id":"deleted_business_messages:Hamilton::Types::BusinessMessagesDeleted|Nil-instance-method","name":"deleted_business_messages","doc":"Messages were deleted from a connected business account.","summary":"<p>Messages were deleted from a connected business account.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":36,"url":null},"def":{"name":"deleted_business_messages","return_type":"Hamilton::Types::BusinessMessagesDeleted | Nil","visibility":"Public","body":"@deleted_business_messages"},"external_var":false},{"html_id":"deleted_business_messages=(deleted_business_messages:Hamilton::Types::BusinessMessagesDeleted|Nil)-instance-method","name":"deleted_business_messages=","doc":"Messages were deleted from a connected business account.","summary":"<p>Messages were deleted from a connected business account.</p>","abstract":false,"args":[{"name":"deleted_business_messages","external_name":"deleted_business_messages","restriction":"Hamilton::Types::BusinessMessagesDeleted | Nil"}],"args_string":"(deleted_business_messages : Hamilton::Types::BusinessMessagesDeleted | Nil)","args_html":"(deleted_business_messages : <a href=\"../../Hamilton/Types/BusinessMessagesDeleted.html\">Hamilton::Types::BusinessMessagesDeleted</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":36,"url":null},"def":{"name":"deleted_business_messages=","args":[{"name":"deleted_business_messages","external_name":"deleted_business_messages","restriction":"Hamilton::Types::BusinessMessagesDeleted | Nil"}],"visibility":"Public","body":"@deleted_business_messages = deleted_business_messages"},"external_var":false},{"html_id":"edited_business_message:Hamilton::Types::Message|Nil-instance-method","name":"edited_business_message","doc":"New version of a message from a connected business account.","summary":"<p>New version of a message from a connected business account.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":33,"url":null},"def":{"name":"edited_business_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@edited_business_message"},"external_var":false},{"html_id":"edited_business_message=(edited_business_message:Hamilton::Types::Message|Nil)-instance-method","name":"edited_business_message=","doc":"New version of a message from a connected business account.","summary":"<p>New version of a message from a connected business account.</p>","abstract":false,"args":[{"name":"edited_business_message","external_name":"edited_business_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(edited_business_message : Hamilton::Types::Message | Nil)","args_html":"(edited_business_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":33,"url":null},"def":{"name":"edited_business_message=","args":[{"name":"edited_business_message","external_name":"edited_business_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@edited_business_message = edited_business_message"},"external_var":false},{"html_id":"edited_channel_post:Hamilton::Types::Message|Nil-instance-method","name":"edited_channel_post","doc":"New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.","summary":"<p>New version of a channel post that is known to the bot and was edited.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":24,"url":null},"def":{"name":"edited_channel_post","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@edited_channel_post"},"external_var":false},{"html_id":"edited_channel_post=(edited_channel_post:Hamilton::Types::Message|Nil)-instance-method","name":"edited_channel_post=","doc":"New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.","summary":"<p>New version of a channel post that is known to the bot and was edited.</p>","abstract":false,"args":[{"name":"edited_channel_post","external_name":"edited_channel_post","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(edited_channel_post : Hamilton::Types::Message | Nil)","args_html":"(edited_channel_post : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":24,"url":null},"def":{"name":"edited_channel_post=","args":[{"name":"edited_channel_post","external_name":"edited_channel_post","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@edited_channel_post = edited_channel_post"},"external_var":false},{"html_id":"edited_message:Hamilton::Types::Message|Nil-instance-method","name":"edited_message","doc":"New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.","summary":"<p>New version of a message that is known to the bot and was edited.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":18,"url":null},"def":{"name":"edited_message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@edited_message"},"external_var":false},{"html_id":"edited_message=(edited_message:Hamilton::Types::Message|Nil)-instance-method","name":"edited_message=","doc":"New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.","summary":"<p>New version of a message that is known to the bot and was edited.</p>","abstract":false,"args":[{"name":"edited_message","external_name":"edited_message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(edited_message : Hamilton::Types::Message | Nil)","args_html":"(edited_message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":18,"url":null},"def":{"name":"edited_message=","args":[{"name":"edited_message","external_name":"edited_message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@edited_message = edited_message"},"external_var":false},{"html_id":"inline_query:Hamilton::Types::InlineQuery|Nil-instance-method","name":"inline_query","doc":"New incoming inline query.","summary":"<p>New incoming inline query.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":45,"url":null},"def":{"name":"inline_query","return_type":"Hamilton::Types::InlineQuery | Nil","visibility":"Public","body":"@inline_query"},"external_var":false},{"html_id":"inline_query=(inline_query:Hamilton::Types::InlineQuery|Nil)-instance-method","name":"inline_query=","doc":"New incoming inline query.","summary":"<p>New incoming inline query.</p>","abstract":false,"args":[{"name":"inline_query","external_name":"inline_query","restriction":"Hamilton::Types::InlineQuery | Nil"}],"args_string":"(inline_query : Hamilton::Types::InlineQuery | Nil)","args_html":"(inline_query : <a href=\"../../Hamilton/Types/InlineQuery.html\">Hamilton::Types::InlineQuery</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":45,"url":null},"def":{"name":"inline_query=","args":[{"name":"inline_query","external_name":"inline_query","restriction":"Hamilton::Types::InlineQuery | Nil"}],"visibility":"Public","body":"@inline_query = inline_query"},"external_var":false},{"html_id":"message:Hamilton::Types::Message|Nil-instance-method","name":"message","doc":"New incoming message of any kind - text, photo, sticker, etc.","summary":"<p>New incoming message of any kind - text, photo, sticker, etc.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":15,"url":null},"def":{"name":"message","return_type":"Hamilton::Types::Message | Nil","visibility":"Public","body":"@message"},"external_var":false},{"html_id":"message=(message:Hamilton::Types::Message|Nil)-instance-method","name":"message=","doc":"New incoming message of any kind - text, photo, sticker, etc.","summary":"<p>New incoming message of any kind - text, photo, sticker, etc.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Hamilton::Types::Message | Nil"}],"args_string":"(message : Hamilton::Types::Message | Nil)","args_html":"(message : <a href=\"../../Hamilton/Types/Message.html\">Hamilton::Types::Message</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":15,"url":null},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":"Hamilton::Types::Message | Nil"}],"visibility":"Public","body":"@message = message"},"external_var":false},{"html_id":"message_reaction:Hamilton::Types::MessageReactionUpdated|Nil-instance-method","name":"message_reaction","doc":"A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify \"message_reaction\" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots.","summary":"<p>A reaction to a message was changed by a user.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":39,"url":null},"def":{"name":"message_reaction","return_type":"Hamilton::Types::MessageReactionUpdated | Nil","visibility":"Public","body":"@message_reaction"},"external_var":false},{"html_id":"message_reaction=(message_reaction:Hamilton::Types::MessageReactionUpdated|Nil)-instance-method","name":"message_reaction=","doc":"A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify \"message_reaction\" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots.","summary":"<p>A reaction to a message was changed by a user.</p>","abstract":false,"args":[{"name":"message_reaction","external_name":"message_reaction","restriction":"Hamilton::Types::MessageReactionUpdated | Nil"}],"args_string":"(message_reaction : Hamilton::Types::MessageReactionUpdated | Nil)","args_html":"(message_reaction : <a href=\"../../Hamilton/Types/MessageReactionUpdated.html\">Hamilton::Types::MessageReactionUpdated</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":39,"url":null},"def":{"name":"message_reaction=","args":[{"name":"message_reaction","external_name":"message_reaction","restriction":"Hamilton::Types::MessageReactionUpdated | Nil"}],"visibility":"Public","body":"@message_reaction = message_reaction"},"external_var":false},{"html_id":"message_reaction_count:Hamilton::Types::MessageReactionCountUpdated|Nil-instance-method","name":"message_reaction_count","doc":"Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify \"message_reaction_count\" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes.","summary":"<p>Reactions to a message with anonymous reactions were changed.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":42,"url":null},"def":{"name":"message_reaction_count","return_type":"Hamilton::Types::MessageReactionCountUpdated | Nil","visibility":"Public","body":"@message_reaction_count"},"external_var":false},{"html_id":"message_reaction_count=(message_reaction_count:Hamilton::Types::MessageReactionCountUpdated|Nil)-instance-method","name":"message_reaction_count=","doc":"Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify \"message_reaction_count\" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes.","summary":"<p>Reactions to a message with anonymous reactions were changed.</p>","abstract":false,"args":[{"name":"message_reaction_count","external_name":"message_reaction_count","restriction":"Hamilton::Types::MessageReactionCountUpdated | Nil"}],"args_string":"(message_reaction_count : Hamilton::Types::MessageReactionCountUpdated | Nil)","args_html":"(message_reaction_count : <a href=\"../../Hamilton/Types/MessageReactionCountUpdated.html\">Hamilton::Types::MessageReactionCountUpdated</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":42,"url":null},"def":{"name":"message_reaction_count=","args":[{"name":"message_reaction_count","external_name":"message_reaction_count","restriction":"Hamilton::Types::MessageReactionCountUpdated | Nil"}],"visibility":"Public","body":"@message_reaction_count = message_reaction_count"},"external_var":false},{"html_id":"my_chat_member:Hamilton::Types::ChatMemberUpdated|Nil-instance-method","name":"my_chat_member","doc":"The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user.","summary":"<p>The bot's chat member status was updated in a chat.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":69,"url":null},"def":{"name":"my_chat_member","return_type":"Hamilton::Types::ChatMemberUpdated | Nil","visibility":"Public","body":"@my_chat_member"},"external_var":false},{"html_id":"my_chat_member=(my_chat_member:Hamilton::Types::ChatMemberUpdated|Nil)-instance-method","name":"my_chat_member=","doc":"The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user.","summary":"<p>The bot's chat member status was updated in a chat.</p>","abstract":false,"args":[{"name":"my_chat_member","external_name":"my_chat_member","restriction":"Hamilton::Types::ChatMemberUpdated | Nil"}],"args_string":"(my_chat_member : Hamilton::Types::ChatMemberUpdated | Nil)","args_html":"(my_chat_member : <a href=\"../../Hamilton/Types/ChatMemberUpdated.html\">Hamilton::Types::ChatMemberUpdated</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":69,"url":null},"def":{"name":"my_chat_member=","args":[{"name":"my_chat_member","external_name":"my_chat_member","restriction":"Hamilton::Types::ChatMemberUpdated | Nil"}],"visibility":"Public","body":"@my_chat_member = my_chat_member"},"external_var":false},{"html_id":"poll:Hamilton::Types::Poll|Nil-instance-method","name":"poll","doc":"New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot.","summary":"<p>New poll state.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":63,"url":null},"def":{"name":"poll","return_type":"Hamilton::Types::Poll | Nil","visibility":"Public","body":"@poll"},"external_var":false},{"html_id":"poll=(poll:Hamilton::Types::Poll|Nil)-instance-method","name":"poll=","doc":"New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot.","summary":"<p>New poll state.</p>","abstract":false,"args":[{"name":"poll","external_name":"poll","restriction":"Hamilton::Types::Poll | Nil"}],"args_string":"(poll : Hamilton::Types::Poll | Nil)","args_html":"(poll : <a href=\"../../Hamilton/Types/Poll.html\">Hamilton::Types::Poll</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":63,"url":null},"def":{"name":"poll=","args":[{"name":"poll","external_name":"poll","restriction":"Hamilton::Types::Poll | Nil"}],"visibility":"Public","body":"@poll = poll"},"external_var":false},{"html_id":"poll_answer:Hamilton::Types::PollAnswer|Nil-instance-method","name":"poll_answer","doc":"A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.","summary":"<p>A user changed their answer in a non-anonymous poll.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":66,"url":null},"def":{"name":"poll_answer","return_type":"Hamilton::Types::PollAnswer | Nil","visibility":"Public","body":"@poll_answer"},"external_var":false},{"html_id":"poll_answer=(poll_answer:Hamilton::Types::PollAnswer|Nil)-instance-method","name":"poll_answer=","doc":"A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.","summary":"<p>A user changed their answer in a non-anonymous poll.</p>","abstract":false,"args":[{"name":"poll_answer","external_name":"poll_answer","restriction":"Hamilton::Types::PollAnswer | Nil"}],"args_string":"(poll_answer : Hamilton::Types::PollAnswer | Nil)","args_html":"(poll_answer : <a href=\"../../Hamilton/Types/PollAnswer.html\">Hamilton::Types::PollAnswer</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":66,"url":null},"def":{"name":"poll_answer=","args":[{"name":"poll_answer","external_name":"poll_answer","restriction":"Hamilton::Types::PollAnswer | Nil"}],"visibility":"Public","body":"@poll_answer = poll_answer"},"external_var":false},{"html_id":"pre_checkout_query:Hamilton::Types::PreCheckoutQuery|Nil-instance-method","name":"pre_checkout_query","doc":"New incoming pre-checkout query. Contains full information about checkout.","summary":"<p>New incoming pre-checkout query.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":57,"url":null},"def":{"name":"pre_checkout_query","return_type":"Hamilton::Types::PreCheckoutQuery | Nil","visibility":"Public","body":"@pre_checkout_query"},"external_var":false},{"html_id":"pre_checkout_query=(pre_checkout_query:Hamilton::Types::PreCheckoutQuery|Nil)-instance-method","name":"pre_checkout_query=","doc":"New incoming pre-checkout query. Contains full information about checkout.","summary":"<p>New incoming pre-checkout query.</p>","abstract":false,"args":[{"name":"pre_checkout_query","external_name":"pre_checkout_query","restriction":"Hamilton::Types::PreCheckoutQuery | Nil"}],"args_string":"(pre_checkout_query : Hamilton::Types::PreCheckoutQuery | Nil)","args_html":"(pre_checkout_query : <a href=\"../../Hamilton/Types/PreCheckoutQuery.html\">Hamilton::Types::PreCheckoutQuery</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":57,"url":null},"def":{"name":"pre_checkout_query=","args":[{"name":"pre_checkout_query","external_name":"pre_checkout_query","restriction":"Hamilton::Types::PreCheckoutQuery | Nil"}],"visibility":"Public","body":"@pre_checkout_query = pre_checkout_query"},"external_var":false},{"html_id":"purchased_paid_media:Hamilton::Types::PaidMediaPurchased|Nil-instance-method","name":"purchased_paid_media","doc":"A user purchased paid media with a non-empty payload sent by the bot in a non-channel chat.","summary":"<p>A user purchased paid media with a non-empty payload sent by the bot in a non-channel chat.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":60,"url":null},"def":{"name":"purchased_paid_media","return_type":"Hamilton::Types::PaidMediaPurchased | Nil","visibility":"Public","body":"@purchased_paid_media"},"external_var":false},{"html_id":"purchased_paid_media=(purchased_paid_media:Hamilton::Types::PaidMediaPurchased|Nil)-instance-method","name":"purchased_paid_media=","doc":"A user purchased paid media with a non-empty payload sent by the bot in a non-channel chat.","summary":"<p>A user purchased paid media with a non-empty payload sent by the bot in a non-channel chat.</p>","abstract":false,"args":[{"name":"purchased_paid_media","external_name":"purchased_paid_media","restriction":"Hamilton::Types::PaidMediaPurchased | Nil"}],"args_string":"(purchased_paid_media : Hamilton::Types::PaidMediaPurchased | Nil)","args_html":"(purchased_paid_media : <a href=\"../../Hamilton/Types/PaidMediaPurchased.html\">Hamilton::Types::PaidMediaPurchased</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":60,"url":null},"def":{"name":"purchased_paid_media=","args":[{"name":"purchased_paid_media","external_name":"purchased_paid_media","restriction":"Hamilton::Types::PaidMediaPurchased | Nil"}],"visibility":"Public","body":"@purchased_paid_media = purchased_paid_media"},"external_var":false},{"html_id":"removed_chat_boost:Hamilton::Types::ChatBoostRemoved|Nil-instance-method","name":"removed_chat_boost","doc":"A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates.","summary":"<p>A boost was removed from a chat.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":81,"url":null},"def":{"name":"removed_chat_boost","return_type":"Hamilton::Types::ChatBoostRemoved | Nil","visibility":"Public","body":"@removed_chat_boost"},"external_var":false},{"html_id":"removed_chat_boost=(removed_chat_boost:Hamilton::Types::ChatBoostRemoved|Nil)-instance-method","name":"removed_chat_boost=","doc":"A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates.","summary":"<p>A boost was removed from a chat.</p>","abstract":false,"args":[{"name":"removed_chat_boost","external_name":"removed_chat_boost","restriction":"Hamilton::Types::ChatBoostRemoved | Nil"}],"args_string":"(removed_chat_boost : Hamilton::Types::ChatBoostRemoved | Nil)","args_html":"(removed_chat_boost : <a href=\"../../Hamilton/Types/ChatBoostRemoved.html\">Hamilton::Types::ChatBoostRemoved</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":81,"url":null},"def":{"name":"removed_chat_boost=","args":[{"name":"removed_chat_boost","external_name":"removed_chat_boost","restriction":"Hamilton::Types::ChatBoostRemoved | Nil"}],"visibility":"Public","body":"@removed_chat_boost = removed_chat_boost"},"external_var":false},{"html_id":"shipping_query:Hamilton::Types::ShippingQuery|Nil-instance-method","name":"shipping_query","doc":"New incoming shipping query. Only for invoices with flexible price.","summary":"<p>New incoming shipping query.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":54,"url":null},"def":{"name":"shipping_query","return_type":"Hamilton::Types::ShippingQuery | Nil","visibility":"Public","body":"@shipping_query"},"external_var":false},{"html_id":"shipping_query=(shipping_query:Hamilton::Types::ShippingQuery|Nil)-instance-method","name":"shipping_query=","doc":"New incoming shipping query. Only for invoices with flexible price.","summary":"<p>New incoming shipping query.</p>","abstract":false,"args":[{"name":"shipping_query","external_name":"shipping_query","restriction":"Hamilton::Types::ShippingQuery | Nil"}],"args_string":"(shipping_query : Hamilton::Types::ShippingQuery | Nil)","args_html":"(shipping_query : <a href=\"../../Hamilton/Types/ShippingQuery.html\">Hamilton::Types::ShippingQuery</a> | Nil)","location":{"filename":"src/types/update.cr","line_number":54,"url":null},"def":{"name":"shipping_query=","args":[{"name":"shipping_query","external_name":"shipping_query","restriction":"Hamilton::Types::ShippingQuery | Nil"}],"visibility":"Public","body":"@shipping_query = shipping_query"},"external_var":false},{"html_id":"update_id:Int32-instance-method","name":"update_id","doc":"The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially.","summary":"<p>The update's unique identifier.</p>","abstract":false,"location":{"filename":"src/types/update.cr","line_number":12,"url":null},"def":{"name":"update_id","return_type":"Int32","visibility":"Public","body":"@update_id"},"external_var":false},{"html_id":"update_id=(update_id:Int32)-instance-method","name":"update_id=","doc":"The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially.","summary":"<p>The update's unique identifier.</p>","abstract":false,"args":[{"name":"update_id","external_name":"update_id","restriction":"Int32"}],"args_string":"(update_id : Int32)","args_html":"(update_id : Int32)","location":{"filename":"src/types/update.cr","line_number":12,"url":null},"def":{"name":"update_id=","args":[{"name":"update_id","external_name":"update_id","restriction":"Int32"}],"visibility":"Public","body":"@update_id = update_id"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/User","path":"Hamilton/Types/User.html","kind":"class","full_name":"Hamilton::Types::User","name":"User","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/user.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a Telegram user or bot.","summary":"<p>This object represents a Telegram user or bot.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/user.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/user.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"added_to_attachment_menu:Bool|Nil-instance-method","name":"added_to_attachment_menu","doc":"True, if this user added the bot to the attachment menu","summary":"<p>True, if this user added the bot to the attachment menu</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":32,"url":null},"def":{"name":"added_to_attachment_menu","return_type":"Bool | Nil","visibility":"Public","body":"@added_to_attachment_menu"},"external_var":false},{"html_id":"added_to_attachment_menu=(added_to_attachment_menu:Bool|Nil)-instance-method","name":"added_to_attachment_menu=","doc":"True, if this user added the bot to the attachment menu","summary":"<p>True, if this user added the bot to the attachment menu</p>","abstract":false,"args":[{"name":"added_to_attachment_menu","external_name":"added_to_attachment_menu","restriction":"Bool | Nil"}],"args_string":"(added_to_attachment_menu : Bool | Nil)","args_html":"(added_to_attachment_menu : Bool | Nil)","location":{"filename":"src/types/user.cr","line_number":32,"url":null},"def":{"name":"added_to_attachment_menu=","args":[{"name":"added_to_attachment_menu","external_name":"added_to_attachment_menu","restriction":"Bool | Nil"}],"visibility":"Public","body":"@added_to_attachment_menu = added_to_attachment_menu"},"external_var":false},{"html_id":"can_connect_to_business:Bool|Nil-instance-method","name":"can_connect_to_business","doc":"True, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in getMe.","summary":"<p>True, if the bot can be connected to a Telegram Business account to receive its messages.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":44,"url":null},"def":{"name":"can_connect_to_business","return_type":"Bool | Nil","visibility":"Public","body":"@can_connect_to_business"},"external_var":false},{"html_id":"can_connect_to_business=(can_connect_to_business:Bool|Nil)-instance-method","name":"can_connect_to_business=","doc":"True, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in getMe.","summary":"<p>True, if the bot can be connected to a Telegram Business account to receive its messages.</p>","abstract":false,"args":[{"name":"can_connect_to_business","external_name":"can_connect_to_business","restriction":"Bool | Nil"}],"args_string":"(can_connect_to_business : Bool | Nil)","args_html":"(can_connect_to_business : Bool | Nil)","location":{"filename":"src/types/user.cr","line_number":44,"url":null},"def":{"name":"can_connect_to_business=","args":[{"name":"can_connect_to_business","external_name":"can_connect_to_business","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_connect_to_business = can_connect_to_business"},"external_var":false},{"html_id":"can_join_groups:Bool|Nil-instance-method","name":"can_join_groups","doc":"True, if the bot can be invited to groups. Returned only in getMe.","summary":"<p>True, if the bot can be invited to groups.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":35,"url":null},"def":{"name":"can_join_groups","return_type":"Bool | Nil","visibility":"Public","body":"@can_join_groups"},"external_var":false},{"html_id":"can_join_groups=(can_join_groups:Bool|Nil)-instance-method","name":"can_join_groups=","doc":"True, if the bot can be invited to groups. Returned only in getMe.","summary":"<p>True, if the bot can be invited to groups.</p>","abstract":false,"args":[{"name":"can_join_groups","external_name":"can_join_groups","restriction":"Bool | Nil"}],"args_string":"(can_join_groups : Bool | Nil)","args_html":"(can_join_groups : Bool | Nil)","location":{"filename":"src/types/user.cr","line_number":35,"url":null},"def":{"name":"can_join_groups=","args":[{"name":"can_join_groups","external_name":"can_join_groups","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_join_groups = can_join_groups"},"external_var":false},{"html_id":"can_read_all_group_messages:Bool|Nil-instance-method","name":"can_read_all_group_messages","doc":"True, if privacy mode is disabled for the bot. Returned only in getMe.","summary":"<p>True, if privacy mode is disabled for the bot.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":38,"url":null},"def":{"name":"can_read_all_group_messages","return_type":"Bool | Nil","visibility":"Public","body":"@can_read_all_group_messages"},"external_var":false},{"html_id":"can_read_all_group_messages=(can_read_all_group_messages:Bool|Nil)-instance-method","name":"can_read_all_group_messages=","doc":"True, if privacy mode is disabled for the bot. Returned only in getMe.","summary":"<p>True, if privacy mode is disabled for the bot.</p>","abstract":false,"args":[{"name":"can_read_all_group_messages","external_name":"can_read_all_group_messages","restriction":"Bool | Nil"}],"args_string":"(can_read_all_group_messages : Bool | Nil)","args_html":"(can_read_all_group_messages : Bool | Nil)","location":{"filename":"src/types/user.cr","line_number":38,"url":null},"def":{"name":"can_read_all_group_messages=","args":[{"name":"can_read_all_group_messages","external_name":"can_read_all_group_messages","restriction":"Bool | Nil"}],"visibility":"Public","body":"@can_read_all_group_messages = can_read_all_group_messages"},"external_var":false},{"html_id":"first_name:String-instance-method","name":"first_name","doc":"User's or bot's first name.","summary":"<p>User's or bot's first name.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":17,"url":null},"def":{"name":"first_name","return_type":"String","visibility":"Public","body":"@first_name"},"external_var":false},{"html_id":"first_name=(first_name:String)-instance-method","name":"first_name=","doc":"User's or bot's first name.","summary":"<p>User's or bot's first name.</p>","abstract":false,"args":[{"name":"first_name","external_name":"first_name","restriction":"String"}],"args_string":"(first_name : String)","args_html":"(first_name : String)","location":{"filename":"src/types/user.cr","line_number":17,"url":null},"def":{"name":"first_name=","args":[{"name":"first_name","external_name":"first_name","restriction":"String"}],"visibility":"Public","body":"@first_name = first_name"},"external_var":false},{"html_id":"has_main_web_app:Bool|Nil-instance-method","name":"has_main_web_app","doc":"True, if the bot has a main Web App. Returned only in getMe.","summary":"<p>True, if the bot has a main Web App.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":47,"url":null},"def":{"name":"has_main_web_app","return_type":"Bool | Nil","visibility":"Public","body":"@has_main_web_app"},"external_var":false},{"html_id":"has_main_web_app=(has_main_web_app:Bool|Nil)-instance-method","name":"has_main_web_app=","doc":"True, if the bot has a main Web App. Returned only in getMe.","summary":"<p>True, if the bot has a main Web App.</p>","abstract":false,"args":[{"name":"has_main_web_app","external_name":"has_main_web_app","restriction":"Bool | Nil"}],"args_string":"(has_main_web_app : Bool | Nil)","args_html":"(has_main_web_app : Bool | Nil)","location":{"filename":"src/types/user.cr","line_number":47,"url":null},"def":{"name":"has_main_web_app=","args":[{"name":"has_main_web_app","external_name":"has_main_web_app","restriction":"Bool | Nil"}],"visibility":"Public","body":"@has_main_web_app = has_main_web_app"},"external_var":false},{"html_id":"id:Int64-instance-method","name":"id","doc":"Unique identifier for this user or bot.","summary":"<p>Unique identifier for this user or bot.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"Int64","visibility":"Public","body":"@id"},"external_var":false},{"html_id":"id=(id:Int64)-instance-method","name":"id=","doc":"Unique identifier for this user or bot.","summary":"<p>Unique identifier for this user or bot.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int64"}],"args_string":"(id : Int64)","args_html":"(id : Int64)","location":{"filename":"src/types/user.cr","line_number":11,"url":null},"def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"Int64"}],"visibility":"Public","body":"@id = id"},"external_var":false},{"html_id":"is_bot:Bool-instance-method","name":"is_bot","doc":"True, if this user is a bot.","summary":"<p>True, if this user is a bot.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":14,"url":null},"def":{"name":"is_bot","return_type":"Bool","visibility":"Public","body":"@is_bot"},"external_var":false},{"html_id":"is_bot=(is_bot:Bool)-instance-method","name":"is_bot=","doc":"True, if this user is a bot.","summary":"<p>True, if this user is a bot.</p>","abstract":false,"args":[{"name":"is_bot","external_name":"is_bot","restriction":"Bool"}],"args_string":"(is_bot : Bool)","args_html":"(is_bot : Bool)","location":{"filename":"src/types/user.cr","line_number":14,"url":null},"def":{"name":"is_bot=","args":[{"name":"is_bot","external_name":"is_bot","restriction":"Bool"}],"visibility":"Public","body":"@is_bot = is_bot"},"external_var":false},{"html_id":"is_premium:Bool|Nil-instance-method","name":"is_premium","doc":"True, if this user is a Telegram Premium user.","summary":"<p>True, if this user is a Telegram Premium user.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":29,"url":null},"def":{"name":"is_premium","return_type":"Bool | Nil","visibility":"Public","body":"@is_premium"},"external_var":false},{"html_id":"is_premium=(is_premium:Bool|Nil)-instance-method","name":"is_premium=","doc":"True, if this user is a Telegram Premium user.","summary":"<p>True, if this user is a Telegram Premium user.</p>","abstract":false,"args":[{"name":"is_premium","external_name":"is_premium","restriction":"Bool | Nil"}],"args_string":"(is_premium : Bool | Nil)","args_html":"(is_premium : Bool | Nil)","location":{"filename":"src/types/user.cr","line_number":29,"url":null},"def":{"name":"is_premium=","args":[{"name":"is_premium","external_name":"is_premium","restriction":"Bool | Nil"}],"visibility":"Public","body":"@is_premium = is_premium"},"external_var":false},{"html_id":"language_code:String|Nil-instance-method","name":"language_code","doc":"IETF language tag of the user's language.","summary":"<p>IETF language tag of the user's language.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":26,"url":null},"def":{"name":"language_code","return_type":"String | Nil","visibility":"Public","body":"@language_code"},"external_var":false},{"html_id":"language_code=(language_code:String|Nil)-instance-method","name":"language_code=","doc":"IETF language tag of the user's language.","summary":"<p>IETF language tag of the user's language.</p>","abstract":false,"args":[{"name":"language_code","external_name":"language_code","restriction":"String | Nil"}],"args_string":"(language_code : String | Nil)","args_html":"(language_code : String | Nil)","location":{"filename":"src/types/user.cr","line_number":26,"url":null},"def":{"name":"language_code=","args":[{"name":"language_code","external_name":"language_code","restriction":"String | Nil"}],"visibility":"Public","body":"@language_code = language_code"},"external_var":false},{"html_id":"last_name:String|Nil-instance-method","name":"last_name","doc":"User's or bot's last name.","summary":"<p>User's or bot's last name.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":20,"url":null},"def":{"name":"last_name","return_type":"String | Nil","visibility":"Public","body":"@last_name"},"external_var":false},{"html_id":"last_name=(last_name:String|Nil)-instance-method","name":"last_name=","doc":"User's or bot's last name.","summary":"<p>User's or bot's last name.</p>","abstract":false,"args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"args_string":"(last_name : String | Nil)","args_html":"(last_name : String | Nil)","location":{"filename":"src/types/user.cr","line_number":20,"url":null},"def":{"name":"last_name=","args":[{"name":"last_name","external_name":"last_name","restriction":"String | Nil"}],"visibility":"Public","body":"@last_name = last_name"},"external_var":false},{"html_id":"supports_inline_queries:Bool|Nil-instance-method","name":"supports_inline_queries","doc":"True, if the bot supports inline queries. Returned only in getMe.","summary":"<p>True, if the bot supports inline queries.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":41,"url":null},"def":{"name":"supports_inline_queries","return_type":"Bool | Nil","visibility":"Public","body":"@supports_inline_queries"},"external_var":false},{"html_id":"supports_inline_queries=(supports_inline_queries:Bool|Nil)-instance-method","name":"supports_inline_queries=","doc":"True, if the bot supports inline queries. Returned only in getMe.","summary":"<p>True, if the bot supports inline queries.</p>","abstract":false,"args":[{"name":"supports_inline_queries","external_name":"supports_inline_queries","restriction":"Bool | Nil"}],"args_string":"(supports_inline_queries : Bool | Nil)","args_html":"(supports_inline_queries : Bool | Nil)","location":{"filename":"src/types/user.cr","line_number":41,"url":null},"def":{"name":"supports_inline_queries=","args":[{"name":"supports_inline_queries","external_name":"supports_inline_queries","restriction":"Bool | Nil"}],"visibility":"Public","body":"@supports_inline_queries = supports_inline_queries"},"external_var":false},{"html_id":"username:String|Nil-instance-method","name":"username","doc":"User's or bot's username.","summary":"<p>User's or bot's username.</p>","abstract":false,"location":{"filename":"src/types/user.cr","line_number":23,"url":null},"def":{"name":"username","return_type":"String | Nil","visibility":"Public","body":"@username"},"external_var":false},{"html_id":"username=(username:String|Nil)-instance-method","name":"username=","doc":"User's or bot's username.","summary":"<p>User's or bot's username.</p>","abstract":false,"args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"args_string":"(username : String | Nil)","args_html":"(username : String | Nil)","location":{"filename":"src/types/user.cr","line_number":23,"url":null},"def":{"name":"username=","args":[{"name":"username","external_name":"username","restriction":"String | Nil"}],"visibility":"Public","body":"@username = username"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/UserChatBoosts","path":"Hamilton/Types/UserChatBoosts.html","kind":"class","full_name":"Hamilton::Types::UserChatBoosts","name":"UserChatBoosts","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/user_chat_boosts.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a list of boosts added to a chat by a user.","summary":"<p>This object represents a list of boosts added to a chat by a user.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/user_chat_boosts.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/user_chat_boosts.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"boosts:Array(Hamilton::Types::ChatBoost)-instance-method","name":"boosts","doc":"The list of boosts added to the chat by the user.","summary":"<p>The list of boosts added to the chat by the user.</p>","abstract":false,"location":{"filename":"src/types/user_chat_boosts.cr","line_number":11,"url":null},"def":{"name":"boosts","return_type":"Array(Hamilton::Types::ChatBoost)","visibility":"Public","body":"@boosts"},"external_var":false},{"html_id":"boosts=(boosts:Array(Hamilton::Types::ChatBoost))-instance-method","name":"boosts=","doc":"The list of boosts added to the chat by the user.","summary":"<p>The list of boosts added to the chat by the user.</p>","abstract":false,"args":[{"name":"boosts","external_name":"boosts","restriction":"Array(Hamilton::Types::ChatBoost)"}],"args_string":"(boosts : Array(Hamilton::Types::ChatBoost))","args_html":"(boosts : Array(<a href=\"../../Hamilton/Types/ChatBoost.html\">Hamilton::Types::ChatBoost</a>))","location":{"filename":"src/types/user_chat_boosts.cr","line_number":11,"url":null},"def":{"name":"boosts=","args":[{"name":"boosts","external_name":"boosts","restriction":"Array(Hamilton::Types::ChatBoost)"}],"visibility":"Public","body":"@boosts = boosts"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/UserProfilePhotos","path":"Hamilton/Types/UserProfilePhotos.html","kind":"class","full_name":"Hamilton::Types::UserProfilePhotos","name":"UserProfilePhotos","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/user_profile_photos.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represent a user's profile pictures.","summary":"<p>This object represent a user's profile pictures.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/user_profile_photos.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/user_profile_photos.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"photos:Array(Array(Hamilton::Types::PhotoSize))-instance-method","name":"photos","doc":"Requested profile pictures (in up to 4 sizes each).","summary":"<p>Requested profile pictures (in up to 4 sizes each).</p>","abstract":false,"location":{"filename":"src/types/user_profile_photos.cr","line_number":14,"url":null},"def":{"name":"photos","return_type":"Array(Array(Hamilton::Types::PhotoSize))","visibility":"Public","body":"@photos"},"external_var":false},{"html_id":"photos=(photos:Array(Array(Hamilton::Types::PhotoSize)))-instance-method","name":"photos=","doc":"Requested profile pictures (in up to 4 sizes each).","summary":"<p>Requested profile pictures (in up to 4 sizes each).</p>","abstract":false,"args":[{"name":"photos","external_name":"photos","restriction":"Array(Array(Hamilton::Types::PhotoSize))"}],"args_string":"(photos : Array(Array(Hamilton::Types::PhotoSize)))","args_html":"(photos : Array(Array(<a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a>)))","location":{"filename":"src/types/user_profile_photos.cr","line_number":14,"url":null},"def":{"name":"photos=","args":[{"name":"photos","external_name":"photos","restriction":"Array(Array(Hamilton::Types::PhotoSize))"}],"visibility":"Public","body":"@photos = photos"},"external_var":false},{"html_id":"total_count:Int32-instance-method","name":"total_count","doc":"Total number of profile pictures the target user has.","summary":"<p>Total number of profile pictures the target user has.</p>","abstract":false,"location":{"filename":"src/types/user_profile_photos.cr","line_number":11,"url":null},"def":{"name":"total_count","return_type":"Int32","visibility":"Public","body":"@total_count"},"external_var":false},{"html_id":"total_count=(total_count:Int32)-instance-method","name":"total_count=","doc":"Total number of profile pictures the target user has.","summary":"<p>Total number of profile pictures the target user has.</p>","abstract":false,"args":[{"name":"total_count","external_name":"total_count","restriction":"Int32"}],"args_string":"(total_count : Int32)","args_html":"(total_count : Int32)","location":{"filename":"src/types/user_profile_photos.cr","line_number":11,"url":null},"def":{"name":"total_count=","args":[{"name":"total_count","external_name":"total_count","restriction":"Int32"}],"visibility":"Public","body":"@total_count = total_count"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/UsersShared","path":"Hamilton/Types/UsersShared.html","kind":"class","full_name":"Hamilton::Types::UsersShared","name":"UsersShared","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/users_shared.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object contains information about the users whose identifiers were shared with the bot using a KeyboardButtonRequestUsers button.","summary":"<p>This object contains information about the users whose identifiers were shared with the bot using a KeyboardButtonRequestUsers button.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/users_shared.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/users_shared.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"request_id:Int32-instance-method","name":"request_id","doc":"Identifier of the request.","summary":"<p>Identifier of the request.</p>","abstract":false,"location":{"filename":"src/types/users_shared.cr","line_number":11,"url":null},"def":{"name":"request_id","return_type":"Int32","visibility":"Public","body":"@request_id"},"external_var":false},{"html_id":"request_id=(request_id:Int32)-instance-method","name":"request_id=","doc":"Identifier of the request.","summary":"<p>Identifier of the request.</p>","abstract":false,"args":[{"name":"request_id","external_name":"request_id","restriction":"Int32"}],"args_string":"(request_id : Int32)","args_html":"(request_id : Int32)","location":{"filename":"src/types/users_shared.cr","line_number":11,"url":null},"def":{"name":"request_id=","args":[{"name":"request_id","external_name":"request_id","restriction":"Int32"}],"visibility":"Public","body":"@request_id = request_id"},"external_var":false},{"html_id":"users:Array(Hamilton::Types::SharedUser)-instance-method","name":"users","doc":"Information about users shared with the bot.","summary":"<p>Information about users shared with the bot.</p>","abstract":false,"location":{"filename":"src/types/users_shared.cr","line_number":14,"url":null},"def":{"name":"users","return_type":"Array(Hamilton::Types::SharedUser)","visibility":"Public","body":"@users"},"external_var":false},{"html_id":"users=(users:Array(Hamilton::Types::SharedUser))-instance-method","name":"users=","doc":"Information about users shared with the bot.","summary":"<p>Information about users shared with the bot.</p>","abstract":false,"args":[{"name":"users","external_name":"users","restriction":"Array(Hamilton::Types::SharedUser)"}],"args_string":"(users : Array(Hamilton::Types::SharedUser))","args_html":"(users : Array(<a href=\"../../Hamilton/Types/SharedUser.html\">Hamilton::Types::SharedUser</a>))","location":{"filename":"src/types/users_shared.cr","line_number":14,"url":null},"def":{"name":"users=","args":[{"name":"users","external_name":"users","restriction":"Array(Hamilton::Types::SharedUser)"}],"visibility":"Public","body":"@users = users"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Venue","path":"Hamilton/Types/Venue.html","kind":"class","full_name":"Hamilton::Types::Venue","name":"Venue","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/venue.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a venue.","summary":"<p>This object represents a venue.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/venue.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/venue.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"address:String-instance-method","name":"address","doc":"Address of the venue.","summary":"<p>Address of the venue.</p>","abstract":false,"location":{"filename":"src/types/venue.cr","line_number":17,"url":null},"def":{"name":"address","return_type":"String","visibility":"Public","body":"@address"},"external_var":false},{"html_id":"address=(address:String)-instance-method","name":"address=","doc":"Address of the venue.","summary":"<p>Address of the venue.</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"String"}],"args_string":"(address : String)","args_html":"(address : String)","location":{"filename":"src/types/venue.cr","line_number":17,"url":null},"def":{"name":"address=","args":[{"name":"address","external_name":"address","restriction":"String"}],"visibility":"Public","body":"@address = address"},"external_var":false},{"html_id":"foursquare_id:String|Nil-instance-method","name":"foursquare_id","doc":"Foursquare identifier of the venue.","summary":"<p>Foursquare identifier of the venue.</p>","abstract":false,"location":{"filename":"src/types/venue.cr","line_number":20,"url":null},"def":{"name":"foursquare_id","return_type":"String | Nil","visibility":"Public","body":"@foursquare_id"},"external_var":false},{"html_id":"foursquare_id=(foursquare_id:String|Nil)-instance-method","name":"foursquare_id=","doc":"Foursquare identifier of the venue.","summary":"<p>Foursquare identifier of the venue.</p>","abstract":false,"args":[{"name":"foursquare_id","external_name":"foursquare_id","restriction":"String | Nil"}],"args_string":"(foursquare_id : String | Nil)","args_html":"(foursquare_id : String | Nil)","location":{"filename":"src/types/venue.cr","line_number":20,"url":null},"def":{"name":"foursquare_id=","args":[{"name":"foursquare_id","external_name":"foursquare_id","restriction":"String | Nil"}],"visibility":"Public","body":"@foursquare_id = foursquare_id"},"external_var":false},{"html_id":"foursquare_type:String|Nil-instance-method","name":"foursquare_type","doc":"Foursquare type of the venue. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.).","summary":"<p>Foursquare type of the venue.</p>","abstract":false,"location":{"filename":"src/types/venue.cr","line_number":23,"url":null},"def":{"name":"foursquare_type","return_type":"String | Nil","visibility":"Public","body":"@foursquare_type"},"external_var":false},{"html_id":"foursquare_type=(foursquare_type:String|Nil)-instance-method","name":"foursquare_type=","doc":"Foursquare type of the venue. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.).","summary":"<p>Foursquare type of the venue.</p>","abstract":false,"args":[{"name":"foursquare_type","external_name":"foursquare_type","restriction":"String | Nil"}],"args_string":"(foursquare_type : String | Nil)","args_html":"(foursquare_type : String | Nil)","location":{"filename":"src/types/venue.cr","line_number":23,"url":null},"def":{"name":"foursquare_type=","args":[{"name":"foursquare_type","external_name":"foursquare_type","restriction":"String | Nil"}],"visibility":"Public","body":"@foursquare_type = foursquare_type"},"external_var":false},{"html_id":"google_place_id:String|Nil-instance-method","name":"google_place_id","doc":"Google Places identifier of the venue.","summary":"<p>Google Places identifier of the venue.</p>","abstract":false,"location":{"filename":"src/types/venue.cr","line_number":26,"url":null},"def":{"name":"google_place_id","return_type":"String | Nil","visibility":"Public","body":"@google_place_id"},"external_var":false},{"html_id":"google_place_id=(google_place_id:String|Nil)-instance-method","name":"google_place_id=","doc":"Google Places identifier of the venue.","summary":"<p>Google Places identifier of the venue.</p>","abstract":false,"args":[{"name":"google_place_id","external_name":"google_place_id","restriction":"String | Nil"}],"args_string":"(google_place_id : String | Nil)","args_html":"(google_place_id : String | Nil)","location":{"filename":"src/types/venue.cr","line_number":26,"url":null},"def":{"name":"google_place_id=","args":[{"name":"google_place_id","external_name":"google_place_id","restriction":"String | Nil"}],"visibility":"Public","body":"@google_place_id = google_place_id"},"external_var":false},{"html_id":"google_place_type:String|Nil-instance-method","name":"google_place_type","doc":"Google Places type of the venue.","summary":"<p>Google Places type of the venue.</p>","abstract":false,"location":{"filename":"src/types/venue.cr","line_number":29,"url":null},"def":{"name":"google_place_type","return_type":"String | Nil","visibility":"Public","body":"@google_place_type"},"external_var":false},{"html_id":"google_place_type=(google_place_type:String|Nil)-instance-method","name":"google_place_type=","doc":"Google Places type of the venue.","summary":"<p>Google Places type of the venue.</p>","abstract":false,"args":[{"name":"google_place_type","external_name":"google_place_type","restriction":"String | Nil"}],"args_string":"(google_place_type : String | Nil)","args_html":"(google_place_type : String | Nil)","location":{"filename":"src/types/venue.cr","line_number":29,"url":null},"def":{"name":"google_place_type=","args":[{"name":"google_place_type","external_name":"google_place_type","restriction":"String | Nil"}],"visibility":"Public","body":"@google_place_type = google_place_type"},"external_var":false},{"html_id":"location:Hamilton::Types::Location-instance-method","name":"location","doc":"Venue location. Can't be a live location.","summary":"<p>Venue location.</p>","abstract":false,"location":{"filename":"src/types/venue.cr","line_number":11,"url":null},"def":{"name":"location","return_type":"Hamilton::Types::Location","visibility":"Public","body":"@location"},"external_var":false},{"html_id":"location=(location:Hamilton::Types::Location)-instance-method","name":"location=","doc":"Venue location. Can't be a live location.","summary":"<p>Venue location.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location"}],"args_string":"(location : Hamilton::Types::Location)","args_html":"(location : <a href=\"../../Hamilton/Types/Location.html\">Hamilton::Types::Location</a>)","location":{"filename":"src/types/venue.cr","line_number":11,"url":null},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"Hamilton::Types::Location"}],"visibility":"Public","body":"@location = location"},"external_var":false},{"html_id":"title:String-instance-method","name":"title","doc":"Name of the venue.","summary":"<p>Name of the venue.</p>","abstract":false,"location":{"filename":"src/types/venue.cr","line_number":14,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"},"external_var":false},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":"Name of the venue.","summary":"<p>Name of the venue.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/types/venue.cr","line_number":14,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Video","path":"Hamilton/Types/Video.html","kind":"class","full_name":"Hamilton::Types::Video","name":"Video","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/video.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a video file.","summary":"<p>This object represents a video file.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/video.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/video.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"cover:Array(Hamilton::Types::PhotoSize)|Nil-instance-method","name":"cover","doc":"Available sizes of the cover of the video in the message.","summary":"<p>Available sizes of the cover of the video in the message.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":29,"url":null},"def":{"name":"cover","return_type":"Array(Hamilton::Types::PhotoSize) | Nil","visibility":"Public","body":"@cover"},"external_var":false},{"html_id":"cover=(cover:Array(Hamilton::Types::PhotoSize)|Nil)-instance-method","name":"cover=","doc":"Available sizes of the cover of the video in the message.","summary":"<p>Available sizes of the cover of the video in the message.</p>","abstract":false,"args":[{"name":"cover","external_name":"cover","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"args_string":"(cover : Array(Hamilton::Types::PhotoSize) | Nil)","args_html":"(cover : Array(<a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a>) | Nil)","location":{"filename":"src/types/video.cr","line_number":29,"url":null},"def":{"name":"cover=","args":[{"name":"cover","external_name":"cover","restriction":"Array(Hamilton::Types::PhotoSize) | Nil"}],"visibility":"Public","body":"@cover = cover"},"external_var":false},{"html_id":"duration:Int32-instance-method","name":"duration","doc":"Duration of the video in seconds as defined by the sender.","summary":"<p>Duration of the video in seconds as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":23,"url":null},"def":{"name":"duration","return_type":"Int32","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32)-instance-method","name":"duration=","doc":"Duration of the video in seconds as defined by the sender.","summary":"<p>Duration of the video in seconds as defined by the sender.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"args_string":"(duration : Int32)","args_html":"(duration : Int32)","location":{"filename":"src/types/video.cr","line_number":23,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":11,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/video.cr","line_number":11,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_name:String|Nil-instance-method","name":"file_name","doc":"Original filename as defined by the sender.","summary":"<p>Original filename as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":35,"url":null},"def":{"name":"file_name","return_type":"String | Nil","visibility":"Public","body":"@file_name"},"external_var":false},{"html_id":"file_name=(file_name:String|Nil)-instance-method","name":"file_name=","doc":"Original filename as defined by the sender.","summary":"<p>Original filename as defined by the sender.</p>","abstract":false,"args":[{"name":"file_name","external_name":"file_name","restriction":"String | Nil"}],"args_string":"(file_name : String | Nil)","args_html":"(file_name : String | Nil)","location":{"filename":"src/types/video.cr","line_number":35,"url":null},"def":{"name":"file_name=","args":[{"name":"file_name","external_name":"file_name","restriction":"String | Nil"}],"visibility":"Public","body":"@file_name = file_name"},"external_var":false},{"html_id":"file_size:Int64|Nil-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":41,"url":null},"def":{"name":"file_size","return_type":"Int64 | Nil","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int64|Nil)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"args_string":"(file_size : Int64 | Nil)","args_html":"(file_size : Int64 | Nil)","location":{"filename":"src/types/video.cr","line_number":41,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":14,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/video.cr","line_number":14,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false},{"html_id":"height:Int32-instance-method","name":"height","doc":"Video height as defined by the sender.","summary":"<p>Video height as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":20,"url":null},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int32)-instance-method","name":"height=","doc":"Video height as defined by the sender.","summary":"<p>Video height as defined by the sender.</p>","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(height : Int32)","args_html":"(height : Int32)","location":{"filename":"src/types/video.cr","line_number":20,"url":null},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"mime_type:String|Nil-instance-method","name":"mime_type","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":38,"url":null},"def":{"name":"mime_type","return_type":"String | Nil","visibility":"Public","body":"@mime_type"},"external_var":false},{"html_id":"mime_type=(mime_type:String|Nil)-instance-method","name":"mime_type=","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"args_string":"(mime_type : String | Nil)","args_html":"(mime_type : String | Nil)","location":{"filename":"src/types/video.cr","line_number":38,"url":null},"def":{"name":"mime_type=","args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"visibility":"Public","body":"@mime_type = mime_type"},"external_var":false},{"html_id":"start_timestamp:Int32|Nil-instance-method","name":"start_timestamp","doc":"Timestamp in seconds from which the video will play in the message.","summary":"<p>Timestamp in seconds from which the video will play in the message.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":32,"url":null},"def":{"name":"start_timestamp","return_type":"Int32 | Nil","visibility":"Public","body":"@start_timestamp"},"external_var":false},{"html_id":"start_timestamp=(start_timestamp:Int32|Nil)-instance-method","name":"start_timestamp=","doc":"Timestamp in seconds from which the video will play in the message.","summary":"<p>Timestamp in seconds from which the video will play in the message.</p>","abstract":false,"args":[{"name":"start_timestamp","external_name":"start_timestamp","restriction":"Int32 | Nil"}],"args_string":"(start_timestamp : Int32 | Nil)","args_html":"(start_timestamp : Int32 | Nil)","location":{"filename":"src/types/video.cr","line_number":32,"url":null},"def":{"name":"start_timestamp=","args":[{"name":"start_timestamp","external_name":"start_timestamp","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@start_timestamp = start_timestamp"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::PhotoSize|Nil-instance-method","name":"thumbnail","doc":"Video thumbnail.","summary":"<p>Video thumbnail.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":26,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::PhotoSize | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::PhotoSize|Nil)-instance-method","name":"thumbnail=","doc":"Video thumbnail.","summary":"<p>Video thumbnail.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"args_string":"(thumbnail : Hamilton::Types::PhotoSize | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a> | Nil)","location":{"filename":"src/types/video.cr","line_number":26,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false},{"html_id":"width:Int32-instance-method","name":"width","doc":"Video width as defined by the sender.","summary":"<p>Video width as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/video.cr","line_number":17,"url":null},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int32)-instance-method","name":"width=","doc":"Video width as defined by the sender.","summary":"<p>Video width as defined by the sender.</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/types/video.cr","line_number":17,"url":null},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@width = width"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/VideoChatEnded","path":"Hamilton/Types/VideoChatEnded.html","kind":"class","full_name":"Hamilton::Types::VideoChatEnded","name":"VideoChatEnded","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/video_chat_ended.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about a video chat ended in the chat.","summary":"<p>This object represents a service message about a video chat ended in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/video_chat_ended.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/video_chat_ended.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"duration:Int32-instance-method","name":"duration","doc":"Video chat duration in seconds.","summary":"<p>Video chat duration in seconds.</p>","abstract":false,"location":{"filename":"src/types/video_chat_ended.cr","line_number":11,"url":null},"def":{"name":"duration","return_type":"Int32","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32)-instance-method","name":"duration=","doc":"Video chat duration in seconds.","summary":"<p>Video chat duration in seconds.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"args_string":"(duration : Int32)","args_html":"(duration : Int32)","location":{"filename":"src/types/video_chat_ended.cr","line_number":11,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"visibility":"Public","body":"@duration = duration"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/VideoChatParticipantsInvited","path":"Hamilton/Types/VideoChatParticipantsInvited.html","kind":"class","full_name":"Hamilton::Types::VideoChatParticipantsInvited","name":"VideoChatParticipantsInvited","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/video_chat_participants_invited.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about new members invited to a video chat.","summary":"<p>This object represents a service message about new members invited to a video chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/video_chat_participants_invited.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/video_chat_participants_invited.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"users:Array(Hamilton::Types::User)-instance-method","name":"users","doc":"New members that were invited to the video chat.","summary":"<p>New members that were invited to the video chat.</p>","abstract":false,"location":{"filename":"src/types/video_chat_participants_invited.cr","line_number":11,"url":null},"def":{"name":"users","return_type":"Array(Hamilton::Types::User)","visibility":"Public","body":"@users"},"external_var":false},{"html_id":"users=(users:Array(Hamilton::Types::User))-instance-method","name":"users=","doc":"New members that were invited to the video chat.","summary":"<p>New members that were invited to the video chat.</p>","abstract":false,"args":[{"name":"users","external_name":"users","restriction":"Array(Hamilton::Types::User)"}],"args_string":"(users : Array(Hamilton::Types::User))","args_html":"(users : Array(<a href=\"../../Hamilton/Types/User.html\">Hamilton::Types::User</a>))","location":{"filename":"src/types/video_chat_participants_invited.cr","line_number":11,"url":null},"def":{"name":"users=","args":[{"name":"users","external_name":"users","restriction":"Array(Hamilton::Types::User)"}],"visibility":"Public","body":"@users = users"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/VideoChatScheduled","path":"Hamilton/Types/VideoChatScheduled.html","kind":"class","full_name":"Hamilton::Types::VideoChatScheduled","name":"VideoChatScheduled","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/video_chat_scheduled.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about a video chat scheduled in the chat.","summary":"<p>This object represents a service message about a video chat scheduled in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/video_chat_scheduled.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/video_chat_scheduled.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"start_date:Int32-instance-method","name":"start_date","doc":"Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator.","summary":"<p>Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator.</p>","abstract":false,"location":{"filename":"src/types/video_chat_scheduled.cr","line_number":11,"url":null},"def":{"name":"start_date","return_type":"Int32","visibility":"Public","body":"@start_date"},"external_var":false},{"html_id":"start_date=(start_date:Int32)-instance-method","name":"start_date=","doc":"Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator.","summary":"<p>Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator.</p>","abstract":false,"args":[{"name":"start_date","external_name":"start_date","restriction":"Int32"}],"args_string":"(start_date : Int32)","args_html":"(start_date : Int32)","location":{"filename":"src/types/video_chat_scheduled.cr","line_number":11,"url":null},"def":{"name":"start_date=","args":[{"name":"start_date","external_name":"start_date","restriction":"Int32"}],"visibility":"Public","body":"@start_date = start_date"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/VideoChatStarted","path":"Hamilton/Types/VideoChatStarted.html","kind":"class","full_name":"Hamilton::Types::VideoChatStarted","name":"VideoChatStarted","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/video_chat_started.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about a video chat started in the chat. Currently holds no information.","summary":"<p>This object represents a service message about a video chat started in the chat.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/video_chat_started.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/video_chat_started.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/VideoNote","path":"Hamilton/Types/VideoNote.html","kind":"class","full_name":"Hamilton::Types::VideoNote","name":"VideoNote","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/video_note.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a video message.","summary":"<p>This object represents a video message.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/video_note.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/video_note.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"duration:Int32-instance-method","name":"duration","doc":"Duration of the video in seconds as defined by the sender.","summary":"<p>Duration of the video in seconds as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/video_note.cr","line_number":20,"url":null},"def":{"name":"duration","return_type":"Int32","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32)-instance-method","name":"duration=","doc":"Duration of the video in seconds as defined by the sender.","summary":"<p>Duration of the video in seconds as defined by the sender.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"args_string":"(duration : Int32)","args_html":"(duration : Int32)","location":{"filename":"src/types/video_note.cr","line_number":20,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/video_note.cr","line_number":11,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/video_note.cr","line_number":11,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_size:Int64|Nil-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/video_note.cr","line_number":26,"url":null},"def":{"name":"file_size","return_type":"Int64 | Nil","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int64|Nil)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"args_string":"(file_size : Int64 | Nil)","args_html":"(file_size : Int64 | Nil)","location":{"filename":"src/types/video_note.cr","line_number":26,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/video_note.cr","line_number":14,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/video_note.cr","line_number":14,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false},{"html_id":"length:Int32-instance-method","name":"length","doc":"Video width and height (diameter of the video message) as defined by the sender.","summary":"<p>Video width and height (diameter of the video message) as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/video_note.cr","line_number":17,"url":null},"def":{"name":"length","return_type":"Int32","visibility":"Public","body":"@length"},"external_var":false},{"html_id":"length=(length:Int32)-instance-method","name":"length=","doc":"Video width and height (diameter of the video message) as defined by the sender.","summary":"<p>Video width and height (diameter of the video message) as defined by the sender.</p>","abstract":false,"args":[{"name":"length","external_name":"length","restriction":"Int32"}],"args_string":"(length : Int32)","args_html":"(length : Int32)","location":{"filename":"src/types/video_note.cr","line_number":17,"url":null},"def":{"name":"length=","args":[{"name":"length","external_name":"length","restriction":"Int32"}],"visibility":"Public","body":"@length = length"},"external_var":false},{"html_id":"thumbnail:Hamilton::Types::PhotoSize|Nil-instance-method","name":"thumbnail","doc":"Video thumbnail.","summary":"<p>Video thumbnail.</p>","abstract":false,"location":{"filename":"src/types/video_note.cr","line_number":23,"url":null},"def":{"name":"thumbnail","return_type":"Hamilton::Types::PhotoSize | Nil","visibility":"Public","body":"@thumbnail"},"external_var":false},{"html_id":"thumbnail=(thumbnail:Hamilton::Types::PhotoSize|Nil)-instance-method","name":"thumbnail=","doc":"Video thumbnail.","summary":"<p>Video thumbnail.</p>","abstract":false,"args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"args_string":"(thumbnail : Hamilton::Types::PhotoSize | Nil)","args_html":"(thumbnail : <a href=\"../../Hamilton/Types/PhotoSize.html\">Hamilton::Types::PhotoSize</a> | Nil)","location":{"filename":"src/types/video_note.cr","line_number":23,"url":null},"def":{"name":"thumbnail=","args":[{"name":"thumbnail","external_name":"thumbnail","restriction":"Hamilton::Types::PhotoSize | Nil"}],"visibility":"Public","body":"@thumbnail = thumbnail"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/Voice","path":"Hamilton/Types/Voice.html","kind":"class","full_name":"Hamilton::Types::Voice","name":"Voice","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/voice.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a voice note.","summary":"<p>This object represents a voice note.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/voice.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/voice.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"duration:Int32-instance-method","name":"duration","doc":"Duration of the audio in seconds as defined by the sender.","summary":"<p>Duration of the audio in seconds as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/voice.cr","line_number":17,"url":null},"def":{"name":"duration","return_type":"Int32","visibility":"Public","body":"@duration"},"external_var":false},{"html_id":"duration=(duration:Int32)-instance-method","name":"duration=","doc":"Duration of the audio in seconds as defined by the sender.","summary":"<p>Duration of the audio in seconds as defined by the sender.</p>","abstract":false,"args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"args_string":"(duration : Int32)","args_html":"(duration : Int32)","location":{"filename":"src/types/voice.cr","line_number":17,"url":null},"def":{"name":"duration=","args":[{"name":"duration","external_name":"duration","restriction":"Int32"}],"visibility":"Public","body":"@duration = duration"},"external_var":false},{"html_id":"file_id:String-instance-method","name":"file_id","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"location":{"filename":"src/types/voice.cr","line_number":11,"url":null},"def":{"name":"file_id","return_type":"String","visibility":"Public","body":"@file_id"},"external_var":false},{"html_id":"file_id=(file_id:String)-instance-method","name":"file_id=","doc":"Identifier for this file, which can be used to download or reuse the file.","summary":"<p>Identifier for this file, which can be used to download or reuse the file.</p>","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"args_string":"(file_id : String)","args_html":"(file_id : String)","location":{"filename":"src/types/voice.cr","line_number":11,"url":null},"def":{"name":"file_id=","args":[{"name":"file_id","external_name":"file_id","restriction":"String"}],"visibility":"Public","body":"@file_id = file_id"},"external_var":false},{"html_id":"file_size:Int64|Nil-instance-method","name":"file_size","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"location":{"filename":"src/types/voice.cr","line_number":23,"url":null},"def":{"name":"file_size","return_type":"Int64 | Nil","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:Int64|Nil)-instance-method","name":"file_size=","doc":"File size in bytes.","summary":"<p>File size in bytes.</p>","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"args_string":"(file_size : Int64 | Nil)","args_html":"(file_size : Int64 | Nil)","location":{"filename":"src/types/voice.cr","line_number":23,"url":null},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"Int64 | Nil"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"file_unique_id:String-instance-method","name":"file_unique_id","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"location":{"filename":"src/types/voice.cr","line_number":14,"url":null},"def":{"name":"file_unique_id","return_type":"String","visibility":"Public","body":"@file_unique_id"},"external_var":false},{"html_id":"file_unique_id=(file_unique_id:String)-instance-method","name":"file_unique_id=","doc":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.","summary":"<p>Unique identifier for this file, which is supposed to be the same over time and for different bots.</p>","abstract":false,"args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"args_string":"(file_unique_id : String)","args_html":"(file_unique_id : String)","location":{"filename":"src/types/voice.cr","line_number":14,"url":null},"def":{"name":"file_unique_id=","args":[{"name":"file_unique_id","external_name":"file_unique_id","restriction":"String"}],"visibility":"Public","body":"@file_unique_id = file_unique_id"},"external_var":false},{"html_id":"mime_type:String|Nil-instance-method","name":"mime_type","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"location":{"filename":"src/types/voice.cr","line_number":20,"url":null},"def":{"name":"mime_type","return_type":"String | Nil","visibility":"Public","body":"@mime_type"},"external_var":false},{"html_id":"mime_type=(mime_type:String|Nil)-instance-method","name":"mime_type=","doc":"MIME type of the file as defined by the sender.","summary":"<p>MIME type of the file as defined by the sender.</p>","abstract":false,"args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"args_string":"(mime_type : String | Nil)","args_html":"(mime_type : String | Nil)","location":{"filename":"src/types/voice.cr","line_number":20,"url":null},"def":{"name":"mime_type=","args":[{"name":"mime_type","external_name":"mime_type","restriction":"String | Nil"}],"visibility":"Public","body":"@mime_type = mime_type"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/WebAppData","path":"Hamilton/Types/WebAppData.html","kind":"class","full_name":"Hamilton::Types::WebAppData","name":"WebAppData","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/web_app_data.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes data sent from a Web App to the bot.","summary":"<p>Describes data sent from a Web App to the bot.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/web_app_data.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/web_app_data.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"button_text:String-instance-method","name":"button_text","doc":"Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field.","summary":"<p>Text of the web_app keyboard button from which the Web App was opened.</p>","abstract":false,"location":{"filename":"src/types/web_app_data.cr","line_number":14,"url":null},"def":{"name":"button_text","return_type":"String","visibility":"Public","body":"@button_text"},"external_var":false},{"html_id":"button_text=(button_text:String)-instance-method","name":"button_text=","doc":"Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field.","summary":"<p>Text of the web_app keyboard button from which the Web App was opened.</p>","abstract":false,"args":[{"name":"button_text","external_name":"button_text","restriction":"String"}],"args_string":"(button_text : String)","args_html":"(button_text : String)","location":{"filename":"src/types/web_app_data.cr","line_number":14,"url":null},"def":{"name":"button_text=","args":[{"name":"button_text","external_name":"button_text","restriction":"String"}],"visibility":"Public","body":"@button_text = button_text"},"external_var":false},{"html_id":"data:String-instance-method","name":"data","doc":"The data. Be aware that a bad client can send arbitrary data in this field.","summary":"<p>The data.</p>","abstract":false,"location":{"filename":"src/types/web_app_data.cr","line_number":11,"url":null},"def":{"name":"data","return_type":"String","visibility":"Public","body":"@data"},"external_var":false},{"html_id":"data=(data:String)-instance-method","name":"data=","doc":"The data. Be aware that a bad client can send arbitrary data in this field.","summary":"<p>The data.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"String"}],"args_string":"(data : String)","args_html":"(data : String)","location":{"filename":"src/types/web_app_data.cr","line_number":11,"url":null},"def":{"name":"data=","args":[{"name":"data","external_name":"data","restriction":"String"}],"visibility":"Public","body":"@data = data"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/WebAppInfo","path":"Hamilton/Types/WebAppInfo.html","kind":"class","full_name":"Hamilton::Types::WebAppInfo","name":"WebAppInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/web_app_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes a Web App.","summary":"<p>Describes a Web App.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/web_app_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/web_app_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"url:String-instance-method","name":"url","doc":"An HTTPS URL of a Web App to be opened with additional data as specified in [Initializing Web Apps](https://core.telegram.org/bots/webapps#initializing-mini-apps).","summary":"<p>An HTTPS URL of a Web App to be opened with additional data as specified in <a href=\"https://core.telegram.org/bots/webapps#initializing-mini-apps\">Initializing Web Apps</a>.</p>","abstract":false,"location":{"filename":"src/types/web_app_info.cr","line_number":11,"url":null},"def":{"name":"url","return_type":"String","visibility":"Public","body":"@url"},"external_var":false},{"html_id":"url=(url:String)-instance-method","name":"url=","doc":"An HTTPS URL of a Web App to be opened with additional data as specified in [Initializing Web Apps](https://core.telegram.org/bots/webapps#initializing-mini-apps).","summary":"<p>An HTTPS URL of a Web App to be opened with additional data as specified in <a href=\"https://core.telegram.org/bots/webapps#initializing-mini-apps\">Initializing Web Apps</a>.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String"}],"args_string":"(url : String)","args_html":"(url : String)","location":{"filename":"src/types/web_app_info.cr","line_number":11,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String"}],"visibility":"Public","body":"@url = url"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/WebhookInfo","path":"Hamilton/Types/WebhookInfo.html","kind":"class","full_name":"Hamilton::Types::WebhookInfo","name":"WebhookInfo","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/webhook_info.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"Describes the current status of a webhook.","summary":"<p>Describes the current status of a webhook.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/webhook_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/webhook_info.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"allowed_updates:Array(String)|Nil-instance-method","name":"allowed_updates","doc":"A list of update types the bot is subscribed to. Defaults to all update types except `chat_member`.","summary":"<p>A list of update types the bot is subscribed to.</p>","abstract":false,"location":{"filename":"src/types/webhook_info.cr","line_number":35,"url":null},"def":{"name":"allowed_updates","return_type":"Array(String) | Nil","visibility":"Public","body":"@allowed_updates"},"external_var":false},{"html_id":"allowed_updates=(allowed_updates:Array(String)|Nil)-instance-method","name":"allowed_updates=","doc":"A list of update types the bot is subscribed to. Defaults to all update types except `chat_member`.","summary":"<p>A list of update types the bot is subscribed to.</p>","abstract":false,"args":[{"name":"allowed_updates","external_name":"allowed_updates","restriction":"Array(String) | Nil"}],"args_string":"(allowed_updates : Array(String) | Nil)","args_html":"(allowed_updates : Array(String) | Nil)","location":{"filename":"src/types/webhook_info.cr","line_number":35,"url":null},"def":{"name":"allowed_updates=","args":[{"name":"allowed_updates","external_name":"allowed_updates","restriction":"Array(String) | Nil"}],"visibility":"Public","body":"@allowed_updates = allowed_updates"},"external_var":false},{"html_id":"has_custom_certificate:Bool-instance-method","name":"has_custom_certificate","doc":"True, if a custom certificate was provided for webhook certificate checks.","summary":"<p>True, if a custom certificate was provided for webhook certificate checks.</p>","abstract":false,"location":{"filename":"src/types/webhook_info.cr","line_number":14,"url":null},"def":{"name":"has_custom_certificate","return_type":"Bool","visibility":"Public","body":"@has_custom_certificate"},"external_var":false},{"html_id":"has_custom_certificate=(has_custom_certificate:Bool)-instance-method","name":"has_custom_certificate=","doc":"True, if a custom certificate was provided for webhook certificate checks.","summary":"<p>True, if a custom certificate was provided for webhook certificate checks.</p>","abstract":false,"args":[{"name":"has_custom_certificate","external_name":"has_custom_certificate","restriction":"Bool"}],"args_string":"(has_custom_certificate : Bool)","args_html":"(has_custom_certificate : Bool)","location":{"filename":"src/types/webhook_info.cr","line_number":14,"url":null},"def":{"name":"has_custom_certificate=","args":[{"name":"has_custom_certificate","external_name":"has_custom_certificate","restriction":"Bool"}],"visibility":"Public","body":"@has_custom_certificate = has_custom_certificate"},"external_var":false},{"html_id":"ip_address:String|Nil-instance-method","name":"ip_address","doc":"Currently used webhook IP address.","summary":"<p>Currently used webhook IP address.</p>","abstract":false,"location":{"filename":"src/types/webhook_info.cr","line_number":20,"url":null},"def":{"name":"ip_address","return_type":"String | Nil","visibility":"Public","body":"@ip_address"},"external_var":false},{"html_id":"ip_address=(ip_address:String|Nil)-instance-method","name":"ip_address=","doc":"Currently used webhook IP address.","summary":"<p>Currently used webhook IP address.</p>","abstract":false,"args":[{"name":"ip_address","external_name":"ip_address","restriction":"String | Nil"}],"args_string":"(ip_address : String | Nil)","args_html":"(ip_address : String | Nil)","location":{"filename":"src/types/webhook_info.cr","line_number":20,"url":null},"def":{"name":"ip_address=","args":[{"name":"ip_address","external_name":"ip_address","restriction":"String | Nil"}],"visibility":"Public","body":"@ip_address = ip_address"},"external_var":false},{"html_id":"last_error_date:Int32|Nil-instance-method","name":"last_error_date","doc":"Unix time for the most recent error that happened when trying to deliver an update via webhook.","summary":"<p>Unix time for the most recent error that happened when trying to deliver an update via webhook.</p>","abstract":false,"location":{"filename":"src/types/webhook_info.cr","line_number":23,"url":null},"def":{"name":"last_error_date","return_type":"Int32 | Nil","visibility":"Public","body":"@last_error_date"},"external_var":false},{"html_id":"last_error_date=(last_error_date:Int32|Nil)-instance-method","name":"last_error_date=","doc":"Unix time for the most recent error that happened when trying to deliver an update via webhook.","summary":"<p>Unix time for the most recent error that happened when trying to deliver an update via webhook.</p>","abstract":false,"args":[{"name":"last_error_date","external_name":"last_error_date","restriction":"Int32 | Nil"}],"args_string":"(last_error_date : Int32 | Nil)","args_html":"(last_error_date : Int32 | Nil)","location":{"filename":"src/types/webhook_info.cr","line_number":23,"url":null},"def":{"name":"last_error_date=","args":[{"name":"last_error_date","external_name":"last_error_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@last_error_date = last_error_date"},"external_var":false},{"html_id":"last_error_message:String|Nil-instance-method","name":"last_error_message","doc":"Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook.","summary":"<p>Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook.</p>","abstract":false,"location":{"filename":"src/types/webhook_info.cr","line_number":26,"url":null},"def":{"name":"last_error_message","return_type":"String | Nil","visibility":"Public","body":"@last_error_message"},"external_var":false},{"html_id":"last_error_message=(last_error_message:String|Nil)-instance-method","name":"last_error_message=","doc":"Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook.","summary":"<p>Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook.</p>","abstract":false,"args":[{"name":"last_error_message","external_name":"last_error_message","restriction":"String | Nil"}],"args_string":"(last_error_message : String | Nil)","args_html":"(last_error_message : String | Nil)","location":{"filename":"src/types/webhook_info.cr","line_number":26,"url":null},"def":{"name":"last_error_message=","args":[{"name":"last_error_message","external_name":"last_error_message","restriction":"String | Nil"}],"visibility":"Public","body":"@last_error_message = last_error_message"},"external_var":false},{"html_id":"last_synchronization_error_date:Int32|Nil-instance-method","name":"last_synchronization_error_date","doc":"Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters.","summary":"<p>Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters.</p>","abstract":false,"location":{"filename":"src/types/webhook_info.cr","line_number":29,"url":null},"def":{"name":"last_synchronization_error_date","return_type":"Int32 | Nil","visibility":"Public","body":"@last_synchronization_error_date"},"external_var":false},{"html_id":"last_synchronization_error_date=(last_synchronization_error_date:Int32|Nil)-instance-method","name":"last_synchronization_error_date=","doc":"Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters.","summary":"<p>Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters.</p>","abstract":false,"args":[{"name":"last_synchronization_error_date","external_name":"last_synchronization_error_date","restriction":"Int32 | Nil"}],"args_string":"(last_synchronization_error_date : Int32 | Nil)","args_html":"(last_synchronization_error_date : Int32 | Nil)","location":{"filename":"src/types/webhook_info.cr","line_number":29,"url":null},"def":{"name":"last_synchronization_error_date=","args":[{"name":"last_synchronization_error_date","external_name":"last_synchronization_error_date","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@last_synchronization_error_date = last_synchronization_error_date"},"external_var":false},{"html_id":"max_connections:Int32|Nil-instance-method","name":"max_connections","doc":"The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery.","summary":"<p>The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery.</p>","abstract":false,"location":{"filename":"src/types/webhook_info.cr","line_number":32,"url":null},"def":{"name":"max_connections","return_type":"Int32 | Nil","visibility":"Public","body":"@max_connections"},"external_var":false},{"html_id":"max_connections=(max_connections:Int32|Nil)-instance-method","name":"max_connections=","doc":"The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery.","summary":"<p>The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery.</p>","abstract":false,"args":[{"name":"max_connections","external_name":"max_connections","restriction":"Int32 | Nil"}],"args_string":"(max_connections : Int32 | Nil)","args_html":"(max_connections : Int32 | Nil)","location":{"filename":"src/types/webhook_info.cr","line_number":32,"url":null},"def":{"name":"max_connections=","args":[{"name":"max_connections","external_name":"max_connections","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@max_connections = max_connections"},"external_var":false},{"html_id":"pending_update_count:Int32-instance-method","name":"pending_update_count","doc":"Number of updates awaiting delivery.","summary":"<p>Number of updates awaiting delivery.</p>","abstract":false,"location":{"filename":"src/types/webhook_info.cr","line_number":17,"url":null},"def":{"name":"pending_update_count","return_type":"Int32","visibility":"Public","body":"@pending_update_count"},"external_var":false},{"html_id":"pending_update_count=(pending_update_count:Int32)-instance-method","name":"pending_update_count=","doc":"Number of updates awaiting delivery.","summary":"<p>Number of updates awaiting delivery.</p>","abstract":false,"args":[{"name":"pending_update_count","external_name":"pending_update_count","restriction":"Int32"}],"args_string":"(pending_update_count : Int32)","args_html":"(pending_update_count : Int32)","location":{"filename":"src/types/webhook_info.cr","line_number":17,"url":null},"def":{"name":"pending_update_count=","args":[{"name":"pending_update_count","external_name":"pending_update_count","restriction":"Int32"}],"visibility":"Public","body":"@pending_update_count = pending_update_count"},"external_var":false},{"html_id":"url:String-instance-method","name":"url","doc":"Webhook URL, may be empty if webhook is not set up.","summary":"<p>Webhook URL, may be empty if webhook is not set up.</p>","abstract":false,"location":{"filename":"src/types/webhook_info.cr","line_number":11,"url":null},"def":{"name":"url","return_type":"String","visibility":"Public","body":"@url"},"external_var":false},{"html_id":"url=(url:String)-instance-method","name":"url=","doc":"Webhook URL, may be empty if webhook is not set up.","summary":"<p>Webhook URL, may be empty if webhook is not set up.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String"}],"args_string":"(url : String)","args_html":"(url : String)","location":{"filename":"src/types/webhook_info.cr","line_number":11,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String"}],"visibility":"Public","body":"@url = url"},"external_var":false}]},{"html_id":"hamilton/Hamilton/Types/WriteAccessAllowed","path":"Hamilton/Types/WriteAccessAllowed.html","kind":"class","full_name":"Hamilton::Types::WriteAccessAllowed","name":"WriteAccessAllowed","abstract":false,"superclass":{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"hamilton/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hamilton/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types/write_access_allowed.cr","line_number":6,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hamilton/Hamilton/Types/Common","kind":"module","full_name":"Hamilton::Types::Common","name":"Common"},{"html_id":"hamilton/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"hamilton/Hamilton/Types","kind":"module","full_name":"Hamilton::Types","name":"Types"},"doc":"This object represents a service message about a user allowing a bot to write messages after adding it to the attachment menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.","summary":"<p>This object represents a service message about a user allowing a bot to write messages after adding it to the attachment menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/types/write_access_allowed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"},"external_var":false},{"html_id":"new(*,__pull_for_json_serializablepull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"args_string":"(*, __pull_for_json_serializable pull : JSON::PullParser)","args_html":"(*, __pull_for_json_serializable pull : JSON::PullParser)","location":{"filename":"src/types/write_access_allowed.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"pull","external_name":"__pull_for_json_serializable","restriction":"::JSON::PullParser"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(__pull_for_json_serializable: pull)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"from_attachment_menu:Bool|Nil-instance-method","name":"from_attachment_menu","doc":"True, if the access was granted when the bot was added to the attachment or side menu.","summary":"<p>True, if the access was granted when the bot was added to the attachment or side menu.</p>","abstract":false,"location":{"filename":"src/types/write_access_allowed.cr","line_number":17,"url":null},"def":{"name":"from_attachment_menu","return_type":"Bool | Nil","visibility":"Public","body":"@from_attachment_menu"},"external_var":false},{"html_id":"from_attachment_menu=(from_attachment_menu:Bool|Nil)-instance-method","name":"from_attachment_menu=","doc":"True, if the access was granted when the bot was added to the attachment or side menu.","summary":"<p>True, if the access was granted when the bot was added to the attachment or side menu.</p>","abstract":false,"args":[{"name":"from_attachment_menu","external_name":"from_attachment_menu","restriction":"Bool | Nil"}],"args_string":"(from_attachment_menu : Bool | Nil)","args_html":"(from_attachment_menu : Bool | Nil)","location":{"filename":"src/types/write_access_allowed.cr","line_number":17,"url":null},"def":{"name":"from_attachment_menu=","args":[{"name":"from_attachment_menu","external_name":"from_attachment_menu","restriction":"Bool | Nil"}],"visibility":"Public","body":"@from_attachment_menu = from_attachment_menu"},"external_var":false},{"html_id":"from_request:Bool|Nil-instance-method","name":"from_request","doc":"True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess.","summary":"<p>True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess.</p>","abstract":false,"location":{"filename":"src/types/write_access_allowed.cr","line_number":11,"url":null},"def":{"name":"from_request","return_type":"Bool | Nil","visibility":"Public","body":"@from_request"},"external_var":false},{"html_id":"from_request=(from_request:Bool|Nil)-instance-method","name":"from_request=","doc":"True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess.","summary":"<p>True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess.</p>","abstract":false,"args":[{"name":"from_request","external_name":"from_request","restriction":"Bool | Nil"}],"args_string":"(from_request : Bool | Nil)","args_html":"(from_request : Bool | Nil)","location":{"filename":"src/types/write_access_allowed.cr","line_number":11,"url":null},"def":{"name":"from_request=","args":[{"name":"from_request","external_name":"from_request","restriction":"Bool | Nil"}],"visibility":"Public","body":"@from_request = from_request"},"external_var":false},{"html_id":"web_app_name:String|Nil-instance-method","name":"web_app_name","doc":"Name of the Web App, if the access was granted when the Web App was launched from a link.","summary":"<p>Name of the Web App, if the access was granted when the Web App was launched from a link.</p>","abstract":false,"location":{"filename":"src/types/write_access_allowed.cr","line_number":14,"url":null},"def":{"name":"web_app_name","return_type":"String | Nil","visibility":"Public","body":"@web_app_name"},"external_var":false},{"html_id":"web_app_name=(web_app_name:String|Nil)-instance-method","name":"web_app_name=","doc":"Name of the Web App, if the access was granted when the Web App was launched from a link.","summary":"<p>Name of the Web App, if the access was granted when the Web App was launched from a link.</p>","abstract":false,"args":[{"name":"web_app_name","external_name":"web_app_name","restriction":"String | Nil"}],"args_string":"(web_app_name : String | Nil)","args_html":"(web_app_name : String | Nil)","location":{"filename":"src/types/write_access_allowed.cr","line_number":14,"url":null},"def":{"name":"web_app_name=","args":[{"name":"web_app_name","external_name":"web_app_name","restriction":"String | Nil"}],"visibility":"Public","body":"@web_app_name = web_app_name"},"external_var":false}]}]}]},{"html_id":"hamilton/Handle","path":"Handle.html","kind":"annotation","full_name":"Handle","name":"Handle","abstract":false,"locations":[{"filename":"src/handlers/cmd_handler.cr","line_number":261,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"doc":"Annotation for the method in implementation of `Hamilton::CmdHandler`.\n\nIn `#[Handle]` there should be one of the following parameters:\n - `command` for handling a bot command\n - `text` for handling a known text massage\n - `callback` for handling a `callback_query` with provided content\n -  unnamed parameter that is one of the symbols from `Hamilton::CmdHandler::PAYLOAD_TYPES`","summary":"<p>Annotation for the method in implementation of <code><a href=\"Hamilton/CmdHandler.html\">Hamilton::CmdHandler</a></code>.</p>"},{"html_id":"hamilton/Handler","path":"Handler.html","kind":"annotation","full_name":"Handler","name":"Handler","abstract":false,"locations":[{"filename":"src/handlers/cmd_handler.cr","line_number":251,"url":null}],"repository_name":"hamilton","program":false,"enum":false,"alias":false,"const":false,"doc":"Annotation for the method in implementation of `Hamilton::CmdHandler`.\n\nIn `#[Handler]` an instance of `Hamilton::CmdHandler` should be provided.","summary":"<p>Annotation for the method in implementation of <code><a href=\"Hamilton/CmdHandler.html\">Hamilton::CmdHandler</a></code>.</p>"}]}})